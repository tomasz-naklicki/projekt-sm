
projektsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e60  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005040  08005040  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005048  08005048  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  0800505c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800505c  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128d6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c9  00000000  00000000  00032912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00034fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00035e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278cd  00000000  00000000  00036c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013940  00000000  00000000  0005e525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f60f3  00000000  00000000  00071e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167f58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c38  00000000  00000000  00167fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005010 	.word	0x08005010

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005010 	.word	0x08005010

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Motor_INIT>:
 *  Created on: Feb 8, 2023
 *      Author: tomas
 */
#include "DC_Motor.h"

void Motor_INIT(struct Motor* motor, TIM_HandleTypeDef* TIMER, uint32_t PWM_CHANNEL, GPIO_TypeDef* DIR1_PORT, GPIO_TypeDef* DIR2_PORT, uint16_t DIR1_PIN, uint16_t DIR2_PIN){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
 8000518:	603b      	str	r3, [r7, #0]
	motor->DUTY = 100;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <Motor_INIT+0x48>)
 800051e:	615a      	str	r2, [r3, #20]
	motor->TIMER = TIMER;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	601a      	str	r2, [r3, #0]
	motor->PWM_CHANNEL = PWM_CHANNEL;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	605a      	str	r2, [r3, #4]
	motor->DIR1_PORT = DIR1_PORT;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	609a      	str	r2, [r3, #8]
	motor->DIR2_PORT = DIR2_PORT;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	69ba      	ldr	r2, [r7, #24]
 8000536:	60da      	str	r2, [r3, #12]
	motor->DIR1_PIN = DIR1_PIN;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	8bba      	ldrh	r2, [r7, #28]
 800053c:	821a      	strh	r2, [r3, #16]
	motor->DIR2_PIN = DIR2_PIN;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	8c3a      	ldrh	r2, [r7, #32]
 8000542:	825a      	strh	r2, [r3, #18]

	Motor_STOP(motor);
 8000544:	68f8      	ldr	r0, [r7, #12]
 8000546:	f000 f807 	bl	8000558 <Motor_STOP>
}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	42c80000 	.word	0x42c80000

08000558 <Motor_STOP>:
		Motor_STOP(motor);
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
	}
}

void Motor_STOP(struct Motor* motor){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 0);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6898      	ldr	r0, [r3, #8]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	8a1b      	ldrh	r3, [r3, #16]
 8000568:	2200      	movs	r2, #0
 800056a:	4619      	mov	r1, r3
 800056c:	f001 fdb4 	bl	80020d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 0);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	68d8      	ldr	r0, [r3, #12]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	8a5b      	ldrh	r3, [r3, #18]
 8000578:	2200      	movs	r2, #0
 800057a:	4619      	mov	r1, r3
 800057c:	f001 fdac 	bl	80020d8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d105      	bne.n	8000594 <Motor_STOP+0x3c>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000592:	e02c      	b.n	80005ee <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b04      	cmp	r3, #4
 800059a:	d105      	bne.n	80005a8 <Motor_STOP+0x50>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80005a6:	e022      	b.n	80005ee <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	2b08      	cmp	r3, #8
 80005ae:	d105      	bne.n	80005bc <Motor_STOP+0x64>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80005ba:	e018      	b.n	80005ee <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	2b0c      	cmp	r3, #12
 80005c2:	d105      	bne.n	80005d0 <Motor_STOP+0x78>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005ce:	e00e      	b.n	80005ee <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	2b10      	cmp	r3, #16
 80005d6:	d105      	bne.n	80005e4 <Motor_STOP+0x8c>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	6593      	str	r3, [r2, #88]	; 0x58
}
 80005e2:	e004      	b.n	80005ee <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_ADC1_Init+0x98>)
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <MX_ADC1_Init+0x9c>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000622:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_ADC1_Init+0x98>)
 8000638:	4a17      	ldr	r2, [pc, #92]	; (8000698 <MX_ADC1_Init+0xa0>)
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_ADC1_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_ADC1_Init+0x98>)
 8000652:	2201      	movs	r2, #1
 8000654:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <MX_ADC1_Init+0x98>)
 8000658:	f000 ffd4 	bl	8001604 <HAL_ADC_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000662:	f000 fae7 	bl	8000c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000666:	2301      	movs	r3, #1
 8000668:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066a:	2301      	movs	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <MX_ADC1_Init+0x98>)
 8000678:	f001 f808 	bl	800168c <HAL_ADC_ConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000682:	f000 fad7 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000028 	.word	0x20000028
 8000694:	40012000 	.word	0x40012000
 8000698:	0f000001 	.word	0x0f000001

0800069c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a15      	ldr	r2, [pc, #84]	; (8000710 <HAL_ADC_MspInit+0x74>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d123      	bne.n	8000706 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_ADC_MspInit+0x78>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_ADC_MspInit+0x78>)
 80006c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_ADC_MspInit+0x78>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_ADC_MspInit+0x78>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_ADC_MspInit+0x78>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_ADC_MspInit+0x78>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006ee:	2302      	movs	r3, #2
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f2:	2303      	movs	r3, #3
 80006f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <HAL_ADC_MspInit+0x7c>)
 8000702:	f001 fb25 	bl	8001d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40012000 	.word	0x40012000
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000

0800071c <control_INIT>:
 *      Author: tomas
 */

#include "control.h"

void control_INIT(struct Controller* controller, float MAX_SIGNAL, float MIN_SIGNAL, float MAX_ERROR, float MIN_ERROR){
 800071c:	b480      	push	{r7}
 800071e:	b087      	sub	sp, #28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6178      	str	r0, [r7, #20]
 8000724:	ed87 0a04 	vstr	s0, [r7, #16]
 8000728:	edc7 0a03 	vstr	s1, [r7, #12]
 800072c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000730:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->MAX_SIGNAL = MAX_SIGNAL;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	601a      	str	r2, [r3, #0]
	controller->MIN_SIGNAL = MIN_SIGNAL;
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	605a      	str	r2, [r3, #4]
	controller->MAX_ERROR = MAX_ERROR;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	609a      	str	r2, [r3, #8]
	controller->MIN_ERROR = MIN_ERROR;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	60da      	str	r2, [r3, #12]
	controller->prev_error = 0;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	f04f 0200 	mov.w	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
}
 8000754:	bf00      	nop
 8000756:	371c      	adds	r7, #28
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <control_GET_SIGNAL>:

float control_GET_SIGNAL(struct Controller* controller, float y, float y_ref){
 8000760:	b480      	push	{r7}
 8000762:	b087      	sub	sp, #28
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	ed87 0a02 	vstr	s0, [r7, #8]
 800076c:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = y_ref - y;
 8000770:	ed97 7a01 	vldr	s14, [r7, #4]
 8000774:	edd7 7a02 	vldr	s15, [r7, #8]
 8000778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800077c:	edc7 7a05 	vstr	s15, [r7, #20]


	if(abs(error) <= controller->MIN_ERROR){
 8000780:	edd7 7a05 	vldr	s15, [r7, #20]
 8000784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000788:	ee17 3a90 	vmov	r3, s15
 800078c:	2b00      	cmp	r3, #0
 800078e:	bfb8      	it	lt
 8000790:	425b      	neglt	r3, r3
 8000792:	ee07 3a90 	vmov	s15, r3
 8000796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	edd3 7a03 	vldr	s15, [r3, #12]
 80007a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a8:	d802      	bhi.n	80007b0 <control_GET_SIGNAL+0x50>
		return 0;
 80007aa:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80008a0 <control_GET_SIGNAL+0x140>
 80007ae:	e06f      	b.n	8000890 <control_GET_SIGNAL+0x130>
	}
	else if(error >= controller->MAX_ERROR){
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80007b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80007ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c2:	db03      	blt.n	80007cc <control_GET_SIGNAL+0x6c>
		return controller->MAX_SIGNAL;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	edd3 7a00 	vldr	s15, [r3]
 80007ca:	e061      	b.n	8000890 <control_GET_SIGNAL+0x130>
	}
	else if(error <= -1*controller->MAX_ERROR){
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80007d2:	eef1 7a67 	vneg.f32	s15, s15
 80007d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80007da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e2:	d805      	bhi.n	80007f0 <control_GET_SIGNAL+0x90>
		return controller->MAX_SIGNAL * -1;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	edd3 7a00 	vldr	s15, [r3]
 80007ea:	eef1 7a67 	vneg.f32	s15, s15
 80007ee:	e04f      	b.n	8000890 <control_GET_SIGNAL+0x130>
	}
	else if(abs(error*10.0f) < controller->MIN_SIGNAL && error > 0){
 80007f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80007f4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80007f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000800:	ee17 3a90 	vmov	r3, s15
 8000804:	2b00      	cmp	r3, #0
 8000806:	bfb8      	it	lt
 8000808:	425b      	neglt	r3, r3
 800080a:	ee07 3a90 	vmov	s15, r3
 800080e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	edd3 7a01 	vldr	s15, [r3, #4]
 8000818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000820:	d50a      	bpl.n	8000838 <control_GET_SIGNAL+0xd8>
 8000822:	edd7 7a05 	vldr	s15, [r7, #20]
 8000826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800082a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082e:	dd03      	ble.n	8000838 <control_GET_SIGNAL+0xd8>
		return controller->MIN_SIGNAL;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	edd3 7a01 	vldr	s15, [r3, #4]
 8000836:	e02b      	b.n	8000890 <control_GET_SIGNAL+0x130>
	}
	else if(abs(error*10.0f) < controller->MIN_SIGNAL && error<0){
 8000838:	edd7 7a05 	vldr	s15, [r7, #20]
 800083c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000848:	ee17 3a90 	vmov	r3, s15
 800084c:	2b00      	cmp	r3, #0
 800084e:	bfb8      	it	lt
 8000850:	425b      	neglt	r3, r3
 8000852:	ee07 3a90 	vmov	s15, r3
 8000856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000868:	d50c      	bpl.n	8000884 <control_GET_SIGNAL+0x124>
 800086a:	edd7 7a05 	vldr	s15, [r7, #20]
 800086e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000876:	d505      	bpl.n	8000884 <control_GET_SIGNAL+0x124>
		return controller->MIN_SIGNAL * -1;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	edd3 7a01 	vldr	s15, [r3, #4]
 800087e:	eef1 7a67 	vneg.f32	s15, s15
 8000882:	e005      	b.n	8000890 <control_GET_SIGNAL+0x130>
	}

	return error*10.0f;
 8000884:	edd7 7a05 	vldr	s15, [r7, #20]
 8000888:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800088c:	ee67 7a87 	vmul.f32	s15, s15, s14
		else{
			return controler->MIN_SIGNAL;
		}
	}*/

}
 8000890:	eeb0 0a67 	vmov.f32	s0, s15
 8000894:	371c      	adds	r7, #28
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	00000000 	.word	0x00000000

080008a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b4e      	ldr	r3, [pc, #312]	; (80009f4 <MX_GPIO_Init+0x150>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a4d      	ldr	r2, [pc, #308]	; (80009f4 <MX_GPIO_Init+0x150>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b4b      	ldr	r3, [pc, #300]	; (80009f4 <MX_GPIO_Init+0x150>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	4b48      	ldr	r3, [pc, #288]	; (80009f4 <MX_GPIO_Init+0x150>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a47      	ldr	r2, [pc, #284]	; (80009f4 <MX_GPIO_Init+0x150>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b45      	ldr	r3, [pc, #276]	; (80009f4 <MX_GPIO_Init+0x150>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b42      	ldr	r3, [pc, #264]	; (80009f4 <MX_GPIO_Init+0x150>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a41      	ldr	r2, [pc, #260]	; (80009f4 <MX_GPIO_Init+0x150>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <MX_GPIO_Init+0x150>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <MX_GPIO_Init+0x150>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a3b      	ldr	r2, [pc, #236]	; (80009f4 <MX_GPIO_Init+0x150>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <MX_GPIO_Init+0x150>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091a:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <MX_GPIO_Init+0x150>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a35      	ldr	r2, [pc, #212]	; (80009f4 <MX_GPIO_Init+0x150>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <MX_GPIO_Init+0x150>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <MX_GPIO_Init+0x150>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <MX_GPIO_Init+0x150>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_GPIO_Init+0x150>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3_Pin|GPIO_PIN_4_Pin, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	21c0      	movs	r1, #192	; 0xc0
 800094e:	482a      	ldr	r0, [pc, #168]	; (80009f8 <MX_GPIO_Init+0x154>)
 8000950:	f001 fbc2 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2106      	movs	r1, #6
 8000958:	4828      	ldr	r0, [pc, #160]	; (80009fc <MX_GPIO_Init+0x158>)
 800095a:	f001 fbbd 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1_Pin|GPIO_PIN_2_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000964:	4826      	ldr	r0, [pc, #152]	; (8000a00 <MX_GPIO_Init+0x15c>)
 8000966:	f001 fbb7 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 800096a:	2310      	movs	r3, #16
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800096e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	481e      	ldr	r0, [pc, #120]	; (80009f8 <MX_GPIO_Init+0x154>)
 8000980:	f001 f9e6 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3_Pin|GPIO_PIN_4_Pin;
 8000984:	23c0      	movs	r3, #192	; 0xc0
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4817      	ldr	r0, [pc, #92]	; (80009f8 <MX_GPIO_Init+0x154>)
 800099c:	f001 f9d8 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin;
 80009a0:	2306      	movs	r3, #6
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_GPIO_Init+0x158>)
 80009b8:	f001 f9ca 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1_Pin|GPIO_PIN_2_Pin;
 80009bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <MX_GPIO_Init+0x15c>)
 80009d6:	f001 f9bb 	bl	8001d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	200a      	movs	r0, #10
 80009e0:	f001 f97f 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f001 f998 	bl	8001d1a <HAL_NVIC_EnableIRQ>

}
 80009ea:	bf00      	nop
 80009ec:	3730      	adds	r7, #48	; 0x30
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == ECHO_Pin){
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	2b10      	cmp	r3, #16
 8000a12:	d13b      	bne.n	8000a8c <HAL_GPIO_EXTI_Callback+0x88>
		_Bool state = HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin);
 8000a14:	2110      	movs	r1, #16
 8000a16:	481f      	ldr	r0, [pc, #124]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x90>)
 8000a18:	f001 fb46 	bl	80020a8 <HAL_GPIO_ReadPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
		if(state == 1){
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <HAL_GPIO_EXTI_Callback+0x3a>
			__HAL_TIM_SET_COUNTER(&htim5, 0);
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x94>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim5);
 8000a36:	4818      	ldr	r0, [pc, #96]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x94>)
 8000a38:	f002 fc62 	bl	8003300 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Stop(&htim5);
			x = __HAL_TIM_GET_COUNTER(&htim5);
			if(x/58.0f < 1000) value = x/58.0f;
		}
	}
}
 8000a3c:	e026      	b.n	8000a8c <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_Base_Stop(&htim5);
 8000a3e:	4816      	ldr	r0, [pc, #88]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x94>)
 8000a40:	f002 fcce 	bl	80033e0 <HAL_TIM_Base_Stop>
			x = __HAL_TIM_GET_COUNTER(&htim5);
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x94>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x98>)
 8000a4c:	6013      	str	r3, [r2, #0]
			if(x/58.0f < 1000) value = x/58.0f;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x98>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	ee07 3a90 	vmov	s15, r3
 8000a56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a5a:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000aa0 <HAL_GPIO_EXTI_Callback+0x9c>
 8000a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a62:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000aa4 <HAL_GPIO_EXTI_Callback+0xa0>
 8000a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6e:	d400      	bmi.n	8000a72 <HAL_GPIO_EXTI_Callback+0x6e>
}
 8000a70:	e00c      	b.n	8000a8c <HAL_GPIO_EXTI_Callback+0x88>
			if(x/58.0f < 1000) value = x/58.0f;
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x98>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	ee07 3a90 	vmov	s15, r3
 8000a7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a7e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000aa0 <HAL_GPIO_EXTI_Callback+0x9c>
 8000a82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a88:	edc3 7a00 	vstr	s15, [r3]
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40020000 	.word	0x40020000
 8000a98:	200001d8 	.word	0x200001d8
 8000a9c:	200000a0 	.word	0x200000a0
 8000aa0:	42680000 	.word	0x42680000
 8000aa4:	447a0000 	.word	0x447a0000
 8000aa8:	20000070 	.word	0x20000070

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f000 fd26 	bl	8001502 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f855 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f7ff fef3 	bl	80008a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000abe:	f000 f9fb 	bl	8000eb8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ac2:	f000 fc67 	bl	8001394 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ac6:	f000 f94b 	bl	8000d60 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000aca:	f000 fa6b 	bl	8000fa4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ace:	f000 fb05 	bl	80010dc <MX_TIM5_Init>
  MX_ADC1_Init();
 8000ad2:	f7ff fd91 	bl	80005f8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000ad6:	f000 fab3 	bl	8001040 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ada:	2100      	movs	r1, #0
 8000adc:	4818      	ldr	r0, [pc, #96]	; (8000b40 <main+0x94>)
 8000ade:	f002 fd07 	bl	80034f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4817      	ldr	r0, [pc, #92]	; (8000b44 <main+0x98>)
 8000ae6:	f002 fd03 	bl	80034f0 <HAL_TIM_PWM_Start>
  //HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, 1);
  //HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, 0);
  Motor_INIT(&motor, &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR2_GPIO_Port, DIR1_Pin, DIR2_Pin);
 8000aea:	2304      	movs	r3, #4
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	2302      	movs	r3, #2
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <main+0x9c>)
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <main+0x9c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	4912      	ldr	r1, [pc, #72]	; (8000b44 <main+0x98>)
 8000afc:	4813      	ldr	r0, [pc, #76]	; (8000b4c <main+0xa0>)
 8000afe:	f7ff fd05 	bl	800050c <Motor_INIT>
  control_INIT(&controller, 100.0f, 80.0f, 10.0f, 2.0f);
 8000b02:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8000b06:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8000b0a:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000b50 <main+0xa4>
 8000b0e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000b54 <main+0xa8>
 8000b12:	4811      	ldr	r0, [pc, #68]	; (8000b58 <main+0xac>)
 8000b14:	f7ff fe02 	bl	800071c <control_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lmao = control_GET_SIGNAL(&controller, value, 10.0f);
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <main+0xb0>)
 8000b1a:	edd3 7a00 	vldr	s15, [r3]
 8000b1e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000b22:	eeb0 0a67 	vmov.f32	s0, s15
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <main+0xac>)
 8000b28:	f7ff fe1a 	bl	8000760 <control_GET_SIGNAL>
 8000b2c:	eef0 7a40 	vmov.f32	s15, s0
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <main+0xb4>)
 8000b32:	edc3 7a00 	vstr	s15, [r3]
	  //Motor_MOVE(&motor, lmao);
	  //Motor_MOVE(&motor, 150.0f);
	  HAL_Delay(50);
 8000b36:	2032      	movs	r0, #50	; 0x32
 8000b38:	f000 fd40 	bl	80015bc <HAL_Delay>
	  lmao = control_GET_SIGNAL(&controller, value, 10.0f);
 8000b3c:	e7ec      	b.n	8000b18 <main+0x6c>
 8000b3e:	bf00      	nop
 8000b40:	200000f4 	.word	0x200000f4
 8000b44:	200000a8 	.word	0x200000a8
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	20000074 	.word	0x20000074
 8000b50:	42a00000 	.word	0x42a00000
 8000b54:	42c80000 	.word	0x42c80000
 8000b58:	2000008c 	.word	0x2000008c
 8000b5c:	20000070 	.word	0x20000070
 8000b60:	200000a4 	.word	0x200000a4

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	; 0x50
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	2230      	movs	r2, #48	; 0x30
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f004 fa44 	bl	8005000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b88:	f001 fad8 	bl	800213c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <SystemClock_Config+0xc8>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a26      	ldr	r2, [pc, #152]	; (8000c2c <SystemClock_Config+0xc8>)
 8000b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <SystemClock_Config+0xc8>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <SystemClock_Config+0xcc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bac:	4a20      	ldr	r2, [pc, #128]	; (8000c30 <SystemClock_Config+0xcc>)
 8000bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <SystemClock_Config+0xcc>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bd8:	2348      	movs	r3, #72	; 0x48
 8000bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fab7 	bl	800215c <HAL_RCC_OscConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bf4:	f000 f81e 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2102      	movs	r1, #2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fd45 	bl	80026a4 <HAL_RCC_ClockConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c20:	f000 f808 	bl	8000c34 <Error_Handler>
  }
}
 8000c24:	bf00      	nop
 8000c26:	3750      	adds	r7, #80	; 0x50
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40007000 	.word	0x40007000

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_MspInit+0x44>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_MspInit+0x44>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x44>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x44>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x44>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f000 fc52 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 8000ce0:	2010      	movs	r0, #16
 8000ce2:	f001 fa13 	bl	800210c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <TIM1_CC_IRQHandler+0x10>)
 8000cf2:	f002 fcf7 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000a8 	.word	0x200000a8

08000d00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <TIM2_IRQHandler+0x10>)
 8000d06:	f002 fced 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000f4 	.word	0x200000f4

08000d14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <TIM3_IRQHandler+0x10>)
 8000d1a:	f002 fce3 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000140 	.word	0x20000140

08000d28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM4_IRQHandler+0x10>)
 8000d2e:	f002 fcd9 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000018c 	.word	0x2000018c

08000d3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b09a      	sub	sp, #104	; 0x68
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	615a      	str	r2, [r3, #20]
 8000d92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	222c      	movs	r2, #44	; 0x2c
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 f930 	bl	8005000 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000da0:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000da2:	4a44      	ldr	r2, [pc, #272]	; (8000eb4 <MX_TIM1_Init+0x154>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000da6:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000da8:	2247      	movs	r2, #71	; 0x47
 8000daa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000db4:	2263      	movs	r2, #99	; 0x63
 8000db6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dca:	4839      	ldr	r0, [pc, #228]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000dcc:	f002 fa40 	bl	8003250 <HAL_TIM_Base_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dd6:	f7ff ff2d 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dde:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000de0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000de4:	4619      	mov	r1, r3
 8000de6:	4832      	ldr	r0, [pc, #200]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000de8:	f002 feb0 	bl	8003b4c <HAL_TIM_ConfigClockSource>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000df2:	f7ff ff1f 	bl	8000c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000df6:	482e      	ldr	r0, [pc, #184]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000df8:	f002 fb19 	bl	800342e <HAL_TIM_PWM_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e02:	f7ff ff17 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4825      	ldr	r0, [pc, #148]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000e1a:	f003 fb51 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000e24:	f7ff ff06 	bl	8000c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e28:	2360      	movs	r3, #96	; 0x60
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000e4e:	f002 fd69 	bl	8003924 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000e58:	f7ff feec 	bl	8000c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000e92:	f003 fba3 	bl	80045dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000e9c:	f7ff feca 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM1_Init+0x150>)
 8000ea2:	f000 fa1b 	bl	80012dc <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3768      	adds	r7, #104	; 0x68
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000a8 	.word	0x200000a8
 8000eb4:	40010000 	.word	0x40010000

08000eb8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08e      	sub	sp, #56	; 0x38
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000ef4:	2247      	movs	r2, #71	; 0x47
 8000ef6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f00:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000f04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f12:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f14:	f002 f99c 	bl	8003250 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f1e:	f7ff fe89 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f30:	f002 fe0c 	bl	8003b4c <HAL_TIM_ConfigClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f3a:	f7ff fe7b 	bl	8000c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f40:	f002 fa75 	bl	800342e <HAL_TIM_PWM_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f4a:	f7ff fe73 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f5e:	f003 faaf 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f68:	f7ff fe64 	bl	8000c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6c:	2360      	movs	r3, #96	; 0x60
 8000f6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 8000f70:	2314      	movs	r3, #20
 8000f72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f84:	f002 fcce 	bl	8003924 <HAL_TIM_PWM_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f8e:	f7ff fe51 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f94:	f000 f9a2 	bl	80012dc <HAL_TIM_MspPostInit>

}
 8000f98:	bf00      	nop
 8000f9a:	3738      	adds	r7, #56	; 0x38
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200000f4 	.word	0x200000f4

08000fa4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <MX_TIM3_Init+0x98>)
 8000fc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fca:	2247      	movs	r2, #71	; 0x47
 8000fcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fe8:	4813      	ldr	r0, [pc, #76]	; (8001038 <MX_TIM3_Init+0x94>)
 8000fea:	f002 f931 	bl	8003250 <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ff4:	f7ff fe1e 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_TIM3_Init+0x94>)
 8001006:	f002 fda1 	bl	8003b4c <HAL_TIM_ConfigClockSource>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001010:	f7ff fe10 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_TIM3_Init+0x94>)
 8001022:	f003 fa4d 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800102c:	f7ff fe02 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000140 	.word	0x20000140
 800103c:	40000400 	.word	0x40000400

08001040 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_TIM4_Init+0x94>)
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <MX_TIM4_Init+0x98>)
 8001062:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_TIM4_Init+0x94>)
 8001066:	2247      	movs	r2, #71	; 0x47
 8001068:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM4_Init+0x94>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_TIM4_Init+0x94>)
 8001072:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001076:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_TIM4_Init+0x94>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_TIM4_Init+0x94>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_TIM4_Init+0x94>)
 8001086:	f002 f8e3 	bl	8003250 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001090:	f7ff fdd0 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_TIM4_Init+0x94>)
 80010a2:	f002 fd53 	bl	8003b4c <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80010ac:	f7ff fdc2 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_TIM4_Init+0x94>)
 80010be:	f003 f9ff 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80010c8:	f7ff fdb4 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000018c 	.word	0x2000018c
 80010d8:	40000800 	.word	0x40000800

080010dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_TIM5_Init+0x94>)
 80010fc:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <MX_TIM5_Init+0x98>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_TIM5_Init+0x94>)
 8001102:	2247      	movs	r2, #71	; 0x47
 8001104:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_TIM5_Init+0x94>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_TIM5_Init+0x94>)
 800110e:	f04f 32ff 	mov.w	r2, #4294967295
 8001112:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_TIM5_Init+0x94>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_TIM5_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <MX_TIM5_Init+0x94>)
 8001122:	f002 f895 	bl	8003250 <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800112c:	f7ff fd82 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001134:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4619      	mov	r1, r3
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <MX_TIM5_Init+0x94>)
 800113e:	f002 fd05 	bl	8003b4c <HAL_TIM_ConfigClockSource>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001148:	f7ff fd74 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_TIM5_Init+0x94>)
 800115a:	f003 f9b1 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001164:	f7ff fd66 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200001d8 	.word	0x200001d8
 8001174:	40000c00 	.word	0x40000c00

08001178 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a4b      	ldr	r2, [pc, #300]	; (80012c4 <HAL_TIM_Base_MspInit+0x14c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d114      	bne.n	80011c4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800119a:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a4a      	ldr	r2, [pc, #296]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b48      	ldr	r3, [pc, #288]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	623b      	str	r3, [r7, #32]
 80011b0:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	201b      	movs	r0, #27
 80011b8:	f000 fd93 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011bc:	201b      	movs	r0, #27
 80011be:	f000 fdac 	bl	8001d1a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80011c2:	e07b      	b.n	80012bc <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011cc:	d131      	bne.n	8001232 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a37      	ldr	r2, [pc, #220]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ECHOB10_Pin;
 80011fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001210:	2301      	movs	r3, #1
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHOB10_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	482c      	ldr	r0, [pc, #176]	; (80012cc <HAL_TIM_Base_MspInit+0x154>)
 800121c:	f000 fd98 	bl	8001d50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	201c      	movs	r0, #28
 8001226:	f000 fd5c 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800122a:	201c      	movs	r0, #28
 800122c:	f000 fd75 	bl	8001d1a <HAL_NVIC_EnableIRQ>
}
 8001230:	e044      	b.n	80012bc <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM3)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <HAL_TIM_Base_MspInit+0x158>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d114      	bne.n	8001266 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	201d      	movs	r0, #29
 800125a:	f000 fd42 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800125e:	201d      	movs	r0, #29
 8001260:	f000 fd5b 	bl	8001d1a <HAL_NVIC_EnableIRQ>
}
 8001264:	e02a      	b.n	80012bc <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM4)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <HAL_TIM_Base_MspInit+0x15c>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d114      	bne.n	800129a <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	201e      	movs	r0, #30
 800128e:	f000 fd28 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001292:	201e      	movs	r0, #30
 8001294:	f000 fd41 	bl	8001d1a <HAL_NVIC_EnableIRQ>
}
 8001298:	e010      	b.n	80012bc <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM5)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_TIM_Base_MspInit+0x160>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d10b      	bne.n	80012bc <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_TIM_Base_MspInit+0x150>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	bf00      	nop
 80012be:	3738      	adds	r7, #56	; 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40010000 	.word	0x40010000
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40000400 	.word	0x40000400
 80012d4:	40000800 	.word	0x40000800
 80012d8:	40000c00 	.word	0x40000c00

080012dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a22      	ldr	r2, [pc, #136]	; (8001384 <HAL_TIM_MspPostInit+0xa8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d11d      	bne.n	800133a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a21      	ldr	r2, [pc, #132]	; (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001304:	f043 0310 	orr.w	r3, r3, #16
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_TIM_MspPostInit+0xac>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001328:	2301      	movs	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4816      	ldr	r0, [pc, #88]	; (800138c <HAL_TIM_MspPostInit+0xb0>)
 8001334:	f000 fd0c 	bl	8001d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001338:	e020      	b.n	800137c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001342:	d11b      	bne.n	800137c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <HAL_TIM_MspPostInit+0xac>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135c:	2301      	movs	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800136c:	2301      	movs	r3, #1
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <HAL_TIM_MspPostInit+0xb4>)
 8001378:	f000 fcea 	bl	8001d50 <HAL_GPIO_Init>
}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40010000 	.word	0x40010000
 8001388:	40023800 	.word	0x40023800
 800138c:	40021000 	.word	0x40021000
 8001390:	40020000 	.word	0x40020000

08001394 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_USART2_UART_Init+0x58>)
 800139a:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <MX_USART2_UART_Init+0x5c>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART2_UART_Init+0x58>)
 80013d8:	f003 f99c 	bl	8004714 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013e2:	f7ff fc27 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000224 	.word	0x20000224
 80013f0:	40004400 	.word	0x40004400

080013f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0aa      	sub	sp, #168	; 0xa8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	2284      	movs	r2, #132	; 0x84
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f003 fdf3 	bl	8005000 <memset>
  if(uartHandle->Instance==USART2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <HAL_UART_MspInit+0xb0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d13a      	bne.n	800149a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001428:	2300      	movs	r3, #0
 800142a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fb1d 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800143c:	f7ff fbfa 	bl	8000c34 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_UART_MspInit+0xb4>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <HAL_UART_MspInit+0xb4>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144a:	6413      	str	r3, [r2, #64]	; 0x40
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_UART_MspInit+0xb4>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_UART_MspInit+0xb4>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <HAL_UART_MspInit+0xb4>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_UART_MspInit+0xb4>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001470:	230c      	movs	r3, #12
 8001472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001488:	2307      	movs	r3, #7
 800148a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <HAL_UART_MspInit+0xb8>)
 8001496:	f000 fc5b 	bl	8001d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	37a8      	adds	r7, #168	; 0xa8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40004400 	.word	0x40004400
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020000 	.word	0x40020000

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014b6:	490e      	ldr	r1, [pc, #56]	; (80014f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014cc:	4c0b      	ldr	r4, [pc, #44]	; (80014fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014da:	f7ff fc2f 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014de:	f003 fd6b 	bl	8004fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff fae3 	bl	8000aac <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014f4:	08005050 	.word	0x08005050
  ldr r2, =_sbss
 80014f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014fc:	200002b0 	.word	0x200002b0

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>

08001502 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
 8001508:	f000 fbe0 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150c:	200f      	movs	r0, #15
 800150e:	f000 f805 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001512:	f7ff fb95 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x54>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_InitTick+0x58>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fbfb 	bl	8001d36 <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f000 fbc3 	bl	8001ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_InitTick+0x5c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000000 	.word	0x20000000
 8001574:	20000008 	.word	0x20000008
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008
 80015a0:	200002ac 	.word	0x200002ac

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200002ac 	.word	0x200002ac

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff ffee 	bl	80015a4 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d4:	d005      	beq.n	80015e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_Delay+0x44>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e2:	bf00      	nop
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d8f7      	bhi.n	80015e4 <HAL_Delay+0x28>
  {
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008

08001604 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e031      	b.n	800167e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff f83a 	bl	800069c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_ADC_Init+0x84>)
 8001648:	4013      	ands	r3, r2
 800164a:	f043 0202 	orr.w	r2, r3, #2
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f970 	bl	8001938 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f023 0303 	bic.w	r3, r3, #3
 8001666:	f043 0201 	orr.w	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
 800166e:	e001      	b.n	8001674 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	ffffeefd 	.word	0xffffeefd

0800168c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1c>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e136      	b.n	8001916 <HAL_ADC_ConfigChannel+0x28a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d93a      	bls.n	800172e <HAL_ADC_ConfigChannel+0xa2>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016c0:	d035      	beq.n	800172e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68d9      	ldr	r1, [r3, #12]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	3b1e      	subs	r3, #30
 80016d8:	2207      	movs	r2, #7
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	400a      	ands	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a8d      	ldr	r2, [pc, #564]	; (8001924 <HAL_ADC_ConfigChannel+0x298>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68d9      	ldr	r1, [r3, #12]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	061a      	lsls	r2, r3, #24
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001706:	e035      	b.n	8001774 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68d9      	ldr	r1, [r3, #12]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	4603      	mov	r3, r0
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4403      	add	r3, r0
 8001720:	3b1e      	subs	r3, #30
 8001722:	409a      	lsls	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800172c:	e022      	b.n	8001774 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6919      	ldr	r1, [r3, #16]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	2207      	movs	r2, #7
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43da      	mvns	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	400a      	ands	r2, r1
 8001750:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6919      	ldr	r1, [r3, #16]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	4618      	mov	r0, r3
 8001764:	4603      	mov	r3, r0
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4403      	add	r3, r0
 800176a:	409a      	lsls	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b06      	cmp	r3, #6
 800177a:	d824      	bhi.n	80017c6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	3b05      	subs	r3, #5
 800178e:	221f      	movs	r2, #31
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43da      	mvns	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	400a      	ands	r2, r1
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	3b05      	subs	r3, #5
 80017b8:	fa00 f203 	lsl.w	r2, r0, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
 80017c4:	e04c      	b.n	8001860 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d824      	bhi.n	8001818 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3b23      	subs	r3, #35	; 0x23
 80017e0:	221f      	movs	r2, #31
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	400a      	ands	r2, r1
 80017ee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	3b23      	subs	r3, #35	; 0x23
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
 8001816:	e023      	b.n	8001860 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b41      	subs	r3, #65	; 0x41
 800182a:	221f      	movs	r2, #31
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43da      	mvns	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	400a      	ands	r2, r1
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	3b41      	subs	r3, #65	; 0x41
 8001854:	fa00 f203 	lsl.w	r2, r0, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a30      	ldr	r2, [pc, #192]	; (8001928 <HAL_ADC_ConfigChannel+0x29c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d10a      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1f4>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001872:	d105      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a2c      	ldr	r2, [pc, #176]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 800187a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800187e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a28      	ldr	r2, [pc, #160]	; (8001928 <HAL_ADC_ConfigChannel+0x29c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10f      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x21e>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b12      	cmp	r3, #18
 8001890:	d10b      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4a25      	ldr	r2, [pc, #148]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 8001898:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800189c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800189e:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <HAL_ADC_ConfigChannel+0x29c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d12b      	bne.n	800190c <HAL_ADC_ConfigChannel+0x280>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_ADC_ConfigChannel+0x298>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d003      	beq.n	80018c6 <HAL_ADC_ConfigChannel+0x23a>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b11      	cmp	r3, #17
 80018c4:	d122      	bne.n	800190c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a18      	ldr	r2, [pc, #96]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018d0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <HAL_ADC_ConfigChannel+0x298>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d111      	bne.n	800190c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_ADC_ConfigChannel+0x2a4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0c9a      	lsrs	r2, r3, #18
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018fe:	e002      	b.n	8001906 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3b01      	subs	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f9      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	10000012 	.word	0x10000012
 8001928:	40012000 	.word	0x40012000
 800192c:	40012300 	.word	0x40012300
 8001930:	20000000 	.word	0x20000000
 8001934:	431bde83 	.word	0x431bde83

08001938 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001940:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <ADC_Init+0x1ec>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a77      	ldr	r2, [pc, #476]	; (8001b24 <ADC_Init+0x1ec>)
 8001946:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800194a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800194c:	4b75      	ldr	r3, [pc, #468]	; (8001b24 <ADC_Init+0x1ec>)
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4973      	ldr	r1, [pc, #460]	; (8001b24 <ADC_Init+0x1ec>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	021a      	lsls	r2, r3, #8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800198c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <ADC_Init+0x1f0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d022      	beq.n	8001a12 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e00f      	b.n	8001a32 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0202 	bic.w	r2, r2, #2
 8001a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	035a      	lsls	r2, r3, #13
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	e007      	b.n	8001aa8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	051a      	lsls	r2, r3, #20
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aea:	025a      	lsls	r2, r3, #9
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	029a      	lsls	r2, r3, #10
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40012300 	.word	0x40012300
 8001b28:	0f000001 	.word	0x0f000001

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <__NVIC_SetPriorityGrouping+0x40>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x40>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00
 8001b70:	05fa0000 	.word	0x05fa0000

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	; (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	; (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff8e 	bl	8001bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff29 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff3e 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff8e 	bl	8001c20 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5d 	bl	8001bcc <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff31 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffa2 	bl	8001c88 <SysTick_Config>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e175      	b.n	800205c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 8164 	bne.w	8002056 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d005      	beq.n	8001da6 <HAL_GPIO_Init+0x56>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d017      	beq.n	8001e44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80be 	beq.w	8002056 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	4b66      	ldr	r3, [pc, #408]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a65      	ldr	r2, [pc, #404]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_GPIO_Init+0x324>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ef2:	4a61      	ldr	r2, [pc, #388]	; (8002078 <HAL_GPIO_Init+0x328>)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a58      	ldr	r2, [pc, #352]	; (800207c <HAL_GPIO_Init+0x32c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d037      	beq.n	8001f8e <HAL_GPIO_Init+0x23e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a57      	ldr	r2, [pc, #348]	; (8002080 <HAL_GPIO_Init+0x330>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d031      	beq.n	8001f8a <HAL_GPIO_Init+0x23a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_GPIO_Init+0x334>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x236>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a55      	ldr	r2, [pc, #340]	; (8002088 <HAL_GPIO_Init+0x338>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x232>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a54      	ldr	r2, [pc, #336]	; (800208c <HAL_GPIO_Init+0x33c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x22e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a53      	ldr	r2, [pc, #332]	; (8002090 <HAL_GPIO_Init+0x340>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x22a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a52      	ldr	r2, [pc, #328]	; (8002094 <HAL_GPIO_Init+0x344>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x226>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a51      	ldr	r2, [pc, #324]	; (8002098 <HAL_GPIO_Init+0x348>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x222>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a50      	ldr	r2, [pc, #320]	; (800209c <HAL_GPIO_Init+0x34c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x21e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4f      	ldr	r2, [pc, #316]	; (80020a0 <HAL_GPIO_Init+0x350>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x21a>
 8001f66:	2309      	movs	r3, #9
 8001f68:	e012      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	e010      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f6e:	2308      	movs	r3, #8
 8001f70:	e00e      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f72:	2307      	movs	r3, #7
 8001f74:	e00c      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f76:	2306      	movs	r3, #6
 8001f78:	e00a      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e008      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	f002 0203 	and.w	r2, r2, #3
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fa0:	4935      	ldr	r1, [pc, #212]	; (8002078 <HAL_GPIO_Init+0x328>)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd2:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd8:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ffc:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002002:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002026:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_GPIO_Init+0x354>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_GPIO_Init+0x354>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3301      	adds	r3, #1
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b0f      	cmp	r3, #15
 8002060:	f67f ae86 	bls.w	8001d70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40013800 	.word	0x40013800
 800207c:	40020000 	.word	0x40020000
 8002080:	40020400 	.word	0x40020400
 8002084:	40020800 	.word	0x40020800
 8002088:	40020c00 	.word	0x40020c00
 800208c:	40021000 	.word	0x40021000
 8002090:	40021400 	.word	0x40021400
 8002094:	40021800 	.word	0x40021800
 8002098:	40021c00 	.word	0x40021c00
 800209c:	40022000 	.word	0x40022000
 80020a0:	40022400 	.word	0x40022400
 80020a4:	40013c00 	.word	0x40013c00

080020a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e001      	b.n	80020ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020f4:	e003      	b.n	80020fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	041a      	lsls	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	619a      	str	r2, [r3, #24]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fc6a 	bl	8000a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40013c00 	.word	0x40013c00

0800213c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40007000 	.word	0x40007000

0800215c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e291      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8087 	beq.w	800228e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002180:	4b96      	ldr	r3, [pc, #600]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b04      	cmp	r3, #4
 800218a:	d00c      	beq.n	80021a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218c:	4b93      	ldr	r3, [pc, #588]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d112      	bne.n	80021be <HAL_RCC_OscConfig+0x62>
 8002198:	4b90      	ldr	r3, [pc, #576]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a4:	d10b      	bne.n	80021be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a6:	4b8d      	ldr	r3, [pc, #564]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d06c      	beq.n	800228c <HAL_RCC_OscConfig+0x130>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d168      	bne.n	800228c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e26b      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x7a>
 80021c8:	4b84      	ldr	r3, [pc, #528]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a83      	ldr	r2, [pc, #524]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e02e      	b.n	8002234 <HAL_RCC_OscConfig+0xd8>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x9c>
 80021de:	4b7f      	ldr	r3, [pc, #508]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7e      	ldr	r2, [pc, #504]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b7c      	ldr	r3, [pc, #496]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7b      	ldr	r2, [pc, #492]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80021f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xd8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0xc0>
 8002202:	4b76      	ldr	r3, [pc, #472]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a75      	ldr	r2, [pc, #468]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b73      	ldr	r3, [pc, #460]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a72      	ldr	r2, [pc, #456]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xd8>
 800221c:	4b6f      	ldr	r3, [pc, #444]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a6e      	ldr	r2, [pc, #440]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b6c      	ldr	r3, [pc, #432]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6b      	ldr	r2, [pc, #428]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7ff f9b2 	bl	80015a4 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff f9ae 	bl	80015a4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e21f      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b61      	ldr	r3, [pc, #388]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xe8>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff f99e 	bl	80015a4 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff f99a 	bl	80015a4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e20b      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b57      	ldr	r3, [pc, #348]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x110>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d069      	beq.n	800236e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800229a:	4b50      	ldr	r3, [pc, #320]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b4d      	ldr	r3, [pc, #308]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x190>
 80022b2:	4b4a      	ldr	r3, [pc, #296]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b47      	ldr	r3, [pc, #284]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x17a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1df      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b41      	ldr	r3, [pc, #260]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	493d      	ldr	r1, [pc, #244]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e040      	b.n	800236e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d023      	beq.n	800233c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b39      	ldr	r3, [pc, #228]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a38      	ldr	r2, [pc, #224]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff f950 	bl	80015a4 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002308:	f7ff f94c 	bl	80015a4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1bd      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4929      	ldr	r1, [pc, #164]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
 800233a:	e018      	b.n	800236e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a26      	ldr	r2, [pc, #152]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f92c 	bl	80015a4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002350:	f7ff f928 	bl	80015a4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e199      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d038      	beq.n	80023ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d019      	beq.n	80023b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002386:	4a15      	ldr	r2, [pc, #84]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7ff f909 	bl	80015a4 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002396:	f7ff f905 	bl	80015a4 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e176      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80023aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x23a>
 80023b4:	e01a      	b.n	80023ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80023b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_RCC_OscConfig+0x280>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7ff f8ef 	bl	80015a4 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ca:	f7ff f8eb 	bl	80015a4 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d903      	bls.n	80023e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e15c      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
 80023dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	4b91      	ldr	r3, [pc, #580]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80023e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ee      	bne.n	80023ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80a4 	beq.w	8002542 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b8b      	ldr	r3, [pc, #556]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b88      	ldr	r3, [pc, #544]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a87      	ldr	r2, [pc, #540]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b85      	ldr	r3, [pc, #532]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002422:	4b82      	ldr	r3, [pc, #520]	; (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d118      	bne.n	8002460 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800242e:	4b7f      	ldr	r3, [pc, #508]	; (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7e      	ldr	r2, [pc, #504]	; (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243a:	f7ff f8b3 	bl	80015a4 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7ff f8af 	bl	80015a4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b64      	cmp	r3, #100	; 0x64
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e120      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002454:	4b75      	ldr	r3, [pc, #468]	; (800262c <HAL_RCC_OscConfig+0x4d0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x31a>
 8002468:	4b6f      	ldr	r3, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e02d      	b.n	80024d2 <HAL_RCC_OscConfig+0x376>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x33c>
 800247e:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	4a66      	ldr	r2, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6713      	str	r3, [r2, #112]	; 0x70
 8002496:	e01c      	b.n	80024d2 <HAL_RCC_OscConfig+0x376>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d10c      	bne.n	80024ba <HAL_RCC_OscConfig+0x35e>
 80024a0:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	4a60      	ldr	r2, [pc, #384]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
 80024ac:	4b5e      	ldr	r3, [pc, #376]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a5d      	ldr	r2, [pc, #372]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0x376>
 80024ba:	4b5b      	ldr	r3, [pc, #364]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a5a      	ldr	r2, [pc, #360]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
 80024c6:	4b58      	ldr	r3, [pc, #352]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a57      	ldr	r2, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d015      	beq.n	8002506 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7ff f863 	bl	80015a4 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7ff f85f 	bl	80015a4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0ce      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ee      	beq.n	80024e2 <HAL_RCC_OscConfig+0x386>
 8002504:	e014      	b.n	8002530 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7ff f84d 	bl	80015a4 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7ff f849 	bl	80015a4 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0b8      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ee      	bne.n	800250e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a3b      	ldr	r2, [pc, #236]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80a4 	beq.w	8002694 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d06b      	beq.n	8002630 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d149      	bne.n	80025f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a30      	ldr	r2, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 8002566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800256a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff f81a 	bl	80015a4 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002574:	f7ff f816 	bl	80015a4 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e087      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	4b28      	ldr	r3, [pc, #160]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	019b      	lsls	r3, r3, #6
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	3b01      	subs	r3, #1
 80025ac:	041b      	lsls	r3, r3, #16
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	4313      	orrs	r3, r2
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80025c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe ffea 	bl	80015a4 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe ffe6 	bl	80015a4 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e057      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x478>
 80025f2:	e04f      	b.n	8002694 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe ffd0 	bl	80015a4 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe ffcc 	bl	80015a4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e03d      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCC_OscConfig+0x4cc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x4ac>
 8002626:	e035      	b.n	8002694 <HAL_RCC_OscConfig+0x538>
 8002628:	40023800 	.word	0x40023800
 800262c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x544>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d028      	beq.n	8002690 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d121      	bne.n	8002690 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d11a      	bne.n	8002690 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002660:	4013      	ands	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002666:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002668:	4293      	cmp	r3, r2
 800266a:	d111      	bne.n	8002690 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	3b01      	subs	r3, #1
 800267a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d107      	bne.n	8002690 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800

080026a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d0      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d910      	bls.n	80026ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b67      	ldr	r3, [pc, #412]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 020f 	bic.w	r2, r3, #15
 80026d2:	4965      	ldr	r1, [pc, #404]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 800270a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002726:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d040      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e073      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06b      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4936      	ldr	r1, [pc, #216]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe ff04 	bl	80015a4 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe ff00 	bl	80015a4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e053      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d210      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b24      	ldr	r3, [pc, #144]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 020f 	bic.w	r2, r3, #15
 80027de:	4922      	ldr	r1, [pc, #136]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	490a      	ldr	r1, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x1cc>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1d0>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1d4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fe60 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023c00 	.word	0x40023c00
 800286c:	40023800 	.word	0x40023800
 8002870:	08005028 	.word	0x08005028
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004

0800287c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002880:	b090      	sub	sp, #64	; 0x40
 8002882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
 8002888:	2300      	movs	r3, #0
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002894:	4b59      	ldr	r3, [pc, #356]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d00d      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x40>
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	f200 80a1 	bhi.w	80029e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x34>
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ae:	e09b      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x184>)
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028b4:	e09b      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b6:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80028b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028ba:	e098      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028bc:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028c6:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d028      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d2:	4b4a      	ldr	r3, [pc, #296]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	099b      	lsrs	r3, r3, #6
 80028d8:	2200      	movs	r2, #0
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	627a      	str	r2, [r7, #36]	; 0x24
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028e4:	2100      	movs	r1, #0
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80028e8:	fb03 f201 	mul.w	r2, r3, r1
 80028ec:	2300      	movs	r3, #0
 80028ee:	fb00 f303 	mul.w	r3, r0, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	4a43      	ldr	r2, [pc, #268]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80028f6:	fba0 1202 	umull	r1, r2, r0, r2
 80028fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028fc:	460a      	mov	r2, r1
 80028fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002902:	4413      	add	r3, r2
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002908:	2200      	movs	r2, #0
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	61fa      	str	r2, [r7, #28]
 800290e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002912:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002916:	f7fd fc77 	bl	8000208 <__aeabi_uldivmod>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4613      	mov	r3, r2
 8002920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002922:	e053      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002924:	4b35      	ldr	r3, [pc, #212]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	2200      	movs	r2, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	617a      	str	r2, [r7, #20]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002936:	f04f 0b00 	mov.w	fp, #0
 800293a:	4652      	mov	r2, sl
 800293c:	465b      	mov	r3, fp
 800293e:	f04f 0000 	mov.w	r0, #0
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	0159      	lsls	r1, r3, #5
 8002948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294c:	0150      	lsls	r0, r2, #5
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	ebb2 080a 	subs.w	r8, r2, sl
 8002956:	eb63 090b 	sbc.w	r9, r3, fp
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002966:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800296a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800296e:	ebb2 0408 	subs.w	r4, r2, r8
 8002972:	eb63 0509 	sbc.w	r5, r3, r9
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	00eb      	lsls	r3, r5, #3
 8002980:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002984:	00e2      	lsls	r2, r4, #3
 8002986:	4614      	mov	r4, r2
 8002988:	461d      	mov	r5, r3
 800298a:	eb14 030a 	adds.w	r3, r4, sl
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	eb45 030b 	adc.w	r3, r5, fp
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a2:	4629      	mov	r1, r5
 80029a4:	028b      	lsls	r3, r1, #10
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ac:	4621      	mov	r1, r4
 80029ae:	028a      	lsls	r2, r1, #10
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	2200      	movs	r2, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029c0:	f7fd fc22 	bl	8000208 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4613      	mov	r3, r2
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	3301      	adds	r3, #1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80029dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3740      	adds	r7, #64	; 0x40
 80029f4:	46bd      	mov	sp, r7
 80029f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	017d7840 	.word	0x017d7840

08002a08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000000 	.word	0x20000000

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0a9b      	lsrs	r3, r3, #10
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	08005038 	.word	0x08005038

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	f7ff ffdc 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0b5b      	lsrs	r3, r3, #13
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08005038 	.word	0x08005038

08002a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a98:	4b69      	ldr	r3, [pc, #420]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a68      	ldr	r2, [pc, #416]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aa2:	6093      	str	r3, [r2, #8]
 8002aa4:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	4964      	ldr	r1, [pc, #400]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d017      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	4959      	ldr	r1, [pc, #356]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae8:	d101      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d017      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b06:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	494a      	ldr	r1, [pc, #296]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b24:	d101      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 808b 	beq.w	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	4a39      	ldr	r2, [pc, #228]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b78:	f7fe fd14 	bl	80015a4 <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7fe fd10 	bl	80015a4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e357      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d035      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d02e      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a1a      	ldr	r2, [pc, #104]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d114      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fcd8 	bl	80015a4 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fcd4 	bl	80015a4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e319      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ee      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c26:	d111      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c36:	400b      	ands	r3, r1
 8002c38:	4901      	ldr	r1, [pc, #4]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	0ffffcff 	.word	0x0ffffcff
 8002c4c:	4baa      	ldr	r3, [pc, #680]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4aa9      	ldr	r2, [pc, #676]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c56:	6093      	str	r3, [r2, #8]
 8002c58:	4ba7      	ldr	r3, [pc, #668]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c64:	49a4      	ldr	r1, [pc, #656]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c76:	4ba0      	ldr	r3, [pc, #640]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c7c:	4a9e      	ldr	r2, [pc, #632]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c86:	4b9c      	ldr	r3, [pc, #624]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	4999      	ldr	r1, [pc, #612]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca4:	4b94      	ldr	r3, [pc, #592]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb2:	4991      	ldr	r1, [pc, #580]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cc6:	4b8c      	ldr	r3, [pc, #560]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd4:	4988      	ldr	r1, [pc, #544]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ce8:	4b83      	ldr	r3, [pc, #524]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf6:	4980      	ldr	r1, [pc, #512]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d0a:	4b7b      	ldr	r3, [pc, #492]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4977      	ldr	r1, [pc, #476]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d2c:	4b72      	ldr	r3, [pc, #456]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	496f      	ldr	r1, [pc, #444]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f023 020c 	bic.w	r2, r3, #12
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	4966      	ldr	r1, [pc, #408]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d70:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	495e      	ldr	r1, [pc, #376]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d92:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	4955      	ldr	r1, [pc, #340]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	494d      	ldr	r1, [pc, #308]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dd6:	4b48      	ldr	r3, [pc, #288]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	4944      	ldr	r1, [pc, #272]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002df8:	4b3f      	ldr	r3, [pc, #252]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	493c      	ldr	r1, [pc, #240]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e1a:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	4933      	ldr	r1, [pc, #204]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4a:	492b      	ldr	r1, [pc, #172]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d011      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6c:	4922      	ldr	r1, [pc, #136]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	4912      	ldr	r1, [pc, #72]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed0:	4909      	ldr	r1, [pc, #36]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d006      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80d9 	beq.w	800309e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002eec:	4b02      	ldr	r3, [pc, #8]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a01      	ldr	r2, [pc, #4]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ef6:	e001      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002efe:	f7fe fb51 	bl	80015a4 <HAL_GetTick>
 8002f02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f06:	f7fe fb4d 	bl	80015a4 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b64      	cmp	r3, #100	; 0x64
 8002f12:	d901      	bls.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e194      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f18:	4b6c      	ldr	r3, [pc, #432]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d021      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11d      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f38:	4b64      	ldr	r3, [pc, #400]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f46:	4b61      	ldr	r3, [pc, #388]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4c:	0e1b      	lsrs	r3, r3, #24
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	019a      	lsls	r2, r3, #6
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	061b      	lsls	r3, r3, #24
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	071b      	lsls	r3, r3, #28
 8002f6c:	4957      	ldr	r1, [pc, #348]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d02e      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f9e:	d129      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fa0:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb4:	0f1b      	lsrs	r3, r3, #28
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	019a      	lsls	r2, r3, #6
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	061b      	lsls	r3, r3, #24
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	071b      	lsls	r3, r3, #28
 8002fd4:	493d      	ldr	r1, [pc, #244]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe2:	f023 021f 	bic.w	r2, r3, #31
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	3b01      	subs	r3, #1
 8002fec:	4937      	ldr	r1, [pc, #220]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01d      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003000:	4b32      	ldr	r3, [pc, #200]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003006:	0e1b      	lsrs	r3, r3, #24
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800300e:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003014:	0f1b      	lsrs	r3, r3, #28
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	019a      	lsls	r2, r3, #6
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	431a      	orrs	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	431a      	orrs	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	071b      	lsls	r3, r3, #28
 8003034:	4925      	ldr	r1, [pc, #148]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d011      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	019a      	lsls	r2, r3, #6
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	061b      	lsls	r3, r3, #24
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	071b      	lsls	r3, r3, #28
 8003064:	4919      	ldr	r1, [pc, #100]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7fe fa94 	bl	80015a4 <HAL_GetTick>
 800307c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003080:	f7fe fa90 	bl	80015a4 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e0d7      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	f040 80cd 	bne.w	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b2:	f7fe fa77 	bl	80015a4 <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030b8:	e00a      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030ba:	f7fe fa73 	bl	80015a4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b64      	cmp	r3, #100	; 0x64
 80030c6:	d903      	bls.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0ba      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80030cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030d0:	4b5e      	ldr	r3, [pc, #376]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030dc:	d0ed      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d02e      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d12a      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003106:	4b51      	ldr	r3, [pc, #324]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003114:	4b4d      	ldr	r3, [pc, #308]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	0f1b      	lsrs	r3, r3, #28
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	019a      	lsls	r2, r3, #6
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	061b      	lsls	r3, r3, #24
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	071b      	lsls	r3, r3, #28
 800313a:	4944      	ldr	r1, [pc, #272]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003142:	4b42      	ldr	r3, [pc, #264]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003148:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	3b01      	subs	r3, #1
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	493d      	ldr	r1, [pc, #244]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d022      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800316c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003170:	d11d      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	0e1b      	lsrs	r3, r3, #24
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003180:	4b32      	ldr	r3, [pc, #200]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	0f1b      	lsrs	r3, r3, #28
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	019a      	lsls	r2, r3, #6
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	431a      	orrs	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	071b      	lsls	r3, r3, #28
 80031a6:	4929      	ldr	r1, [pc, #164]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d028      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	0e1b      	lsrs	r3, r3, #24
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031c8:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	019a      	lsls	r2, r3, #6
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	041b      	lsls	r3, r3, #16
 80031e0:	431a      	orrs	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	061b      	lsls	r3, r3, #24
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	071b      	lsls	r3, r3, #28
 80031ee:	4917      	ldr	r1, [pc, #92]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4911      	ldr	r1, [pc, #68]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0e      	ldr	r2, [pc, #56]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003218:	f7fe f9c4 	bl	80015a4 <HAL_GetTick>
 800321c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003220:	f7fe f9c0 	bl	80015a4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e007      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800323a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800323e:	d1ef      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800

08003250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e049      	b.n	80032f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd ff7e 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f000 fd58 	bl	8003d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d001      	beq.n	8003318 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e04c      	b.n	80033b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <HAL_TIM_Base_Start+0xc0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d022      	beq.n	8003370 <HAL_TIM_Base_Start+0x70>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003332:	d01d      	beq.n	8003370 <HAL_TIM_Base_Start+0x70>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <HAL_TIM_Base_Start+0xc4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <HAL_TIM_Base_Start+0x70>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <HAL_TIM_Base_Start+0xc8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <HAL_TIM_Base_Start+0x70>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <HAL_TIM_Base_Start+0xcc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <HAL_TIM_Base_Start+0x70>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <HAL_TIM_Base_Start+0xd0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_TIM_Base_Start+0x70>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <HAL_TIM_Base_Start+0xd4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_TIM_Base_Start+0x70>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <HAL_TIM_Base_Start+0xd8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d115      	bne.n	800339c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_TIM_Base_Start+0xdc>)
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b06      	cmp	r3, #6
 8003380:	d015      	beq.n	80033ae <HAL_TIM_Base_Start+0xae>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d011      	beq.n	80033ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339a:	e008      	b.n	80033ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	e000      	b.n	80033b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40010400 	.word	0x40010400
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40001800 	.word	0x40001800
 80033dc:	00010007 	.word	0x00010007

080033e0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6a1a      	ldr	r2, [r3, #32]
 80033ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10f      	bne.n	8003418 <HAL_TIM_Base_Stop+0x38>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	f240 4344 	movw	r3, #1092	; 0x444
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_TIM_Base_Stop+0x38>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e049      	b.n	80034d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f841 	bl	80034dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f000 fc69 	bl	8003d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <HAL_TIM_PWM_Start+0x24>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b01      	cmp	r3, #1
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e03c      	b.n	800358e <HAL_TIM_PWM_Start+0x9e>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b04      	cmp	r3, #4
 8003518:	d109      	bne.n	800352e <HAL_TIM_PWM_Start+0x3e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e02f      	b.n	800358e <HAL_TIM_PWM_Start+0x9e>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d109      	bne.n	8003548 <HAL_TIM_PWM_Start+0x58>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e022      	b.n	800358e <HAL_TIM_PWM_Start+0x9e>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d109      	bne.n	8003562 <HAL_TIM_PWM_Start+0x72>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	bf14      	ite	ne
 800355a:	2301      	movne	r3, #1
 800355c:	2300      	moveq	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	e015      	b.n	800358e <HAL_TIM_PWM_Start+0x9e>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b10      	cmp	r3, #16
 8003566:	d109      	bne.n	800357c <HAL_TIM_PWM_Start+0x8c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e008      	b.n	800358e <HAL_TIM_PWM_Start+0x9e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e092      	b.n	80036bc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_PWM_Start+0xb6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a4:	e023      	b.n	80035ee <HAL_TIM_PWM_Start+0xfe>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_PWM_Start+0xc6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b4:	e01b      	b.n	80035ee <HAL_TIM_PWM_Start+0xfe>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_PWM_Start+0xd6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c4:	e013      	b.n	80035ee <HAL_TIM_PWM_Start+0xfe>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d104      	bne.n	80035d6 <HAL_TIM_PWM_Start+0xe6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035d4:	e00b      	b.n	80035ee <HAL_TIM_PWM_Start+0xfe>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_PWM_Start+0xf6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e4:	e003      	b.n	80035ee <HAL_TIM_PWM_Start+0xfe>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2201      	movs	r2, #1
 80035f4:	6839      	ldr	r1, [r7, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 ff3c 	bl	8004474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a30      	ldr	r2, [pc, #192]	; (80036c4 <HAL_TIM_PWM_Start+0x1d4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <HAL_TIM_PWM_Start+0x120>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2f      	ldr	r2, [pc, #188]	; (80036c8 <HAL_TIM_PWM_Start+0x1d8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d101      	bne.n	8003614 <HAL_TIM_PWM_Start+0x124>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_TIM_PWM_Start+0x126>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <HAL_TIM_PWM_Start+0x1d4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d022      	beq.n	800367a <HAL_TIM_PWM_Start+0x18a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363c:	d01d      	beq.n	800367a <HAL_TIM_PWM_Start+0x18a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a22      	ldr	r2, [pc, #136]	; (80036cc <HAL_TIM_PWM_Start+0x1dc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d018      	beq.n	800367a <HAL_TIM_PWM_Start+0x18a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a20      	ldr	r2, [pc, #128]	; (80036d0 <HAL_TIM_PWM_Start+0x1e0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_TIM_PWM_Start+0x18a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <HAL_TIM_PWM_Start+0x1e4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00e      	beq.n	800367a <HAL_TIM_PWM_Start+0x18a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <HAL_TIM_PWM_Start+0x1d8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d009      	beq.n	800367a <HAL_TIM_PWM_Start+0x18a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1b      	ldr	r2, [pc, #108]	; (80036d8 <HAL_TIM_PWM_Start+0x1e8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d004      	beq.n	800367a <HAL_TIM_PWM_Start+0x18a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a19      	ldr	r2, [pc, #100]	; (80036dc <HAL_TIM_PWM_Start+0x1ec>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d115      	bne.n	80036a6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <HAL_TIM_PWM_Start+0x1f0>)
 8003682:	4013      	ands	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b06      	cmp	r3, #6
 800368a:	d015      	beq.n	80036b8 <HAL_TIM_PWM_Start+0x1c8>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003692:	d011      	beq.n	80036b8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a4:	e008      	b.n	80036b8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e000      	b.n	80036ba <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40010400 	.word	0x40010400
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40001800 	.word	0x40001800
 80036e0:	00010007 	.word	0x00010007

080036e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0202 	mvn.w	r2, #2
 8003710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 faee 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fae0 	bl	8003cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 faf1 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b04      	cmp	r3, #4
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0204 	mvn.w	r2, #4
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fac4 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fab6 	bl	8003cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fac7 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0208 	mvn.w	r2, #8
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2204      	movs	r2, #4
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fa9a 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa8c 	bl	8003cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fa9d 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b10      	cmp	r3, #16
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0210 	mvn.w	r2, #16
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2208      	movs	r2, #8
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa70 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa62 	bl	8003cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fa73 	bl	8003d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b01      	cmp	r3, #1
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0201 	mvn.w	r2, #1
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fa3c 	bl	8003ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 ff2c 	bl	80046ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a2:	d10e      	bne.n	80038c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d107      	bne.n	80038c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 ff1f 	bl	8004700 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d10e      	bne.n	80038ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d107      	bne.n	80038ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fa21 	bl	8003d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d10e      	bne.n	800391a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b20      	cmp	r3, #32
 8003908:	d107      	bne.n	800391a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f06f 0220 	mvn.w	r2, #32
 8003912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fedf 	bl	80046d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800393e:	2302      	movs	r3, #2
 8003940:	e0ff      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b14      	cmp	r3, #20
 800394e:	f200 80f0 	bhi.w	8003b32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003952:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	080039ad 	.word	0x080039ad
 800395c:	08003b33 	.word	0x08003b33
 8003960:	08003b33 	.word	0x08003b33
 8003964:	08003b33 	.word	0x08003b33
 8003968:	080039ed 	.word	0x080039ed
 800396c:	08003b33 	.word	0x08003b33
 8003970:	08003b33 	.word	0x08003b33
 8003974:	08003b33 	.word	0x08003b33
 8003978:	08003a2f 	.word	0x08003a2f
 800397c:	08003b33 	.word	0x08003b33
 8003980:	08003b33 	.word	0x08003b33
 8003984:	08003b33 	.word	0x08003b33
 8003988:	08003a6f 	.word	0x08003a6f
 800398c:	08003b33 	.word	0x08003b33
 8003990:	08003b33 	.word	0x08003b33
 8003994:	08003b33 	.word	0x08003b33
 8003998:	08003ab1 	.word	0x08003ab1
 800399c:	08003b33 	.word	0x08003b33
 80039a0:	08003b33 	.word	0x08003b33
 80039a4:	08003b33 	.word	0x08003b33
 80039a8:	08003af1 	.word	0x08003af1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fa66 	bl	8003e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0208 	orr.w	r2, r2, #8
 80039c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0204 	bic.w	r2, r2, #4
 80039d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6999      	ldr	r1, [r3, #24]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	619a      	str	r2, [r3, #24]
      break;
 80039ea:	e0a5      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fab8 	bl	8003f68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6999      	ldr	r1, [r3, #24]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	021a      	lsls	r2, r3, #8
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	619a      	str	r2, [r3, #24]
      break;
 8003a2c:	e084      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fb0f 	bl	8004058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0208 	orr.w	r2, r2, #8
 8003a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0204 	bic.w	r2, r2, #4
 8003a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69d9      	ldr	r1, [r3, #28]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	61da      	str	r2, [r3, #28]
      break;
 8003a6c:	e064      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fb65 	bl	8004144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69d9      	ldr	r1, [r3, #28]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	021a      	lsls	r2, r3, #8
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	61da      	str	r2, [r3, #28]
      break;
 8003aae:	e043      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fb9c 	bl	80041f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0208 	orr.w	r2, r2, #8
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0204 	bic.w	r2, r2, #4
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003aee:	e023      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fbce 	bl	8004298 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b30:	e002      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
      break;
 8003b36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop

08003b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_TIM_ConfigClockSource+0x1c>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e0b4      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x186>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	4b56      	ldr	r3, [pc, #344]	; (8003cdc <HAL_TIM_ConfigClockSource+0x190>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba0:	d03e      	beq.n	8003c20 <HAL_TIM_ConfigClockSource+0xd4>
 8003ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba6:	f200 8087 	bhi.w	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bae:	f000 8086 	beq.w	8003cbe <HAL_TIM_ConfigClockSource+0x172>
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d87f      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b70      	cmp	r3, #112	; 0x70
 8003bba:	d01a      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8003bbc:	2b70      	cmp	r3, #112	; 0x70
 8003bbe:	d87b      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b60      	cmp	r3, #96	; 0x60
 8003bc2:	d050      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x11a>
 8003bc4:	2b60      	cmp	r3, #96	; 0x60
 8003bc6:	d877      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b50      	cmp	r3, #80	; 0x50
 8003bca:	d03c      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0xfa>
 8003bcc:	2b50      	cmp	r3, #80	; 0x50
 8003bce:	d873      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d058      	beq.n	8003c86 <HAL_TIM_ConfigClockSource+0x13a>
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d86f      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b30      	cmp	r3, #48	; 0x30
 8003bda:	d064      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bdc:	2b30      	cmp	r3, #48	; 0x30
 8003bde:	d86b      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d060      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d867      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d05c      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d05a      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	e062      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6899      	ldr	r1, [r3, #8]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f000 fc17 	bl	8004434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	609a      	str	r2, [r3, #8]
      break;
 8003c1e:	e04f      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6899      	ldr	r1, [r3, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f000 fc00 	bl	8004434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c42:	609a      	str	r2, [r3, #8]
      break;
 8003c44:	e03c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6859      	ldr	r1, [r3, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f000 fb74 	bl	8004340 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2150      	movs	r1, #80	; 0x50
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fbcd 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003c64:	e02c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	6859      	ldr	r1, [r3, #4]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f000 fb93 	bl	800439e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2160      	movs	r1, #96	; 0x60
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fbbd 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003c84:	e01c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f000 fb54 	bl	8004340 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2140      	movs	r1, #64	; 0x40
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fbad 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003ca4:	e00c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f000 fba4 	bl	80043fe <TIM_ITRx_SetConfig>
      break;
 8003cb6:	e003      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbc:	e000      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	fffeff88 	.word	0xfffeff88

08003ce0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a40      	ldr	r2, [pc, #256]	; (8003e58 <TIM_Base_SetConfig+0x114>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d62:	d00f      	beq.n	8003d84 <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a3d      	ldr	r2, [pc, #244]	; (8003e5c <TIM_Base_SetConfig+0x118>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00b      	beq.n	8003d84 <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a3c      	ldr	r2, [pc, #240]	; (8003e60 <TIM_Base_SetConfig+0x11c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d007      	beq.n	8003d84 <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3b      	ldr	r2, [pc, #236]	; (8003e64 <TIM_Base_SetConfig+0x120>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3a      	ldr	r2, [pc, #232]	; (8003e68 <TIM_Base_SetConfig+0x124>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d108      	bne.n	8003d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2f      	ldr	r2, [pc, #188]	; (8003e58 <TIM_Base_SetConfig+0x114>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d02b      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da4:	d027      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2c      	ldr	r2, [pc, #176]	; (8003e5c <TIM_Base_SetConfig+0x118>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d023      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2b      	ldr	r2, [pc, #172]	; (8003e60 <TIM_Base_SetConfig+0x11c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01f      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2a      	ldr	r2, [pc, #168]	; (8003e64 <TIM_Base_SetConfig+0x120>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01b      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a29      	ldr	r2, [pc, #164]	; (8003e68 <TIM_Base_SetConfig+0x124>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d017      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a28      	ldr	r2, [pc, #160]	; (8003e6c <TIM_Base_SetConfig+0x128>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a27      	ldr	r2, [pc, #156]	; (8003e70 <TIM_Base_SetConfig+0x12c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00f      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a26      	ldr	r2, [pc, #152]	; (8003e74 <TIM_Base_SetConfig+0x130>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00b      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a25      	ldr	r2, [pc, #148]	; (8003e78 <TIM_Base_SetConfig+0x134>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a24      	ldr	r2, [pc, #144]	; (8003e7c <TIM_Base_SetConfig+0x138>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a23      	ldr	r2, [pc, #140]	; (8003e80 <TIM_Base_SetConfig+0x13c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d108      	bne.n	8003e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <TIM_Base_SetConfig+0x114>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_Base_SetConfig+0xf8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <TIM_Base_SetConfig+0x124>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d103      	bne.n	8003e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	615a      	str	r2, [r3, #20]
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800
 8003e64:	40000c00 	.word	0x40000c00
 8003e68:	40010400 	.word	0x40010400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40014400 	.word	0x40014400
 8003e74:	40014800 	.word	0x40014800
 8003e78:	40001800 	.word	0x40001800
 8003e7c:	40001c00 	.word	0x40001c00
 8003e80:	40002000 	.word	0x40002000

08003e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f023 0201 	bic.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <TIM_OC1_SetConfig+0xd8>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f023 0302 	bic.w	r3, r3, #2
 8003ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <TIM_OC1_SetConfig+0xdc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d003      	beq.n	8003ee8 <TIM_OC1_SetConfig+0x64>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <TIM_OC1_SetConfig+0xe0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d10c      	bne.n	8003f02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f023 0308 	bic.w	r3, r3, #8
 8003eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <TIM_OC1_SetConfig+0xdc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d003      	beq.n	8003f12 <TIM_OC1_SetConfig+0x8e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <TIM_OC1_SetConfig+0xe0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d111      	bne.n	8003f36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	621a      	str	r2, [r3, #32]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	fffeff8f 	.word	0xfffeff8f
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40010400 	.word	0x40010400

08003f68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f023 0210 	bic.w	r2, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4b2e      	ldr	r3, [pc, #184]	; (800404c <TIM_OC2_SetConfig+0xe4>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0320 	bic.w	r3, r3, #32
 8003fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a23      	ldr	r2, [pc, #140]	; (8004050 <TIM_OC2_SetConfig+0xe8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_OC2_SetConfig+0x68>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a22      	ldr	r2, [pc, #136]	; (8004054 <TIM_OC2_SetConfig+0xec>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d10d      	bne.n	8003fec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <TIM_OC2_SetConfig+0xe8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_OC2_SetConfig+0x94>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a17      	ldr	r2, [pc, #92]	; (8004054 <TIM_OC2_SetConfig+0xec>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d113      	bne.n	8004024 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800400a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	feff8fff 	.word	0xfeff8fff
 8004050:	40010000 	.word	0x40010000
 8004054:	40010400 	.word	0x40010400

08004058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <TIM_OC3_SetConfig+0xe0>)
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a22      	ldr	r2, [pc, #136]	; (800413c <TIM_OC3_SetConfig+0xe4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC3_SetConfig+0x66>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a21      	ldr	r2, [pc, #132]	; (8004140 <TIM_OC3_SetConfig+0xe8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d10d      	bne.n	80040da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a17      	ldr	r2, [pc, #92]	; (800413c <TIM_OC3_SetConfig+0xe4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_OC3_SetConfig+0x92>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a16      	ldr	r2, [pc, #88]	; (8004140 <TIM_OC3_SetConfig+0xe8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d113      	bne.n	8004112 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	621a      	str	r2, [r3, #32]
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	fffeff8f 	.word	0xfffeff8f
 800413c:	40010000 	.word	0x40010000
 8004140:	40010400 	.word	0x40010400

08004144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4b1e      	ldr	r3, [pc, #120]	; (80041e8 <TIM_OC4_SetConfig+0xa4>)
 8004170:	4013      	ands	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	031b      	lsls	r3, r3, #12
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a13      	ldr	r2, [pc, #76]	; (80041ec <TIM_OC4_SetConfig+0xa8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_OC4_SetConfig+0x68>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <TIM_OC4_SetConfig+0xac>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d109      	bne.n	80041c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	019b      	lsls	r3, r3, #6
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	621a      	str	r2, [r3, #32]
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	feff8fff 	.word	0xfeff8fff
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40010400 	.word	0x40010400

080041f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4b1b      	ldr	r3, [pc, #108]	; (800428c <TIM_OC5_SetConfig+0x98>)
 8004220:	4013      	ands	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004234:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a12      	ldr	r2, [pc, #72]	; (8004290 <TIM_OC5_SetConfig+0x9c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_OC5_SetConfig+0x5e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a11      	ldr	r2, [pc, #68]	; (8004294 <TIM_OC5_SetConfig+0xa0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d109      	bne.n	8004266 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004258:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	fffeff8f 	.word	0xfffeff8f
 8004290:	40010000 	.word	0x40010000
 8004294:	40010400 	.word	0x40010400

08004298 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <TIM_OC6_SetConfig+0x9c>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	051b      	lsls	r3, r3, #20
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a13      	ldr	r2, [pc, #76]	; (8004338 <TIM_OC6_SetConfig+0xa0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_OC6_SetConfig+0x60>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a12      	ldr	r2, [pc, #72]	; (800433c <TIM_OC6_SetConfig+0xa4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d109      	bne.n	800430c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	029b      	lsls	r3, r3, #10
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	feff8fff 	.word	0xfeff8fff
 8004338:	40010000 	.word	0x40010000
 800433c:	40010400 	.word	0x40010400

08004340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f023 0201 	bic.w	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800436a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 030a 	bic.w	r3, r3, #10
 800437c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439e:	b480      	push	{r7}
 80043a0:	b087      	sub	sp, #28
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0210 	bic.w	r2, r3, #16
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	f043 0307 	orr.w	r3, r3, #7
 8004420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800444e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	431a      	orrs	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2201      	movs	r2, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	43db      	mvns	r3, r3
 8004496:	401a      	ands	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e06d      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a30      	ldr	r2, [pc, #192]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004512:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a20      	ldr	r2, [pc, #128]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d022      	beq.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454a:	d01d      	beq.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1c      	ldr	r2, [pc, #112]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d10c      	bne.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800458e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	4313      	orrs	r3, r2
 8004598:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40010400 	.word	0x40010400
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40001800 	.word	0x40001800

080045dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e065      	b.n	80046c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a16      	ldr	r2, [pc, #88]	; (80046d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d115      	bne.n	80046b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	051b      	lsls	r3, r3, #20
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40010400 	.word	0x40010400

080046d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e040      	b.n	80047a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fc fe5c 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2224      	movs	r2, #36	; 0x24
 8004740:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f82c 	bl	80047b0 <UART_SetConfig>
 8004758:	4603      	mov	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e022      	b.n	80047a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa84 	bl	8004c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800477e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800478e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fb0b 	bl	8004dbc <UART_CheckIdleState>
 80047a6:	4603      	mov	r3, r0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4ba6      	ldr	r3, [pc, #664]	; (8004a74 <UART_SetConfig+0x2c4>)
 80047dc:	4013      	ands	r3, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	6979      	ldr	r1, [r7, #20]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	430a      	orrs	r2, r1
 8004820:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a94      	ldr	r2, [pc, #592]	; (8004a78 <UART_SetConfig+0x2c8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d120      	bne.n	800486e <UART_SetConfig+0xbe>
 800482c:	4b93      	ldr	r3, [pc, #588]	; (8004a7c <UART_SetConfig+0x2cc>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b03      	cmp	r3, #3
 8004838:	d816      	bhi.n	8004868 <UART_SetConfig+0xb8>
 800483a:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <UART_SetConfig+0x90>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004851 	.word	0x08004851
 8004844:	0800485d 	.word	0x0800485d
 8004848:	08004857 	.word	0x08004857
 800484c:	08004863 	.word	0x08004863
 8004850:	2301      	movs	r3, #1
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e150      	b.n	8004af8 <UART_SetConfig+0x348>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e14d      	b.n	8004af8 <UART_SetConfig+0x348>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e14a      	b.n	8004af8 <UART_SetConfig+0x348>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e147      	b.n	8004af8 <UART_SetConfig+0x348>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e144      	b.n	8004af8 <UART_SetConfig+0x348>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a83      	ldr	r2, [pc, #524]	; (8004a80 <UART_SetConfig+0x2d0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d132      	bne.n	80048de <UART_SetConfig+0x12e>
 8004878:	4b80      	ldr	r3, [pc, #512]	; (8004a7c <UART_SetConfig+0x2cc>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d828      	bhi.n	80048d8 <UART_SetConfig+0x128>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0xdc>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048c1 	.word	0x080048c1
 8004890:	080048d9 	.word	0x080048d9
 8004894:	080048d9 	.word	0x080048d9
 8004898:	080048d9 	.word	0x080048d9
 800489c:	080048cd 	.word	0x080048cd
 80048a0:	080048d9 	.word	0x080048d9
 80048a4:	080048d9 	.word	0x080048d9
 80048a8:	080048d9 	.word	0x080048d9
 80048ac:	080048c7 	.word	0x080048c7
 80048b0:	080048d9 	.word	0x080048d9
 80048b4:	080048d9 	.word	0x080048d9
 80048b8:	080048d9 	.word	0x080048d9
 80048bc:	080048d3 	.word	0x080048d3
 80048c0:	2300      	movs	r3, #0
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e118      	b.n	8004af8 <UART_SetConfig+0x348>
 80048c6:	2302      	movs	r3, #2
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e115      	b.n	8004af8 <UART_SetConfig+0x348>
 80048cc:	2304      	movs	r3, #4
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e112      	b.n	8004af8 <UART_SetConfig+0x348>
 80048d2:	2308      	movs	r3, #8
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e10f      	b.n	8004af8 <UART_SetConfig+0x348>
 80048d8:	2310      	movs	r3, #16
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e10c      	b.n	8004af8 <UART_SetConfig+0x348>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a68      	ldr	r2, [pc, #416]	; (8004a84 <UART_SetConfig+0x2d4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d120      	bne.n	800492a <UART_SetConfig+0x17a>
 80048e8:	4b64      	ldr	r3, [pc, #400]	; (8004a7c <UART_SetConfig+0x2cc>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048f2:	2b30      	cmp	r3, #48	; 0x30
 80048f4:	d013      	beq.n	800491e <UART_SetConfig+0x16e>
 80048f6:	2b30      	cmp	r3, #48	; 0x30
 80048f8:	d814      	bhi.n	8004924 <UART_SetConfig+0x174>
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d009      	beq.n	8004912 <UART_SetConfig+0x162>
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d810      	bhi.n	8004924 <UART_SetConfig+0x174>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <UART_SetConfig+0x15c>
 8004906:	2b10      	cmp	r3, #16
 8004908:	d006      	beq.n	8004918 <UART_SetConfig+0x168>
 800490a:	e00b      	b.n	8004924 <UART_SetConfig+0x174>
 800490c:	2300      	movs	r3, #0
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e0f2      	b.n	8004af8 <UART_SetConfig+0x348>
 8004912:	2302      	movs	r3, #2
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e0ef      	b.n	8004af8 <UART_SetConfig+0x348>
 8004918:	2304      	movs	r3, #4
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e0ec      	b.n	8004af8 <UART_SetConfig+0x348>
 800491e:	2308      	movs	r3, #8
 8004920:	77fb      	strb	r3, [r7, #31]
 8004922:	e0e9      	b.n	8004af8 <UART_SetConfig+0x348>
 8004924:	2310      	movs	r3, #16
 8004926:	77fb      	strb	r3, [r7, #31]
 8004928:	e0e6      	b.n	8004af8 <UART_SetConfig+0x348>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a56      	ldr	r2, [pc, #344]	; (8004a88 <UART_SetConfig+0x2d8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d120      	bne.n	8004976 <UART_SetConfig+0x1c6>
 8004934:	4b51      	ldr	r3, [pc, #324]	; (8004a7c <UART_SetConfig+0x2cc>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800493e:	2bc0      	cmp	r3, #192	; 0xc0
 8004940:	d013      	beq.n	800496a <UART_SetConfig+0x1ba>
 8004942:	2bc0      	cmp	r3, #192	; 0xc0
 8004944:	d814      	bhi.n	8004970 <UART_SetConfig+0x1c0>
 8004946:	2b80      	cmp	r3, #128	; 0x80
 8004948:	d009      	beq.n	800495e <UART_SetConfig+0x1ae>
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d810      	bhi.n	8004970 <UART_SetConfig+0x1c0>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <UART_SetConfig+0x1a8>
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d006      	beq.n	8004964 <UART_SetConfig+0x1b4>
 8004956:	e00b      	b.n	8004970 <UART_SetConfig+0x1c0>
 8004958:	2300      	movs	r3, #0
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e0cc      	b.n	8004af8 <UART_SetConfig+0x348>
 800495e:	2302      	movs	r3, #2
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e0c9      	b.n	8004af8 <UART_SetConfig+0x348>
 8004964:	2304      	movs	r3, #4
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e0c6      	b.n	8004af8 <UART_SetConfig+0x348>
 800496a:	2308      	movs	r3, #8
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e0c3      	b.n	8004af8 <UART_SetConfig+0x348>
 8004970:	2310      	movs	r3, #16
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e0c0      	b.n	8004af8 <UART_SetConfig+0x348>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a44      	ldr	r2, [pc, #272]	; (8004a8c <UART_SetConfig+0x2dc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d125      	bne.n	80049cc <UART_SetConfig+0x21c>
 8004980:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <UART_SetConfig+0x2cc>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800498e:	d017      	beq.n	80049c0 <UART_SetConfig+0x210>
 8004990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004994:	d817      	bhi.n	80049c6 <UART_SetConfig+0x216>
 8004996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499a:	d00b      	beq.n	80049b4 <UART_SetConfig+0x204>
 800499c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a0:	d811      	bhi.n	80049c6 <UART_SetConfig+0x216>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <UART_SetConfig+0x1fe>
 80049a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049aa:	d006      	beq.n	80049ba <UART_SetConfig+0x20a>
 80049ac:	e00b      	b.n	80049c6 <UART_SetConfig+0x216>
 80049ae:	2300      	movs	r3, #0
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e0a1      	b.n	8004af8 <UART_SetConfig+0x348>
 80049b4:	2302      	movs	r3, #2
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e09e      	b.n	8004af8 <UART_SetConfig+0x348>
 80049ba:	2304      	movs	r3, #4
 80049bc:	77fb      	strb	r3, [r7, #31]
 80049be:	e09b      	b.n	8004af8 <UART_SetConfig+0x348>
 80049c0:	2308      	movs	r3, #8
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e098      	b.n	8004af8 <UART_SetConfig+0x348>
 80049c6:	2310      	movs	r3, #16
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e095      	b.n	8004af8 <UART_SetConfig+0x348>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a2f      	ldr	r2, [pc, #188]	; (8004a90 <UART_SetConfig+0x2e0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d125      	bne.n	8004a22 <UART_SetConfig+0x272>
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <UART_SetConfig+0x2cc>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049e4:	d017      	beq.n	8004a16 <UART_SetConfig+0x266>
 80049e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ea:	d817      	bhi.n	8004a1c <UART_SetConfig+0x26c>
 80049ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f0:	d00b      	beq.n	8004a0a <UART_SetConfig+0x25a>
 80049f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f6:	d811      	bhi.n	8004a1c <UART_SetConfig+0x26c>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <UART_SetConfig+0x254>
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d006      	beq.n	8004a10 <UART_SetConfig+0x260>
 8004a02:	e00b      	b.n	8004a1c <UART_SetConfig+0x26c>
 8004a04:	2301      	movs	r3, #1
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e076      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e073      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a10:	2304      	movs	r3, #4
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e070      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a16:	2308      	movs	r3, #8
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e06d      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e06a      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <UART_SetConfig+0x2e4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d138      	bne.n	8004a9e <UART_SetConfig+0x2ee>
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <UART_SetConfig+0x2cc>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a3a:	d017      	beq.n	8004a6c <UART_SetConfig+0x2bc>
 8004a3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a40:	d82a      	bhi.n	8004a98 <UART_SetConfig+0x2e8>
 8004a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a46:	d00b      	beq.n	8004a60 <UART_SetConfig+0x2b0>
 8004a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4c:	d824      	bhi.n	8004a98 <UART_SetConfig+0x2e8>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <UART_SetConfig+0x2aa>
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d006      	beq.n	8004a66 <UART_SetConfig+0x2b6>
 8004a58:	e01e      	b.n	8004a98 <UART_SetConfig+0x2e8>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e04b      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a60:	2302      	movs	r3, #2
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e048      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a66:	2304      	movs	r3, #4
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e045      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e042      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a72:	bf00      	nop
 8004a74:	efff69f3 	.word	0xefff69f3
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40004400 	.word	0x40004400
 8004a84:	40004800 	.word	0x40004800
 8004a88:	40004c00 	.word	0x40004c00
 8004a8c:	40005000 	.word	0x40005000
 8004a90:	40011400 	.word	0x40011400
 8004a94:	40007800 	.word	0x40007800
 8004a98:	2310      	movs	r3, #16
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e02c      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a72      	ldr	r2, [pc, #456]	; (8004c6c <UART_SetConfig+0x4bc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d125      	bne.n	8004af4 <UART_SetConfig+0x344>
 8004aa8:	4b71      	ldr	r3, [pc, #452]	; (8004c70 <UART_SetConfig+0x4c0>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ab2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ab6:	d017      	beq.n	8004ae8 <UART_SetConfig+0x338>
 8004ab8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004abc:	d817      	bhi.n	8004aee <UART_SetConfig+0x33e>
 8004abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac2:	d00b      	beq.n	8004adc <UART_SetConfig+0x32c>
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	d811      	bhi.n	8004aee <UART_SetConfig+0x33e>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <UART_SetConfig+0x326>
 8004ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad2:	d006      	beq.n	8004ae2 <UART_SetConfig+0x332>
 8004ad4:	e00b      	b.n	8004aee <UART_SetConfig+0x33e>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e00d      	b.n	8004af8 <UART_SetConfig+0x348>
 8004adc:	2302      	movs	r3, #2
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e00a      	b.n	8004af8 <UART_SetConfig+0x348>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e007      	b.n	8004af8 <UART_SetConfig+0x348>
 8004ae8:	2308      	movs	r3, #8
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e004      	b.n	8004af8 <UART_SetConfig+0x348>
 8004aee:	2310      	movs	r3, #16
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e001      	b.n	8004af8 <UART_SetConfig+0x348>
 8004af4:	2310      	movs	r3, #16
 8004af6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b00:	d15b      	bne.n	8004bba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b02:	7ffb      	ldrb	r3, [r7, #31]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d828      	bhi.n	8004b5a <UART_SetConfig+0x3aa>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <UART_SetConfig+0x360>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b35 	.word	0x08004b35
 8004b14:	08004b3d 	.word	0x08004b3d
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b5b 	.word	0x08004b5b
 8004b20:	08004b4b 	.word	0x08004b4b
 8004b24:	08004b5b 	.word	0x08004b5b
 8004b28:	08004b5b 	.word	0x08004b5b
 8004b2c:	08004b5b 	.word	0x08004b5b
 8004b30:	08004b53 	.word	0x08004b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b34:	f7fd ff74 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8004b38:	61b8      	str	r0, [r7, #24]
        break;
 8004b3a:	e013      	b.n	8004b64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7fd ff84 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8004b40:	61b8      	str	r0, [r7, #24]
        break;
 8004b42:	e00f      	b.n	8004b64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b44:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <UART_SetConfig+0x4c4>)
 8004b46:	61bb      	str	r3, [r7, #24]
        break;
 8004b48:	e00c      	b.n	8004b64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4a:	f7fd fe97 	bl	800287c <HAL_RCC_GetSysClockFreq>
 8004b4e:	61b8      	str	r0, [r7, #24]
        break;
 8004b50:	e008      	b.n	8004b64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b56:	61bb      	str	r3, [r7, #24]
        break;
 8004b58:	e004      	b.n	8004b64 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	77bb      	strb	r3, [r7, #30]
        break;
 8004b62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d074      	beq.n	8004c54 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	005a      	lsls	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	441a      	add	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b0f      	cmp	r3, #15
 8004b84:	d916      	bls.n	8004bb4 <UART_SetConfig+0x404>
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8c:	d212      	bcs.n	8004bb4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f023 030f 	bic.w	r3, r3, #15
 8004b96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	89fb      	ldrh	r3, [r7, #14]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	89fa      	ldrh	r2, [r7, #14]
 8004bb0:	60da      	str	r2, [r3, #12]
 8004bb2:	e04f      	b.n	8004c54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	77bb      	strb	r3, [r7, #30]
 8004bb8:	e04c      	b.n	8004c54 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bba:	7ffb      	ldrb	r3, [r7, #31]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d828      	bhi.n	8004c12 <UART_SetConfig+0x462>
 8004bc0:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <UART_SetConfig+0x418>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004bf5 	.word	0x08004bf5
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004c13 	.word	0x08004c13
 8004bd8:	08004c03 	.word	0x08004c03
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004c13 	.word	0x08004c13
 8004be4:	08004c13 	.word	0x08004c13
 8004be8:	08004c0b 	.word	0x08004c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fd ff18 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	61b8      	str	r0, [r7, #24]
        break;
 8004bf2:	e013      	b.n	8004c1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf4:	f7fd ff28 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8004bf8:	61b8      	str	r0, [r7, #24]
        break;
 8004bfa:	e00f      	b.n	8004c1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <UART_SetConfig+0x4c4>)
 8004bfe:	61bb      	str	r3, [r7, #24]
        break;
 8004c00:	e00c      	b.n	8004c1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c02:	f7fd fe3b 	bl	800287c <HAL_RCC_GetSysClockFreq>
 8004c06:	61b8      	str	r0, [r7, #24]
        break;
 8004c08:	e008      	b.n	8004c1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c0e:	61bb      	str	r3, [r7, #24]
        break;
 8004c10:	e004      	b.n	8004c1c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	77bb      	strb	r3, [r7, #30]
        break;
 8004c1a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d018      	beq.n	8004c54 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	085a      	lsrs	r2, r3, #1
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	441a      	add	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b0f      	cmp	r3, #15
 8004c3a:	d909      	bls.n	8004c50 <UART_SetConfig+0x4a0>
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c42:	d205      	bcs.n	8004c50 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	e001      	b.n	8004c54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c60:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3720      	adds	r7, #32
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40007c00 	.word	0x40007c00
 8004c70:	40023800 	.word	0x40023800
 8004c74:	00f42400 	.word	0x00f42400

08004c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d76:	d10a      	bne.n	8004d8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dcc:	f7fc fbea 	bl	80015a4 <HAL_GetTick>
 8004dd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d10e      	bne.n	8004dfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f81b 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e011      	b.n	8004e22 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b09c      	sub	sp, #112	; 0x70
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3a:	e0a7      	b.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	f000 80a3 	beq.w	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e46:	f7fc fbad 	bl	80015a4 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d302      	bcc.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d13f      	bne.n	8004edc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e70:	667b      	str	r3, [r7, #100]	; 0x64
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e6      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eae:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e068      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d050      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef8:	d148      	bne.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
 8004f24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	613b      	str	r3, [r7, #16]
   return(result);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3308      	adds	r3, #8
 8004f54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f56:	623a      	str	r2, [r7, #32]
 8004f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	69f9      	ldr	r1, [r7, #28]
 8004f5c:	6a3a      	ldr	r2, [r7, #32]
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e5      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e010      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	f43f af48 	beq.w	8004e3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3770      	adds	r7, #112	; 0x70
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <__libc_init_array>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4d0d      	ldr	r5, [pc, #52]	; (8004ff0 <__libc_init_array+0x38>)
 8004fbc:	4c0d      	ldr	r4, [pc, #52]	; (8004ff4 <__libc_init_array+0x3c>)
 8004fbe:	1b64      	subs	r4, r4, r5
 8004fc0:	10a4      	asrs	r4, r4, #2
 8004fc2:	2600      	movs	r6, #0
 8004fc4:	42a6      	cmp	r6, r4
 8004fc6:	d109      	bne.n	8004fdc <__libc_init_array+0x24>
 8004fc8:	4d0b      	ldr	r5, [pc, #44]	; (8004ff8 <__libc_init_array+0x40>)
 8004fca:	4c0c      	ldr	r4, [pc, #48]	; (8004ffc <__libc_init_array+0x44>)
 8004fcc:	f000 f820 	bl	8005010 <_init>
 8004fd0:	1b64      	subs	r4, r4, r5
 8004fd2:	10a4      	asrs	r4, r4, #2
 8004fd4:	2600      	movs	r6, #0
 8004fd6:	42a6      	cmp	r6, r4
 8004fd8:	d105      	bne.n	8004fe6 <__libc_init_array+0x2e>
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe0:	4798      	blx	r3
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7ee      	b.n	8004fc4 <__libc_init_array+0xc>
 8004fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fea:	4798      	blx	r3
 8004fec:	3601      	adds	r6, #1
 8004fee:	e7f2      	b.n	8004fd6 <__libc_init_array+0x1e>
 8004ff0:	08005048 	.word	0x08005048
 8004ff4:	08005048 	.word	0x08005048
 8004ff8:	08005048 	.word	0x08005048
 8004ffc:	0800504c 	.word	0x0800504c

08005000 <memset>:
 8005000:	4402      	add	r2, r0
 8005002:	4603      	mov	r3, r0
 8005004:	4293      	cmp	r3, r2
 8005006:	d100      	bne.n	800500a <memset+0xa>
 8005008:	4770      	bx	lr
 800500a:	f803 1b01 	strb.w	r1, [r3], #1
 800500e:	e7f9      	b.n	8005004 <memset+0x4>

08005010 <_init>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	bf00      	nop
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr

0800501c <_fini>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	bf00      	nop
 8005020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005022:	bc08      	pop	{r3}
 8005024:	469e      	mov	lr, r3
 8005026:	4770      	bx	lr
