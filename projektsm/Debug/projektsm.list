
projektsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b80c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b9e0  0800b9e0  0001b9e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bed4  0800bed4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bed4  0800bed4  0001bed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bedc  0800bedc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bedc  0800bedc  0001bedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bee0  0800bee0  0001bee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001e4  0800c0c8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800c0c8  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013261  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028de  00000000  00000000  00033475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00035d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00036cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028244  00000000  00000000  00037b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141c7  00000000  00000000  0005fd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f37a9  00000000  00000000  00073f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001676c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056fc  00000000  00000000  00167714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b9c4 	.word	0x0800b9c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800b9c4 	.word	0x0800b9c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <Motor_INIT>:
 *  Created on: Feb 8, 2023
 *      Author: tomas
 */
#include "DC_Motor.h"

void Motor_INIT(struct Motor* motor, TIM_HandleTypeDef* TIMER, uint32_t PWM_CHANNEL, GPIO_TypeDef* DIR1_PORT, GPIO_TypeDef* DIR2_PORT, uint16_t DIR1_PIN, uint16_t DIR2_PIN){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	motor->DUTY = 0.0f;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
	motor->TIMER = TIMER;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	601a      	str	r2, [r3, #0]
	motor->PWM_CHANNEL = PWM_CHANNEL;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	605a      	str	r2, [r3, #4]
	motor->DIR1_PORT = DIR1_PORT;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	609a      	str	r2, [r3, #8]
	motor->DIR2_PORT = DIR2_PORT;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	60da      	str	r2, [r3, #12]
	motor->DIR1_PIN = DIR1_PIN;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	8bba      	ldrh	r2, [r7, #28]
 800106a:	821a      	strh	r2, [r3, #16]
	motor->DIR2_PIN = DIR2_PIN;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8c3a      	ldrh	r2, [r7, #32]
 8001070:	825a      	strh	r2, [r3, #18]

	Motor_STOP(motor);
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 f804 	bl	8001080 <Motor_STOP>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <Motor_STOP>:
		Motor_STOP(motor);
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
	}
}

void Motor_STOP(struct Motor* motor){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 0);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6898      	ldr	r0, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	8a1b      	ldrh	r3, [r3, #16]
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	f001 fe12 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 0);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68d8      	ldr	r0, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	8a5b      	ldrh	r3, [r3, #18]
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	f001 fe0a 	bl	8002cbc <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d105      	bne.n	80010bc <Motor_STOP+0x3c>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010ba:	e02c      	b.n	8001116 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d105      	bne.n	80010d0 <Motor_STOP+0x50>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010ce:	e022      	b.n	8001116 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d105      	bne.n	80010e4 <Motor_STOP+0x64>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80010e2:	e018      	b.n	8001116 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b0c      	cmp	r3, #12
 80010ea:	d105      	bne.n	80010f8 <Motor_STOP+0x78>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010f6:	e00e      	b.n	8001116 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b10      	cmp	r3, #16
 80010fe:	d105      	bne.n	800110c <Motor_STOP+0x8c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	6593      	str	r3, [r2, #88]	; 0x58
}
 800110a:	e004      	b.n	8001116 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2300      	movs	r3, #0
 8001114:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <control_INIT>:
 *      Author: tomas
 */

#include "control.h"

void control_INIT(struct Controller* controller, float MAX_SIGNAL, float MIN_SIGNAL, float MAX_ERROR, float MIN_ERROR){
 800111e:	b480      	push	{r7}
 8001120:	b087      	sub	sp, #28
 8001122:	af00      	add	r7, sp, #0
 8001124:	6178      	str	r0, [r7, #20]
 8001126:	ed87 0a04 	vstr	s0, [r7, #16]
 800112a:	edc7 0a03 	vstr	s1, [r7, #12]
 800112e:	ed87 1a02 	vstr	s2, [r7, #8]
 8001132:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->MAX_SIGNAL = MAX_SIGNAL;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	601a      	str	r2, [r3, #0]
	controller->MIN_SIGNAL = MIN_SIGNAL;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
	controller->MAX_ERROR = MAX_ERROR;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	609a      	str	r2, [r3, #8]
	controller->MIN_ERROR = MIN_ERROR;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	60da      	str	r2, [r3, #12]
	controller->prev_error = 0;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
	controller->prev_distance = 0;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
	controller->current_velocity = 0;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
	controller->start = 0;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2200      	movs	r2, #0
 800116a:	771a      	strb	r2, [r3, #28]


}
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <control_GET_SIGNAL>:

float control_GET_SIGNAL(struct Controller* controller, float y, float y_ref){
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	ed87 0a02 	vstr	s0, [r7, #8]
 8001184:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = y_ref - y;
 8001188:	ed97 7a01 	vldr	s14, [r7, #4]
 800118c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001194:	edc7 7a05 	vstr	s15, [r7, #20]
	float duty = error/5.0 * 100;
 8001198:	6978      	ldr	r0, [r7, #20]
 800119a:	f7ff f9f5 	bl	8000588 <__aeabi_f2d>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b61      	ldr	r3, [pc, #388]	; (8001328 <control_GET_SIGNAL+0x1b0>)
 80011a4:	f7ff fb72 	bl	800088c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b5d      	ldr	r3, [pc, #372]	; (800132c <control_GET_SIGNAL+0x1b4>)
 80011b6:	f7ff fa3f 	bl	8000638 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fd31 	bl	8000c28 <__aeabi_d2f>
 80011c6:	4603      	mov	r3, r0
 80011c8:	613b      	str	r3, [r7, #16]
	if(abs(error) <= controller->MIN_ERROR){
 80011ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d2:	ee17 3a90 	vmov	r3, s15
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bfb8      	it	lt
 80011da:	425b      	neglt	r3, r3
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80011ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d805      	bhi.n	8001200 <control_GET_SIGNAL+0x88>
		controller->start = 0;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	771a      	strb	r2, [r3, #28]
		return 0;
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e08b      	b.n	8001318 <control_GET_SIGNAL+0x1a0>
	}
	else if(abs(error) > controller->MAX_ERROR && error>0) {
 8001200:	edd7 7a05 	vldr	s15, [r7, #20]
 8001204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001208:	ee17 3a90 	vmov	r3, s15
 800120c:	2b00      	cmp	r3, #0
 800120e:	bfb8      	it	lt
 8001210:	425b      	neglt	r3, r3
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	dd0b      	ble.n	8001242 <control_GET_SIGNAL+0xca>
 800122a:	edd7 7a05 	vldr	s15, [r7, #20]
 800122e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	dd04      	ble.n	8001242 <control_GET_SIGNAL+0xca>
		controller->start = 1;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2201      	movs	r2, #1
 800123c:	771a      	strb	r2, [r3, #28]
		return -100.0f;
 800123e:	4b3c      	ldr	r3, [pc, #240]	; (8001330 <control_GET_SIGNAL+0x1b8>)
 8001240:	e06a      	b.n	8001318 <control_GET_SIGNAL+0x1a0>
	}
	else if(abs(error) > controller->MAX_ERROR && error<0){
 8001242:	edd7 7a05 	vldr	s15, [r7, #20]
 8001246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124a:	ee17 3a90 	vmov	r3, s15
 800124e:	2b00      	cmp	r3, #0
 8001250:	bfb8      	it	lt
 8001252:	425b      	neglt	r3, r3
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	dd0b      	ble.n	8001284 <control_GET_SIGNAL+0x10c>
 800126c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001270:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	d504      	bpl.n	8001284 <control_GET_SIGNAL+0x10c>
		controller->start = 1;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2201      	movs	r2, #1
 800127e:	771a      	strb	r2, [r3, #28]
		return 100.0f;
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <control_GET_SIGNAL+0x1bc>)
 8001282:	e049      	b.n	8001318 <control_GET_SIGNAL+0x1a0>
	}

	else if(controller->start == 1){
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	7f1b      	ldrb	r3, [r3, #28]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d033      	beq.n	80012f4 <control_GET_SIGNAL+0x17c>
		if(abs(duty) <= 94 && error<0) return 94.0f;
 800128c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001294:	ee17 3a90 	vmov	r3, s15
 8001298:	f113 0f5e 	cmn.w	r3, #94	; 0x5e
 800129c:	db10      	blt.n	80012c0 <control_GET_SIGNAL+0x148>
 800129e:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a6:	ee17 3a90 	vmov	r3, s15
 80012aa:	2b5e      	cmp	r3, #94	; 0x5e
 80012ac:	dc08      	bgt.n	80012c0 <control_GET_SIGNAL+0x148>
 80012ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d501      	bpl.n	80012c0 <control_GET_SIGNAL+0x148>
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <control_GET_SIGNAL+0x1c0>)
 80012be:	e02b      	b.n	8001318 <control_GET_SIGNAL+0x1a0>
		else if(abs(duty) <= 94 && error>0) return -94.0f;
 80012c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c8:	ee17 3a90 	vmov	r3, s15
 80012cc:	f113 0f5e 	cmn.w	r3, #94	; 0x5e
 80012d0:	db21      	blt.n	8001316 <control_GET_SIGNAL+0x19e>
 80012d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	2b5e      	cmp	r3, #94	; 0x5e
 80012e0:	dc19      	bgt.n	8001316 <control_GET_SIGNAL+0x19e>
 80012e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	dd12      	ble.n	8001316 <control_GET_SIGNAL+0x19e>
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <control_GET_SIGNAL+0x1c4>)
 80012f2:	e011      	b.n	8001318 <control_GET_SIGNAL+0x1a0>
	}
	else{
		if(error>0){
 80012f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	dd04      	ble.n	800130c <control_GET_SIGNAL+0x194>
			controller->start = 1;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2201      	movs	r2, #1
 8001306:	771a      	strb	r2, [r3, #28]
			return	 -100.0f;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <control_GET_SIGNAL+0x1b8>)
 800130a:	e005      	b.n	8001318 <control_GET_SIGNAL+0x1a0>
		}
		else{
			controller->start = 1;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2201      	movs	r2, #1
 8001310:	771a      	strb	r2, [r3, #28]
			return 100.0f;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <control_GET_SIGNAL+0x1bc>)
 8001314:	e000      	b.n	8001318 <control_GET_SIGNAL+0x1a0>
		}
	}
	return duty;
 8001316:	693b      	ldr	r3, [r7, #16]
}
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eeb0 0a67 	vmov.f32	s0, s15
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40140000 	.word	0x40140000
 800132c:	40590000 	.word	0x40590000
 8001330:	c2c80000 	.word	0xc2c80000
 8001334:	42c80000 	.word	0x42c80000
 8001338:	42bc0000 	.word	0x42bc0000
 800133c:	c2bc0000 	.word	0xc2bc0000

08001340 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	; 0x30
 8001344:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001356:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a67      	ldr	r2, [pc, #412]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 800135c:	f043 0310 	orr.w	r3, r3, #16
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b65      	ldr	r3, [pc, #404]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a61      	ldr	r2, [pc, #388]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001386:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a5b      	ldr	r2, [pc, #364]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 800138c:	f043 0320 	orr.w	r3, r3, #32
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0320 	and.w	r3, r3, #32
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b50      	ldr	r3, [pc, #320]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a49      	ldr	r2, [pc, #292]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a43      	ldr	r2, [pc, #268]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <MX_GPIO_Init+0x1b8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D7_Pin|LCD_E_Pin|LCD_D6_Pin|LCD_D5_Pin
 80013fe:	2200      	movs	r2, #0
 8001400:	217c      	movs	r1, #124	; 0x7c
 8001402:	483e      	ldr	r0, [pc, #248]	; (80014fc <MX_GPIO_Init+0x1bc>)
 8001404:	f001 fc5a 	bl	8002cbc <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800140e:	483c      	ldr	r0, [pc, #240]	; (8001500 <MX_GPIO_Init+0x1c0>)
 8001410:	f001 fc54 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3_Pin|GPIO_PIN_4_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	21c0      	movs	r1, #192	; 0xc0
 8001418:	483a      	ldr	r0, [pc, #232]	; (8001504 <MX_GPIO_Init+0x1c4>)
 800141a:	f001 fc4f 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2106      	movs	r1, #6
 8001422:	4839      	ldr	r0, [pc, #228]	; (8001508 <MX_GPIO_Init+0x1c8>)
 8001424:	f001 fc4a 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1_Pin|GPIO_PIN_2_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800142e:	4837      	ldr	r0, [pc, #220]	; (800150c <MX_GPIO_Init+0x1cc>)
 8001430:	f001 fc44 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_E_Pin|LCD_D6_Pin|LCD_D5_Pin
 8001434:	237c      	movs	r3, #124	; 0x7c
 8001436:	61fb      	str	r3, [r7, #28]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	482c      	ldr	r0, [pc, #176]	; (80014fc <MX_GPIO_Init+0x1bc>)
 800144c:	f001 fa72 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8001450:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4825      	ldr	r0, [pc, #148]	; (8001500 <MX_GPIO_Init+0x1c0>)
 800146a:	f001 fa63 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 800146e:	2310      	movs	r3, #16
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001472:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4820      	ldr	r0, [pc, #128]	; (8001504 <MX_GPIO_Init+0x1c4>)
 8001484:	f001 fa56 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3_Pin|GPIO_PIN_4_Pin;
 8001488:	23c0      	movs	r3, #192	; 0xc0
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4819      	ldr	r0, [pc, #100]	; (8001504 <MX_GPIO_Init+0x1c4>)
 80014a0:	f001 fa48 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin;
 80014a4:	2306      	movs	r3, #6
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	4813      	ldr	r0, [pc, #76]	; (8001508 <MX_GPIO_Init+0x1c8>)
 80014bc:	f001 fa3a 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1_Pin|GPIO_PIN_2_Pin;
 80014c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <MX_GPIO_Init+0x1cc>)
 80014da:	f001 fa2b 	bl	8002934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	210f      	movs	r1, #15
 80014e2:	200a      	movs	r0, #10
 80014e4:	f001 f95d 	bl	80027a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014e8:	200a      	movs	r0, #10
 80014ea:	f001 f976 	bl	80027da <HAL_NVIC_EnableIRQ>

}
 80014ee:	bf00      	nop
 80014f0:	3730      	adds	r7, #48	; 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40021000 	.word	0x40021000
 8001500:	40021400 	.word	0x40021400
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400
 800150c:	40020c00 	.word	0x40020c00

08001510 <LCD_Init>:
 */


#include "lcd.h"

void LCD_Init(void){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	//4 bit init
	// 4 bit initialisation
	    HAL_Delay(50);  // wait for >40ms
 8001514:	2032      	movs	r0, #50	; 0x32
 8001516:	f001 f845 	bl	80025a4 <HAL_Delay>
	    LCD_Send_cmd (0x30);
 800151a:	2030      	movs	r0, #48	; 0x30
 800151c:	f000 f880 	bl	8001620 <LCD_Send_cmd>
	    HAL_Delay(5);  // wait for >4.1ms
 8001520:	2005      	movs	r0, #5
 8001522:	f001 f83f 	bl	80025a4 <HAL_Delay>
	    LCD_Send_cmd (0x30);
 8001526:	2030      	movs	r0, #48	; 0x30
 8001528:	f000 f87a 	bl	8001620 <LCD_Send_cmd>
	    HAL_Delay(1);  // wait for >100us
 800152c:	2001      	movs	r0, #1
 800152e:	f001 f839 	bl	80025a4 <HAL_Delay>
	    LCD_Send_cmd (0x30);
 8001532:	2030      	movs	r0, #48	; 0x30
 8001534:	f000 f874 	bl	8001620 <LCD_Send_cmd>
	    HAL_Delay(10);
 8001538:	200a      	movs	r0, #10
 800153a:	f001 f833 	bl	80025a4 <HAL_Delay>
	    LCD_Send_cmd (0x20);  // 4bit mode
 800153e:	2020      	movs	r0, #32
 8001540:	f000 f86e 	bl	8001620 <LCD_Send_cmd>
	    HAL_Delay(10);
 8001544:	200a      	movs	r0, #10
 8001546:	f001 f82d 	bl	80025a4 <HAL_Delay>

	  // dislay initialisation
	    LCD_Send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800154a:	2028      	movs	r0, #40	; 0x28
 800154c:	f000 f868 	bl	8001620 <LCD_Send_cmd>
	    HAL_Delay(1);
 8001550:	2001      	movs	r0, #1
 8001552:	f001 f827 	bl	80025a4 <HAL_Delay>
	    LCD_Send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001556:	2008      	movs	r0, #8
 8001558:	f000 f862 	bl	8001620 <LCD_Send_cmd>
	    HAL_Delay(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f001 f821 	bl	80025a4 <HAL_Delay>
	    LCD_Send_cmd (0x01);  // clear display
 8001562:	2001      	movs	r0, #1
 8001564:	f000 f85c 	bl	8001620 <LCD_Send_cmd>
	    HAL_Delay(1);
 8001568:	2001      	movs	r0, #1
 800156a:	f001 f81b 	bl	80025a4 <HAL_Delay>
	    HAL_Delay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f001 f818 	bl	80025a4 <HAL_Delay>
	    LCD_Send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001574:	2006      	movs	r0, #6
 8001576:	f000 f853 	bl	8001620 <LCD_Send_cmd>
	    HAL_Delay(1);
 800157a:	2001      	movs	r0, #1
 800157c:	f001 f812 	bl	80025a4 <HAL_Delay>
	    LCD_Send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001580:	200c      	movs	r0, #12
 8001582:	f000 f84d 	bl	8001620 <LCD_Send_cmd>

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <send_to_lcd>:

void send_to_lcd (char data, int rs){
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, rs); //1 for data, 0 for command
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	481d      	ldr	r0, [pc, #116]	; (8001618 <send_to_lcd+0x8c>)
 80015a2:	f001 fb8b 	bl	8002cbc <HAL_GPIO_WritePin>

	//Writing data to each pin
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((data>>3)&0x01));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	08db      	lsrs	r3, r3, #3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	2104      	movs	r1, #4
 80015b6:	4819      	ldr	r0, [pc, #100]	; (800161c <send_to_lcd+0x90>)
 80015b8:	f001 fb80 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((data>>2)&0x01));
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	2110      	movs	r1, #16
 80015cc:	4813      	ldr	r0, [pc, #76]	; (800161c <send_to_lcd+0x90>)
 80015ce:	f001 fb75 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((data>>1)&0x01));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	2120      	movs	r1, #32
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <send_to_lcd+0x90>)
 80015e4:	f001 fb6a 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((data>>0)&0x01));
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <send_to_lcd+0x90>)
 80015f6:	f001 fb61 	bl	8002cbc <HAL_GPIO_WritePin>

	//Toggle enable pin to send the data
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, 1);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2108      	movs	r1, #8
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <send_to_lcd+0x90>)
 8001600:	f001 fb5c 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2108      	movs	r1, #8
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <send_to_lcd+0x90>)
 800160a:	f001 fb57 	bl	8002cbc <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021400 	.word	0x40021400
 800161c:	40021000 	.word	0x40021000

08001620 <LCD_Send_cmd>:
void LCD_Send_cmd (char cmd){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	char data_to_send;

	data_to_send = ((cmd>>4)&0x0f);
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(data_to_send, 0);
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ffa9 	bl	800158c <send_to_lcd>

	data_to_send = ((cmd)&0x0f);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(data_to_send, 0);
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ffa0 	bl	800158c <send_to_lcd>

}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <LCD_Send_data>:

void LCD_Send_data (char data){
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	char data_to_send;
	data_to_send = ((data>>4)&0x0f);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(data_to_send, 1);
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2101      	movs	r1, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff8f 	bl	800158c <send_to_lcd>

	data_to_send = ((data)&0x0f);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(data_to_send, 1);
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2101      	movs	r1, #1
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff86 	bl	800158c <send_to_lcd>
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <LCD_Put_Cursor>:

void LCD_Put_Cursor(int row, int column){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	switch(row){
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <LCD_Put_Cursor+0x18>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d005      	beq.n	80016aa <LCD_Put_Cursor+0x22>
 800169e:	e009      	b.n	80016b4 <LCD_Put_Cursor+0x2c>
		case 0:
			column |= 0x80;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a6:	603b      	str	r3, [r7, #0]
			break;
 80016a8:	e004      	b.n	80016b4 <LCD_Put_Cursor+0x2c>
		case 1:
			column |= 0xC0;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016b0:	603b      	str	r3, [r7, #0]
			break;
 80016b2:	bf00      	nop
	}

	LCD_Send_cmd(column);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ffb1 	bl	8001620 <LCD_Send_cmd>


}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == ECHO_Pin){
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	2b10      	cmp	r3, #16
 80016d6:	d13b      	bne.n	8001750 <HAL_GPIO_EXTI_Callback+0x88>
		_Bool state = HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin);
 80016d8:	2110      	movs	r1, #16
 80016da:	481f      	ldr	r0, [pc, #124]	; (8001758 <HAL_GPIO_EXTI_Callback+0x90>)
 80016dc:	f001 fad6 	bl	8002c8c <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	bf14      	ite	ne
 80016e6:	2301      	movne	r3, #1
 80016e8:	2300      	moveq	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
		if(state == 1){
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_EXTI_Callback+0x3a>
			__HAL_TIM_SET_COUNTER(&htim5, 0);
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_GPIO_EXTI_Callback+0x94>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim5);
 80016fa:	4818      	ldr	r0, [pc, #96]	; (800175c <HAL_GPIO_EXTI_Callback+0x94>)
 80016fc:	f002 fbf2 	bl	8003ee4 <HAL_TIM_Base_Start>

			//LCD_Put_Cursor(0,0);
			//LCD_Send_string(lcdbuffer);
		}
	}
}
 8001700:	e026      	b.n	8001750 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_Base_Stop(&htim5);
 8001702:	4816      	ldr	r0, [pc, #88]	; (800175c <HAL_GPIO_EXTI_Callback+0x94>)
 8001704:	f002 fc5e 	bl	8003fc4 <HAL_TIM_Base_Stop>
			x = __HAL_TIM_GET_COUNTER(&htim5);
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_GPIO_EXTI_Callback+0x94>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <HAL_GPIO_EXTI_Callback+0x98>)
 8001710:	6013      	str	r3, [r2, #0]
			if(x/58.0f < 1000) value = x/58.0f;
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <HAL_GPIO_EXTI_Callback+0x98>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800171e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001764 <HAL_GPIO_EXTI_Callback+0x9c>
 8001722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001726:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001768 <HAL_GPIO_EXTI_Callback+0xa0>
 800172a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	d400      	bmi.n	8001736 <HAL_GPIO_EXTI_Callback+0x6e>
}
 8001734:	e00c      	b.n	8001750 <HAL_GPIO_EXTI_Callback+0x88>
			if(x/58.0f < 1000) value = x/58.0f;
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_GPIO_EXTI_Callback+0x98>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001742:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001764 <HAL_GPIO_EXTI_Callback+0x9c>
 8001746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_GPIO_EXTI_Callback+0xa4>)
 800174c:	edc3 7a00 	vstr	s15, [r3]
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020000 	.word	0x40020000
 800175c:	200003c0 	.word	0x200003c0
 8001760:	2000023c 	.word	0x2000023c
 8001764:	42680000 	.word	0x42680000
 8001768:	447a0000 	.word	0x447a0000
 800176c:	20000200 	.word	0x20000200

08001770 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_UART_RxCpltCallback+0x34>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d108      	bne.n	8001792 <HAL_UART_RxCpltCallback+0x22>
		if(rx_buffer[0] == 'R'){
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_UART_RxCpltCallback+0x38>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b52      	cmp	r3, #82	; 0x52
 8001786:	d104      	bne.n	8001792 <HAL_UART_RxCpltCallback+0x22>
			sscanf((char*)&rx_buffer[1], "%f", &jebac_usart);
 8001788:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_UART_RxCpltCallback+0x3c>)
 800178a:	4909      	ldr	r1, [pc, #36]	; (80017b0 <HAL_UART_RxCpltCallback+0x40>)
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <HAL_UART_RxCpltCallback+0x44>)
 800178e:	f005 ff11 	bl	80075b4 <siscanf>
		}
	}
	HAL_UART_Receive_IT(&huart3, rx_buffer, 6);
 8001792:	2206      	movs	r2, #6
 8001794:	4904      	ldr	r1, [pc, #16]	; (80017a8 <HAL_UART_RxCpltCallback+0x38>)
 8001796:	4803      	ldr	r0, [pc, #12]	; (80017a4 <HAL_UART_RxCpltCallback+0x34>)
 8001798:	f003 fdfc 	bl	8005394 <HAL_UART_Receive_IT>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000458 	.word	0x20000458
 80017a8:	20000264 	.word	0x20000264
 80017ac:	20000288 	.word	0x20000288
 80017b0:	0800b9e0 	.word	0x0800b9e0
 80017b4:	20000265 	.word	0x20000265

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017be:	f000 fe94 	bl	80024ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c2:	f000 f883 	bl	80018cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c6:	f7ff fdbb 	bl	8001340 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017ca:	f000 faf9 	bl	8001dc0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80017ce:	f000 fa4b 	bl	8001c68 <MX_TIM1_Init>
  MX_TIM3_Init();
 80017d2:	f000 fb6b 	bl	8001eac <MX_TIM3_Init>
  MX_TIM5_Init();
 80017d6:	f000 fc05 	bl	8001fe4 <MX_TIM5_Init>
  MX_TIM4_Init();
 80017da:	f000 fbb5 	bl	8001f48 <MX_TIM4_Init>
  MX_TIM8_Init();
 80017de:	f000 fc4f 	bl	8002080 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80017e2:	f000 fd9d 	bl	8002320 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017e6:	2100      	movs	r1, #0
 80017e8:	4829      	ldr	r0, [pc, #164]	; (8001890 <main+0xd8>)
 80017ea:	f002 fc73 	bl	80040d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017ee:	2100      	movs	r1, #0
 80017f0:	4828      	ldr	r0, [pc, #160]	; (8001894 <main+0xdc>)
 80017f2:	f002 fc6f 	bl	80040d4 <HAL_TIM_PWM_Start>
  LCD_Init();
 80017f6:	f7ff fe8b 	bl	8001510 <LCD_Init>

  Motor_INIT(&motor, &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR2_GPIO_Port, DIR1_Pin, DIR2_Pin);
 80017fa:	2304      	movs	r3, #4
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	2302      	movs	r3, #2
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <main+0xe0>)
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <main+0xe0>)
 8001808:	2200      	movs	r2, #0
 800180a:	4922      	ldr	r1, [pc, #136]	; (8001894 <main+0xdc>)
 800180c:	4823      	ldr	r0, [pc, #140]	; (800189c <main+0xe4>)
 800180e:	f7ff fc13 	bl	8001038 <Motor_INIT>
  control_INIT(&controller, 100.0f, 60.0f, 5.0f, 0.5f);
 8001812:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8001816:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 800181a:	eddf 0a21 	vldr	s1, [pc, #132]	; 80018a0 <main+0xe8>
 800181e:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80018a4 <main+0xec>
 8001822:	4821      	ldr	r0, [pc, #132]	; (80018a8 <main+0xf0>)
 8001824:	f7ff fc7b 	bl	800111e <control_INIT>
  LCD_Put_Cursor(0,0);
 8001828:	2100      	movs	r1, #0
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff ff2c 	bl	8001688 <LCD_Put_Cursor>
  LCD_Send_data('a');
 8001830:	2061      	movs	r0, #97	; 0x61
 8001832:	f7ff ff0f 	bl	8001654 <LCD_Send_data>

  msg_len = sizeof("R00.0\r");
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <main+0xf4>)
 8001838:	2207      	movs	r2, #7
 800183a:	801a      	strh	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, rx_buffer, 6);
 800183c:	2206      	movs	r2, #6
 800183e:	491c      	ldr	r1, [pc, #112]	; (80018b0 <main+0xf8>)
 8001840:	481c      	ldr	r0, [pc, #112]	; (80018b4 <main+0xfc>)
 8001842:	f003 fda7 	bl	8005394 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  lmao = control_GET_SIGNAL(&controller, value, y_ref);
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <main+0x100>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <main+0x104>)
 800184e:	ed93 7a00 	vldr	s14, [r3]
 8001852:	eef0 0a47 	vmov.f32	s1, s14
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	4813      	ldr	r0, [pc, #76]	; (80018a8 <main+0xf0>)
 800185c:	f7ff fc8c 	bl	8001178 <control_GET_SIGNAL>
 8001860:	eef0 7a40 	vmov.f32	s15, s0
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <main+0x108>)
 8001866:	edc3 7a00 	vstr	s15, [r3]
	  snprintf(lcdbuffer, sizeof(lcdbuffer),"Distance: %.2f", value);
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <main+0x100>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe8a 	bl	8000588 <__aeabi_f2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	e9cd 2300 	strd	r2, r3, [sp]
 800187c:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <main+0x10c>)
 800187e:	2120      	movs	r1, #32
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <main+0x110>)
 8001882:	f005 fe43 	bl	800750c <sniprintf>
	  //status = HAL_UART_Transmit(&huart3, (uint8_t*)lcdbuffer, strlen(lcdbuffer), 10);
	  //HAL_Delay(500);

	  //Motor_MOVE(&motor, lmao);

	  HAL_Delay(50);
 8001886:	2032      	movs	r0, #50	; 0x32
 8001888:	f000 fe8c 	bl	80025a4 <HAL_Delay>
	  lmao = control_GET_SIGNAL(&controller, value, y_ref);
 800188c:	e7db      	b.n	8001846 <main+0x8e>
 800188e:	bf00      	nop
 8001890:	200002dc 	.word	0x200002dc
 8001894:	20000290 	.word	0x20000290
 8001898:	40020400 	.word	0x40020400
 800189c:	20000204 	.word	0x20000204
 80018a0:	42700000 	.word	0x42700000
 80018a4:	42c80000 	.word	0x42c80000
 80018a8:	2000021c 	.word	0x2000021c
 80018ac:	20000284 	.word	0x20000284
 80018b0:	20000264 	.word	0x20000264
 80018b4:	20000458 	.word	0x20000458
 80018b8:	20000200 	.word	0x20000200
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000240 	.word	0x20000240
 80018c4:	0800b9e4 	.word	0x0800b9e4
 80018c8:	20000244 	.word	0x20000244

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b094      	sub	sp, #80	; 0x50
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	2230      	movs	r2, #48	; 0x30
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f004 ff8e 	bl	80067fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018f0:	f001 fa16 	bl	8002d20 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <SystemClock_Config+0xc8>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	4a26      	ldr	r2, [pc, #152]	; (8001994 <SystemClock_Config+0xc8>)
 80018fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <SystemClock_Config+0xc8>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <SystemClock_Config+0xcc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001914:	4a20      	ldr	r2, [pc, #128]	; (8001998 <SystemClock_Config+0xcc>)
 8001916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <SystemClock_Config+0xcc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800192c:	2301      	movs	r3, #1
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001930:	2310      	movs	r3, #16
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001934:	2302      	movs	r3, #2
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001938:	2300      	movs	r3, #0
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800193c:	2308      	movs	r3, #8
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001940:	2348      	movs	r3, #72	; 0x48
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001944:	2302      	movs	r3, #2
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001948:	2302      	movs	r3, #2
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	4618      	mov	r0, r3
 8001952:	f001 f9f5 	bl	8002d40 <HAL_RCC_OscConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800195c:	f000 f81e 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001960:	230f      	movs	r3, #15
 8001962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001964:	2302      	movs	r3, #2
 8001966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2102      	movs	r1, #2
 800197c:	4618      	mov	r0, r3
 800197e:	f001 fc83 	bl	8003288 <HAL_RCC_ClockConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001988:	f000 f808 	bl	800199c <Error_Handler>
  }
}
 800198c:	bf00      	nop
 800198e:	3750      	adds	r7, #80	; 0x50
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <Error_Handler+0x8>
	...

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_MspInit+0x44>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <HAL_MspInit+0x44>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_MspInit+0x44>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_MspInit+0x44>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_MspInit+0x44>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_MspInit+0x44>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <NMI_Handler+0x4>

080019f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler+0x4>

08001a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3c:	f000 fd92 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 8001a48:	2010      	movs	r0, #16
 8001a4a:	f001 f951 	bl	8002cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM1_CC_IRQHandler+0x10>)
 8001a5a:	f002 fc35 	bl	80042c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000290 	.word	0x20000290

08001a68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <TIM2_IRQHandler+0x10>)
 8001a6e:	f002 fc2b 	bl	80042c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200002dc 	.word	0x200002dc

08001a7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM3_IRQHandler+0x10>)
 8001a82:	f002 fc21 	bl	80042c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000328 	.word	0x20000328

08001a90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM4_IRQHandler+0x10>)
 8001a96:	f002 fc17 	bl	80042c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000374 	.word	0x20000374

08001aa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <USART3_IRQHandler+0x10>)
 8001aaa:	f003 fcb7 	bl	800541c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000458 	.word	0x20000458

08001ab8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_kill>:

int _kill(int pid, int sig)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ad2:	f004 fe69 	bl	80067a8 <__errno>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2216      	movs	r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
	return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_exit>:

void _exit (int status)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ffe7 	bl	8001ac8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001afa:	e7fe      	b.n	8001afa <_exit+0x12>

08001afc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e00a      	b.n	8001b24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b0e:	f3af 8000 	nop.w
 8001b12:	4601      	mov	r1, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	60ba      	str	r2, [r7, #8]
 8001b1a:	b2ca      	uxtb	r2, r1
 8001b1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbf0      	blt.n	8001b0e <_read+0x12>
	}

return len;
 8001b2c:	687b      	ldr	r3, [r7, #4]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e009      	b.n	8001b5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60ba      	str	r2, [r7, #8]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dbf1      	blt.n	8001b48 <_write+0x12>
	}
	return len;
 8001b64:	687b      	ldr	r3, [r7, #4]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_close>:

int _close(int file)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
	return -1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b96:	605a      	str	r2, [r3, #4]
	return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_isatty>:

int _isatty(int file)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
	return 1;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f004 fdce 	bl	80067a8 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20050000 	.word	0x20050000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	2000028c 	.word	0x2000028c
 8001c40:	200004f8 	.word	0x200004f8

08001c44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b09a      	sub	sp, #104	; 0x68
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	615a      	str	r2, [r3, #20]
 8001c9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	222c      	movs	r2, #44	; 0x2c
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fdaa 	bl	80067fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ca8:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001caa:	4a44      	ldr	r2, [pc, #272]	; (8001dbc <MX_TIM1_Init+0x154>)
 8001cac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001cae:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cb0:	2247      	movs	r2, #71	; 0x47
 8001cb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cbc:	2263      	movs	r2, #99	; 0x63
 8001cbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cc6:	4b3c      	ldr	r3, [pc, #240]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ccc:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cd2:	4839      	ldr	r0, [pc, #228]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cd4:	f002 f8ae 	bl	8003e34 <HAL_TIM_Base_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001cde:	f7ff fe5d 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ce8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cec:	4619      	mov	r1, r3
 8001cee:	4832      	ldr	r0, [pc, #200]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001cf0:	f002 fd1e 	bl	8004730 <HAL_TIM_ConfigClockSource>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cfa:	f7ff fe4f 	bl	800199c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cfe:	482e      	ldr	r0, [pc, #184]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001d00:	f002 f987 	bl	8004012 <HAL_TIM_PWM_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d0a:	f7ff fe47 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4825      	ldr	r0, [pc, #148]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001d22:	f003 f9bf 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001d2c:	f7ff fe36 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d30:	2360      	movs	r3, #96	; 0x60
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8001d34:	2364      	movs	r3, #100	; 0x64
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d50:	2200      	movs	r2, #0
 8001d52:	4619      	mov	r1, r3
 8001d54:	4818      	ldr	r0, [pc, #96]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001d56:	f002 fbd7 	bl	8004508 <HAL_TIM_PWM_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001d60:	f7ff fe1c 	bl	800199c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	4619      	mov	r1, r3
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001d9a:	f003 fa11 	bl	80051c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001da4:	f7ff fdfa 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <MX_TIM1_Init+0x150>)
 8001daa:	f000 fa5d 	bl	8002268 <HAL_TIM_MspPostInit>

}
 8001dae:	bf00      	nop
 8001db0:	3768      	adds	r7, #104	; 0x68
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000290 	.word	0x20000290
 8001dbc:	40010000 	.word	0x40010000

08001dc0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	; 0x38
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	615a      	str	r2, [r3, #20]
 8001df0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001dfc:	2247      	movs	r2, #71	; 0x47
 8001dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e08:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e1a:	4823      	ldr	r0, [pc, #140]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e1c:	f002 f80a 	bl	8003e34 <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e26:	f7ff fdb9 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e34:	4619      	mov	r1, r3
 8001e36:	481c      	ldr	r0, [pc, #112]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e38:	f002 fc7a 	bl	8004730 <HAL_TIM_ConfigClockSource>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e42:	f7ff fdab 	bl	800199c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e46:	4818      	ldr	r0, [pc, #96]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e48:	f002 f8e3 	bl	8004012 <HAL_TIM_PWM_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e52:	f7ff fda3 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e66:	f003 f91d 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e70:	f7ff fd94 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e74:	2360      	movs	r3, #96	; 0x60
 8001e76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 8001e78:	2314      	movs	r3, #20
 8001e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e84:	463b      	mov	r3, r7
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e8c:	f002 fb3c 	bl	8004508 <HAL_TIM_PWM_ConfigChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e96:	f7ff fd81 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e9a:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <MX_TIM2_Init+0xe8>)
 8001e9c:	f000 f9e4 	bl	8002268 <HAL_TIM_MspPostInit>

}
 8001ea0:	bf00      	nop
 8001ea2:	3738      	adds	r7, #56	; 0x38
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200002dc 	.word	0x200002dc

08001eac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <MX_TIM3_Init+0x98>)
 8001ece:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ed2:	2247      	movs	r2, #71	; 0x47
 8001ed4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ef0:	4813      	ldr	r0, [pc, #76]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ef2:	f001 ff9f 	bl	8003e34 <HAL_TIM_Base_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001efc:	f7ff fd4e 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001f0e:	f002 fc0f 	bl	8004730 <HAL_TIM_ConfigClockSource>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f18:	f7ff fd40 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001f2a:	f003 f8bb 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f7ff fd32 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000328 	.word	0x20000328
 8001f44:	40000400 	.word	0x40000400

08001f48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <MX_TIM4_Init+0x94>)
 8001f68:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <MX_TIM4_Init+0x98>)
 8001f6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <MX_TIM4_Init+0x94>)
 8001f6e:	2247      	movs	r2, #71	; 0x47
 8001f70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <MX_TIM4_Init+0x94>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_TIM4_Init+0x94>)
 8001f7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <MX_TIM4_Init+0x94>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_TIM4_Init+0x94>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f8c:	4813      	ldr	r0, [pc, #76]	; (8001fdc <MX_TIM4_Init+0x94>)
 8001f8e:	f001 ff51 	bl	8003e34 <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001f98:	f7ff fd00 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <MX_TIM4_Init+0x94>)
 8001faa:	f002 fbc1 	bl	8004730 <HAL_TIM_ConfigClockSource>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001fb4:	f7ff fcf2 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_TIM4_Init+0x94>)
 8001fc6:	f003 f86d 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001fd0:	f7ff fce4 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000374 	.word	0x20000374
 8001fe0:	40000800 	.word	0x40000800

08001fe4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <MX_TIM5_Init+0x94>)
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <MX_TIM5_Init+0x98>)
 8002006:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <MX_TIM5_Init+0x94>)
 800200a:	2247      	movs	r2, #71	; 0x47
 800200c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <MX_TIM5_Init+0x94>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MX_TIM5_Init+0x94>)
 8002016:	f04f 32ff 	mov.w	r2, #4294967295
 800201a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <MX_TIM5_Init+0x94>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <MX_TIM5_Init+0x94>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <MX_TIM5_Init+0x94>)
 800202a:	f001 ff03 	bl	8003e34 <HAL_TIM_Base_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002034:	f7ff fcb2 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_TIM5_Init+0x94>)
 8002046:	f002 fb73 	bl	8004730 <HAL_TIM_ConfigClockSource>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002050:	f7ff fca4 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_TIM5_Init+0x94>)
 8002062:	f003 f81f 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800206c:	f7ff fc96 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200003c0 	.word	0x200003c0
 800207c:	40000c00 	.word	0x40000c00

08002080 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <MX_TIM8_Init+0xa0>)
 80020a0:	4a20      	ldr	r2, [pc, #128]	; (8002124 <MX_TIM8_Init+0xa4>)
 80020a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 71;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <MX_TIM8_Init+0xa0>)
 80020a6:	2247      	movs	r2, #71	; 0x47
 80020a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <MX_TIM8_Init+0xa0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <MX_TIM8_Init+0xa0>)
 80020b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <MX_TIM8_Init+0xa0>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <MX_TIM8_Init+0xa0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <MX_TIM8_Init+0xa0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020ca:	4815      	ldr	r0, [pc, #84]	; (8002120 <MX_TIM8_Init+0xa0>)
 80020cc:	f001 feb2 	bl	8003e34 <HAL_TIM_Base_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80020d6:	f7ff fc61 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	4619      	mov	r1, r3
 80020e6:	480e      	ldr	r0, [pc, #56]	; (8002120 <MX_TIM8_Init+0xa0>)
 80020e8:	f002 fb22 	bl	8004730 <HAL_TIM_ConfigClockSource>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80020f2:	f7ff fc53 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4806      	ldr	r0, [pc, #24]	; (8002120 <MX_TIM8_Init+0xa0>)
 8002108:	f002 ffcc 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002112:	f7ff fc43 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002116:	bf00      	nop
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000040c 	.word	0x2000040c
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a46      	ldr	r2, [pc, #280]	; (8002250 <HAL_TIM_Base_MspInit+0x128>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d114      	bne.n	8002164 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a45      	ldr	r2, [pc, #276]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	201b      	movs	r0, #27
 8002158:	f000 fb23 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800215c:	201b      	movs	r0, #27
 800215e:	f000 fb3c 	bl	80027da <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002162:	e070      	b.n	8002246 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d114      	bne.n	8002198 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a38      	ldr	r2, [pc, #224]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b36      	ldr	r3, [pc, #216]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	201c      	movs	r0, #28
 800218c:	f000 fb09 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002190:	201c      	movs	r0, #28
 8002192:	f000 fb22 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8002196:	e056      	b.n	8002246 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <HAL_TIM_Base_MspInit+0x130>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d114      	bne.n	80021cc <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	201d      	movs	r0, #29
 80021c0:	f000 faef 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021c4:	201d      	movs	r0, #29
 80021c6:	f000 fb08 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 80021ca:	e03c      	b.n	8002246 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM4)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_TIM_Base_MspInit+0x134>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d114      	bne.n	8002200 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021d6:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	201e      	movs	r0, #30
 80021f4:	f000 fad5 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021f8:	201e      	movs	r0, #30
 80021fa:	f000 faee 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 80021fe:	e022      	b.n	8002246 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM5)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a16      	ldr	r2, [pc, #88]	; (8002260 <HAL_TIM_Base_MspInit+0x138>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10c      	bne.n	8002224 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a11      	ldr	r2, [pc, #68]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 8002210:	f043 0308 	orr.w	r3, r3, #8
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
}
 8002222:	e010      	b.n	8002246 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM8)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_TIM_Base_MspInit+0x13c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10b      	bne.n	8002246 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	4a08      	ldr	r2, [pc, #32]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	6453      	str	r3, [r2, #68]	; 0x44
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_TIM_Base_MspInit+0x12c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
}
 8002246:	bf00      	nop
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40010000 	.word	0x40010000
 8002254:	40023800 	.word	0x40023800
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800
 8002260:	40000c00 	.word	0x40000c00
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a22      	ldr	r2, [pc, #136]	; (8002310 <HAL_TIM_MspPostInit+0xa8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d11d      	bne.n	80022c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a21      	ldr	r2, [pc, #132]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 8002290:	f043 0310 	orr.w	r3, r3, #16
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4619      	mov	r1, r3
 80022be:	4816      	ldr	r0, [pc, #88]	; (8002318 <HAL_TIM_MspPostInit+0xb0>)
 80022c0:	f000 fb38 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022c4:	e020      	b.n	8002308 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d11b      	bne.n	8002308 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6313      	str	r3, [r2, #48]	; 0x30
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_TIM_MspPostInit+0xac>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022e8:	2301      	movs	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022f8:	2301      	movs	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <HAL_TIM_MspPostInit+0xb4>)
 8002304:	f000 fb16 	bl	8002934 <HAL_GPIO_Init>
}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40010000 	.word	0x40010000
 8002314:	40023800 	.word	0x40023800
 8002318:	40021000 	.word	0x40021000
 800231c:	40020000 	.word	0x40020000

08002320 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_USART3_UART_Init+0x58>)
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <MX_USART3_UART_Init+0x5c>)
 8002328:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_USART3_UART_Init+0x58>)
 800232c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002330:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_USART3_UART_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_USART3_UART_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_USART3_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_USART3_UART_Init+0x58>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <MX_USART3_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_USART3_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <MX_USART3_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_USART3_UART_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_USART3_UART_Init+0x58>)
 8002364:	f002 ffc8 	bl	80052f8 <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800236e:	f7ff fb15 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000458 	.word	0x20000458
 800237c:	40004800 	.word	0x40004800

08002380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0ac      	sub	sp, #176	; 0xb0
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002398:	f107 0318 	add.w	r3, r7, #24
 800239c:	2284      	movs	r2, #132	; 0x84
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 fa2b 	bl	80067fc <memset>
  if(uartHandle->Instance==USART3)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a37      	ldr	r2, [pc, #220]	; (8002488 <HAL_UART_MspInit+0x108>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d166      	bne.n	800247e <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ba:	f107 0318 	add.w	r3, r7, #24
 80023be:	4618      	mov	r0, r3
 80023c0:	f001 f948 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023ca:	f7ff fae7 	bl	800199c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ce:	4b2f      	ldr	r3, [pc, #188]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a2e      	ldr	r2, [pc, #184]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a28      	ldr	r2, [pc, #160]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_UART_MspInit+0x10c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a22      	ldr	r2, [pc, #136]	; (800248c <HAL_UART_MspInit+0x10c>)
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_UART_MspInit+0x10c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002416:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800241a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002430:	2307      	movs	r3, #7
 8002432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002436:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800243a:	4619      	mov	r1, r3
 800243c:	4814      	ldr	r0, [pc, #80]	; (8002490 <HAL_UART_MspInit+0x110>)
 800243e:	f000 fa79 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002446:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002456:	2303      	movs	r3, #3
 8002458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800245c:	2307      	movs	r3, #7
 800245e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002462:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002466:	4619      	mov	r1, r3
 8002468:	480a      	ldr	r0, [pc, #40]	; (8002494 <HAL_UART_MspInit+0x114>)
 800246a:	f000 fa63 	bl	8002934 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	2027      	movs	r0, #39	; 0x27
 8002474:	f000 f995 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002478:	2027      	movs	r0, #39	; 0x27
 800247a:	f000 f9ae 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800247e:	bf00      	nop
 8002480:	37b0      	adds	r7, #176	; 0xb0
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40004800 	.word	0x40004800
 800248c:	40023800 	.word	0x40023800
 8002490:	40020400 	.word	0x40020400
 8002494:	40020c00 	.word	0x40020c00

08002498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800249e:	490e      	ldr	r1, [pc, #56]	; (80024d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024a0:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024b4:	4c0b      	ldr	r4, [pc, #44]	; (80024e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024c2:	f7ff fbbf 	bl	8001c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c6:	f004 f975 	bl	80067b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ca:	f7ff f975 	bl	80017b8 <main>
  bx  lr    
 80024ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80024dc:	0800bee4 	.word	0x0800bee4
  ldr r2, =_sbss
 80024e0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80024e4:	200004f4 	.word	0x200004f4

080024e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC_IRQHandler>

080024ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ee:	2003      	movs	r0, #3
 80024f0:	f000 f94c 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f4:	200f      	movs	r0, #15
 80024f6:	f000 f805 	bl	8002504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024fa:	f7ff fa55 	bl	80019a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_InitTick+0x54>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_InitTick+0x58>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f967 	bl	80027f6 <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d80a      	bhi.n	800254e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002538:	2200      	movs	r2, #0
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f000 f92f 	bl	80027a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <HAL_InitTick+0x5c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000004 	.word	0x20000004
 800255c:	2000000c 	.word	0x2000000c
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	2000000c 	.word	0x2000000c
 8002588:	200004e0 	.word	0x200004e0

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	200004e0 	.word	0x200004e0

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffde 	bl	800258c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2000000c 	.word	0x2000000c

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <__NVIC_SetPriorityGrouping+0x40>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002616:	4313      	orrs	r3, r2
 8002618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261a:	4a04      	ldr	r2, [pc, #16]	; (800262c <__NVIC_SetPriorityGrouping+0x40>)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	60d3      	str	r3, [r2, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00
 8002630:	05fa0000 	.word	0x05fa0000

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff3e 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff8e 	bl	80026e0 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5d 	bl	800268c <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff31 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff feb6 	bl	800258c <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d008      	beq.n	8002840 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e052      	b.n	80028e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0216 	bic.w	r2, r2, #22
 800284e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800285e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <HAL_DMA_Abort+0x62>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0208 	bic.w	r2, r2, #8
 800287e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002890:	e013      	b.n	80028ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002892:	f7ff fe7b 	bl	800258c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b05      	cmp	r3, #5
 800289e:	d90c      	bls.n	80028ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2203      	movs	r2, #3
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e015      	b.n	80028e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e4      	bne.n	8002892 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	223f      	movs	r2, #63	; 0x3f
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2280      	movs	r2, #128	; 0x80
 8002906:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e00c      	b.n	8002926 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2205      	movs	r2, #5
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	e175      	b.n	8002c40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002954:	2201      	movs	r2, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	429a      	cmp	r2, r3
 800296e:	f040 8164 	bne.w	8002c3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d005      	beq.n	800298a <HAL_GPIO_Init+0x56>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d130      	bne.n	80029ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 0201 	and.w	r2, r3, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d017      	beq.n	8002a28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d123      	bne.n	8002a7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	08da      	lsrs	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3208      	adds	r2, #8
 8002a76:	69b9      	ldr	r1, [r7, #24]
 8002a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0203 	and.w	r2, r3, #3
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80be 	beq.w	8002c3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a65      	ldr	r2, [pc, #404]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ad6:	4a61      	ldr	r2, [pc, #388]	; (8002c5c <HAL_GPIO_Init+0x328>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a58      	ldr	r2, [pc, #352]	; (8002c60 <HAL_GPIO_Init+0x32c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d037      	beq.n	8002b72 <HAL_GPIO_Init+0x23e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a57      	ldr	r2, [pc, #348]	; (8002c64 <HAL_GPIO_Init+0x330>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d031      	beq.n	8002b6e <HAL_GPIO_Init+0x23a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a56      	ldr	r2, [pc, #344]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d02b      	beq.n	8002b6a <HAL_GPIO_Init+0x236>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a55      	ldr	r2, [pc, #340]	; (8002c6c <HAL_GPIO_Init+0x338>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d025      	beq.n	8002b66 <HAL_GPIO_Init+0x232>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a54      	ldr	r2, [pc, #336]	; (8002c70 <HAL_GPIO_Init+0x33c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01f      	beq.n	8002b62 <HAL_GPIO_Init+0x22e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a53      	ldr	r2, [pc, #332]	; (8002c74 <HAL_GPIO_Init+0x340>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x22a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a52      	ldr	r2, [pc, #328]	; (8002c78 <HAL_GPIO_Init+0x344>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x226>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a51      	ldr	r2, [pc, #324]	; (8002c7c <HAL_GPIO_Init+0x348>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x222>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a50      	ldr	r2, [pc, #320]	; (8002c80 <HAL_GPIO_Init+0x34c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x21e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4f      	ldr	r2, [pc, #316]	; (8002c84 <HAL_GPIO_Init+0x350>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x21a>
 8002b4a:	2309      	movs	r3, #9
 8002b4c:	e012      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b4e:	230a      	movs	r3, #10
 8002b50:	e010      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b52:	2308      	movs	r3, #8
 8002b54:	e00e      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b56:	2307      	movs	r3, #7
 8002b58:	e00c      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	e00a      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b72:	2300      	movs	r3, #0
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f002 0203 	and.w	r2, r2, #3
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_GPIO_Init+0x328>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb6:	4a34      	ldr	r2, [pc, #208]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bbc:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be0:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c0a:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	f67f ae86 	bls.w	8002954 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40021400 	.word	0x40021400
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	40021c00 	.word	0x40021c00
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40022400 	.word	0x40022400
 8002c88:	40013c00 	.word	0x40013c00

08002c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e001      	b.n	8002cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe fcda 	bl	80016c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40013c00 	.word	0x40013c00

08002d20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40007000 	.word	0x40007000

08002d40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e291      	b.n	800327a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8087 	beq.w	8002e72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d64:	4b96      	ldr	r3, [pc, #600]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d00c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d70:	4b93      	ldr	r3, [pc, #588]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d112      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62>
 8002d7c:	4b90      	ldr	r3, [pc, #576]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8a:	4b8d      	ldr	r3, [pc, #564]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d06c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x130>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d168      	bne.n	8002e70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e26b      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x7a>
 8002dac:	4b84      	ldr	r3, [pc, #528]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a83      	ldr	r2, [pc, #524]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e02e      	b.n	8002e18 <HAL_RCC_OscConfig+0xd8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x9c>
 8002dc2:	4b7f      	ldr	r3, [pc, #508]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a7e      	ldr	r2, [pc, #504]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b7c      	ldr	r3, [pc, #496]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7b      	ldr	r2, [pc, #492]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xd8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0xc0>
 8002de6:	4b76      	ldr	r3, [pc, #472]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a75      	ldr	r2, [pc, #468]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b73      	ldr	r3, [pc, #460]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a72      	ldr	r2, [pc, #456]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xd8>
 8002e00:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6e      	ldr	r2, [pc, #440]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b6c      	ldr	r3, [pc, #432]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6b      	ldr	r2, [pc, #428]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7ff fbb4 	bl	800258c <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7ff fbb0 	bl	800258c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e21f      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b61      	ldr	r3, [pc, #388]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xe8>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7ff fba0 	bl	800258c <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7ff fb9c 	bl	800258c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e20b      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	4b57      	ldr	r3, [pc, #348]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x110>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d069      	beq.n	8002f52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7e:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b4d      	ldr	r3, [pc, #308]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d11c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x190>
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x17a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e1df      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	493d      	ldr	r1, [pc, #244]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	e040      	b.n	8002f52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d023      	beq.n	8002f20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed8:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a38      	ldr	r2, [pc, #224]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7ff fb52 	bl	800258c <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eec:	f7ff fb4e 	bl	800258c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e1bd      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4929      	ldr	r1, [pc, #164]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
 8002f1e:	e018      	b.n	8002f52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a26      	ldr	r2, [pc, #152]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7ff fb2e 	bl	800258c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f34:	f7ff fb2a 	bl	800258c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e199      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d038      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d019      	beq.n	8002f9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6a:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7ff fb0b 	bl	800258c <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7a:	f7ff fb07 	bl	800258c <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e176      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x23a>
 8002f98:	e01a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7ff faf1 	bl	800258c <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fae:	f7ff faed 	bl	800258c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d903      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e15c      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
 8002fc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	4b91      	ldr	r3, [pc, #580]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8002fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ee      	bne.n	8002fae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a4 	beq.w	8003126 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fde:	4b8b      	ldr	r3, [pc, #556]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10d      	bne.n	8003006 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a87      	ldr	r2, [pc, #540]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8002ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b85      	ldr	r3, [pc, #532]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003006:	4b82      	ldr	r3, [pc, #520]	; (8003210 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d118      	bne.n	8003044 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003012:	4b7f      	ldr	r3, [pc, #508]	; (8003210 <HAL_RCC_OscConfig+0x4d0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7e      	ldr	r2, [pc, #504]	; (8003210 <HAL_RCC_OscConfig+0x4d0>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301e:	f7ff fab5 	bl	800258c <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003026:	f7ff fab1 	bl	800258c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b64      	cmp	r3, #100	; 0x64
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e120      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003038:	4b75      	ldr	r3, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x4d0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x31a>
 800304c:	4b6f      	ldr	r3, [pc, #444]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a6e      	ldr	r2, [pc, #440]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
 8003058:	e02d      	b.n	80030b6 <HAL_RCC_OscConfig+0x376>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x33c>
 8003062:	4b6a      	ldr	r3, [pc, #424]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a69      	ldr	r2, [pc, #420]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	4b67      	ldr	r3, [pc, #412]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	4a66      	ldr	r2, [pc, #408]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	6713      	str	r3, [r2, #112]	; 0x70
 800307a:	e01c      	b.n	80030b6 <HAL_RCC_OscConfig+0x376>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b05      	cmp	r3, #5
 8003082:	d10c      	bne.n	800309e <HAL_RCC_OscConfig+0x35e>
 8003084:	4b61      	ldr	r3, [pc, #388]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a60      	ldr	r2, [pc, #384]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
 8003090:	4b5e      	ldr	r3, [pc, #376]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	4a5d      	ldr	r2, [pc, #372]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6713      	str	r3, [r2, #112]	; 0x70
 800309c:	e00b      	b.n	80030b6 <HAL_RCC_OscConfig+0x376>
 800309e:	4b5b      	ldr	r3, [pc, #364]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a5a      	ldr	r2, [pc, #360]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
 80030aa:	4b58      	ldr	r3, [pc, #352]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a57      	ldr	r2, [pc, #348]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80030b0:	f023 0304 	bic.w	r3, r3, #4
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d015      	beq.n	80030ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7ff fa65 	bl	800258c <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7ff fa61 	bl	800258c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e0ce      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030dc:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0ee      	beq.n	80030c6 <HAL_RCC_OscConfig+0x386>
 80030e8:	e014      	b.n	8003114 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ea:	f7ff fa4f 	bl	800258c <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f0:	e00a      	b.n	8003108 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f2:	f7ff fa4b 	bl	800258c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003100:	4293      	cmp	r3, r2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e0b8      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003108:	4b40      	ldr	r3, [pc, #256]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ee      	bne.n	80030f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003114:	7dfb      	ldrb	r3, [r7, #23]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d105      	bne.n	8003126 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311a:	4b3c      	ldr	r3, [pc, #240]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a3b      	ldr	r2, [pc, #236]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80a4 	beq.w	8003278 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003130:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b08      	cmp	r3, #8
 800313a:	d06b      	beq.n	8003214 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d149      	bne.n	80031d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003144:	4b31      	ldr	r3, [pc, #196]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a30      	ldr	r2, [pc, #192]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 800314a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7ff fa1c 	bl	800258c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003158:	f7ff fa18 	bl	800258c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e087      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	4b28      	ldr	r3, [pc, #160]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	019b      	lsls	r3, r3, #6
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	3b01      	subs	r3, #1
 8003190:	041b      	lsls	r3, r3, #16
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	4313      	orrs	r3, r2
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 800319e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7ff f9ec 	bl	800258c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7ff f9e8 	bl	800258c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e057      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x478>
 80031d6:	e04f      	b.n	8003278 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0b      	ldr	r2, [pc, #44]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 80031de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7ff f9d2 	bl	800258c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7ff f9ce 	bl	800258c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e03d      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_RCC_OscConfig+0x4cc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x4ac>
 800320a:	e035      	b.n	8003278 <HAL_RCC_OscConfig+0x538>
 800320c:	40023800 	.word	0x40023800
 8003210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_RCC_OscConfig+0x544>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d028      	beq.n	8003274 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d121      	bne.n	8003274 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d11a      	bne.n	8003274 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003244:	4013      	ands	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800324a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800324c:	4293      	cmp	r3, r2
 800324e:	d111      	bne.n	8003274 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	3b01      	subs	r3, #1
 800325e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d107      	bne.n	8003274 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800

08003288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0d0      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a0:	4b6a      	ldr	r3, [pc, #424]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d910      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b67      	ldr	r3, [pc, #412]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 020f 	bic.w	r2, r3, #15
 80032b6:	4965      	ldr	r1, [pc, #404]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b63      	ldr	r3, [pc, #396]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0b8      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d020      	beq.n	800331e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e8:	4b59      	ldr	r3, [pc, #356]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a58      	ldr	r2, [pc, #352]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 80032ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003300:	4b53      	ldr	r3, [pc, #332]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a52      	ldr	r2, [pc, #328]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 8003306:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800330a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800330c:	4b50      	ldr	r3, [pc, #320]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	494d      	ldr	r1, [pc, #308]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d040      	beq.n	80033ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d115      	bne.n	800336a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e07f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	4b41      	ldr	r3, [pc, #260]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e073      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335a:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e06b      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336a:	4b39      	ldr	r3, [pc, #228]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4936      	ldr	r1, [pc, #216]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337c:	f7ff f906 	bl	800258c <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	e00a      	b.n	800339a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7ff f902 	bl	800258c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e053      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 020c 	and.w	r2, r3, #12
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1eb      	bne.n	8003384 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d210      	bcs.n	80033dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 020f 	bic.w	r2, r3, #15
 80033c2:	4922      	ldr	r1, [pc, #136]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e032      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4916      	ldr	r1, [pc, #88]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	490e      	ldr	r1, [pc, #56]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800341a:	f000 f821 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_ClockConfig+0x1c8>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	490a      	ldr	r1, [pc, #40]	; (8003454 <HAL_RCC_ClockConfig+0x1cc>)
 800342c:	5ccb      	ldrb	r3, [r1, r3]
 800342e:	fa22 f303 	lsr.w	r3, r2, r3
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x1d0>)
 8003434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCC_ClockConfig+0x1d4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff f862 	bl	8002504 <HAL_InitTick>

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40023c00 	.word	0x40023c00
 8003450:	40023800 	.word	0x40023800
 8003454:	0800ba00 	.word	0x0800ba00
 8003458:	20000004 	.word	0x20000004
 800345c:	20000008 	.word	0x20000008

08003460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b090      	sub	sp, #64	; 0x40
 8003466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
 800346c:	2300      	movs	r3, #0
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003470:	2300      	movs	r3, #0
 8003472:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003478:	4b59      	ldr	r3, [pc, #356]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d00d      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003484:	2b08      	cmp	r3, #8
 8003486:	f200 80a1 	bhi.w	80035cc <HAL_RCC_GetSysClockFreq+0x16c>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x34>
 800348e:	2b04      	cmp	r3, #4
 8003490:	d003      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x3a>
 8003492:	e09b      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003496:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003498:	e09b      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800349a:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800349c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800349e:	e098      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a0:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034aa:	4b4d      	ldr	r3, [pc, #308]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d028      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b6:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	099b      	lsrs	r3, r3, #6
 80034bc:	2200      	movs	r2, #0
 80034be:	623b      	str	r3, [r7, #32]
 80034c0:	627a      	str	r2, [r7, #36]	; 0x24
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034c8:	2100      	movs	r1, #0
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80034cc:	fb03 f201 	mul.w	r2, r3, r1
 80034d0:	2300      	movs	r3, #0
 80034d2:	fb00 f303 	mul.w	r3, r0, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	4a43      	ldr	r2, [pc, #268]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80034da:	fba0 1202 	umull	r1, r2, r0, r2
 80034de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034e0:	460a      	mov	r2, r1
 80034e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80034e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e6:	4413      	add	r3, r2
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ec:	2200      	movs	r2, #0
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	61fa      	str	r2, [r7, #28]
 80034f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034fa:	f7fd fbe5 	bl	8000cc8 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4613      	mov	r3, r2
 8003504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003506:	e053      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003508:	4b35      	ldr	r3, [pc, #212]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	099b      	lsrs	r3, r3, #6
 800350e:	2200      	movs	r2, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	617a      	str	r2, [r7, #20]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800351a:	f04f 0b00 	mov.w	fp, #0
 800351e:	4652      	mov	r2, sl
 8003520:	465b      	mov	r3, fp
 8003522:	f04f 0000 	mov.w	r0, #0
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	0159      	lsls	r1, r3, #5
 800352c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003530:	0150      	lsls	r0, r2, #5
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	ebb2 080a 	subs.w	r8, r2, sl
 800353a:	eb63 090b 	sbc.w	r9, r3, fp
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800354a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800354e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003552:	ebb2 0408 	subs.w	r4, r2, r8
 8003556:	eb63 0509 	sbc.w	r5, r3, r9
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	00eb      	lsls	r3, r5, #3
 8003564:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003568:	00e2      	lsls	r2, r4, #3
 800356a:	4614      	mov	r4, r2
 800356c:	461d      	mov	r5, r3
 800356e:	eb14 030a 	adds.w	r3, r4, sl
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	eb45 030b 	adc.w	r3, r5, fp
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003586:	4629      	mov	r1, r5
 8003588:	028b      	lsls	r3, r1, #10
 800358a:	4621      	mov	r1, r4
 800358c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003590:	4621      	mov	r1, r4
 8003592:	028a      	lsls	r2, r1, #10
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	2200      	movs	r2, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	60fa      	str	r2, [r7, #12]
 80035a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a4:	f7fd fb90 	bl	8000cc8 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4613      	mov	r3, r2
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	3301      	adds	r3, #1
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80035c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3740      	adds	r7, #64	; 0x40
 80035d8:	46bd      	mov	sp, r7
 80035da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	017d7840 	.word	0x017d7840

080035ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	0800ba10 	.word	0x0800ba10

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffdc 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0b5b      	lsrs	r3, r3, #13
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	0800ba10 	.word	0x0800ba10

08003654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d012      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800367c:	4b69      	ldr	r3, [pc, #420]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a68      	ldr	r2, [pc, #416]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003686:	6093      	str	r3, [r2, #8]
 8003688:	4b66      	ldr	r3, [pc, #408]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003690:	4964      	ldr	r1, [pc, #400]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800369e:	2301      	movs	r3, #1
 80036a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d017      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ae:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036bc:	4959      	ldr	r1, [pc, #356]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036cc:	d101      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036da:	2301      	movs	r3, #1
 80036dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d017      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ea:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	494a      	ldr	r1, [pc, #296]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003708:	d101      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003716:	2301      	movs	r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003726:	2301      	movs	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 808b 	beq.w	800384e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	4a39      	ldr	r2, [pc, #228]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6413      	str	r3, [r2, #64]	; 0x40
 8003744:	4b37      	ldr	r3, [pc, #220]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a34      	ldr	r2, [pc, #208]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375c:	f7fe ff16 	bl	800258c <HAL_GetTick>
 8003760:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003764:	f7fe ff12 	bl	800258c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e357      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003782:	4b28      	ldr	r3, [pc, #160]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d035      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	429a      	cmp	r2, r3
 800379e:	d02e      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037aa:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037c2:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d114      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe feda 	bl	800258c <HAL_GetTick>
 80037d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	e00a      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037dc:	f7fe fed6 	bl	800258c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e319      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ee      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380a:	d111      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800381a:	400b      	ands	r3, r1
 800381c:	4901      	ldr	r1, [pc, #4]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
 8003822:	e00b      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000
 800382c:	0ffffcff 	.word	0x0ffffcff
 8003830:	4baa      	ldr	r3, [pc, #680]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4aa9      	ldr	r2, [pc, #676]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800383a:	6093      	str	r3, [r2, #8]
 800383c:	4ba7      	ldr	r3, [pc, #668]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003848:	49a4      	ldr	r1, [pc, #656]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384a:	4313      	orrs	r3, r2
 800384c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d010      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800385a:	4ba0      	ldr	r3, [pc, #640]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003860:	4a9e      	ldr	r2, [pc, #632]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003866:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800386a:	4b9c      	ldr	r3, [pc, #624]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	4999      	ldr	r1, [pc, #612]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003888:	4b94      	ldr	r3, [pc, #592]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003896:	4991      	ldr	r1, [pc, #580]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038aa:	4b8c      	ldr	r3, [pc, #560]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b8:	4988      	ldr	r1, [pc, #544]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038cc:	4b83      	ldr	r3, [pc, #524]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038da:	4980      	ldr	r1, [pc, #512]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ee:	4b7b      	ldr	r3, [pc, #492]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4977      	ldr	r1, [pc, #476]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003910:	4b72      	ldr	r3, [pc, #456]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	496f      	ldr	r1, [pc, #444]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003932:	4b6a      	ldr	r3, [pc, #424]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f023 020c 	bic.w	r2, r3, #12
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003940:	4966      	ldr	r1, [pc, #408]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003954:	4b61      	ldr	r3, [pc, #388]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	495e      	ldr	r1, [pc, #376]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003976:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003984:	4955      	ldr	r1, [pc, #340]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003998:	4b50      	ldr	r3, [pc, #320]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	494d      	ldr	r1, [pc, #308]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039ba:	4b48      	ldr	r3, [pc, #288]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	4944      	ldr	r1, [pc, #272]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039dc:	4b3f      	ldr	r3, [pc, #252]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	493c      	ldr	r1, [pc, #240]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039fe:	4b37      	ldr	r3, [pc, #220]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0c:	4933      	ldr	r1, [pc, #204]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a20:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2e:	492b      	ldr	r1, [pc, #172]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d011      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a50:	4922      	ldr	r1, [pc, #136]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a60:	d101      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a82:	4b16      	ldr	r3, [pc, #88]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a90:	4912      	ldr	r1, [pc, #72]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab4:	4909      	ldr	r1, [pc, #36]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d006      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80d9 	beq.w	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ad0:	4b02      	ldr	r3, [pc, #8]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a01      	ldr	r2, [pc, #4]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ada:	e001      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae2:	f7fe fd53 	bl	800258c <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003aea:	f7fe fd4f 	bl	800258c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b64      	cmp	r3, #100	; 0x64
 8003af6:	d901      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e194      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003afc:	4b6c      	ldr	r3, [pc, #432]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d021      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d11d      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b1c:	4b64      	ldr	r3, [pc, #400]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b2a:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b30:	0e1b      	lsrs	r3, r3, #24
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	019a      	lsls	r2, r3, #6
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	071b      	lsls	r3, r3, #28
 8003b50:	4957      	ldr	r1, [pc, #348]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d02e      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b82:	d129      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b84:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8a:	0c1b      	lsrs	r3, r3, #16
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b98:	0f1b      	lsrs	r3, r3, #28
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	019a      	lsls	r2, r3, #6
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	071b      	lsls	r3, r3, #28
 8003bb8:	493d      	ldr	r1, [pc, #244]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc6:	f023 021f 	bic.w	r2, r3, #31
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	4937      	ldr	r1, [pc, #220]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01d      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003be4:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bea:	0e1b      	lsrs	r3, r3, #24
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bf2:	4b2f      	ldr	r3, [pc, #188]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf8:	0f1b      	lsrs	r3, r3, #28
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	019a      	lsls	r2, r3, #6
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	061b      	lsls	r3, r3, #24
 8003c12:	431a      	orrs	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	071b      	lsls	r3, r3, #28
 8003c18:	4925      	ldr	r1, [pc, #148]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d011      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	019a      	lsls	r2, r3, #6
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	041b      	lsls	r3, r3, #16
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	061b      	lsls	r3, r3, #24
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	071b      	lsls	r3, r3, #28
 8003c48:	4919      	ldr	r1, [pc, #100]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c50:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5c:	f7fe fc96 	bl	800258c <HAL_GetTick>
 8003c60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c64:	f7fe fc92 	bl	800258c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0d7      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	f040 80cd 	bne.w	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a08      	ldr	r2, [pc, #32]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c96:	f7fe fc79 	bl	800258c <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c9e:	f7fe fc75 	bl	800258c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b64      	cmp	r3, #100	; 0x64
 8003caa:	d903      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e0ba      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003cb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cb4:	4b5e      	ldr	r3, [pc, #376]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc0:	d0ed      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d02e      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d12a      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cea:	4b51      	ldr	r3, [pc, #324]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cf8:	4b4d      	ldr	r3, [pc, #308]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	0f1b      	lsrs	r3, r3, #28
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	019a      	lsls	r2, r3, #6
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	061b      	lsls	r3, r3, #24
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	071b      	lsls	r3, r3, #28
 8003d1e:	4944      	ldr	r1, [pc, #272]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d26:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	493d      	ldr	r1, [pc, #244]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d022      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d54:	d11d      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d56:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	0e1b      	lsrs	r3, r3, #24
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d64:	4b32      	ldr	r3, [pc, #200]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	0f1b      	lsrs	r3, r3, #28
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	019a      	lsls	r2, r3, #6
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	061b      	lsls	r3, r3, #24
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	071b      	lsls	r3, r3, #28
 8003d8a:	4929      	ldr	r1, [pc, #164]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d028      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d9e:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	0e1b      	lsrs	r3, r3, #24
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dac:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	019a      	lsls	r2, r3, #6
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	071b      	lsls	r3, r3, #28
 8003dd2:	4917      	ldr	r1, [pc, #92]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	4911      	ldr	r1, [pc, #68]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfc:	f7fe fbc6 	bl	800258c <HAL_GetTick>
 8003e00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e04:	f7fe fbc2 	bl	800258c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e007      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e16:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e22:	d1ef      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800

08003e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e049      	b.n	8003eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe f964 	bl	8002128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f000 fd58 	bl	8004928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d001      	beq.n	8003efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e04c      	b.n	8003f96 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <HAL_TIM_Base_Start+0xc0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d022      	beq.n	8003f54 <HAL_TIM_Base_Start+0x70>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d01d      	beq.n	8003f54 <HAL_TIM_Base_Start+0x70>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <HAL_TIM_Base_Start+0xc4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d018      	beq.n	8003f54 <HAL_TIM_Base_Start+0x70>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a21      	ldr	r2, [pc, #132]	; (8003fac <HAL_TIM_Base_Start+0xc8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d013      	beq.n	8003f54 <HAL_TIM_Base_Start+0x70>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <HAL_TIM_Base_Start+0xcc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_TIM_Base_Start+0x70>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <HAL_TIM_Base_Start+0xd0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_TIM_Base_Start+0x70>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_TIM_Base_Start+0xd4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_TIM_Base_Start+0x70>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <HAL_TIM_Base_Start+0xd8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d115      	bne.n	8003f80 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_TIM_Base_Start+0xdc>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d015      	beq.n	8003f92 <HAL_TIM_Base_Start+0xae>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6c:	d011      	beq.n	8003f92 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7e:	e008      	b.n	8003f92 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e000      	b.n	8003f94 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40001800 	.word	0x40001800
 8003fc0:	00010007 	.word	0x00010007

08003fc4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6a1a      	ldr	r2, [r3, #32]
 8003fd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10f      	bne.n	8003ffc <HAL_TIM_Base_Stop+0x38>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6a1a      	ldr	r2, [r3, #32]
 8003fe2:	f240 4344 	movw	r3, #1092	; 0x444
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d107      	bne.n	8003ffc <HAL_TIM_Base_Stop+0x38>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e049      	b.n	80040b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f841 	bl	80040c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f000 fc69 	bl	8004928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_TIM_PWM_Start+0x24>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e03c      	b.n	8004172 <HAL_TIM_PWM_Start+0x9e>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d109      	bne.n	8004112 <HAL_TIM_PWM_Start+0x3e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e02f      	b.n	8004172 <HAL_TIM_PWM_Start+0x9e>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d109      	bne.n	800412c <HAL_TIM_PWM_Start+0x58>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e022      	b.n	8004172 <HAL_TIM_PWM_Start+0x9e>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d109      	bne.n	8004146 <HAL_TIM_PWM_Start+0x72>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	e015      	b.n	8004172 <HAL_TIM_PWM_Start+0x9e>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b10      	cmp	r3, #16
 800414a:	d109      	bne.n	8004160 <HAL_TIM_PWM_Start+0x8c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e008      	b.n	8004172 <HAL_TIM_PWM_Start+0x9e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e092      	b.n	80042a0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <HAL_TIM_PWM_Start+0xb6>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004188:	e023      	b.n	80041d2 <HAL_TIM_PWM_Start+0xfe>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b04      	cmp	r3, #4
 800418e:	d104      	bne.n	800419a <HAL_TIM_PWM_Start+0xc6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004198:	e01b      	b.n	80041d2 <HAL_TIM_PWM_Start+0xfe>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d104      	bne.n	80041aa <HAL_TIM_PWM_Start+0xd6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a8:	e013      	b.n	80041d2 <HAL_TIM_PWM_Start+0xfe>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	d104      	bne.n	80041ba <HAL_TIM_PWM_Start+0xe6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041b8:	e00b      	b.n	80041d2 <HAL_TIM_PWM_Start+0xfe>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d104      	bne.n	80041ca <HAL_TIM_PWM_Start+0xf6>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c8:	e003      	b.n	80041d2 <HAL_TIM_PWM_Start+0xfe>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2201      	movs	r2, #1
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 ff3c 	bl	8005058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a30      	ldr	r2, [pc, #192]	; (80042a8 <HAL_TIM_PWM_Start+0x1d4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <HAL_TIM_PWM_Start+0x120>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2f      	ldr	r2, [pc, #188]	; (80042ac <HAL_TIM_PWM_Start+0x1d8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d101      	bne.n	80041f8 <HAL_TIM_PWM_Start+0x124>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_TIM_PWM_Start+0x126>
 80041f8:	2300      	movs	r3, #0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800420c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a25      	ldr	r2, [pc, #148]	; (80042a8 <HAL_TIM_PWM_Start+0x1d4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d022      	beq.n	800425e <HAL_TIM_PWM_Start+0x18a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d01d      	beq.n	800425e <HAL_TIM_PWM_Start+0x18a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <HAL_TIM_PWM_Start+0x1dc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d018      	beq.n	800425e <HAL_TIM_PWM_Start+0x18a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a20      	ldr	r2, [pc, #128]	; (80042b4 <HAL_TIM_PWM_Start+0x1e0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_TIM_PWM_Start+0x18a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <HAL_TIM_PWM_Start+0x1e4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00e      	beq.n	800425e <HAL_TIM_PWM_Start+0x18a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a19      	ldr	r2, [pc, #100]	; (80042ac <HAL_TIM_PWM_Start+0x1d8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_TIM_PWM_Start+0x18a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <HAL_TIM_PWM_Start+0x1e8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <HAL_TIM_PWM_Start+0x18a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <HAL_TIM_PWM_Start+0x1ec>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d115      	bne.n	800428a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <HAL_TIM_PWM_Start+0x1f0>)
 8004266:	4013      	ands	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b06      	cmp	r3, #6
 800426e:	d015      	beq.n	800429c <HAL_TIM_PWM_Start+0x1c8>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004276:	d011      	beq.n	800429c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004288:	e008      	b.n	800429c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e000      	b.n	800429e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40010400 	.word	0x40010400
 80042b0:	40000400 	.word	0x40000400
 80042b4:	40000800 	.word	0x40000800
 80042b8:	40000c00 	.word	0x40000c00
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40001800 	.word	0x40001800
 80042c4:	00010007 	.word	0x00010007

080042c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d122      	bne.n	8004324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d11b      	bne.n	8004324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0202 	mvn.w	r2, #2
 80042f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 faee 	bl	80048ec <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fae0 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 faf1 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d122      	bne.n	8004378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b04      	cmp	r3, #4
 800433e:	d11b      	bne.n	8004378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0204 	mvn.w	r2, #4
 8004348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fac4 	bl	80048ec <HAL_TIM_IC_CaptureCallback>
 8004364:	e005      	b.n	8004372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fab6 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fac7 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b08      	cmp	r3, #8
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b08      	cmp	r3, #8
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0208 	mvn.w	r2, #8
 800439c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2204      	movs	r2, #4
 80043a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa9a 	bl	80048ec <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa8c 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fa9d 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0210 	mvn.w	r2, #16
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2208      	movs	r2, #8
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fa70 	bl	80048ec <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa62 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fa73 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d10e      	bne.n	800444c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d107      	bne.n	800444c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0201 	mvn.w	r2, #1
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa3c 	bl	80048c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d10e      	bne.n	8004478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	2b80      	cmp	r3, #128	; 0x80
 8004466:	d107      	bne.n	8004478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 ff2c 	bl	80052d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004486:	d10e      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b80      	cmp	r3, #128	; 0x80
 8004494:	d107      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800449e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 ff1f 	bl	80052e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d10e      	bne.n	80044d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b40      	cmp	r3, #64	; 0x40
 80044c0:	d107      	bne.n	80044d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fa21 	bl	8004914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d10e      	bne.n	80044fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d107      	bne.n	80044fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f06f 0220 	mvn.w	r2, #32
 80044f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fedf 	bl	80052bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004522:	2302      	movs	r3, #2
 8004524:	e0ff      	b.n	8004726 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b14      	cmp	r3, #20
 8004532:	f200 80f0 	bhi.w	8004716 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004536:	a201      	add	r2, pc, #4	; (adr r2, 800453c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	08004591 	.word	0x08004591
 8004540:	08004717 	.word	0x08004717
 8004544:	08004717 	.word	0x08004717
 8004548:	08004717 	.word	0x08004717
 800454c:	080045d1 	.word	0x080045d1
 8004550:	08004717 	.word	0x08004717
 8004554:	08004717 	.word	0x08004717
 8004558:	08004717 	.word	0x08004717
 800455c:	08004613 	.word	0x08004613
 8004560:	08004717 	.word	0x08004717
 8004564:	08004717 	.word	0x08004717
 8004568:	08004717 	.word	0x08004717
 800456c:	08004653 	.word	0x08004653
 8004570:	08004717 	.word	0x08004717
 8004574:	08004717 	.word	0x08004717
 8004578:	08004717 	.word	0x08004717
 800457c:	08004695 	.word	0x08004695
 8004580:	08004717 	.word	0x08004717
 8004584:	08004717 	.word	0x08004717
 8004588:	08004717 	.word	0x08004717
 800458c:	080046d5 	.word	0x080046d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fa66 	bl	8004a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0208 	orr.w	r2, r2, #8
 80045aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0204 	bic.w	r2, r2, #4
 80045ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6999      	ldr	r1, [r3, #24]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	619a      	str	r2, [r3, #24]
      break;
 80045ce:	e0a5      	b.n	800471c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fab8 	bl	8004b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6999      	ldr	r1, [r3, #24]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	021a      	lsls	r2, r3, #8
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	619a      	str	r2, [r3, #24]
      break;
 8004610:	e084      	b.n	800471c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fb0f 	bl	8004c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0208 	orr.w	r2, r2, #8
 800462c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0204 	bic.w	r2, r2, #4
 800463c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69d9      	ldr	r1, [r3, #28]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	61da      	str	r2, [r3, #28]
      break;
 8004650:	e064      	b.n	800471c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fb65 	bl	8004d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800466c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69d9      	ldr	r1, [r3, #28]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	021a      	lsls	r2, r3, #8
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	61da      	str	r2, [r3, #28]
      break;
 8004692:	e043      	b.n	800471c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fb9c 	bl	8004dd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0204 	bic.w	r2, r2, #4
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046d2:	e023      	b.n	800471c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fbce 	bl	8004e7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	021a      	lsls	r2, r3, #8
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004714:	e002      	b.n	800471c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
      break;
 800471a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop

08004730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_TIM_ConfigClockSource+0x1c>
 8004748:	2302      	movs	r3, #2
 800474a:	e0b4      	b.n	80048b6 <HAL_TIM_ConfigClockSource+0x186>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	4b56      	ldr	r3, [pc, #344]	; (80048c0 <HAL_TIM_ConfigClockSource+0x190>)
 8004768:	4013      	ands	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004784:	d03e      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0xd4>
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478a:	f200 8087 	bhi.w	800489c <HAL_TIM_ConfigClockSource+0x16c>
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004792:	f000 8086 	beq.w	80048a2 <HAL_TIM_ConfigClockSource+0x172>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d87f      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b70      	cmp	r3, #112	; 0x70
 800479e:	d01a      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0xa6>
 80047a0:	2b70      	cmp	r3, #112	; 0x70
 80047a2:	d87b      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b60      	cmp	r3, #96	; 0x60
 80047a6:	d050      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x11a>
 80047a8:	2b60      	cmp	r3, #96	; 0x60
 80047aa:	d877      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b50      	cmp	r3, #80	; 0x50
 80047ae:	d03c      	beq.n	800482a <HAL_TIM_ConfigClockSource+0xfa>
 80047b0:	2b50      	cmp	r3, #80	; 0x50
 80047b2:	d873      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d058      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x13a>
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d86f      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d064      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15a>
 80047c0:	2b30      	cmp	r3, #48	; 0x30
 80047c2:	d86b      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d060      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15a>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d867      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d05c      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15a>
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d05a      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15a>
 80047d4:	e062      	b.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6899      	ldr	r1, [r3, #8]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f000 fc17 	bl	8005018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	609a      	str	r2, [r3, #8]
      break;
 8004802:	e04f      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6899      	ldr	r1, [r3, #8]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f000 fc00 	bl	8005018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004826:	609a      	str	r2, [r3, #8]
      break;
 8004828:	e03c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	461a      	mov	r2, r3
 8004838:	f000 fb74 	bl	8004f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2150      	movs	r1, #80	; 0x50
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fbcd 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004848:	e02c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	461a      	mov	r2, r3
 8004858:	f000 fb93 	bl	8004f82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2160      	movs	r1, #96	; 0x60
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fbbd 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004868:	e01c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	461a      	mov	r2, r3
 8004878:	f000 fb54 	bl	8004f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fbad 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004888:	e00c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f000 fba4 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 800489a:	e003      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	e000      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	fffeff88 	.word	0xfffeff88

080048c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a40      	ldr	r2, [pc, #256]	; (8004a3c <TIM_Base_SetConfig+0x114>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d013      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004946:	d00f      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a3d      	ldr	r2, [pc, #244]	; (8004a40 <TIM_Base_SetConfig+0x118>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00b      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3c      	ldr	r2, [pc, #240]	; (8004a44 <TIM_Base_SetConfig+0x11c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d007      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3b      	ldr	r2, [pc, #236]	; (8004a48 <TIM_Base_SetConfig+0x120>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a3a      	ldr	r2, [pc, #232]	; (8004a4c <TIM_Base_SetConfig+0x124>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2f      	ldr	r2, [pc, #188]	; (8004a3c <TIM_Base_SetConfig+0x114>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d02b      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004988:	d027      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2c      	ldr	r2, [pc, #176]	; (8004a40 <TIM_Base_SetConfig+0x118>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d023      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2b      	ldr	r2, [pc, #172]	; (8004a44 <TIM_Base_SetConfig+0x11c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01f      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2a      	ldr	r2, [pc, #168]	; (8004a48 <TIM_Base_SetConfig+0x120>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01b      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a29      	ldr	r2, [pc, #164]	; (8004a4c <TIM_Base_SetConfig+0x124>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d017      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a28      	ldr	r2, [pc, #160]	; (8004a50 <TIM_Base_SetConfig+0x128>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a27      	ldr	r2, [pc, #156]	; (8004a54 <TIM_Base_SetConfig+0x12c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00f      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a26      	ldr	r2, [pc, #152]	; (8004a58 <TIM_Base_SetConfig+0x130>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00b      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a25      	ldr	r2, [pc, #148]	; (8004a5c <TIM_Base_SetConfig+0x134>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a24      	ldr	r2, [pc, #144]	; (8004a60 <TIM_Base_SetConfig+0x138>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a23      	ldr	r2, [pc, #140]	; (8004a64 <TIM_Base_SetConfig+0x13c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d108      	bne.n	80049ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <TIM_Base_SetConfig+0x114>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_Base_SetConfig+0xf8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a0c      	ldr	r2, [pc, #48]	; (8004a4c <TIM_Base_SetConfig+0x124>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d103      	bne.n	8004a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	615a      	str	r2, [r3, #20]
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00
 8004a4c:	40010400 	.word	0x40010400
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400
 8004a58:	40014800 	.word	0x40014800
 8004a5c:	40001800 	.word	0x40001800
 8004a60:	40001c00 	.word	0x40001c00
 8004a64:	40002000 	.word	0x40002000

08004a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0201 	bic.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <TIM_OC1_SetConfig+0xd8>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 0302 	bic.w	r3, r3, #2
 8004ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a21      	ldr	r2, [pc, #132]	; (8004b44 <TIM_OC1_SetConfig+0xdc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_OC1_SetConfig+0x64>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a20      	ldr	r2, [pc, #128]	; (8004b48 <TIM_OC1_SetConfig+0xe0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10c      	bne.n	8004ae6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0308 	bic.w	r3, r3, #8
 8004ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 0304 	bic.w	r3, r3, #4
 8004ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <TIM_OC1_SetConfig+0xdc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_OC1_SetConfig+0x8e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <TIM_OC1_SetConfig+0xe0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d111      	bne.n	8004b1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	621a      	str	r2, [r3, #32]
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	fffeff8f 	.word	0xfffeff8f
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40010400 	.word	0x40010400

08004b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0210 	bic.w	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <TIM_OC2_SetConfig+0xe4>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0320 	bic.w	r3, r3, #32
 8004b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <TIM_OC2_SetConfig+0xe8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_OC2_SetConfig+0x68>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a22      	ldr	r2, [pc, #136]	; (8004c38 <TIM_OC2_SetConfig+0xec>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d10d      	bne.n	8004bd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <TIM_OC2_SetConfig+0xe8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_OC2_SetConfig+0x94>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <TIM_OC2_SetConfig+0xec>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d113      	bne.n	8004c08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	feff8fff 	.word	0xfeff8fff
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40010400 	.word	0x40010400

08004c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <TIM_OC3_SetConfig+0xe0>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0303 	bic.w	r3, r3, #3
 8004c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a22      	ldr	r2, [pc, #136]	; (8004d20 <TIM_OC3_SetConfig+0xe4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_OC3_SetConfig+0x66>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <TIM_OC3_SetConfig+0xe8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d10d      	bne.n	8004cbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a17      	ldr	r2, [pc, #92]	; (8004d20 <TIM_OC3_SetConfig+0xe4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_OC3_SetConfig+0x92>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a16      	ldr	r2, [pc, #88]	; (8004d24 <TIM_OC3_SetConfig+0xe8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d113      	bne.n	8004cf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	621a      	str	r2, [r3, #32]
}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	fffeff8f 	.word	0xfffeff8f
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40010400 	.word	0x40010400

08004d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <TIM_OC4_SetConfig+0xa4>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	031b      	lsls	r3, r3, #12
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <TIM_OC4_SetConfig+0xa8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC4_SetConfig+0x68>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <TIM_OC4_SetConfig+0xac>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d109      	bne.n	8004da4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	019b      	lsls	r3, r3, #6
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	feff8fff 	.word	0xfeff8fff
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40010400 	.word	0x40010400

08004dd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <TIM_OC5_SetConfig+0x98>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	041b      	lsls	r3, r3, #16
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <TIM_OC5_SetConfig+0x9c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <TIM_OC5_SetConfig+0x5e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <TIM_OC5_SetConfig+0xa0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d109      	bne.n	8004e4a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	621a      	str	r2, [r3, #32]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	fffeff8f 	.word	0xfffeff8f
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40010400 	.word	0x40010400

08004e7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	; (8004f18 <TIM_OC6_SetConfig+0x9c>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	051b      	lsls	r3, r3, #20
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <TIM_OC6_SetConfig+0xa0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC6_SetConfig+0x60>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <TIM_OC6_SetConfig+0xa4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d109      	bne.n	8004ef0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	029b      	lsls	r3, r3, #10
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	feff8fff 	.word	0xfeff8fff
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40010400 	.word	0x40010400

08004f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 030a 	bic.w	r3, r3, #10
 8004f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 0210 	bic.w	r2, r3, #16
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f043 0307 	orr.w	r3, r3, #7
 8005004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	021a      	lsls	r2, r3, #8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	431a      	orrs	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4313      	orrs	r3, r2
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2201      	movs	r2, #1
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1a      	ldr	r2, [r3, #32]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	43db      	mvns	r3, r3
 800507a:	401a      	ands	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	431a      	orrs	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
	...

080050a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e06d      	b.n	8005198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a30      	ldr	r2, [pc, #192]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a2f      	ldr	r2, [pc, #188]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d108      	bne.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005108:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a20      	ldr	r2, [pc, #128]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d022      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512e:	d01d      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d018      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a16      	ldr	r2, [pc, #88]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a15      	ldr	r2, [pc, #84]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10c      	bne.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40010400 	.word	0x40010400
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40001800 	.word	0x40001800

080051c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051d8:	2302      	movs	r3, #2
 80051da:	e065      	b.n	80052a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d115      	bne.n	8005296 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	051b      	lsls	r3, r3, #20
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40010400 	.word	0x40010400

080052bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e040      	b.n	800538c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fd f830 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2224      	movs	r2, #36	; 0x24
 8005324:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0201 	bic.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fb62 	bl	8005a00 <UART_SetConfig>
 800533c:	4603      	mov	r3, r0
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e022      	b.n	800538c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fdba 	bl	8005ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fe41 	bl	800600c <UART_CheckIdleState>
 800538a:	4603      	mov	r3, r0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d132      	bne.n	8005412 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_UART_Receive_IT+0x24>
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e02b      	b.n	8005414 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d018      	beq.n	8005402 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	613b      	str	r3, [r7, #16]
   return(result);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	69f9      	ldr	r1, [r7, #28]
 80053f4:	6a3a      	ldr	r2, [r7, #32]
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e6      	bne.n	80053d0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	461a      	mov	r2, r3
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fefd 	bl	8006208 <UART_Start_Receive_IT>
 800540e:	4603      	mov	r3, r0
 8005410:	e000      	b.n	8005414 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005412:	2302      	movs	r3, #2
  }
}
 8005414:	4618      	mov	r0, r3
 8005416:	3728      	adds	r7, #40	; 0x28
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b0ba      	sub	sp, #232	; 0xe8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005442:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005446:	f640 030f 	movw	r3, #2063	; 0x80f
 800544a:	4013      	ands	r3, r2
 800544c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d115      	bne.n	8005484 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00f      	beq.n	8005484 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8297 	beq.w	80059a8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
      }
      return;
 8005482:	e291      	b.n	80059a8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 8117 	beq.w	80056bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800548e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800549a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800549e:	4b85      	ldr	r3, [pc, #532]	; (80056b4 <HAL_UART_IRQHandler+0x298>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 810a 	beq.w	80056bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d011      	beq.n	80054d8 <HAL_UART_IRQHandler+0xbc>
 80054b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2201      	movs	r2, #1
 80054c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ce:	f043 0201 	orr.w	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d011      	beq.n	8005508 <HAL_UART_IRQHandler+0xec>
 80054e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2202      	movs	r2, #2
 80054f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fe:	f043 0204 	orr.w	r2, r3, #4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d011      	beq.n	8005538 <HAL_UART_IRQHandler+0x11c>
 8005514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2204      	movs	r2, #4
 8005526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800552e:	f043 0202 	orr.w	r2, r3, #2
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d017      	beq.n	8005574 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005554:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00b      	beq.n	8005574 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2208      	movs	r2, #8
 8005562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800556a:	f043 0208 	orr.w	r2, r3, #8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800557c:	2b00      	cmp	r3, #0
 800557e:	d012      	beq.n	80055a6 <HAL_UART_IRQHandler+0x18a>
 8005580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00c      	beq.n	80055a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559c:	f043 0220 	orr.w	r2, r3, #32
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 81fd 	beq.w	80059ac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d005      	beq.n	80055fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d04f      	beq.n	800569e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fec8 	bl	8006394 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d141      	bne.n	8005696 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800562c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3308      	adds	r3, #8
 800563a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800563e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800564a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1d9      	bne.n	8005612 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005662:	2b00      	cmp	r3, #0
 8005664:	d013      	beq.n	800568e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566a:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <HAL_UART_IRQHandler+0x29c>)
 800566c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005672:	4618      	mov	r0, r3
 8005674:	f7fd f93b 	bl	80028ee <HAL_DMA_Abort_IT>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d017      	beq.n	80056ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005688:	4610      	mov	r0, r2
 800568a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568c:	e00f      	b.n	80056ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9a0 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005694:	e00b      	b.n	80056ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f99c 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	e007      	b.n	80056ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f998 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80056ac:	e17e      	b.n	80059ac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ae:	bf00      	nop
    return;
 80056b0:	e17c      	b.n	80059ac <HAL_UART_IRQHandler+0x590>
 80056b2:	bf00      	nop
 80056b4:	04000120 	.word	0x04000120
 80056b8:	0800645d 	.word	0x0800645d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	f040 814c 	bne.w	800595e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8145 	beq.w	800595e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 813e 	beq.w	800595e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2210      	movs	r2, #16
 80056e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	f040 80b6 	bne.w	8005866 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005706:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8150 	beq.w	80059b0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800571a:	429a      	cmp	r2, r3
 800571c:	f080 8148 	bcs.w	80059b0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005726:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005734:	f000 8086 	beq.w	8005844 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800574c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005762:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005766:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800576e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800577a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1da      	bne.n	8005738 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3308      	adds	r3, #8
 8005788:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3308      	adds	r3, #8
 80057a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e1      	bne.n	8005782 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3308      	adds	r3, #8
 80057c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3308      	adds	r3, #8
 80057de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e3      	bne.n	80057be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005814:	f023 0310 	bic.w	r3, r3, #16
 8005818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005826:	65bb      	str	r3, [r7, #88]	; 0x58
 8005828:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800582c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e4      	bne.n	8005804 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583e:	4618      	mov	r0, r3
 8005840:	f7fc ffe5 	bl	800280e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005856:	b29b      	uxth	r3, r3
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	b29b      	uxth	r3, r3
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f8c2 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005864:	e0a4      	b.n	80059b0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005872:	b29b      	uxth	r3, r3
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 8096 	beq.w	80059b4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8091 	beq.w	80059b4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058b4:	647b      	str	r3, [r7, #68]	; 0x44
 80058b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e4      	bne.n	8005892 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3308      	adds	r3, #8
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	623b      	str	r3, [r7, #32]
   return(result);
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3308      	adds	r3, #8
 80058e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058ec:	633a      	str	r2, [r7, #48]	; 0x30
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e3      	bne.n	80058c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	60fb      	str	r3, [r7, #12]
   return(result);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f023 0310 	bic.w	r3, r3, #16
 8005928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005936:	61fb      	str	r3, [r7, #28]
 8005938:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	69b9      	ldr	r1, [r7, #24]
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	617b      	str	r3, [r7, #20]
   return(result);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e4      	bne.n	8005914 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2202      	movs	r2, #2
 800594e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f846 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800595c:	e02a      	b.n	80059b4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00e      	beq.n	8005988 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b00      	cmp	r3, #0
 8005974:	d008      	beq.n	8005988 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d01c      	beq.n	80059b8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
    }
    return;
 8005986:	e017      	b.n	80059b8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d012      	beq.n	80059ba <HAL_UART_IRQHandler+0x59e>
 8005994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00c      	beq.n	80059ba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fd71 	bl	8006488 <UART_EndTransmit_IT>
    return;
 80059a6:	e008      	b.n	80059ba <HAL_UART_IRQHandler+0x59e>
      return;
 80059a8:	bf00      	nop
 80059aa:	e006      	b.n	80059ba <HAL_UART_IRQHandler+0x59e>
    return;
 80059ac:	bf00      	nop
 80059ae:	e004      	b.n	80059ba <HAL_UART_IRQHandler+0x59e>
      return;
 80059b0:	bf00      	nop
 80059b2:	e002      	b.n	80059ba <HAL_UART_IRQHandler+0x59e>
      return;
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <HAL_UART_IRQHandler+0x59e>
    return;
 80059b8:	bf00      	nop
  }

}
 80059ba:	37e8      	adds	r7, #232	; 0xe8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4ba6      	ldr	r3, [pc, #664]	; (8005cc4 <UART_SetConfig+0x2c4>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	6979      	ldr	r1, [r7, #20]
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a94      	ldr	r2, [pc, #592]	; (8005cc8 <UART_SetConfig+0x2c8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d120      	bne.n	8005abe <UART_SetConfig+0xbe>
 8005a7c:	4b93      	ldr	r3, [pc, #588]	; (8005ccc <UART_SetConfig+0x2cc>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d816      	bhi.n	8005ab8 <UART_SetConfig+0xb8>
 8005a8a:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x90>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005aad 	.word	0x08005aad
 8005a98:	08005aa7 	.word	0x08005aa7
 8005a9c:	08005ab3 	.word	0x08005ab3
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e150      	b.n	8005d48 <UART_SetConfig+0x348>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e14d      	b.n	8005d48 <UART_SetConfig+0x348>
 8005aac:	2304      	movs	r3, #4
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e14a      	b.n	8005d48 <UART_SetConfig+0x348>
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e147      	b.n	8005d48 <UART_SetConfig+0x348>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e144      	b.n	8005d48 <UART_SetConfig+0x348>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a83      	ldr	r2, [pc, #524]	; (8005cd0 <UART_SetConfig+0x2d0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d132      	bne.n	8005b2e <UART_SetConfig+0x12e>
 8005ac8:	4b80      	ldr	r3, [pc, #512]	; (8005ccc <UART_SetConfig+0x2cc>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f003 030c 	and.w	r3, r3, #12
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d828      	bhi.n	8005b28 <UART_SetConfig+0x128>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0xdc>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005b11 	.word	0x08005b11
 8005ae0:	08005b29 	.word	0x08005b29
 8005ae4:	08005b29 	.word	0x08005b29
 8005ae8:	08005b29 	.word	0x08005b29
 8005aec:	08005b1d 	.word	0x08005b1d
 8005af0:	08005b29 	.word	0x08005b29
 8005af4:	08005b29 	.word	0x08005b29
 8005af8:	08005b29 	.word	0x08005b29
 8005afc:	08005b17 	.word	0x08005b17
 8005b00:	08005b29 	.word	0x08005b29
 8005b04:	08005b29 	.word	0x08005b29
 8005b08:	08005b29 	.word	0x08005b29
 8005b0c:	08005b23 	.word	0x08005b23
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e118      	b.n	8005d48 <UART_SetConfig+0x348>
 8005b16:	2302      	movs	r3, #2
 8005b18:	77fb      	strb	r3, [r7, #31]
 8005b1a:	e115      	b.n	8005d48 <UART_SetConfig+0x348>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e112      	b.n	8005d48 <UART_SetConfig+0x348>
 8005b22:	2308      	movs	r3, #8
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e10f      	b.n	8005d48 <UART_SetConfig+0x348>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e10c      	b.n	8005d48 <UART_SetConfig+0x348>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a68      	ldr	r2, [pc, #416]	; (8005cd4 <UART_SetConfig+0x2d4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d120      	bne.n	8005b7a <UART_SetConfig+0x17a>
 8005b38:	4b64      	ldr	r3, [pc, #400]	; (8005ccc <UART_SetConfig+0x2cc>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b42:	2b30      	cmp	r3, #48	; 0x30
 8005b44:	d013      	beq.n	8005b6e <UART_SetConfig+0x16e>
 8005b46:	2b30      	cmp	r3, #48	; 0x30
 8005b48:	d814      	bhi.n	8005b74 <UART_SetConfig+0x174>
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d009      	beq.n	8005b62 <UART_SetConfig+0x162>
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d810      	bhi.n	8005b74 <UART_SetConfig+0x174>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <UART_SetConfig+0x15c>
 8005b56:	2b10      	cmp	r3, #16
 8005b58:	d006      	beq.n	8005b68 <UART_SetConfig+0x168>
 8005b5a:	e00b      	b.n	8005b74 <UART_SetConfig+0x174>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e0f2      	b.n	8005d48 <UART_SetConfig+0x348>
 8005b62:	2302      	movs	r3, #2
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e0ef      	b.n	8005d48 <UART_SetConfig+0x348>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e0ec      	b.n	8005d48 <UART_SetConfig+0x348>
 8005b6e:	2308      	movs	r3, #8
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e0e9      	b.n	8005d48 <UART_SetConfig+0x348>
 8005b74:	2310      	movs	r3, #16
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e0e6      	b.n	8005d48 <UART_SetConfig+0x348>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a56      	ldr	r2, [pc, #344]	; (8005cd8 <UART_SetConfig+0x2d8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d120      	bne.n	8005bc6 <UART_SetConfig+0x1c6>
 8005b84:	4b51      	ldr	r3, [pc, #324]	; (8005ccc <UART_SetConfig+0x2cc>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b90:	d013      	beq.n	8005bba <UART_SetConfig+0x1ba>
 8005b92:	2bc0      	cmp	r3, #192	; 0xc0
 8005b94:	d814      	bhi.n	8005bc0 <UART_SetConfig+0x1c0>
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d009      	beq.n	8005bae <UART_SetConfig+0x1ae>
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d810      	bhi.n	8005bc0 <UART_SetConfig+0x1c0>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <UART_SetConfig+0x1a8>
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d006      	beq.n	8005bb4 <UART_SetConfig+0x1b4>
 8005ba6:	e00b      	b.n	8005bc0 <UART_SetConfig+0x1c0>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e0cc      	b.n	8005d48 <UART_SetConfig+0x348>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e0c9      	b.n	8005d48 <UART_SetConfig+0x348>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e0c6      	b.n	8005d48 <UART_SetConfig+0x348>
 8005bba:	2308      	movs	r3, #8
 8005bbc:	77fb      	strb	r3, [r7, #31]
 8005bbe:	e0c3      	b.n	8005d48 <UART_SetConfig+0x348>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e0c0      	b.n	8005d48 <UART_SetConfig+0x348>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a44      	ldr	r2, [pc, #272]	; (8005cdc <UART_SetConfig+0x2dc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d125      	bne.n	8005c1c <UART_SetConfig+0x21c>
 8005bd0:	4b3e      	ldr	r3, [pc, #248]	; (8005ccc <UART_SetConfig+0x2cc>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bde:	d017      	beq.n	8005c10 <UART_SetConfig+0x210>
 8005be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be4:	d817      	bhi.n	8005c16 <UART_SetConfig+0x216>
 8005be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bea:	d00b      	beq.n	8005c04 <UART_SetConfig+0x204>
 8005bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf0:	d811      	bhi.n	8005c16 <UART_SetConfig+0x216>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <UART_SetConfig+0x1fe>
 8005bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfa:	d006      	beq.n	8005c0a <UART_SetConfig+0x20a>
 8005bfc:	e00b      	b.n	8005c16 <UART_SetConfig+0x216>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	77fb      	strb	r3, [r7, #31]
 8005c02:	e0a1      	b.n	8005d48 <UART_SetConfig+0x348>
 8005c04:	2302      	movs	r3, #2
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e09e      	b.n	8005d48 <UART_SetConfig+0x348>
 8005c0a:	2304      	movs	r3, #4
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e09b      	b.n	8005d48 <UART_SetConfig+0x348>
 8005c10:	2308      	movs	r3, #8
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e098      	b.n	8005d48 <UART_SetConfig+0x348>
 8005c16:	2310      	movs	r3, #16
 8005c18:	77fb      	strb	r3, [r7, #31]
 8005c1a:	e095      	b.n	8005d48 <UART_SetConfig+0x348>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a2f      	ldr	r2, [pc, #188]	; (8005ce0 <UART_SetConfig+0x2e0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d125      	bne.n	8005c72 <UART_SetConfig+0x272>
 8005c26:	4b29      	ldr	r3, [pc, #164]	; (8005ccc <UART_SetConfig+0x2cc>)
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c34:	d017      	beq.n	8005c66 <UART_SetConfig+0x266>
 8005c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c3a:	d817      	bhi.n	8005c6c <UART_SetConfig+0x26c>
 8005c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c40:	d00b      	beq.n	8005c5a <UART_SetConfig+0x25a>
 8005c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c46:	d811      	bhi.n	8005c6c <UART_SetConfig+0x26c>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <UART_SetConfig+0x254>
 8005c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c50:	d006      	beq.n	8005c60 <UART_SetConfig+0x260>
 8005c52:	e00b      	b.n	8005c6c <UART_SetConfig+0x26c>
 8005c54:	2301      	movs	r3, #1
 8005c56:	77fb      	strb	r3, [r7, #31]
 8005c58:	e076      	b.n	8005d48 <UART_SetConfig+0x348>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e073      	b.n	8005d48 <UART_SetConfig+0x348>
 8005c60:	2304      	movs	r3, #4
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e070      	b.n	8005d48 <UART_SetConfig+0x348>
 8005c66:	2308      	movs	r3, #8
 8005c68:	77fb      	strb	r3, [r7, #31]
 8005c6a:	e06d      	b.n	8005d48 <UART_SetConfig+0x348>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	77fb      	strb	r3, [r7, #31]
 8005c70:	e06a      	b.n	8005d48 <UART_SetConfig+0x348>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1b      	ldr	r2, [pc, #108]	; (8005ce4 <UART_SetConfig+0x2e4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d138      	bne.n	8005cee <UART_SetConfig+0x2ee>
 8005c7c:	4b13      	ldr	r3, [pc, #76]	; (8005ccc <UART_SetConfig+0x2cc>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c8a:	d017      	beq.n	8005cbc <UART_SetConfig+0x2bc>
 8005c8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c90:	d82a      	bhi.n	8005ce8 <UART_SetConfig+0x2e8>
 8005c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c96:	d00b      	beq.n	8005cb0 <UART_SetConfig+0x2b0>
 8005c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9c:	d824      	bhi.n	8005ce8 <UART_SetConfig+0x2e8>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <UART_SetConfig+0x2aa>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	d006      	beq.n	8005cb6 <UART_SetConfig+0x2b6>
 8005ca8:	e01e      	b.n	8005ce8 <UART_SetConfig+0x2e8>
 8005caa:	2300      	movs	r3, #0
 8005cac:	77fb      	strb	r3, [r7, #31]
 8005cae:	e04b      	b.n	8005d48 <UART_SetConfig+0x348>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	77fb      	strb	r3, [r7, #31]
 8005cb4:	e048      	b.n	8005d48 <UART_SetConfig+0x348>
 8005cb6:	2304      	movs	r3, #4
 8005cb8:	77fb      	strb	r3, [r7, #31]
 8005cba:	e045      	b.n	8005d48 <UART_SetConfig+0x348>
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	77fb      	strb	r3, [r7, #31]
 8005cc0:	e042      	b.n	8005d48 <UART_SetConfig+0x348>
 8005cc2:	bf00      	nop
 8005cc4:	efff69f3 	.word	0xefff69f3
 8005cc8:	40011000 	.word	0x40011000
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	40004400 	.word	0x40004400
 8005cd4:	40004800 	.word	0x40004800
 8005cd8:	40004c00 	.word	0x40004c00
 8005cdc:	40005000 	.word	0x40005000
 8005ce0:	40011400 	.word	0x40011400
 8005ce4:	40007800 	.word	0x40007800
 8005ce8:	2310      	movs	r3, #16
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e02c      	b.n	8005d48 <UART_SetConfig+0x348>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a72      	ldr	r2, [pc, #456]	; (8005ebc <UART_SetConfig+0x4bc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d125      	bne.n	8005d44 <UART_SetConfig+0x344>
 8005cf8:	4b71      	ldr	r3, [pc, #452]	; (8005ec0 <UART_SetConfig+0x4c0>)
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d06:	d017      	beq.n	8005d38 <UART_SetConfig+0x338>
 8005d08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d0c:	d817      	bhi.n	8005d3e <UART_SetConfig+0x33e>
 8005d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d12:	d00b      	beq.n	8005d2c <UART_SetConfig+0x32c>
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d18:	d811      	bhi.n	8005d3e <UART_SetConfig+0x33e>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <UART_SetConfig+0x326>
 8005d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d22:	d006      	beq.n	8005d32 <UART_SetConfig+0x332>
 8005d24:	e00b      	b.n	8005d3e <UART_SetConfig+0x33e>
 8005d26:	2300      	movs	r3, #0
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e00d      	b.n	8005d48 <UART_SetConfig+0x348>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e00a      	b.n	8005d48 <UART_SetConfig+0x348>
 8005d32:	2304      	movs	r3, #4
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e007      	b.n	8005d48 <UART_SetConfig+0x348>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e004      	b.n	8005d48 <UART_SetConfig+0x348>
 8005d3e:	2310      	movs	r3, #16
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e001      	b.n	8005d48 <UART_SetConfig+0x348>
 8005d44:	2310      	movs	r3, #16
 8005d46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d50:	d15b      	bne.n	8005e0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d52:	7ffb      	ldrb	r3, [r7, #31]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d828      	bhi.n	8005daa <UART_SetConfig+0x3aa>
 8005d58:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <UART_SetConfig+0x360>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d85 	.word	0x08005d85
 8005d64:	08005d8d 	.word	0x08005d8d
 8005d68:	08005d95 	.word	0x08005d95
 8005d6c:	08005dab 	.word	0x08005dab
 8005d70:	08005d9b 	.word	0x08005d9b
 8005d74:	08005dab 	.word	0x08005dab
 8005d78:	08005dab 	.word	0x08005dab
 8005d7c:	08005dab 	.word	0x08005dab
 8005d80:	08005da3 	.word	0x08005da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d84:	f7fd fc3e 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8005d88:	61b8      	str	r0, [r7, #24]
        break;
 8005d8a:	e013      	b.n	8005db4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d8c:	f7fd fc4e 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8005d90:	61b8      	str	r0, [r7, #24]
        break;
 8005d92:	e00f      	b.n	8005db4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d94:	4b4b      	ldr	r3, [pc, #300]	; (8005ec4 <UART_SetConfig+0x4c4>)
 8005d96:	61bb      	str	r3, [r7, #24]
        break;
 8005d98:	e00c      	b.n	8005db4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d9a:	f7fd fb61 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8005d9e:	61b8      	str	r0, [r7, #24]
        break;
 8005da0:	e008      	b.n	8005db4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da6:	61bb      	str	r3, [r7, #24]
        break;
 8005da8:	e004      	b.n	8005db4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	77bb      	strb	r3, [r7, #30]
        break;
 8005db2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d074      	beq.n	8005ea4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	005a      	lsls	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	441a      	add	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b0f      	cmp	r3, #15
 8005dd4:	d916      	bls.n	8005e04 <UART_SetConfig+0x404>
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ddc:	d212      	bcs.n	8005e04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f023 030f 	bic.w	r3, r3, #15
 8005de6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	89fb      	ldrh	r3, [r7, #14]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	89fa      	ldrh	r2, [r7, #14]
 8005e00:	60da      	str	r2, [r3, #12]
 8005e02:	e04f      	b.n	8005ea4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	77bb      	strb	r3, [r7, #30]
 8005e08:	e04c      	b.n	8005ea4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e0a:	7ffb      	ldrb	r3, [r7, #31]
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d828      	bhi.n	8005e62 <UART_SetConfig+0x462>
 8005e10:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <UART_SetConfig+0x418>)
 8005e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e16:	bf00      	nop
 8005e18:	08005e3d 	.word	0x08005e3d
 8005e1c:	08005e45 	.word	0x08005e45
 8005e20:	08005e4d 	.word	0x08005e4d
 8005e24:	08005e63 	.word	0x08005e63
 8005e28:	08005e53 	.word	0x08005e53
 8005e2c:	08005e63 	.word	0x08005e63
 8005e30:	08005e63 	.word	0x08005e63
 8005e34:	08005e63 	.word	0x08005e63
 8005e38:	08005e5b 	.word	0x08005e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e3c:	f7fd fbe2 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8005e40:	61b8      	str	r0, [r7, #24]
        break;
 8005e42:	e013      	b.n	8005e6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e44:	f7fd fbf2 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8005e48:	61b8      	str	r0, [r7, #24]
        break;
 8005e4a:	e00f      	b.n	8005e6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <UART_SetConfig+0x4c4>)
 8005e4e:	61bb      	str	r3, [r7, #24]
        break;
 8005e50:	e00c      	b.n	8005e6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e52:	f7fd fb05 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8005e56:	61b8      	str	r0, [r7, #24]
        break;
 8005e58:	e008      	b.n	8005e6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e5e:	61bb      	str	r3, [r7, #24]
        break;
 8005e60:	e004      	b.n	8005e6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	77bb      	strb	r3, [r7, #30]
        break;
 8005e6a:	bf00      	nop
    }

    if (pclk != 0U)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d018      	beq.n	8005ea4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	085a      	lsrs	r2, r3, #1
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	441a      	add	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b0f      	cmp	r3, #15
 8005e8a:	d909      	bls.n	8005ea0 <UART_SetConfig+0x4a0>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e92:	d205      	bcs.n	8005ea0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	e001      	b.n	8005ea4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005eb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40007c00 	.word	0x40007c00
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	00f42400 	.word	0x00f42400

08005ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01a      	beq.n	8005fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc6:	d10a      	bne.n	8005fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	605a      	str	r2, [r3, #4]
  }
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af02      	add	r7, sp, #8
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800601c:	f7fc fab6 	bl	800258c <HAL_GetTick>
 8006020:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b08      	cmp	r3, #8
 800602e:	d10e      	bne.n	800604e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f81b 	bl	800607a <UART_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e011      	b.n	8006072 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b09c      	sub	sp, #112	; 0x70
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	4613      	mov	r3, r2
 8006088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800608a:	e0a7      	b.n	80061dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	f000 80a3 	beq.w	80061dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006096:	f7fc fa79 	bl	800258c <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d302      	bcc.n	80060ac <UART_WaitOnFlagUntilTimeout+0x32>
 80060a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d13f      	bne.n	800612c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060c0:	667b      	str	r3, [r7, #100]	; 0x64
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e6      	bne.n	80060ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	663b      	str	r3, [r7, #96]	; 0x60
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3308      	adds	r3, #8
 80060fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006100:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800610c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e5      	bne.n	80060de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e068      	b.n	80061fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d050      	beq.n	80061dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006148:	d148      	bne.n	80061dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006152:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006172:	637b      	str	r3, [r7, #52]	; 0x34
 8006174:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e6      	bne.n	8006154 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	613b      	str	r3, [r7, #16]
   return(result);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	66bb      	str	r3, [r7, #104]	; 0x68
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3308      	adds	r3, #8
 80061a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061a6:	623a      	str	r2, [r7, #32]
 80061a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	69f9      	ldr	r1, [r7, #28]
 80061ac:	6a3a      	ldr	r2, [r7, #32]
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e5      	bne.n	8006186 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e010      	b.n	80061fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69da      	ldr	r2, [r3, #28]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4013      	ands	r3, r2
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	f43f af48 	beq.w	800608c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3770      	adds	r7, #112	; 0x70
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006208:	b480      	push	{r7}
 800620a:	b097      	sub	sp, #92	; 0x5c
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	88fa      	ldrh	r2, [r7, #6]
 8006220:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623a:	d10e      	bne.n	800625a <UART_Start_Receive_IT+0x52>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <UART_Start_Receive_IT+0x48>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f240 12ff 	movw	r2, #511	; 0x1ff
 800624a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800624e:	e02d      	b.n	80062ac <UART_Start_Receive_IT+0xa4>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	22ff      	movs	r2, #255	; 0xff
 8006254:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006258:	e028      	b.n	80062ac <UART_Start_Receive_IT+0xa4>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <UART_Start_Receive_IT+0x76>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <UART_Start_Receive_IT+0x6c>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	22ff      	movs	r2, #255	; 0xff
 800626e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006272:	e01b      	b.n	80062ac <UART_Start_Receive_IT+0xa4>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	227f      	movs	r2, #127	; 0x7f
 8006278:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800627c:	e016      	b.n	80062ac <UART_Start_Receive_IT+0xa4>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006286:	d10d      	bne.n	80062a4 <UART_Start_Receive_IT+0x9c>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <UART_Start_Receive_IT+0x92>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	227f      	movs	r2, #127	; 0x7f
 8006294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006298:	e008      	b.n	80062ac <UART_Start_Receive_IT+0xa4>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	223f      	movs	r2, #63	; 0x3f
 800629e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062a2:	e003      	b.n	80062ac <UART_Start_Receive_IT+0xa4>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2222      	movs	r2, #34	; 0x22
 80062b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3308      	adds	r3, #8
 80062c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	657b      	str	r3, [r7, #84]	; 0x54
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3308      	adds	r3, #8
 80062da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80062de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e5      	bne.n	80062bc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f8:	d107      	bne.n	800630a <UART_Start_Receive_IT+0x102>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d103      	bne.n	800630a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4a21      	ldr	r2, [pc, #132]	; (800638c <UART_Start_Receive_IT+0x184>)
 8006306:	669a      	str	r2, [r3, #104]	; 0x68
 8006308:	e002      	b.n	8006310 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4a20      	ldr	r2, [pc, #128]	; (8006390 <UART_Start_Receive_IT+0x188>)
 800630e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d019      	beq.n	800634c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800632c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006336:	637b      	str	r3, [r7, #52]	; 0x34
 8006338:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800633c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e6      	bne.n	8006318 <UART_Start_Receive_IT+0x110>
 800634a:	e018      	b.n	800637e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	613b      	str	r3, [r7, #16]
   return(result);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f043 0320 	orr.w	r3, r3, #32
 8006360:	653b      	str	r3, [r7, #80]	; 0x50
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800636a:	623b      	str	r3, [r7, #32]
 800636c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	69f9      	ldr	r1, [r7, #28]
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	61bb      	str	r3, [r7, #24]
   return(result);
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e6      	bne.n	800634c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	375c      	adds	r7, #92	; 0x5c
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	08006643 	.word	0x08006643
 8006390:	080064dd 	.word	0x080064dd

08006394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b095      	sub	sp, #84	; 0x54
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ba:	643b      	str	r3, [r7, #64]	; 0x40
 80063bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e6      	bne.n	800639c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3308      	adds	r3, #8
 80063d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3308      	adds	r3, #8
 80063ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e5      	bne.n	80063ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006406:	2b01      	cmp	r3, #1
 8006408:	d118      	bne.n	800643c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	60bb      	str	r3, [r7, #8]
   return(result);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f023 0310 	bic.w	r3, r3, #16
 800641e:	647b      	str	r3, [r7, #68]	; 0x44
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	6979      	ldr	r1, [r7, #20]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	613b      	str	r3, [r7, #16]
   return(result);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e6      	bne.n	800640a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006450:	bf00      	nop
 8006452:	3754      	adds	r7, #84	; 0x54
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff faaa 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006480:	bf00      	nop
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	60bb      	str	r3, [r7, #8]
   return(result);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6979      	ldr	r1, [r7, #20]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	613b      	str	r3, [r7, #16]
   return(result);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e6      	bne.n	8006490 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fa76 	bl	80059c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d4:	bf00      	nop
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b096      	sub	sp, #88	; 0x58
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f4:	2b22      	cmp	r3, #34	; 0x22
 80064f6:	f040 8098 	bne.w	800662a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006504:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006508:	b2d9      	uxtb	r1, r3
 800650a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800650e:	b2da      	uxtb	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006514:	400a      	ands	r2, r1
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800653c:	b29b      	uxth	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d17b      	bne.n	800663a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006556:	653b      	str	r3, [r7, #80]	; 0x50
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006560:	647b      	str	r3, [r7, #68]	; 0x44
 8006562:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800656e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e6      	bne.n	8006542 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3308      	adds	r3, #8
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	623b      	str	r3, [r7, #32]
   return(result);
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	f023 0301 	bic.w	r3, r3, #1
 800658a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3308      	adds	r3, #8
 8006592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006594:	633a      	str	r2, [r7, #48]	; 0x30
 8006596:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800659a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e5      	bne.n	8006574 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d12e      	bne.n	8006622 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0310 	bic.w	r3, r3, #16
 80065de:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e8:	61fb      	str	r3, [r7, #28]
 80065ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	69b9      	ldr	r1, [r7, #24]
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	e841 2300 	strex	r3, r2, [r1]
 80065f4:	617b      	str	r3, [r7, #20]
   return(result);
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e6      	bne.n	80065ca <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 0310 	and.w	r3, r3, #16
 8006606:	2b10      	cmp	r3, #16
 8006608:	d103      	bne.n	8006612 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2210      	movs	r2, #16
 8006610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff f9e4 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006620:	e00b      	b.n	800663a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fb f8a4 	bl	8001770 <HAL_UART_RxCpltCallback>
}
 8006628:	e007      	b.n	800663a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699a      	ldr	r2, [r3, #24]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f042 0208 	orr.w	r2, r2, #8
 8006638:	619a      	str	r2, [r3, #24]
}
 800663a:	bf00      	nop
 800663c:	3758      	adds	r7, #88	; 0x58
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b096      	sub	sp, #88	; 0x58
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006650:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665a:	2b22      	cmp	r3, #34	; 0x22
 800665c:	f040 8098 	bne.w	8006790 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006670:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006674:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006678:	4013      	ands	r3, r2
 800667a:	b29a      	uxth	r2, r3
 800667c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006684:	1c9a      	adds	r2, r3, #2
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d17b      	bne.n	80067a0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c6:	643b      	str	r3, [r7, #64]	; 0x40
 80066c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e6      	bne.n	80066a8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3308      	adds	r3, #8
 80066f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e5      	bne.n	80066da <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	2b01      	cmp	r3, #1
 8006728:	d12e      	bne.n	8006788 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	60bb      	str	r3, [r7, #8]
   return(result);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f023 0310 	bic.w	r3, r3, #16
 8006744:	647b      	str	r3, [r7, #68]	; 0x44
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6979      	ldr	r1, [r7, #20]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	613b      	str	r3, [r7, #16]
   return(result);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e6      	bne.n	8006730 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b10      	cmp	r3, #16
 800676e:	d103      	bne.n	8006778 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2210      	movs	r2, #16
 8006776:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff f931 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006786:	e00b      	b.n	80067a0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7fa fff1 	bl	8001770 <HAL_UART_RxCpltCallback>
}
 800678e:	e007      	b.n	80067a0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0208 	orr.w	r2, r2, #8
 800679e:	619a      	str	r2, [r3, #24]
}
 80067a0:	bf00      	nop
 80067a2:	3758      	adds	r7, #88	; 0x58
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <__errno>:
 80067a8:	4b01      	ldr	r3, [pc, #4]	; (80067b0 <__errno+0x8>)
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000010 	.word	0x20000010

080067b4 <__libc_init_array>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	4d0d      	ldr	r5, [pc, #52]	; (80067ec <__libc_init_array+0x38>)
 80067b8:	4c0d      	ldr	r4, [pc, #52]	; (80067f0 <__libc_init_array+0x3c>)
 80067ba:	1b64      	subs	r4, r4, r5
 80067bc:	10a4      	asrs	r4, r4, #2
 80067be:	2600      	movs	r6, #0
 80067c0:	42a6      	cmp	r6, r4
 80067c2:	d109      	bne.n	80067d8 <__libc_init_array+0x24>
 80067c4:	4d0b      	ldr	r5, [pc, #44]	; (80067f4 <__libc_init_array+0x40>)
 80067c6:	4c0c      	ldr	r4, [pc, #48]	; (80067f8 <__libc_init_array+0x44>)
 80067c8:	f005 f8fc 	bl	800b9c4 <_init>
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	2600      	movs	r6, #0
 80067d2:	42a6      	cmp	r6, r4
 80067d4:	d105      	bne.n	80067e2 <__libc_init_array+0x2e>
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067dc:	4798      	blx	r3
 80067de:	3601      	adds	r6, #1
 80067e0:	e7ee      	b.n	80067c0 <__libc_init_array+0xc>
 80067e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e6:	4798      	blx	r3
 80067e8:	3601      	adds	r6, #1
 80067ea:	e7f2      	b.n	80067d2 <__libc_init_array+0x1e>
 80067ec:	0800bedc 	.word	0x0800bedc
 80067f0:	0800bedc 	.word	0x0800bedc
 80067f4:	0800bedc 	.word	0x0800bedc
 80067f8:	0800bee0 	.word	0x0800bee0

080067fc <memset>:
 80067fc:	4402      	add	r2, r0
 80067fe:	4603      	mov	r3, r0
 8006800:	4293      	cmp	r3, r2
 8006802:	d100      	bne.n	8006806 <memset+0xa>
 8006804:	4770      	bx	lr
 8006806:	f803 1b01 	strb.w	r1, [r3], #1
 800680a:	e7f9      	b.n	8006800 <memset+0x4>

0800680c <__cvt>:
 800680c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	ec55 4b10 	vmov	r4, r5, d0
 8006814:	2d00      	cmp	r5, #0
 8006816:	460e      	mov	r6, r1
 8006818:	4619      	mov	r1, r3
 800681a:	462b      	mov	r3, r5
 800681c:	bfbb      	ittet	lt
 800681e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006822:	461d      	movlt	r5, r3
 8006824:	2300      	movge	r3, #0
 8006826:	232d      	movlt	r3, #45	; 0x2d
 8006828:	700b      	strb	r3, [r1, #0]
 800682a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800682c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006830:	4691      	mov	r9, r2
 8006832:	f023 0820 	bic.w	r8, r3, #32
 8006836:	bfbc      	itt	lt
 8006838:	4622      	movlt	r2, r4
 800683a:	4614      	movlt	r4, r2
 800683c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006840:	d005      	beq.n	800684e <__cvt+0x42>
 8006842:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006846:	d100      	bne.n	800684a <__cvt+0x3e>
 8006848:	3601      	adds	r6, #1
 800684a:	2102      	movs	r1, #2
 800684c:	e000      	b.n	8006850 <__cvt+0x44>
 800684e:	2103      	movs	r1, #3
 8006850:	ab03      	add	r3, sp, #12
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	ab02      	add	r3, sp, #8
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	ec45 4b10 	vmov	d0, r4, r5
 800685c:	4653      	mov	r3, sl
 800685e:	4632      	mov	r2, r6
 8006860:	f001 fe76 	bl	8008550 <_dtoa_r>
 8006864:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006868:	4607      	mov	r7, r0
 800686a:	d102      	bne.n	8006872 <__cvt+0x66>
 800686c:	f019 0f01 	tst.w	r9, #1
 8006870:	d022      	beq.n	80068b8 <__cvt+0xac>
 8006872:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006876:	eb07 0906 	add.w	r9, r7, r6
 800687a:	d110      	bne.n	800689e <__cvt+0x92>
 800687c:	783b      	ldrb	r3, [r7, #0]
 800687e:	2b30      	cmp	r3, #48	; 0x30
 8006880:	d10a      	bne.n	8006898 <__cvt+0x8c>
 8006882:	2200      	movs	r2, #0
 8006884:	2300      	movs	r3, #0
 8006886:	4620      	mov	r0, r4
 8006888:	4629      	mov	r1, r5
 800688a:	f7fa f93d 	bl	8000b08 <__aeabi_dcmpeq>
 800688e:	b918      	cbnz	r0, 8006898 <__cvt+0x8c>
 8006890:	f1c6 0601 	rsb	r6, r6, #1
 8006894:	f8ca 6000 	str.w	r6, [sl]
 8006898:	f8da 3000 	ldr.w	r3, [sl]
 800689c:	4499      	add	r9, r3
 800689e:	2200      	movs	r2, #0
 80068a0:	2300      	movs	r3, #0
 80068a2:	4620      	mov	r0, r4
 80068a4:	4629      	mov	r1, r5
 80068a6:	f7fa f92f 	bl	8000b08 <__aeabi_dcmpeq>
 80068aa:	b108      	cbz	r0, 80068b0 <__cvt+0xa4>
 80068ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80068b0:	2230      	movs	r2, #48	; 0x30
 80068b2:	9b03      	ldr	r3, [sp, #12]
 80068b4:	454b      	cmp	r3, r9
 80068b6:	d307      	bcc.n	80068c8 <__cvt+0xbc>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068bc:	1bdb      	subs	r3, r3, r7
 80068be:	4638      	mov	r0, r7
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	b004      	add	sp, #16
 80068c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c8:	1c59      	adds	r1, r3, #1
 80068ca:	9103      	str	r1, [sp, #12]
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e7f0      	b.n	80068b2 <__cvt+0xa6>

080068d0 <__exponent>:
 80068d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068d2:	4603      	mov	r3, r0
 80068d4:	2900      	cmp	r1, #0
 80068d6:	bfb8      	it	lt
 80068d8:	4249      	neglt	r1, r1
 80068da:	f803 2b02 	strb.w	r2, [r3], #2
 80068de:	bfb4      	ite	lt
 80068e0:	222d      	movlt	r2, #45	; 0x2d
 80068e2:	222b      	movge	r2, #43	; 0x2b
 80068e4:	2909      	cmp	r1, #9
 80068e6:	7042      	strb	r2, [r0, #1]
 80068e8:	dd2a      	ble.n	8006940 <__exponent+0x70>
 80068ea:	f10d 0407 	add.w	r4, sp, #7
 80068ee:	46a4      	mov	ip, r4
 80068f0:	270a      	movs	r7, #10
 80068f2:	46a6      	mov	lr, r4
 80068f4:	460a      	mov	r2, r1
 80068f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80068fa:	fb07 1516 	mls	r5, r7, r6, r1
 80068fe:	3530      	adds	r5, #48	; 0x30
 8006900:	2a63      	cmp	r2, #99	; 0x63
 8006902:	f104 34ff 	add.w	r4, r4, #4294967295
 8006906:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800690a:	4631      	mov	r1, r6
 800690c:	dcf1      	bgt.n	80068f2 <__exponent+0x22>
 800690e:	3130      	adds	r1, #48	; 0x30
 8006910:	f1ae 0502 	sub.w	r5, lr, #2
 8006914:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006918:	1c44      	adds	r4, r0, #1
 800691a:	4629      	mov	r1, r5
 800691c:	4561      	cmp	r1, ip
 800691e:	d30a      	bcc.n	8006936 <__exponent+0x66>
 8006920:	f10d 0209 	add.w	r2, sp, #9
 8006924:	eba2 020e 	sub.w	r2, r2, lr
 8006928:	4565      	cmp	r5, ip
 800692a:	bf88      	it	hi
 800692c:	2200      	movhi	r2, #0
 800692e:	4413      	add	r3, r2
 8006930:	1a18      	subs	r0, r3, r0
 8006932:	b003      	add	sp, #12
 8006934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800693a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800693e:	e7ed      	b.n	800691c <__exponent+0x4c>
 8006940:	2330      	movs	r3, #48	; 0x30
 8006942:	3130      	adds	r1, #48	; 0x30
 8006944:	7083      	strb	r3, [r0, #2]
 8006946:	70c1      	strb	r1, [r0, #3]
 8006948:	1d03      	adds	r3, r0, #4
 800694a:	e7f1      	b.n	8006930 <__exponent+0x60>

0800694c <_printf_float>:
 800694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006950:	ed2d 8b02 	vpush	{d8}
 8006954:	b08d      	sub	sp, #52	; 0x34
 8006956:	460c      	mov	r4, r1
 8006958:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800695c:	4616      	mov	r6, r2
 800695e:	461f      	mov	r7, r3
 8006960:	4605      	mov	r5, r0
 8006962:	f002 ff53 	bl	800980c <_localeconv_r>
 8006966:	f8d0 a000 	ldr.w	sl, [r0]
 800696a:	4650      	mov	r0, sl
 800696c:	f7f9 fc50 	bl	8000210 <strlen>
 8006970:	2300      	movs	r3, #0
 8006972:	930a      	str	r3, [sp, #40]	; 0x28
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	9305      	str	r3, [sp, #20]
 8006978:	f8d8 3000 	ldr.w	r3, [r8]
 800697c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006980:	3307      	adds	r3, #7
 8006982:	f023 0307 	bic.w	r3, r3, #7
 8006986:	f103 0208 	add.w	r2, r3, #8
 800698a:	f8c8 2000 	str.w	r2, [r8]
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006996:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800699a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800699e:	9307      	str	r3, [sp, #28]
 80069a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80069a4:	ee08 0a10 	vmov	s16, r0
 80069a8:	4b9f      	ldr	r3, [pc, #636]	; (8006c28 <_printf_float+0x2dc>)
 80069aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ae:	f04f 32ff 	mov.w	r2, #4294967295
 80069b2:	f7fa f8db 	bl	8000b6c <__aeabi_dcmpun>
 80069b6:	bb88      	cbnz	r0, 8006a1c <_printf_float+0xd0>
 80069b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069bc:	4b9a      	ldr	r3, [pc, #616]	; (8006c28 <_printf_float+0x2dc>)
 80069be:	f04f 32ff 	mov.w	r2, #4294967295
 80069c2:	f7fa f8b5 	bl	8000b30 <__aeabi_dcmple>
 80069c6:	bb48      	cbnz	r0, 8006a1c <_printf_float+0xd0>
 80069c8:	2200      	movs	r2, #0
 80069ca:	2300      	movs	r3, #0
 80069cc:	4640      	mov	r0, r8
 80069ce:	4649      	mov	r1, r9
 80069d0:	f7fa f8a4 	bl	8000b1c <__aeabi_dcmplt>
 80069d4:	b110      	cbz	r0, 80069dc <_printf_float+0x90>
 80069d6:	232d      	movs	r3, #45	; 0x2d
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069dc:	4b93      	ldr	r3, [pc, #588]	; (8006c2c <_printf_float+0x2e0>)
 80069de:	4894      	ldr	r0, [pc, #592]	; (8006c30 <_printf_float+0x2e4>)
 80069e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069e4:	bf94      	ite	ls
 80069e6:	4698      	movls	r8, r3
 80069e8:	4680      	movhi	r8, r0
 80069ea:	2303      	movs	r3, #3
 80069ec:	6123      	str	r3, [r4, #16]
 80069ee:	9b05      	ldr	r3, [sp, #20]
 80069f0:	f023 0204 	bic.w	r2, r3, #4
 80069f4:	6022      	str	r2, [r4, #0]
 80069f6:	f04f 0900 	mov.w	r9, #0
 80069fa:	9700      	str	r7, [sp, #0]
 80069fc:	4633      	mov	r3, r6
 80069fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a00:	4621      	mov	r1, r4
 8006a02:	4628      	mov	r0, r5
 8006a04:	f000 f9d8 	bl	8006db8 <_printf_common>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f040 8090 	bne.w	8006b2e <_printf_float+0x1e2>
 8006a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a12:	b00d      	add	sp, #52	; 0x34
 8006a14:	ecbd 8b02 	vpop	{d8}
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	464b      	mov	r3, r9
 8006a20:	4640      	mov	r0, r8
 8006a22:	4649      	mov	r1, r9
 8006a24:	f7fa f8a2 	bl	8000b6c <__aeabi_dcmpun>
 8006a28:	b140      	cbz	r0, 8006a3c <_printf_float+0xf0>
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	bfbc      	itt	lt
 8006a30:	232d      	movlt	r3, #45	; 0x2d
 8006a32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a36:	487f      	ldr	r0, [pc, #508]	; (8006c34 <_printf_float+0x2e8>)
 8006a38:	4b7f      	ldr	r3, [pc, #508]	; (8006c38 <_printf_float+0x2ec>)
 8006a3a:	e7d1      	b.n	80069e0 <_printf_float+0x94>
 8006a3c:	6863      	ldr	r3, [r4, #4]
 8006a3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a42:	9206      	str	r2, [sp, #24]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	d13f      	bne.n	8006ac8 <_printf_float+0x17c>
 8006a48:	2306      	movs	r3, #6
 8006a4a:	6063      	str	r3, [r4, #4]
 8006a4c:	9b05      	ldr	r3, [sp, #20]
 8006a4e:	6861      	ldr	r1, [r4, #4]
 8006a50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a54:	2300      	movs	r3, #0
 8006a56:	9303      	str	r3, [sp, #12]
 8006a58:	ab0a      	add	r3, sp, #40	; 0x28
 8006a5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a5e:	ab09      	add	r3, sp, #36	; 0x24
 8006a60:	ec49 8b10 	vmov	d0, r8, r9
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	6022      	str	r2, [r4, #0]
 8006a68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f7ff fecd 	bl	800680c <__cvt>
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a76:	2b47      	cmp	r3, #71	; 0x47
 8006a78:	4680      	mov	r8, r0
 8006a7a:	d108      	bne.n	8006a8e <_printf_float+0x142>
 8006a7c:	1cc8      	adds	r0, r1, #3
 8006a7e:	db02      	blt.n	8006a86 <_printf_float+0x13a>
 8006a80:	6863      	ldr	r3, [r4, #4]
 8006a82:	4299      	cmp	r1, r3
 8006a84:	dd41      	ble.n	8006b0a <_printf_float+0x1be>
 8006a86:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a8a:	fa5f fb8b 	uxtb.w	fp, fp
 8006a8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a92:	d820      	bhi.n	8006ad6 <_printf_float+0x18a>
 8006a94:	3901      	subs	r1, #1
 8006a96:	465a      	mov	r2, fp
 8006a98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a9c:	9109      	str	r1, [sp, #36]	; 0x24
 8006a9e:	f7ff ff17 	bl	80068d0 <__exponent>
 8006aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aa4:	1813      	adds	r3, r2, r0
 8006aa6:	2a01      	cmp	r2, #1
 8006aa8:	4681      	mov	r9, r0
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	dc02      	bgt.n	8006ab4 <_printf_float+0x168>
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	07d2      	lsls	r2, r2, #31
 8006ab2:	d501      	bpl.n	8006ab8 <_printf_float+0x16c>
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	6123      	str	r3, [r4, #16]
 8006ab8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d09c      	beq.n	80069fa <_printf_float+0xae>
 8006ac0:	232d      	movs	r3, #45	; 0x2d
 8006ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac6:	e798      	b.n	80069fa <_printf_float+0xae>
 8006ac8:	9a06      	ldr	r2, [sp, #24]
 8006aca:	2a47      	cmp	r2, #71	; 0x47
 8006acc:	d1be      	bne.n	8006a4c <_printf_float+0x100>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1bc      	bne.n	8006a4c <_printf_float+0x100>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e7b9      	b.n	8006a4a <_printf_float+0xfe>
 8006ad6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ada:	d118      	bne.n	8006b0e <_printf_float+0x1c2>
 8006adc:	2900      	cmp	r1, #0
 8006ade:	6863      	ldr	r3, [r4, #4]
 8006ae0:	dd0b      	ble.n	8006afa <_printf_float+0x1ae>
 8006ae2:	6121      	str	r1, [r4, #16]
 8006ae4:	b913      	cbnz	r3, 8006aec <_printf_float+0x1a0>
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	07d0      	lsls	r0, r2, #31
 8006aea:	d502      	bpl.n	8006af2 <_printf_float+0x1a6>
 8006aec:	3301      	adds	r3, #1
 8006aee:	440b      	add	r3, r1
 8006af0:	6123      	str	r3, [r4, #16]
 8006af2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006af4:	f04f 0900 	mov.w	r9, #0
 8006af8:	e7de      	b.n	8006ab8 <_printf_float+0x16c>
 8006afa:	b913      	cbnz	r3, 8006b02 <_printf_float+0x1b6>
 8006afc:	6822      	ldr	r2, [r4, #0]
 8006afe:	07d2      	lsls	r2, r2, #31
 8006b00:	d501      	bpl.n	8006b06 <_printf_float+0x1ba>
 8006b02:	3302      	adds	r3, #2
 8006b04:	e7f4      	b.n	8006af0 <_printf_float+0x1a4>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e7f2      	b.n	8006af0 <_printf_float+0x1a4>
 8006b0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b10:	4299      	cmp	r1, r3
 8006b12:	db05      	blt.n	8006b20 <_printf_float+0x1d4>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	6121      	str	r1, [r4, #16]
 8006b18:	07d8      	lsls	r0, r3, #31
 8006b1a:	d5ea      	bpl.n	8006af2 <_printf_float+0x1a6>
 8006b1c:	1c4b      	adds	r3, r1, #1
 8006b1e:	e7e7      	b.n	8006af0 <_printf_float+0x1a4>
 8006b20:	2900      	cmp	r1, #0
 8006b22:	bfd4      	ite	le
 8006b24:	f1c1 0202 	rsble	r2, r1, #2
 8006b28:	2201      	movgt	r2, #1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	e7e0      	b.n	8006af0 <_printf_float+0x1a4>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	055a      	lsls	r2, r3, #21
 8006b32:	d407      	bmi.n	8006b44 <_printf_float+0x1f8>
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	4642      	mov	r2, r8
 8006b38:	4631      	mov	r1, r6
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	47b8      	blx	r7
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d12c      	bne.n	8006b9c <_printf_float+0x250>
 8006b42:	e764      	b.n	8006a0e <_printf_float+0xc2>
 8006b44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b48:	f240 80e0 	bls.w	8006d0c <_printf_float+0x3c0>
 8006b4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b50:	2200      	movs	r2, #0
 8006b52:	2300      	movs	r3, #0
 8006b54:	f7f9 ffd8 	bl	8000b08 <__aeabi_dcmpeq>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d034      	beq.n	8006bc6 <_printf_float+0x27a>
 8006b5c:	4a37      	ldr	r2, [pc, #220]	; (8006c3c <_printf_float+0x2f0>)
 8006b5e:	2301      	movs	r3, #1
 8006b60:	4631      	mov	r1, r6
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b8      	blx	r7
 8006b66:	3001      	adds	r0, #1
 8006b68:	f43f af51 	beq.w	8006a0e <_printf_float+0xc2>
 8006b6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b70:	429a      	cmp	r2, r3
 8006b72:	db02      	blt.n	8006b7a <_printf_float+0x22e>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	07d8      	lsls	r0, r3, #31
 8006b78:	d510      	bpl.n	8006b9c <_printf_float+0x250>
 8006b7a:	ee18 3a10 	vmov	r3, s16
 8006b7e:	4652      	mov	r2, sl
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b8      	blx	r7
 8006b86:	3001      	adds	r0, #1
 8006b88:	f43f af41 	beq.w	8006a0e <_printf_float+0xc2>
 8006b8c:	f04f 0800 	mov.w	r8, #0
 8006b90:	f104 091a 	add.w	r9, r4, #26
 8006b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4543      	cmp	r3, r8
 8006b9a:	dc09      	bgt.n	8006bb0 <_printf_float+0x264>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	079b      	lsls	r3, r3, #30
 8006ba0:	f100 8105 	bmi.w	8006dae <_printf_float+0x462>
 8006ba4:	68e0      	ldr	r0, [r4, #12]
 8006ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ba8:	4298      	cmp	r0, r3
 8006baa:	bfb8      	it	lt
 8006bac:	4618      	movlt	r0, r3
 8006bae:	e730      	b.n	8006a12 <_printf_float+0xc6>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	464a      	mov	r2, r9
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f43f af27 	beq.w	8006a0e <_printf_float+0xc2>
 8006bc0:	f108 0801 	add.w	r8, r8, #1
 8006bc4:	e7e6      	b.n	8006b94 <_printf_float+0x248>
 8006bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc39      	bgt.n	8006c40 <_printf_float+0x2f4>
 8006bcc:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <_printf_float+0x2f0>)
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	f43f af19 	beq.w	8006a0e <_printf_float+0xc2>
 8006bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006be0:	4313      	orrs	r3, r2
 8006be2:	d102      	bne.n	8006bea <_printf_float+0x29e>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	07d9      	lsls	r1, r3, #31
 8006be8:	d5d8      	bpl.n	8006b9c <_printf_float+0x250>
 8006bea:	ee18 3a10 	vmov	r3, s16
 8006bee:	4652      	mov	r2, sl
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f af09 	beq.w	8006a0e <_printf_float+0xc2>
 8006bfc:	f04f 0900 	mov.w	r9, #0
 8006c00:	f104 0a1a 	add.w	sl, r4, #26
 8006c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c06:	425b      	negs	r3, r3
 8006c08:	454b      	cmp	r3, r9
 8006c0a:	dc01      	bgt.n	8006c10 <_printf_float+0x2c4>
 8006c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c0e:	e792      	b.n	8006b36 <_printf_float+0x1ea>
 8006c10:	2301      	movs	r3, #1
 8006c12:	4652      	mov	r2, sl
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f43f aef7 	beq.w	8006a0e <_printf_float+0xc2>
 8006c20:	f109 0901 	add.w	r9, r9, #1
 8006c24:	e7ee      	b.n	8006c04 <_printf_float+0x2b8>
 8006c26:	bf00      	nop
 8006c28:	7fefffff 	.word	0x7fefffff
 8006c2c:	0800ba1c 	.word	0x0800ba1c
 8006c30:	0800ba20 	.word	0x0800ba20
 8006c34:	0800ba28 	.word	0x0800ba28
 8006c38:	0800ba24 	.word	0x0800ba24
 8006c3c:	0800be21 	.word	0x0800be21
 8006c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c44:	429a      	cmp	r2, r3
 8006c46:	bfa8      	it	ge
 8006c48:	461a      	movge	r2, r3
 8006c4a:	2a00      	cmp	r2, #0
 8006c4c:	4691      	mov	r9, r2
 8006c4e:	dc37      	bgt.n	8006cc0 <_printf_float+0x374>
 8006c50:	f04f 0b00 	mov.w	fp, #0
 8006c54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c58:	f104 021a 	add.w	r2, r4, #26
 8006c5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c5e:	9305      	str	r3, [sp, #20]
 8006c60:	eba3 0309 	sub.w	r3, r3, r9
 8006c64:	455b      	cmp	r3, fp
 8006c66:	dc33      	bgt.n	8006cd0 <_printf_float+0x384>
 8006c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	db3b      	blt.n	8006ce8 <_printf_float+0x39c>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	07da      	lsls	r2, r3, #31
 8006c74:	d438      	bmi.n	8006ce8 <_printf_float+0x39c>
 8006c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c78:	9a05      	ldr	r2, [sp, #20]
 8006c7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c7c:	1a9a      	subs	r2, r3, r2
 8006c7e:	eba3 0901 	sub.w	r9, r3, r1
 8006c82:	4591      	cmp	r9, r2
 8006c84:	bfa8      	it	ge
 8006c86:	4691      	movge	r9, r2
 8006c88:	f1b9 0f00 	cmp.w	r9, #0
 8006c8c:	dc35      	bgt.n	8006cfa <_printf_float+0x3ae>
 8006c8e:	f04f 0800 	mov.w	r8, #0
 8006c92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c96:	f104 0a1a 	add.w	sl, r4, #26
 8006c9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c9e:	1a9b      	subs	r3, r3, r2
 8006ca0:	eba3 0309 	sub.w	r3, r3, r9
 8006ca4:	4543      	cmp	r3, r8
 8006ca6:	f77f af79 	ble.w	8006b9c <_printf_float+0x250>
 8006caa:	2301      	movs	r3, #1
 8006cac:	4652      	mov	r2, sl
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f aeaa 	beq.w	8006a0e <_printf_float+0xc2>
 8006cba:	f108 0801 	add.w	r8, r8, #1
 8006cbe:	e7ec      	b.n	8006c9a <_printf_float+0x34e>
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	47b8      	blx	r7
 8006cca:	3001      	adds	r0, #1
 8006ccc:	d1c0      	bne.n	8006c50 <_printf_float+0x304>
 8006cce:	e69e      	b.n	8006a0e <_printf_float+0xc2>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	9205      	str	r2, [sp, #20]
 8006cd8:	47b8      	blx	r7
 8006cda:	3001      	adds	r0, #1
 8006cdc:	f43f ae97 	beq.w	8006a0e <_printf_float+0xc2>
 8006ce0:	9a05      	ldr	r2, [sp, #20]
 8006ce2:	f10b 0b01 	add.w	fp, fp, #1
 8006ce6:	e7b9      	b.n	8006c5c <_printf_float+0x310>
 8006ce8:	ee18 3a10 	vmov	r3, s16
 8006cec:	4652      	mov	r2, sl
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b8      	blx	r7
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d1be      	bne.n	8006c76 <_printf_float+0x32a>
 8006cf8:	e689      	b.n	8006a0e <_printf_float+0xc2>
 8006cfa:	9a05      	ldr	r2, [sp, #20]
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	4442      	add	r2, r8
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	d1c1      	bne.n	8006c8e <_printf_float+0x342>
 8006d0a:	e680      	b.n	8006a0e <_printf_float+0xc2>
 8006d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d0e:	2a01      	cmp	r2, #1
 8006d10:	dc01      	bgt.n	8006d16 <_printf_float+0x3ca>
 8006d12:	07db      	lsls	r3, r3, #31
 8006d14:	d538      	bpl.n	8006d88 <_printf_float+0x43c>
 8006d16:	2301      	movs	r3, #1
 8006d18:	4642      	mov	r2, r8
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	f43f ae74 	beq.w	8006a0e <_printf_float+0xc2>
 8006d26:	ee18 3a10 	vmov	r3, s16
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	f43f ae6b 	beq.w	8006a0e <_printf_float+0xc2>
 8006d38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f7f9 fee2 	bl	8000b08 <__aeabi_dcmpeq>
 8006d44:	b9d8      	cbnz	r0, 8006d7e <_printf_float+0x432>
 8006d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d48:	f108 0201 	add.w	r2, r8, #1
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b8      	blx	r7
 8006d54:	3001      	adds	r0, #1
 8006d56:	d10e      	bne.n	8006d76 <_printf_float+0x42a>
 8006d58:	e659      	b.n	8006a0e <_printf_float+0xc2>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	f43f ae52 	beq.w	8006a0e <_printf_float+0xc2>
 8006d6a:	f108 0801 	add.w	r8, r8, #1
 8006d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d70:	3b01      	subs	r3, #1
 8006d72:	4543      	cmp	r3, r8
 8006d74:	dcf1      	bgt.n	8006d5a <_printf_float+0x40e>
 8006d76:	464b      	mov	r3, r9
 8006d78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d7c:	e6dc      	b.n	8006b38 <_printf_float+0x1ec>
 8006d7e:	f04f 0800 	mov.w	r8, #0
 8006d82:	f104 0a1a 	add.w	sl, r4, #26
 8006d86:	e7f2      	b.n	8006d6e <_printf_float+0x422>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4642      	mov	r2, r8
 8006d8c:	e7df      	b.n	8006d4e <_printf_float+0x402>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	464a      	mov	r2, r9
 8006d92:	4631      	mov	r1, r6
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b8      	blx	r7
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f43f ae38 	beq.w	8006a0e <_printf_float+0xc2>
 8006d9e:	f108 0801 	add.w	r8, r8, #1
 8006da2:	68e3      	ldr	r3, [r4, #12]
 8006da4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006da6:	1a5b      	subs	r3, r3, r1
 8006da8:	4543      	cmp	r3, r8
 8006daa:	dcf0      	bgt.n	8006d8e <_printf_float+0x442>
 8006dac:	e6fa      	b.n	8006ba4 <_printf_float+0x258>
 8006dae:	f04f 0800 	mov.w	r8, #0
 8006db2:	f104 0919 	add.w	r9, r4, #25
 8006db6:	e7f4      	b.n	8006da2 <_printf_float+0x456>

08006db8 <_printf_common>:
 8006db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	4699      	mov	r9, r3
 8006dc0:	688a      	ldr	r2, [r1, #8]
 8006dc2:	690b      	ldr	r3, [r1, #16]
 8006dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	bfb8      	it	lt
 8006dcc:	4613      	movlt	r3, r2
 8006dce:	6033      	str	r3, [r6, #0]
 8006dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	b10a      	cbz	r2, 8006dde <_printf_common+0x26>
 8006dda:	3301      	adds	r3, #1
 8006ddc:	6033      	str	r3, [r6, #0]
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	0699      	lsls	r1, r3, #26
 8006de2:	bf42      	ittt	mi
 8006de4:	6833      	ldrmi	r3, [r6, #0]
 8006de6:	3302      	addmi	r3, #2
 8006de8:	6033      	strmi	r3, [r6, #0]
 8006dea:	6825      	ldr	r5, [r4, #0]
 8006dec:	f015 0506 	ands.w	r5, r5, #6
 8006df0:	d106      	bne.n	8006e00 <_printf_common+0x48>
 8006df2:	f104 0a19 	add.w	sl, r4, #25
 8006df6:	68e3      	ldr	r3, [r4, #12]
 8006df8:	6832      	ldr	r2, [r6, #0]
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	42ab      	cmp	r3, r5
 8006dfe:	dc26      	bgt.n	8006e4e <_printf_common+0x96>
 8006e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e04:	1e13      	subs	r3, r2, #0
 8006e06:	6822      	ldr	r2, [r4, #0]
 8006e08:	bf18      	it	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	0692      	lsls	r2, r2, #26
 8006e0e:	d42b      	bmi.n	8006e68 <_printf_common+0xb0>
 8006e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e14:	4649      	mov	r1, r9
 8006e16:	4638      	mov	r0, r7
 8006e18:	47c0      	blx	r8
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d01e      	beq.n	8006e5c <_printf_common+0xa4>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	68e5      	ldr	r5, [r4, #12]
 8006e22:	6832      	ldr	r2, [r6, #0]
 8006e24:	f003 0306 	and.w	r3, r3, #6
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	bf08      	it	eq
 8006e2c:	1aad      	subeq	r5, r5, r2
 8006e2e:	68a3      	ldr	r3, [r4, #8]
 8006e30:	6922      	ldr	r2, [r4, #16]
 8006e32:	bf0c      	ite	eq
 8006e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e38:	2500      	movne	r5, #0
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	bfc4      	itt	gt
 8006e3e:	1a9b      	subgt	r3, r3, r2
 8006e40:	18ed      	addgt	r5, r5, r3
 8006e42:	2600      	movs	r6, #0
 8006e44:	341a      	adds	r4, #26
 8006e46:	42b5      	cmp	r5, r6
 8006e48:	d11a      	bne.n	8006e80 <_printf_common+0xc8>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	e008      	b.n	8006e60 <_printf_common+0xa8>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4652      	mov	r2, sl
 8006e52:	4649      	mov	r1, r9
 8006e54:	4638      	mov	r0, r7
 8006e56:	47c0      	blx	r8
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d103      	bne.n	8006e64 <_printf_common+0xac>
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e64:	3501      	adds	r5, #1
 8006e66:	e7c6      	b.n	8006df6 <_printf_common+0x3e>
 8006e68:	18e1      	adds	r1, r4, r3
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	2030      	movs	r0, #48	; 0x30
 8006e6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e72:	4422      	add	r2, r4
 8006e74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e7c:	3302      	adds	r3, #2
 8006e7e:	e7c7      	b.n	8006e10 <_printf_common+0x58>
 8006e80:	2301      	movs	r3, #1
 8006e82:	4622      	mov	r2, r4
 8006e84:	4649      	mov	r1, r9
 8006e86:	4638      	mov	r0, r7
 8006e88:	47c0      	blx	r8
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d0e6      	beq.n	8006e5c <_printf_common+0xa4>
 8006e8e:	3601      	adds	r6, #1
 8006e90:	e7d9      	b.n	8006e46 <_printf_common+0x8e>
	...

08006e94 <_printf_i>:
 8006e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	7e0f      	ldrb	r7, [r1, #24]
 8006e9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e9c:	2f78      	cmp	r7, #120	; 0x78
 8006e9e:	4691      	mov	r9, r2
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	469a      	mov	sl, r3
 8006ea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006eaa:	d807      	bhi.n	8006ebc <_printf_i+0x28>
 8006eac:	2f62      	cmp	r7, #98	; 0x62
 8006eae:	d80a      	bhi.n	8006ec6 <_printf_i+0x32>
 8006eb0:	2f00      	cmp	r7, #0
 8006eb2:	f000 80d8 	beq.w	8007066 <_printf_i+0x1d2>
 8006eb6:	2f58      	cmp	r7, #88	; 0x58
 8006eb8:	f000 80a3 	beq.w	8007002 <_printf_i+0x16e>
 8006ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ec4:	e03a      	b.n	8006f3c <_printf_i+0xa8>
 8006ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eca:	2b15      	cmp	r3, #21
 8006ecc:	d8f6      	bhi.n	8006ebc <_printf_i+0x28>
 8006ece:	a101      	add	r1, pc, #4	; (adr r1, 8006ed4 <_printf_i+0x40>)
 8006ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ed4:	08006f2d 	.word	0x08006f2d
 8006ed8:	08006f41 	.word	0x08006f41
 8006edc:	08006ebd 	.word	0x08006ebd
 8006ee0:	08006ebd 	.word	0x08006ebd
 8006ee4:	08006ebd 	.word	0x08006ebd
 8006ee8:	08006ebd 	.word	0x08006ebd
 8006eec:	08006f41 	.word	0x08006f41
 8006ef0:	08006ebd 	.word	0x08006ebd
 8006ef4:	08006ebd 	.word	0x08006ebd
 8006ef8:	08006ebd 	.word	0x08006ebd
 8006efc:	08006ebd 	.word	0x08006ebd
 8006f00:	0800704d 	.word	0x0800704d
 8006f04:	08006f71 	.word	0x08006f71
 8006f08:	0800702f 	.word	0x0800702f
 8006f0c:	08006ebd 	.word	0x08006ebd
 8006f10:	08006ebd 	.word	0x08006ebd
 8006f14:	0800706f 	.word	0x0800706f
 8006f18:	08006ebd 	.word	0x08006ebd
 8006f1c:	08006f71 	.word	0x08006f71
 8006f20:	08006ebd 	.word	0x08006ebd
 8006f24:	08006ebd 	.word	0x08006ebd
 8006f28:	08007037 	.word	0x08007037
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	1d1a      	adds	r2, r3, #4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	602a      	str	r2, [r5, #0]
 8006f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e0a3      	b.n	8007088 <_printf_i+0x1f4>
 8006f40:	6820      	ldr	r0, [r4, #0]
 8006f42:	6829      	ldr	r1, [r5, #0]
 8006f44:	0606      	lsls	r6, r0, #24
 8006f46:	f101 0304 	add.w	r3, r1, #4
 8006f4a:	d50a      	bpl.n	8006f62 <_printf_i+0xce>
 8006f4c:	680e      	ldr	r6, [r1, #0]
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	da03      	bge.n	8006f5c <_printf_i+0xc8>
 8006f54:	232d      	movs	r3, #45	; 0x2d
 8006f56:	4276      	negs	r6, r6
 8006f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5c:	485e      	ldr	r0, [pc, #376]	; (80070d8 <_printf_i+0x244>)
 8006f5e:	230a      	movs	r3, #10
 8006f60:	e019      	b.n	8006f96 <_printf_i+0x102>
 8006f62:	680e      	ldr	r6, [r1, #0]
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f6a:	bf18      	it	ne
 8006f6c:	b236      	sxthne	r6, r6
 8006f6e:	e7ef      	b.n	8006f50 <_printf_i+0xbc>
 8006f70:	682b      	ldr	r3, [r5, #0]
 8006f72:	6820      	ldr	r0, [r4, #0]
 8006f74:	1d19      	adds	r1, r3, #4
 8006f76:	6029      	str	r1, [r5, #0]
 8006f78:	0601      	lsls	r1, r0, #24
 8006f7a:	d501      	bpl.n	8006f80 <_printf_i+0xec>
 8006f7c:	681e      	ldr	r6, [r3, #0]
 8006f7e:	e002      	b.n	8006f86 <_printf_i+0xf2>
 8006f80:	0646      	lsls	r6, r0, #25
 8006f82:	d5fb      	bpl.n	8006f7c <_printf_i+0xe8>
 8006f84:	881e      	ldrh	r6, [r3, #0]
 8006f86:	4854      	ldr	r0, [pc, #336]	; (80070d8 <_printf_i+0x244>)
 8006f88:	2f6f      	cmp	r7, #111	; 0x6f
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2308      	moveq	r3, #8
 8006f8e:	230a      	movne	r3, #10
 8006f90:	2100      	movs	r1, #0
 8006f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f96:	6865      	ldr	r5, [r4, #4]
 8006f98:	60a5      	str	r5, [r4, #8]
 8006f9a:	2d00      	cmp	r5, #0
 8006f9c:	bfa2      	ittt	ge
 8006f9e:	6821      	ldrge	r1, [r4, #0]
 8006fa0:	f021 0104 	bicge.w	r1, r1, #4
 8006fa4:	6021      	strge	r1, [r4, #0]
 8006fa6:	b90e      	cbnz	r6, 8006fac <_printf_i+0x118>
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	d04d      	beq.n	8007048 <_printf_i+0x1b4>
 8006fac:	4615      	mov	r5, r2
 8006fae:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fb2:	fb03 6711 	mls	r7, r3, r1, r6
 8006fb6:	5dc7      	ldrb	r7, [r0, r7]
 8006fb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fbc:	4637      	mov	r7, r6
 8006fbe:	42bb      	cmp	r3, r7
 8006fc0:	460e      	mov	r6, r1
 8006fc2:	d9f4      	bls.n	8006fae <_printf_i+0x11a>
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d10b      	bne.n	8006fe0 <_printf_i+0x14c>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	07de      	lsls	r6, r3, #31
 8006fcc:	d508      	bpl.n	8006fe0 <_printf_i+0x14c>
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	6861      	ldr	r1, [r4, #4]
 8006fd2:	4299      	cmp	r1, r3
 8006fd4:	bfde      	ittt	le
 8006fd6:	2330      	movle	r3, #48	; 0x30
 8006fd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fe0:	1b52      	subs	r2, r2, r5
 8006fe2:	6122      	str	r2, [r4, #16]
 8006fe4:	f8cd a000 	str.w	sl, [sp]
 8006fe8:	464b      	mov	r3, r9
 8006fea:	aa03      	add	r2, sp, #12
 8006fec:	4621      	mov	r1, r4
 8006fee:	4640      	mov	r0, r8
 8006ff0:	f7ff fee2 	bl	8006db8 <_printf_common>
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d14c      	bne.n	8007092 <_printf_i+0x1fe>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	b004      	add	sp, #16
 8006ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007002:	4835      	ldr	r0, [pc, #212]	; (80070d8 <_printf_i+0x244>)
 8007004:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007008:	6829      	ldr	r1, [r5, #0]
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007010:	6029      	str	r1, [r5, #0]
 8007012:	061d      	lsls	r5, r3, #24
 8007014:	d514      	bpl.n	8007040 <_printf_i+0x1ac>
 8007016:	07df      	lsls	r7, r3, #31
 8007018:	bf44      	itt	mi
 800701a:	f043 0320 	orrmi.w	r3, r3, #32
 800701e:	6023      	strmi	r3, [r4, #0]
 8007020:	b91e      	cbnz	r6, 800702a <_printf_i+0x196>
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	f023 0320 	bic.w	r3, r3, #32
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	2310      	movs	r3, #16
 800702c:	e7b0      	b.n	8006f90 <_printf_i+0xfc>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	f043 0320 	orr.w	r3, r3, #32
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	2378      	movs	r3, #120	; 0x78
 8007038:	4828      	ldr	r0, [pc, #160]	; (80070dc <_printf_i+0x248>)
 800703a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800703e:	e7e3      	b.n	8007008 <_printf_i+0x174>
 8007040:	0659      	lsls	r1, r3, #25
 8007042:	bf48      	it	mi
 8007044:	b2b6      	uxthmi	r6, r6
 8007046:	e7e6      	b.n	8007016 <_printf_i+0x182>
 8007048:	4615      	mov	r5, r2
 800704a:	e7bb      	b.n	8006fc4 <_printf_i+0x130>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	6826      	ldr	r6, [r4, #0]
 8007050:	6961      	ldr	r1, [r4, #20]
 8007052:	1d18      	adds	r0, r3, #4
 8007054:	6028      	str	r0, [r5, #0]
 8007056:	0635      	lsls	r5, r6, #24
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	d501      	bpl.n	8007060 <_printf_i+0x1cc>
 800705c:	6019      	str	r1, [r3, #0]
 800705e:	e002      	b.n	8007066 <_printf_i+0x1d2>
 8007060:	0670      	lsls	r0, r6, #25
 8007062:	d5fb      	bpl.n	800705c <_printf_i+0x1c8>
 8007064:	8019      	strh	r1, [r3, #0]
 8007066:	2300      	movs	r3, #0
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	4615      	mov	r5, r2
 800706c:	e7ba      	b.n	8006fe4 <_printf_i+0x150>
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	1d1a      	adds	r2, r3, #4
 8007072:	602a      	str	r2, [r5, #0]
 8007074:	681d      	ldr	r5, [r3, #0]
 8007076:	6862      	ldr	r2, [r4, #4]
 8007078:	2100      	movs	r1, #0
 800707a:	4628      	mov	r0, r5
 800707c:	f7f9 f8d0 	bl	8000220 <memchr>
 8007080:	b108      	cbz	r0, 8007086 <_printf_i+0x1f2>
 8007082:	1b40      	subs	r0, r0, r5
 8007084:	6060      	str	r0, [r4, #4]
 8007086:	6863      	ldr	r3, [r4, #4]
 8007088:	6123      	str	r3, [r4, #16]
 800708a:	2300      	movs	r3, #0
 800708c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007090:	e7a8      	b.n	8006fe4 <_printf_i+0x150>
 8007092:	6923      	ldr	r3, [r4, #16]
 8007094:	462a      	mov	r2, r5
 8007096:	4649      	mov	r1, r9
 8007098:	4640      	mov	r0, r8
 800709a:	47d0      	blx	sl
 800709c:	3001      	adds	r0, #1
 800709e:	d0ab      	beq.n	8006ff8 <_printf_i+0x164>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	079b      	lsls	r3, r3, #30
 80070a4:	d413      	bmi.n	80070ce <_printf_i+0x23a>
 80070a6:	68e0      	ldr	r0, [r4, #12]
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	4298      	cmp	r0, r3
 80070ac:	bfb8      	it	lt
 80070ae:	4618      	movlt	r0, r3
 80070b0:	e7a4      	b.n	8006ffc <_printf_i+0x168>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4632      	mov	r2, r6
 80070b6:	4649      	mov	r1, r9
 80070b8:	4640      	mov	r0, r8
 80070ba:	47d0      	blx	sl
 80070bc:	3001      	adds	r0, #1
 80070be:	d09b      	beq.n	8006ff8 <_printf_i+0x164>
 80070c0:	3501      	adds	r5, #1
 80070c2:	68e3      	ldr	r3, [r4, #12]
 80070c4:	9903      	ldr	r1, [sp, #12]
 80070c6:	1a5b      	subs	r3, r3, r1
 80070c8:	42ab      	cmp	r3, r5
 80070ca:	dcf2      	bgt.n	80070b2 <_printf_i+0x21e>
 80070cc:	e7eb      	b.n	80070a6 <_printf_i+0x212>
 80070ce:	2500      	movs	r5, #0
 80070d0:	f104 0619 	add.w	r6, r4, #25
 80070d4:	e7f5      	b.n	80070c2 <_printf_i+0x22e>
 80070d6:	bf00      	nop
 80070d8:	0800ba2c 	.word	0x0800ba2c
 80070dc:	0800ba3d 	.word	0x0800ba3d

080070e0 <_scanf_float>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	b087      	sub	sp, #28
 80070e6:	4617      	mov	r7, r2
 80070e8:	9303      	str	r3, [sp, #12]
 80070ea:	688b      	ldr	r3, [r1, #8]
 80070ec:	1e5a      	subs	r2, r3, #1
 80070ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80070f2:	bf83      	ittte	hi
 80070f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80070f8:	195b      	addhi	r3, r3, r5
 80070fa:	9302      	strhi	r3, [sp, #8]
 80070fc:	2300      	movls	r3, #0
 80070fe:	bf86      	itte	hi
 8007100:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007104:	608b      	strhi	r3, [r1, #8]
 8007106:	9302      	strls	r3, [sp, #8]
 8007108:	680b      	ldr	r3, [r1, #0]
 800710a:	468b      	mov	fp, r1
 800710c:	2500      	movs	r5, #0
 800710e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007112:	f84b 3b1c 	str.w	r3, [fp], #28
 8007116:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800711a:	4680      	mov	r8, r0
 800711c:	460c      	mov	r4, r1
 800711e:	465e      	mov	r6, fp
 8007120:	46aa      	mov	sl, r5
 8007122:	46a9      	mov	r9, r5
 8007124:	9501      	str	r5, [sp, #4]
 8007126:	68a2      	ldr	r2, [r4, #8]
 8007128:	b152      	cbz	r2, 8007140 <_scanf_float+0x60>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b4e      	cmp	r3, #78	; 0x4e
 8007130:	d864      	bhi.n	80071fc <_scanf_float+0x11c>
 8007132:	2b40      	cmp	r3, #64	; 0x40
 8007134:	d83c      	bhi.n	80071b0 <_scanf_float+0xd0>
 8007136:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800713a:	b2c8      	uxtb	r0, r1
 800713c:	280e      	cmp	r0, #14
 800713e:	d93a      	bls.n	80071b6 <_scanf_float+0xd6>
 8007140:	f1b9 0f00 	cmp.w	r9, #0
 8007144:	d003      	beq.n	800714e <_scanf_float+0x6e>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007152:	f1ba 0f01 	cmp.w	sl, #1
 8007156:	f200 8113 	bhi.w	8007380 <_scanf_float+0x2a0>
 800715a:	455e      	cmp	r6, fp
 800715c:	f200 8105 	bhi.w	800736a <_scanf_float+0x28a>
 8007160:	2501      	movs	r5, #1
 8007162:	4628      	mov	r0, r5
 8007164:	b007      	add	sp, #28
 8007166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800716e:	2a0d      	cmp	r2, #13
 8007170:	d8e6      	bhi.n	8007140 <_scanf_float+0x60>
 8007172:	a101      	add	r1, pc, #4	; (adr r1, 8007178 <_scanf_float+0x98>)
 8007174:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007178:	080072b7 	.word	0x080072b7
 800717c:	08007141 	.word	0x08007141
 8007180:	08007141 	.word	0x08007141
 8007184:	08007141 	.word	0x08007141
 8007188:	08007317 	.word	0x08007317
 800718c:	080072ef 	.word	0x080072ef
 8007190:	08007141 	.word	0x08007141
 8007194:	08007141 	.word	0x08007141
 8007198:	080072c5 	.word	0x080072c5
 800719c:	08007141 	.word	0x08007141
 80071a0:	08007141 	.word	0x08007141
 80071a4:	08007141 	.word	0x08007141
 80071a8:	08007141 	.word	0x08007141
 80071ac:	0800727d 	.word	0x0800727d
 80071b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80071b4:	e7db      	b.n	800716e <_scanf_float+0x8e>
 80071b6:	290e      	cmp	r1, #14
 80071b8:	d8c2      	bhi.n	8007140 <_scanf_float+0x60>
 80071ba:	a001      	add	r0, pc, #4	; (adr r0, 80071c0 <_scanf_float+0xe0>)
 80071bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80071c0:	0800726f 	.word	0x0800726f
 80071c4:	08007141 	.word	0x08007141
 80071c8:	0800726f 	.word	0x0800726f
 80071cc:	08007303 	.word	0x08007303
 80071d0:	08007141 	.word	0x08007141
 80071d4:	0800721d 	.word	0x0800721d
 80071d8:	08007259 	.word	0x08007259
 80071dc:	08007259 	.word	0x08007259
 80071e0:	08007259 	.word	0x08007259
 80071e4:	08007259 	.word	0x08007259
 80071e8:	08007259 	.word	0x08007259
 80071ec:	08007259 	.word	0x08007259
 80071f0:	08007259 	.word	0x08007259
 80071f4:	08007259 	.word	0x08007259
 80071f8:	08007259 	.word	0x08007259
 80071fc:	2b6e      	cmp	r3, #110	; 0x6e
 80071fe:	d809      	bhi.n	8007214 <_scanf_float+0x134>
 8007200:	2b60      	cmp	r3, #96	; 0x60
 8007202:	d8b2      	bhi.n	800716a <_scanf_float+0x8a>
 8007204:	2b54      	cmp	r3, #84	; 0x54
 8007206:	d077      	beq.n	80072f8 <_scanf_float+0x218>
 8007208:	2b59      	cmp	r3, #89	; 0x59
 800720a:	d199      	bne.n	8007140 <_scanf_float+0x60>
 800720c:	2d07      	cmp	r5, #7
 800720e:	d197      	bne.n	8007140 <_scanf_float+0x60>
 8007210:	2508      	movs	r5, #8
 8007212:	e029      	b.n	8007268 <_scanf_float+0x188>
 8007214:	2b74      	cmp	r3, #116	; 0x74
 8007216:	d06f      	beq.n	80072f8 <_scanf_float+0x218>
 8007218:	2b79      	cmp	r3, #121	; 0x79
 800721a:	e7f6      	b.n	800720a <_scanf_float+0x12a>
 800721c:	6821      	ldr	r1, [r4, #0]
 800721e:	05c8      	lsls	r0, r1, #23
 8007220:	d51a      	bpl.n	8007258 <_scanf_float+0x178>
 8007222:	9b02      	ldr	r3, [sp, #8]
 8007224:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007228:	6021      	str	r1, [r4, #0]
 800722a:	f109 0901 	add.w	r9, r9, #1
 800722e:	b11b      	cbz	r3, 8007238 <_scanf_float+0x158>
 8007230:	3b01      	subs	r3, #1
 8007232:	3201      	adds	r2, #1
 8007234:	9302      	str	r3, [sp, #8]
 8007236:	60a2      	str	r2, [r4, #8]
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	3b01      	subs	r3, #1
 800723c:	60a3      	str	r3, [r4, #8]
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	3301      	adds	r3, #1
 8007242:	6123      	str	r3, [r4, #16]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3b01      	subs	r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	607b      	str	r3, [r7, #4]
 800724c:	f340 8084 	ble.w	8007358 <_scanf_float+0x278>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	3301      	adds	r3, #1
 8007254:	603b      	str	r3, [r7, #0]
 8007256:	e766      	b.n	8007126 <_scanf_float+0x46>
 8007258:	eb1a 0f05 	cmn.w	sl, r5
 800725c:	f47f af70 	bne.w	8007140 <_scanf_float+0x60>
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007266:	6022      	str	r2, [r4, #0]
 8007268:	f806 3b01 	strb.w	r3, [r6], #1
 800726c:	e7e4      	b.n	8007238 <_scanf_float+0x158>
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	0610      	lsls	r0, r2, #24
 8007272:	f57f af65 	bpl.w	8007140 <_scanf_float+0x60>
 8007276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800727a:	e7f4      	b.n	8007266 <_scanf_float+0x186>
 800727c:	f1ba 0f00 	cmp.w	sl, #0
 8007280:	d10e      	bne.n	80072a0 <_scanf_float+0x1c0>
 8007282:	f1b9 0f00 	cmp.w	r9, #0
 8007286:	d10e      	bne.n	80072a6 <_scanf_float+0x1c6>
 8007288:	6822      	ldr	r2, [r4, #0]
 800728a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800728e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007292:	d108      	bne.n	80072a6 <_scanf_float+0x1c6>
 8007294:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007298:	6022      	str	r2, [r4, #0]
 800729a:	f04f 0a01 	mov.w	sl, #1
 800729e:	e7e3      	b.n	8007268 <_scanf_float+0x188>
 80072a0:	f1ba 0f02 	cmp.w	sl, #2
 80072a4:	d055      	beq.n	8007352 <_scanf_float+0x272>
 80072a6:	2d01      	cmp	r5, #1
 80072a8:	d002      	beq.n	80072b0 <_scanf_float+0x1d0>
 80072aa:	2d04      	cmp	r5, #4
 80072ac:	f47f af48 	bne.w	8007140 <_scanf_float+0x60>
 80072b0:	3501      	adds	r5, #1
 80072b2:	b2ed      	uxtb	r5, r5
 80072b4:	e7d8      	b.n	8007268 <_scanf_float+0x188>
 80072b6:	f1ba 0f01 	cmp.w	sl, #1
 80072ba:	f47f af41 	bne.w	8007140 <_scanf_float+0x60>
 80072be:	f04f 0a02 	mov.w	sl, #2
 80072c2:	e7d1      	b.n	8007268 <_scanf_float+0x188>
 80072c4:	b97d      	cbnz	r5, 80072e6 <_scanf_float+0x206>
 80072c6:	f1b9 0f00 	cmp.w	r9, #0
 80072ca:	f47f af3c 	bne.w	8007146 <_scanf_float+0x66>
 80072ce:	6822      	ldr	r2, [r4, #0]
 80072d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80072d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80072d8:	f47f af39 	bne.w	800714e <_scanf_float+0x6e>
 80072dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	2501      	movs	r5, #1
 80072e4:	e7c0      	b.n	8007268 <_scanf_float+0x188>
 80072e6:	2d03      	cmp	r5, #3
 80072e8:	d0e2      	beq.n	80072b0 <_scanf_float+0x1d0>
 80072ea:	2d05      	cmp	r5, #5
 80072ec:	e7de      	b.n	80072ac <_scanf_float+0x1cc>
 80072ee:	2d02      	cmp	r5, #2
 80072f0:	f47f af26 	bne.w	8007140 <_scanf_float+0x60>
 80072f4:	2503      	movs	r5, #3
 80072f6:	e7b7      	b.n	8007268 <_scanf_float+0x188>
 80072f8:	2d06      	cmp	r5, #6
 80072fa:	f47f af21 	bne.w	8007140 <_scanf_float+0x60>
 80072fe:	2507      	movs	r5, #7
 8007300:	e7b2      	b.n	8007268 <_scanf_float+0x188>
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	0591      	lsls	r1, r2, #22
 8007306:	f57f af1b 	bpl.w	8007140 <_scanf_float+0x60>
 800730a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800730e:	6022      	str	r2, [r4, #0]
 8007310:	f8cd 9004 	str.w	r9, [sp, #4]
 8007314:	e7a8      	b.n	8007268 <_scanf_float+0x188>
 8007316:	6822      	ldr	r2, [r4, #0]
 8007318:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800731c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007320:	d006      	beq.n	8007330 <_scanf_float+0x250>
 8007322:	0550      	lsls	r0, r2, #21
 8007324:	f57f af0c 	bpl.w	8007140 <_scanf_float+0x60>
 8007328:	f1b9 0f00 	cmp.w	r9, #0
 800732c:	f43f af0f 	beq.w	800714e <_scanf_float+0x6e>
 8007330:	0591      	lsls	r1, r2, #22
 8007332:	bf58      	it	pl
 8007334:	9901      	ldrpl	r1, [sp, #4]
 8007336:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800733a:	bf58      	it	pl
 800733c:	eba9 0101 	subpl.w	r1, r9, r1
 8007340:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007344:	bf58      	it	pl
 8007346:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800734a:	6022      	str	r2, [r4, #0]
 800734c:	f04f 0900 	mov.w	r9, #0
 8007350:	e78a      	b.n	8007268 <_scanf_float+0x188>
 8007352:	f04f 0a03 	mov.w	sl, #3
 8007356:	e787      	b.n	8007268 <_scanf_float+0x188>
 8007358:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800735c:	4639      	mov	r1, r7
 800735e:	4640      	mov	r0, r8
 8007360:	4798      	blx	r3
 8007362:	2800      	cmp	r0, #0
 8007364:	f43f aedf 	beq.w	8007126 <_scanf_float+0x46>
 8007368:	e6ea      	b.n	8007140 <_scanf_float+0x60>
 800736a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800736e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007372:	463a      	mov	r2, r7
 8007374:	4640      	mov	r0, r8
 8007376:	4798      	blx	r3
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	3b01      	subs	r3, #1
 800737c:	6123      	str	r3, [r4, #16]
 800737e:	e6ec      	b.n	800715a <_scanf_float+0x7a>
 8007380:	1e6b      	subs	r3, r5, #1
 8007382:	2b06      	cmp	r3, #6
 8007384:	d825      	bhi.n	80073d2 <_scanf_float+0x2f2>
 8007386:	2d02      	cmp	r5, #2
 8007388:	d836      	bhi.n	80073f8 <_scanf_float+0x318>
 800738a:	455e      	cmp	r6, fp
 800738c:	f67f aee8 	bls.w	8007160 <_scanf_float+0x80>
 8007390:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007394:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007398:	463a      	mov	r2, r7
 800739a:	4640      	mov	r0, r8
 800739c:	4798      	blx	r3
 800739e:	6923      	ldr	r3, [r4, #16]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	6123      	str	r3, [r4, #16]
 80073a4:	e7f1      	b.n	800738a <_scanf_float+0x2aa>
 80073a6:	9802      	ldr	r0, [sp, #8]
 80073a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80073b0:	9002      	str	r0, [sp, #8]
 80073b2:	463a      	mov	r2, r7
 80073b4:	4640      	mov	r0, r8
 80073b6:	4798      	blx	r3
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	6123      	str	r3, [r4, #16]
 80073be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073c2:	fa5f fa8a 	uxtb.w	sl, sl
 80073c6:	f1ba 0f02 	cmp.w	sl, #2
 80073ca:	d1ec      	bne.n	80073a6 <_scanf_float+0x2c6>
 80073cc:	3d03      	subs	r5, #3
 80073ce:	b2ed      	uxtb	r5, r5
 80073d0:	1b76      	subs	r6, r6, r5
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	05da      	lsls	r2, r3, #23
 80073d6:	d52f      	bpl.n	8007438 <_scanf_float+0x358>
 80073d8:	055b      	lsls	r3, r3, #21
 80073da:	d510      	bpl.n	80073fe <_scanf_float+0x31e>
 80073dc:	455e      	cmp	r6, fp
 80073de:	f67f aebf 	bls.w	8007160 <_scanf_float+0x80>
 80073e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073ea:	463a      	mov	r2, r7
 80073ec:	4640      	mov	r0, r8
 80073ee:	4798      	blx	r3
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	6123      	str	r3, [r4, #16]
 80073f6:	e7f1      	b.n	80073dc <_scanf_float+0x2fc>
 80073f8:	46aa      	mov	sl, r5
 80073fa:	9602      	str	r6, [sp, #8]
 80073fc:	e7df      	b.n	80073be <_scanf_float+0x2de>
 80073fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007402:	6923      	ldr	r3, [r4, #16]
 8007404:	2965      	cmp	r1, #101	; 0x65
 8007406:	f103 33ff 	add.w	r3, r3, #4294967295
 800740a:	f106 35ff 	add.w	r5, r6, #4294967295
 800740e:	6123      	str	r3, [r4, #16]
 8007410:	d00c      	beq.n	800742c <_scanf_float+0x34c>
 8007412:	2945      	cmp	r1, #69	; 0x45
 8007414:	d00a      	beq.n	800742c <_scanf_float+0x34c>
 8007416:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800741a:	463a      	mov	r2, r7
 800741c:	4640      	mov	r0, r8
 800741e:	4798      	blx	r3
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007426:	3b01      	subs	r3, #1
 8007428:	1eb5      	subs	r5, r6, #2
 800742a:	6123      	str	r3, [r4, #16]
 800742c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007430:	463a      	mov	r2, r7
 8007432:	4640      	mov	r0, r8
 8007434:	4798      	blx	r3
 8007436:	462e      	mov	r6, r5
 8007438:	6825      	ldr	r5, [r4, #0]
 800743a:	f015 0510 	ands.w	r5, r5, #16
 800743e:	d159      	bne.n	80074f4 <_scanf_float+0x414>
 8007440:	7035      	strb	r5, [r6, #0]
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800744c:	d11b      	bne.n	8007486 <_scanf_float+0x3a6>
 800744e:	9b01      	ldr	r3, [sp, #4]
 8007450:	454b      	cmp	r3, r9
 8007452:	eba3 0209 	sub.w	r2, r3, r9
 8007456:	d123      	bne.n	80074a0 <_scanf_float+0x3c0>
 8007458:	2200      	movs	r2, #0
 800745a:	4659      	mov	r1, fp
 800745c:	4640      	mov	r0, r8
 800745e:	f000 ff3d 	bl	80082dc <_strtod_r>
 8007462:	6822      	ldr	r2, [r4, #0]
 8007464:	9b03      	ldr	r3, [sp, #12]
 8007466:	f012 0f02 	tst.w	r2, #2
 800746a:	ec57 6b10 	vmov	r6, r7, d0
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	d021      	beq.n	80074b6 <_scanf_float+0x3d6>
 8007472:	9903      	ldr	r1, [sp, #12]
 8007474:	1d1a      	adds	r2, r3, #4
 8007476:	600a      	str	r2, [r1, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	e9c3 6700 	strd	r6, r7, [r3]
 800747e:	68e3      	ldr	r3, [r4, #12]
 8007480:	3301      	adds	r3, #1
 8007482:	60e3      	str	r3, [r4, #12]
 8007484:	e66d      	b.n	8007162 <_scanf_float+0x82>
 8007486:	9b04      	ldr	r3, [sp, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0e5      	beq.n	8007458 <_scanf_float+0x378>
 800748c:	9905      	ldr	r1, [sp, #20]
 800748e:	230a      	movs	r3, #10
 8007490:	462a      	mov	r2, r5
 8007492:	3101      	adds	r1, #1
 8007494:	4640      	mov	r0, r8
 8007496:	f000 ffa9 	bl	80083ec <_strtol_r>
 800749a:	9b04      	ldr	r3, [sp, #16]
 800749c:	9e05      	ldr	r6, [sp, #20]
 800749e:	1ac2      	subs	r2, r0, r3
 80074a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80074a4:	429e      	cmp	r6, r3
 80074a6:	bf28      	it	cs
 80074a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80074ac:	4912      	ldr	r1, [pc, #72]	; (80074f8 <_scanf_float+0x418>)
 80074ae:	4630      	mov	r0, r6
 80074b0:	f000 f860 	bl	8007574 <siprintf>
 80074b4:	e7d0      	b.n	8007458 <_scanf_float+0x378>
 80074b6:	9903      	ldr	r1, [sp, #12]
 80074b8:	f012 0f04 	tst.w	r2, #4
 80074bc:	f103 0204 	add.w	r2, r3, #4
 80074c0:	600a      	str	r2, [r1, #0]
 80074c2:	d1d9      	bne.n	8007478 <_scanf_float+0x398>
 80074c4:	f8d3 8000 	ldr.w	r8, [r3]
 80074c8:	ee10 2a10 	vmov	r2, s0
 80074cc:	ee10 0a10 	vmov	r0, s0
 80074d0:	463b      	mov	r3, r7
 80074d2:	4639      	mov	r1, r7
 80074d4:	f7f9 fb4a 	bl	8000b6c <__aeabi_dcmpun>
 80074d8:	b128      	cbz	r0, 80074e6 <_scanf_float+0x406>
 80074da:	4808      	ldr	r0, [pc, #32]	; (80074fc <_scanf_float+0x41c>)
 80074dc:	f000 f810 	bl	8007500 <nanf>
 80074e0:	ed88 0a00 	vstr	s0, [r8]
 80074e4:	e7cb      	b.n	800747e <_scanf_float+0x39e>
 80074e6:	4630      	mov	r0, r6
 80074e8:	4639      	mov	r1, r7
 80074ea:	f7f9 fb9d 	bl	8000c28 <__aeabi_d2f>
 80074ee:	f8c8 0000 	str.w	r0, [r8]
 80074f2:	e7c4      	b.n	800747e <_scanf_float+0x39e>
 80074f4:	2500      	movs	r5, #0
 80074f6:	e634      	b.n	8007162 <_scanf_float+0x82>
 80074f8:	0800ba4e 	.word	0x0800ba4e
 80074fc:	0800be73 	.word	0x0800be73

08007500 <nanf>:
 8007500:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007508 <nanf+0x8>
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	7fc00000 	.word	0x7fc00000

0800750c <sniprintf>:
 800750c:	b40c      	push	{r2, r3}
 800750e:	b530      	push	{r4, r5, lr}
 8007510:	4b17      	ldr	r3, [pc, #92]	; (8007570 <sniprintf+0x64>)
 8007512:	1e0c      	subs	r4, r1, #0
 8007514:	681d      	ldr	r5, [r3, #0]
 8007516:	b09d      	sub	sp, #116	; 0x74
 8007518:	da08      	bge.n	800752c <sniprintf+0x20>
 800751a:	238b      	movs	r3, #139	; 0x8b
 800751c:	602b      	str	r3, [r5, #0]
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	b01d      	add	sp, #116	; 0x74
 8007524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007528:	b002      	add	sp, #8
 800752a:	4770      	bx	lr
 800752c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007530:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007534:	bf14      	ite	ne
 8007536:	f104 33ff 	addne.w	r3, r4, #4294967295
 800753a:	4623      	moveq	r3, r4
 800753c:	9304      	str	r3, [sp, #16]
 800753e:	9307      	str	r3, [sp, #28]
 8007540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007544:	9002      	str	r0, [sp, #8]
 8007546:	9006      	str	r0, [sp, #24]
 8007548:	f8ad 3016 	strh.w	r3, [sp, #22]
 800754c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800754e:	ab21      	add	r3, sp, #132	; 0x84
 8007550:	a902      	add	r1, sp, #8
 8007552:	4628      	mov	r0, r5
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	f002 ffab 	bl	800a4b0 <_svfiprintf_r>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	bfbc      	itt	lt
 800755e:	238b      	movlt	r3, #139	; 0x8b
 8007560:	602b      	strlt	r3, [r5, #0]
 8007562:	2c00      	cmp	r4, #0
 8007564:	d0dd      	beq.n	8007522 <sniprintf+0x16>
 8007566:	9b02      	ldr	r3, [sp, #8]
 8007568:	2200      	movs	r2, #0
 800756a:	701a      	strb	r2, [r3, #0]
 800756c:	e7d9      	b.n	8007522 <sniprintf+0x16>
 800756e:	bf00      	nop
 8007570:	20000010 	.word	0x20000010

08007574 <siprintf>:
 8007574:	b40e      	push	{r1, r2, r3}
 8007576:	b500      	push	{lr}
 8007578:	b09c      	sub	sp, #112	; 0x70
 800757a:	ab1d      	add	r3, sp, #116	; 0x74
 800757c:	9002      	str	r0, [sp, #8]
 800757e:	9006      	str	r0, [sp, #24]
 8007580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007584:	4809      	ldr	r0, [pc, #36]	; (80075ac <siprintf+0x38>)
 8007586:	9107      	str	r1, [sp, #28]
 8007588:	9104      	str	r1, [sp, #16]
 800758a:	4909      	ldr	r1, [pc, #36]	; (80075b0 <siprintf+0x3c>)
 800758c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007590:	9105      	str	r1, [sp, #20]
 8007592:	6800      	ldr	r0, [r0, #0]
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	a902      	add	r1, sp, #8
 8007598:	f002 ff8a 	bl	800a4b0 <_svfiprintf_r>
 800759c:	9b02      	ldr	r3, [sp, #8]
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	b01c      	add	sp, #112	; 0x70
 80075a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a8:	b003      	add	sp, #12
 80075aa:	4770      	bx	lr
 80075ac:	20000010 	.word	0x20000010
 80075b0:	ffff0208 	.word	0xffff0208

080075b4 <siscanf>:
 80075b4:	b40e      	push	{r1, r2, r3}
 80075b6:	b510      	push	{r4, lr}
 80075b8:	b09f      	sub	sp, #124	; 0x7c
 80075ba:	ac21      	add	r4, sp, #132	; 0x84
 80075bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80075c0:	f854 2b04 	ldr.w	r2, [r4], #4
 80075c4:	9201      	str	r2, [sp, #4]
 80075c6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80075ca:	9004      	str	r0, [sp, #16]
 80075cc:	9008      	str	r0, [sp, #32]
 80075ce:	f7f8 fe1f 	bl	8000210 <strlen>
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <siscanf+0x50>)
 80075d4:	9005      	str	r0, [sp, #20]
 80075d6:	9009      	str	r0, [sp, #36]	; 0x24
 80075d8:	930d      	str	r3, [sp, #52]	; 0x34
 80075da:	480b      	ldr	r0, [pc, #44]	; (8007608 <siscanf+0x54>)
 80075dc:	9a01      	ldr	r2, [sp, #4]
 80075de:	6800      	ldr	r0, [r0, #0]
 80075e0:	9403      	str	r4, [sp, #12]
 80075e2:	2300      	movs	r3, #0
 80075e4:	9311      	str	r3, [sp, #68]	; 0x44
 80075e6:	9316      	str	r3, [sp, #88]	; 0x58
 80075e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 80075f0:	a904      	add	r1, sp, #16
 80075f2:	4623      	mov	r3, r4
 80075f4:	f003 f8b6 	bl	800a764 <__ssvfiscanf_r>
 80075f8:	b01f      	add	sp, #124	; 0x7c
 80075fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075fe:	b003      	add	sp, #12
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	0800762f 	.word	0x0800762f
 8007608:	20000010 	.word	0x20000010

0800760c <__sread>:
 800760c:	b510      	push	{r4, lr}
 800760e:	460c      	mov	r4, r1
 8007610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007614:	f003 fb70 	bl	800acf8 <_read_r>
 8007618:	2800      	cmp	r0, #0
 800761a:	bfab      	itete	ge
 800761c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800761e:	89a3      	ldrhlt	r3, [r4, #12]
 8007620:	181b      	addge	r3, r3, r0
 8007622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007626:	bfac      	ite	ge
 8007628:	6563      	strge	r3, [r4, #84]	; 0x54
 800762a:	81a3      	strhlt	r3, [r4, #12]
 800762c:	bd10      	pop	{r4, pc}

0800762e <__seofread>:
 800762e:	2000      	movs	r0, #0
 8007630:	4770      	bx	lr

08007632 <__swrite>:
 8007632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007636:	461f      	mov	r7, r3
 8007638:	898b      	ldrh	r3, [r1, #12]
 800763a:	05db      	lsls	r3, r3, #23
 800763c:	4605      	mov	r5, r0
 800763e:	460c      	mov	r4, r1
 8007640:	4616      	mov	r6, r2
 8007642:	d505      	bpl.n	8007650 <__swrite+0x1e>
 8007644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007648:	2302      	movs	r3, #2
 800764a:	2200      	movs	r2, #0
 800764c:	f002 f8e2 	bl	8009814 <_lseek_r>
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800765a:	81a3      	strh	r3, [r4, #12]
 800765c:	4632      	mov	r2, r6
 800765e:	463b      	mov	r3, r7
 8007660:	4628      	mov	r0, r5
 8007662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007666:	f000 bec3 	b.w	80083f0 <_write_r>

0800766a <__sseek>:
 800766a:	b510      	push	{r4, lr}
 800766c:	460c      	mov	r4, r1
 800766e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007672:	f002 f8cf 	bl	8009814 <_lseek_r>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	bf15      	itete	ne
 800767c:	6560      	strne	r0, [r4, #84]	; 0x54
 800767e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007686:	81a3      	strheq	r3, [r4, #12]
 8007688:	bf18      	it	ne
 800768a:	81a3      	strhne	r3, [r4, #12]
 800768c:	bd10      	pop	{r4, pc}

0800768e <__sclose>:
 800768e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007692:	f000 bebf 	b.w	8008414 <_close_r>

08007696 <sulp>:
 8007696:	b570      	push	{r4, r5, r6, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	460d      	mov	r5, r1
 800769c:	ec45 4b10 	vmov	d0, r4, r5
 80076a0:	4616      	mov	r6, r2
 80076a2:	f002 fc63 	bl	8009f6c <__ulp>
 80076a6:	ec51 0b10 	vmov	r0, r1, d0
 80076aa:	b17e      	cbz	r6, 80076cc <sulp+0x36>
 80076ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80076b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dd09      	ble.n	80076cc <sulp+0x36>
 80076b8:	051b      	lsls	r3, r3, #20
 80076ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80076be:	2400      	movs	r4, #0
 80076c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80076c4:	4622      	mov	r2, r4
 80076c6:	462b      	mov	r3, r5
 80076c8:	f7f8 ffb6 	bl	8000638 <__aeabi_dmul>
 80076cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080076d0 <_strtod_l>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	ed2d 8b02 	vpush	{d8}
 80076d8:	b09d      	sub	sp, #116	; 0x74
 80076da:	461f      	mov	r7, r3
 80076dc:	2300      	movs	r3, #0
 80076de:	9318      	str	r3, [sp, #96]	; 0x60
 80076e0:	4ba2      	ldr	r3, [pc, #648]	; (800796c <_strtod_l+0x29c>)
 80076e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	9305      	str	r3, [sp, #20]
 80076e8:	4604      	mov	r4, r0
 80076ea:	4618      	mov	r0, r3
 80076ec:	4688      	mov	r8, r1
 80076ee:	f7f8 fd8f 	bl	8000210 <strlen>
 80076f2:	f04f 0a00 	mov.w	sl, #0
 80076f6:	4605      	mov	r5, r0
 80076f8:	f04f 0b00 	mov.w	fp, #0
 80076fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007702:	781a      	ldrb	r2, [r3, #0]
 8007704:	2a2b      	cmp	r2, #43	; 0x2b
 8007706:	d04e      	beq.n	80077a6 <_strtod_l+0xd6>
 8007708:	d83b      	bhi.n	8007782 <_strtod_l+0xb2>
 800770a:	2a0d      	cmp	r2, #13
 800770c:	d834      	bhi.n	8007778 <_strtod_l+0xa8>
 800770e:	2a08      	cmp	r2, #8
 8007710:	d834      	bhi.n	800777c <_strtod_l+0xac>
 8007712:	2a00      	cmp	r2, #0
 8007714:	d03e      	beq.n	8007794 <_strtod_l+0xc4>
 8007716:	2300      	movs	r3, #0
 8007718:	930a      	str	r3, [sp, #40]	; 0x28
 800771a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800771c:	7833      	ldrb	r3, [r6, #0]
 800771e:	2b30      	cmp	r3, #48	; 0x30
 8007720:	f040 80b0 	bne.w	8007884 <_strtod_l+0x1b4>
 8007724:	7873      	ldrb	r3, [r6, #1]
 8007726:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800772a:	2b58      	cmp	r3, #88	; 0x58
 800772c:	d168      	bne.n	8007800 <_strtod_l+0x130>
 800772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	ab18      	add	r3, sp, #96	; 0x60
 8007734:	9702      	str	r7, [sp, #8]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	4a8d      	ldr	r2, [pc, #564]	; (8007970 <_strtod_l+0x2a0>)
 800773a:	ab19      	add	r3, sp, #100	; 0x64
 800773c:	a917      	add	r1, sp, #92	; 0x5c
 800773e:	4620      	mov	r0, r4
 8007740:	f001 fd5c 	bl	80091fc <__gethex>
 8007744:	f010 0707 	ands.w	r7, r0, #7
 8007748:	4605      	mov	r5, r0
 800774a:	d005      	beq.n	8007758 <_strtod_l+0x88>
 800774c:	2f06      	cmp	r7, #6
 800774e:	d12c      	bne.n	80077aa <_strtod_l+0xda>
 8007750:	3601      	adds	r6, #1
 8007752:	2300      	movs	r3, #0
 8007754:	9617      	str	r6, [sp, #92]	; 0x5c
 8007756:	930a      	str	r3, [sp, #40]	; 0x28
 8007758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 8590 	bne.w	8008280 <_strtod_l+0xbb0>
 8007760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007762:	b1eb      	cbz	r3, 80077a0 <_strtod_l+0xd0>
 8007764:	4652      	mov	r2, sl
 8007766:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800776a:	ec43 2b10 	vmov	d0, r2, r3
 800776e:	b01d      	add	sp, #116	; 0x74
 8007770:	ecbd 8b02 	vpop	{d8}
 8007774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007778:	2a20      	cmp	r2, #32
 800777a:	d1cc      	bne.n	8007716 <_strtod_l+0x46>
 800777c:	3301      	adds	r3, #1
 800777e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007780:	e7be      	b.n	8007700 <_strtod_l+0x30>
 8007782:	2a2d      	cmp	r2, #45	; 0x2d
 8007784:	d1c7      	bne.n	8007716 <_strtod_l+0x46>
 8007786:	2201      	movs	r2, #1
 8007788:	920a      	str	r2, [sp, #40]	; 0x28
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	9217      	str	r2, [sp, #92]	; 0x5c
 800778e:	785b      	ldrb	r3, [r3, #1]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1c2      	bne.n	800771a <_strtod_l+0x4a>
 8007794:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007796:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800779a:	2b00      	cmp	r3, #0
 800779c:	f040 856e 	bne.w	800827c <_strtod_l+0xbac>
 80077a0:	4652      	mov	r2, sl
 80077a2:	465b      	mov	r3, fp
 80077a4:	e7e1      	b.n	800776a <_strtod_l+0x9a>
 80077a6:	2200      	movs	r2, #0
 80077a8:	e7ee      	b.n	8007788 <_strtod_l+0xb8>
 80077aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077ac:	b13a      	cbz	r2, 80077be <_strtod_l+0xee>
 80077ae:	2135      	movs	r1, #53	; 0x35
 80077b0:	a81a      	add	r0, sp, #104	; 0x68
 80077b2:	f002 fce6 	bl	800a182 <__copybits>
 80077b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077b8:	4620      	mov	r0, r4
 80077ba:	f002 f8a5 	bl	8009908 <_Bfree>
 80077be:	3f01      	subs	r7, #1
 80077c0:	2f04      	cmp	r7, #4
 80077c2:	d806      	bhi.n	80077d2 <_strtod_l+0x102>
 80077c4:	e8df f007 	tbb	[pc, r7]
 80077c8:	1714030a 	.word	0x1714030a
 80077cc:	0a          	.byte	0x0a
 80077cd:	00          	.byte	0x00
 80077ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80077d2:	0728      	lsls	r0, r5, #28
 80077d4:	d5c0      	bpl.n	8007758 <_strtod_l+0x88>
 80077d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80077da:	e7bd      	b.n	8007758 <_strtod_l+0x88>
 80077dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80077e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80077e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80077ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80077ee:	e7f0      	b.n	80077d2 <_strtod_l+0x102>
 80077f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007974 <_strtod_l+0x2a4>
 80077f4:	e7ed      	b.n	80077d2 <_strtod_l+0x102>
 80077f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80077fa:	f04f 3aff 	mov.w	sl, #4294967295
 80077fe:	e7e8      	b.n	80077d2 <_strtod_l+0x102>
 8007800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	9217      	str	r2, [sp, #92]	; 0x5c
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b30      	cmp	r3, #48	; 0x30
 800780a:	d0f9      	beq.n	8007800 <_strtod_l+0x130>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0a3      	beq.n	8007758 <_strtod_l+0x88>
 8007810:	2301      	movs	r3, #1
 8007812:	f04f 0900 	mov.w	r9, #0
 8007816:	9304      	str	r3, [sp, #16]
 8007818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800781a:	9308      	str	r3, [sp, #32]
 800781c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007820:	464f      	mov	r7, r9
 8007822:	220a      	movs	r2, #10
 8007824:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007826:	7806      	ldrb	r6, [r0, #0]
 8007828:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800782c:	b2d9      	uxtb	r1, r3
 800782e:	2909      	cmp	r1, #9
 8007830:	d92a      	bls.n	8007888 <_strtod_l+0x1b8>
 8007832:	9905      	ldr	r1, [sp, #20]
 8007834:	462a      	mov	r2, r5
 8007836:	f003 fac3 	bl	800adc0 <strncmp>
 800783a:	b398      	cbz	r0, 80078a4 <_strtod_l+0x1d4>
 800783c:	2000      	movs	r0, #0
 800783e:	4632      	mov	r2, r6
 8007840:	463d      	mov	r5, r7
 8007842:	9005      	str	r0, [sp, #20]
 8007844:	4603      	mov	r3, r0
 8007846:	2a65      	cmp	r2, #101	; 0x65
 8007848:	d001      	beq.n	800784e <_strtod_l+0x17e>
 800784a:	2a45      	cmp	r2, #69	; 0x45
 800784c:	d118      	bne.n	8007880 <_strtod_l+0x1b0>
 800784e:	b91d      	cbnz	r5, 8007858 <_strtod_l+0x188>
 8007850:	9a04      	ldr	r2, [sp, #16]
 8007852:	4302      	orrs	r2, r0
 8007854:	d09e      	beq.n	8007794 <_strtod_l+0xc4>
 8007856:	2500      	movs	r5, #0
 8007858:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800785c:	f108 0201 	add.w	r2, r8, #1
 8007860:	9217      	str	r2, [sp, #92]	; 0x5c
 8007862:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007866:	2a2b      	cmp	r2, #43	; 0x2b
 8007868:	d075      	beq.n	8007956 <_strtod_l+0x286>
 800786a:	2a2d      	cmp	r2, #45	; 0x2d
 800786c:	d07b      	beq.n	8007966 <_strtod_l+0x296>
 800786e:	f04f 0c00 	mov.w	ip, #0
 8007872:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007876:	2909      	cmp	r1, #9
 8007878:	f240 8082 	bls.w	8007980 <_strtod_l+0x2b0>
 800787c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007880:	2600      	movs	r6, #0
 8007882:	e09d      	b.n	80079c0 <_strtod_l+0x2f0>
 8007884:	2300      	movs	r3, #0
 8007886:	e7c4      	b.n	8007812 <_strtod_l+0x142>
 8007888:	2f08      	cmp	r7, #8
 800788a:	bfd8      	it	le
 800788c:	9907      	ldrle	r1, [sp, #28]
 800788e:	f100 0001 	add.w	r0, r0, #1
 8007892:	bfda      	itte	le
 8007894:	fb02 3301 	mlale	r3, r2, r1, r3
 8007898:	9307      	strle	r3, [sp, #28]
 800789a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800789e:	3701      	adds	r7, #1
 80078a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80078a2:	e7bf      	b.n	8007824 <_strtod_l+0x154>
 80078a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078a6:	195a      	adds	r2, r3, r5
 80078a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80078aa:	5d5a      	ldrb	r2, [r3, r5]
 80078ac:	2f00      	cmp	r7, #0
 80078ae:	d037      	beq.n	8007920 <_strtod_l+0x250>
 80078b0:	9005      	str	r0, [sp, #20]
 80078b2:	463d      	mov	r5, r7
 80078b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80078b8:	2b09      	cmp	r3, #9
 80078ba:	d912      	bls.n	80078e2 <_strtod_l+0x212>
 80078bc:	2301      	movs	r3, #1
 80078be:	e7c2      	b.n	8007846 <_strtod_l+0x176>
 80078c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80078c6:	785a      	ldrb	r2, [r3, #1]
 80078c8:	3001      	adds	r0, #1
 80078ca:	2a30      	cmp	r2, #48	; 0x30
 80078cc:	d0f8      	beq.n	80078c0 <_strtod_l+0x1f0>
 80078ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	f200 84d9 	bhi.w	800828a <_strtod_l+0xbba>
 80078d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078da:	9005      	str	r0, [sp, #20]
 80078dc:	2000      	movs	r0, #0
 80078de:	9308      	str	r3, [sp, #32]
 80078e0:	4605      	mov	r5, r0
 80078e2:	3a30      	subs	r2, #48	; 0x30
 80078e4:	f100 0301 	add.w	r3, r0, #1
 80078e8:	d014      	beq.n	8007914 <_strtod_l+0x244>
 80078ea:	9905      	ldr	r1, [sp, #20]
 80078ec:	4419      	add	r1, r3
 80078ee:	9105      	str	r1, [sp, #20]
 80078f0:	462b      	mov	r3, r5
 80078f2:	eb00 0e05 	add.w	lr, r0, r5
 80078f6:	210a      	movs	r1, #10
 80078f8:	4573      	cmp	r3, lr
 80078fa:	d113      	bne.n	8007924 <_strtod_l+0x254>
 80078fc:	182b      	adds	r3, r5, r0
 80078fe:	2b08      	cmp	r3, #8
 8007900:	f105 0501 	add.w	r5, r5, #1
 8007904:	4405      	add	r5, r0
 8007906:	dc1c      	bgt.n	8007942 <_strtod_l+0x272>
 8007908:	9907      	ldr	r1, [sp, #28]
 800790a:	230a      	movs	r3, #10
 800790c:	fb03 2301 	mla	r3, r3, r1, r2
 8007910:	9307      	str	r3, [sp, #28]
 8007912:	2300      	movs	r3, #0
 8007914:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007916:	1c51      	adds	r1, r2, #1
 8007918:	9117      	str	r1, [sp, #92]	; 0x5c
 800791a:	7852      	ldrb	r2, [r2, #1]
 800791c:	4618      	mov	r0, r3
 800791e:	e7c9      	b.n	80078b4 <_strtod_l+0x1e4>
 8007920:	4638      	mov	r0, r7
 8007922:	e7d2      	b.n	80078ca <_strtod_l+0x1fa>
 8007924:	2b08      	cmp	r3, #8
 8007926:	dc04      	bgt.n	8007932 <_strtod_l+0x262>
 8007928:	9e07      	ldr	r6, [sp, #28]
 800792a:	434e      	muls	r6, r1
 800792c:	9607      	str	r6, [sp, #28]
 800792e:	3301      	adds	r3, #1
 8007930:	e7e2      	b.n	80078f8 <_strtod_l+0x228>
 8007932:	f103 0c01 	add.w	ip, r3, #1
 8007936:	f1bc 0f10 	cmp.w	ip, #16
 800793a:	bfd8      	it	le
 800793c:	fb01 f909 	mulle.w	r9, r1, r9
 8007940:	e7f5      	b.n	800792e <_strtod_l+0x25e>
 8007942:	2d10      	cmp	r5, #16
 8007944:	bfdc      	itt	le
 8007946:	230a      	movle	r3, #10
 8007948:	fb03 2909 	mlale	r9, r3, r9, r2
 800794c:	e7e1      	b.n	8007912 <_strtod_l+0x242>
 800794e:	2300      	movs	r3, #0
 8007950:	9305      	str	r3, [sp, #20]
 8007952:	2301      	movs	r3, #1
 8007954:	e77c      	b.n	8007850 <_strtod_l+0x180>
 8007956:	f04f 0c00 	mov.w	ip, #0
 800795a:	f108 0202 	add.w	r2, r8, #2
 800795e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007960:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007964:	e785      	b.n	8007872 <_strtod_l+0x1a2>
 8007966:	f04f 0c01 	mov.w	ip, #1
 800796a:	e7f6      	b.n	800795a <_strtod_l+0x28a>
 800796c:	0800bca0 	.word	0x0800bca0
 8007970:	0800ba54 	.word	0x0800ba54
 8007974:	7ff00000 	.word	0x7ff00000
 8007978:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800797a:	1c51      	adds	r1, r2, #1
 800797c:	9117      	str	r1, [sp, #92]	; 0x5c
 800797e:	7852      	ldrb	r2, [r2, #1]
 8007980:	2a30      	cmp	r2, #48	; 0x30
 8007982:	d0f9      	beq.n	8007978 <_strtod_l+0x2a8>
 8007984:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007988:	2908      	cmp	r1, #8
 800798a:	f63f af79 	bhi.w	8007880 <_strtod_l+0x1b0>
 800798e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007992:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007994:	9206      	str	r2, [sp, #24]
 8007996:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007998:	1c51      	adds	r1, r2, #1
 800799a:	9117      	str	r1, [sp, #92]	; 0x5c
 800799c:	7852      	ldrb	r2, [r2, #1]
 800799e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80079a2:	2e09      	cmp	r6, #9
 80079a4:	d937      	bls.n	8007a16 <_strtod_l+0x346>
 80079a6:	9e06      	ldr	r6, [sp, #24]
 80079a8:	1b89      	subs	r1, r1, r6
 80079aa:	2908      	cmp	r1, #8
 80079ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80079b0:	dc02      	bgt.n	80079b8 <_strtod_l+0x2e8>
 80079b2:	4576      	cmp	r6, lr
 80079b4:	bfa8      	it	ge
 80079b6:	4676      	movge	r6, lr
 80079b8:	f1bc 0f00 	cmp.w	ip, #0
 80079bc:	d000      	beq.n	80079c0 <_strtod_l+0x2f0>
 80079be:	4276      	negs	r6, r6
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	d14d      	bne.n	8007a60 <_strtod_l+0x390>
 80079c4:	9904      	ldr	r1, [sp, #16]
 80079c6:	4301      	orrs	r1, r0
 80079c8:	f47f aec6 	bne.w	8007758 <_strtod_l+0x88>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f47f aee1 	bne.w	8007794 <_strtod_l+0xc4>
 80079d2:	2a69      	cmp	r2, #105	; 0x69
 80079d4:	d027      	beq.n	8007a26 <_strtod_l+0x356>
 80079d6:	dc24      	bgt.n	8007a22 <_strtod_l+0x352>
 80079d8:	2a49      	cmp	r2, #73	; 0x49
 80079da:	d024      	beq.n	8007a26 <_strtod_l+0x356>
 80079dc:	2a4e      	cmp	r2, #78	; 0x4e
 80079de:	f47f aed9 	bne.w	8007794 <_strtod_l+0xc4>
 80079e2:	499f      	ldr	r1, [pc, #636]	; (8007c60 <_strtod_l+0x590>)
 80079e4:	a817      	add	r0, sp, #92	; 0x5c
 80079e6:	f001 fe61 	bl	80096ac <__match>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	f43f aed2 	beq.w	8007794 <_strtod_l+0xc4>
 80079f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b28      	cmp	r3, #40	; 0x28
 80079f6:	d12d      	bne.n	8007a54 <_strtod_l+0x384>
 80079f8:	499a      	ldr	r1, [pc, #616]	; (8007c64 <_strtod_l+0x594>)
 80079fa:	aa1a      	add	r2, sp, #104	; 0x68
 80079fc:	a817      	add	r0, sp, #92	; 0x5c
 80079fe:	f001 fe69 	bl	80096d4 <__hexnan>
 8007a02:	2805      	cmp	r0, #5
 8007a04:	d126      	bne.n	8007a54 <_strtod_l+0x384>
 8007a06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007a0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007a10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007a14:	e6a0      	b.n	8007758 <_strtod_l+0x88>
 8007a16:	210a      	movs	r1, #10
 8007a18:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007a1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007a20:	e7b9      	b.n	8007996 <_strtod_l+0x2c6>
 8007a22:	2a6e      	cmp	r2, #110	; 0x6e
 8007a24:	e7db      	b.n	80079de <_strtod_l+0x30e>
 8007a26:	4990      	ldr	r1, [pc, #576]	; (8007c68 <_strtod_l+0x598>)
 8007a28:	a817      	add	r0, sp, #92	; 0x5c
 8007a2a:	f001 fe3f 	bl	80096ac <__match>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f aeb0 	beq.w	8007794 <_strtod_l+0xc4>
 8007a34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a36:	498d      	ldr	r1, [pc, #564]	; (8007c6c <_strtod_l+0x59c>)
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	a817      	add	r0, sp, #92	; 0x5c
 8007a3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a3e:	f001 fe35 	bl	80096ac <__match>
 8007a42:	b910      	cbnz	r0, 8007a4a <_strtod_l+0x37a>
 8007a44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a46:	3301      	adds	r3, #1
 8007a48:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a4a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007c7c <_strtod_l+0x5ac>
 8007a4e:	f04f 0a00 	mov.w	sl, #0
 8007a52:	e681      	b.n	8007758 <_strtod_l+0x88>
 8007a54:	4886      	ldr	r0, [pc, #536]	; (8007c70 <_strtod_l+0x5a0>)
 8007a56:	f003 f963 	bl	800ad20 <nan>
 8007a5a:	ec5b ab10 	vmov	sl, fp, d0
 8007a5e:	e67b      	b.n	8007758 <_strtod_l+0x88>
 8007a60:	9b05      	ldr	r3, [sp, #20]
 8007a62:	9807      	ldr	r0, [sp, #28]
 8007a64:	1af3      	subs	r3, r6, r3
 8007a66:	2f00      	cmp	r7, #0
 8007a68:	bf08      	it	eq
 8007a6a:	462f      	moveq	r7, r5
 8007a6c:	2d10      	cmp	r5, #16
 8007a6e:	9306      	str	r3, [sp, #24]
 8007a70:	46a8      	mov	r8, r5
 8007a72:	bfa8      	it	ge
 8007a74:	f04f 0810 	movge.w	r8, #16
 8007a78:	f7f8 fd64 	bl	8000544 <__aeabi_ui2d>
 8007a7c:	2d09      	cmp	r5, #9
 8007a7e:	4682      	mov	sl, r0
 8007a80:	468b      	mov	fp, r1
 8007a82:	dd13      	ble.n	8007aac <_strtod_l+0x3dc>
 8007a84:	4b7b      	ldr	r3, [pc, #492]	; (8007c74 <_strtod_l+0x5a4>)
 8007a86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007a8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007a8e:	f7f8 fdd3 	bl	8000638 <__aeabi_dmul>
 8007a92:	4682      	mov	sl, r0
 8007a94:	4648      	mov	r0, r9
 8007a96:	468b      	mov	fp, r1
 8007a98:	f7f8 fd54 	bl	8000544 <__aeabi_ui2d>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4650      	mov	r0, sl
 8007aa2:	4659      	mov	r1, fp
 8007aa4:	f7f8 fc12 	bl	80002cc <__adddf3>
 8007aa8:	4682      	mov	sl, r0
 8007aaa:	468b      	mov	fp, r1
 8007aac:	2d0f      	cmp	r5, #15
 8007aae:	dc38      	bgt.n	8007b22 <_strtod_l+0x452>
 8007ab0:	9b06      	ldr	r3, [sp, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f43f ae50 	beq.w	8007758 <_strtod_l+0x88>
 8007ab8:	dd24      	ble.n	8007b04 <_strtod_l+0x434>
 8007aba:	2b16      	cmp	r3, #22
 8007abc:	dc0b      	bgt.n	8007ad6 <_strtod_l+0x406>
 8007abe:	496d      	ldr	r1, [pc, #436]	; (8007c74 <_strtod_l+0x5a4>)
 8007ac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ac8:	4652      	mov	r2, sl
 8007aca:	465b      	mov	r3, fp
 8007acc:	f7f8 fdb4 	bl	8000638 <__aeabi_dmul>
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	468b      	mov	fp, r1
 8007ad4:	e640      	b.n	8007758 <_strtod_l+0x88>
 8007ad6:	9a06      	ldr	r2, [sp, #24]
 8007ad8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007adc:	4293      	cmp	r3, r2
 8007ade:	db20      	blt.n	8007b22 <_strtod_l+0x452>
 8007ae0:	4c64      	ldr	r4, [pc, #400]	; (8007c74 <_strtod_l+0x5a4>)
 8007ae2:	f1c5 050f 	rsb	r5, r5, #15
 8007ae6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007aea:	4652      	mov	r2, sl
 8007aec:	465b      	mov	r3, fp
 8007aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af2:	f7f8 fda1 	bl	8000638 <__aeabi_dmul>
 8007af6:	9b06      	ldr	r3, [sp, #24]
 8007af8:	1b5d      	subs	r5, r3, r5
 8007afa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007afe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b02:	e7e3      	b.n	8007acc <_strtod_l+0x3fc>
 8007b04:	9b06      	ldr	r3, [sp, #24]
 8007b06:	3316      	adds	r3, #22
 8007b08:	db0b      	blt.n	8007b22 <_strtod_l+0x452>
 8007b0a:	9b05      	ldr	r3, [sp, #20]
 8007b0c:	1b9e      	subs	r6, r3, r6
 8007b0e:	4b59      	ldr	r3, [pc, #356]	; (8007c74 <_strtod_l+0x5a4>)
 8007b10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007b14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b18:	4650      	mov	r0, sl
 8007b1a:	4659      	mov	r1, fp
 8007b1c:	f7f8 feb6 	bl	800088c <__aeabi_ddiv>
 8007b20:	e7d6      	b.n	8007ad0 <_strtod_l+0x400>
 8007b22:	9b06      	ldr	r3, [sp, #24]
 8007b24:	eba5 0808 	sub.w	r8, r5, r8
 8007b28:	4498      	add	r8, r3
 8007b2a:	f1b8 0f00 	cmp.w	r8, #0
 8007b2e:	dd74      	ble.n	8007c1a <_strtod_l+0x54a>
 8007b30:	f018 030f 	ands.w	r3, r8, #15
 8007b34:	d00a      	beq.n	8007b4c <_strtod_l+0x47c>
 8007b36:	494f      	ldr	r1, [pc, #316]	; (8007c74 <_strtod_l+0x5a4>)
 8007b38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	465b      	mov	r3, fp
 8007b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b44:	f7f8 fd78 	bl	8000638 <__aeabi_dmul>
 8007b48:	4682      	mov	sl, r0
 8007b4a:	468b      	mov	fp, r1
 8007b4c:	f038 080f 	bics.w	r8, r8, #15
 8007b50:	d04f      	beq.n	8007bf2 <_strtod_l+0x522>
 8007b52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007b56:	dd22      	ble.n	8007b9e <_strtod_l+0x4ce>
 8007b58:	2500      	movs	r5, #0
 8007b5a:	462e      	mov	r6, r5
 8007b5c:	9507      	str	r5, [sp, #28]
 8007b5e:	9505      	str	r5, [sp, #20]
 8007b60:	2322      	movs	r3, #34	; 0x22
 8007b62:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007c7c <_strtod_l+0x5ac>
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	f04f 0a00 	mov.w	sl, #0
 8007b6c:	9b07      	ldr	r3, [sp, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f43f adf2 	beq.w	8007758 <_strtod_l+0x88>
 8007b74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b76:	4620      	mov	r0, r4
 8007b78:	f001 fec6 	bl	8009908 <_Bfree>
 8007b7c:	9905      	ldr	r1, [sp, #20]
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f001 fec2 	bl	8009908 <_Bfree>
 8007b84:	4631      	mov	r1, r6
 8007b86:	4620      	mov	r0, r4
 8007b88:	f001 febe 	bl	8009908 <_Bfree>
 8007b8c:	9907      	ldr	r1, [sp, #28]
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f001 feba 	bl	8009908 <_Bfree>
 8007b94:	4629      	mov	r1, r5
 8007b96:	4620      	mov	r0, r4
 8007b98:	f001 feb6 	bl	8009908 <_Bfree>
 8007b9c:	e5dc      	b.n	8007758 <_strtod_l+0x88>
 8007b9e:	4b36      	ldr	r3, [pc, #216]	; (8007c78 <_strtod_l+0x5a8>)
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ba8:	4650      	mov	r0, sl
 8007baa:	4659      	mov	r1, fp
 8007bac:	4699      	mov	r9, r3
 8007bae:	f1b8 0f01 	cmp.w	r8, #1
 8007bb2:	dc21      	bgt.n	8007bf8 <_strtod_l+0x528>
 8007bb4:	b10b      	cbz	r3, 8007bba <_strtod_l+0x4ea>
 8007bb6:	4682      	mov	sl, r0
 8007bb8:	468b      	mov	fp, r1
 8007bba:	4b2f      	ldr	r3, [pc, #188]	; (8007c78 <_strtod_l+0x5a8>)
 8007bbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007bc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007bc4:	4652      	mov	r2, sl
 8007bc6:	465b      	mov	r3, fp
 8007bc8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007bcc:	f7f8 fd34 	bl	8000638 <__aeabi_dmul>
 8007bd0:	4b2a      	ldr	r3, [pc, #168]	; (8007c7c <_strtod_l+0x5ac>)
 8007bd2:	460a      	mov	r2, r1
 8007bd4:	400b      	ands	r3, r1
 8007bd6:	492a      	ldr	r1, [pc, #168]	; (8007c80 <_strtod_l+0x5b0>)
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	4682      	mov	sl, r0
 8007bdc:	d8bc      	bhi.n	8007b58 <_strtod_l+0x488>
 8007bde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007be2:	428b      	cmp	r3, r1
 8007be4:	bf86      	itte	hi
 8007be6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007c84 <_strtod_l+0x5b4>
 8007bea:	f04f 3aff 	movhi.w	sl, #4294967295
 8007bee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9304      	str	r3, [sp, #16]
 8007bf6:	e084      	b.n	8007d02 <_strtod_l+0x632>
 8007bf8:	f018 0f01 	tst.w	r8, #1
 8007bfc:	d005      	beq.n	8007c0a <_strtod_l+0x53a>
 8007bfe:	9b04      	ldr	r3, [sp, #16]
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fd18 	bl	8000638 <__aeabi_dmul>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	9a04      	ldr	r2, [sp, #16]
 8007c0c:	3208      	adds	r2, #8
 8007c0e:	f109 0901 	add.w	r9, r9, #1
 8007c12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007c16:	9204      	str	r2, [sp, #16]
 8007c18:	e7c9      	b.n	8007bae <_strtod_l+0x4de>
 8007c1a:	d0ea      	beq.n	8007bf2 <_strtod_l+0x522>
 8007c1c:	f1c8 0800 	rsb	r8, r8, #0
 8007c20:	f018 020f 	ands.w	r2, r8, #15
 8007c24:	d00a      	beq.n	8007c3c <_strtod_l+0x56c>
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <_strtod_l+0x5a4>)
 8007c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c2c:	4650      	mov	r0, sl
 8007c2e:	4659      	mov	r1, fp
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 fe2a 	bl	800088c <__aeabi_ddiv>
 8007c38:	4682      	mov	sl, r0
 8007c3a:	468b      	mov	fp, r1
 8007c3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007c40:	d0d7      	beq.n	8007bf2 <_strtod_l+0x522>
 8007c42:	f1b8 0f1f 	cmp.w	r8, #31
 8007c46:	dd1f      	ble.n	8007c88 <_strtod_l+0x5b8>
 8007c48:	2500      	movs	r5, #0
 8007c4a:	462e      	mov	r6, r5
 8007c4c:	9507      	str	r5, [sp, #28]
 8007c4e:	9505      	str	r5, [sp, #20]
 8007c50:	2322      	movs	r3, #34	; 0x22
 8007c52:	f04f 0a00 	mov.w	sl, #0
 8007c56:	f04f 0b00 	mov.w	fp, #0
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	e786      	b.n	8007b6c <_strtod_l+0x49c>
 8007c5e:	bf00      	nop
 8007c60:	0800ba29 	.word	0x0800ba29
 8007c64:	0800ba68 	.word	0x0800ba68
 8007c68:	0800ba21 	.word	0x0800ba21
 8007c6c:	0800bbac 	.word	0x0800bbac
 8007c70:	0800be73 	.word	0x0800be73
 8007c74:	0800bd38 	.word	0x0800bd38
 8007c78:	0800bd10 	.word	0x0800bd10
 8007c7c:	7ff00000 	.word	0x7ff00000
 8007c80:	7ca00000 	.word	0x7ca00000
 8007c84:	7fefffff 	.word	0x7fefffff
 8007c88:	f018 0310 	ands.w	r3, r8, #16
 8007c8c:	bf18      	it	ne
 8007c8e:	236a      	movne	r3, #106	; 0x6a
 8007c90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008040 <_strtod_l+0x970>
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	4650      	mov	r0, sl
 8007c98:	4659      	mov	r1, fp
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f018 0f01 	tst.w	r8, #1
 8007ca0:	d004      	beq.n	8007cac <_strtod_l+0x5dc>
 8007ca2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ca6:	f7f8 fcc7 	bl	8000638 <__aeabi_dmul>
 8007caa:	2301      	movs	r3, #1
 8007cac:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007cb0:	f109 0908 	add.w	r9, r9, #8
 8007cb4:	d1f2      	bne.n	8007c9c <_strtod_l+0x5cc>
 8007cb6:	b10b      	cbz	r3, 8007cbc <_strtod_l+0x5ec>
 8007cb8:	4682      	mov	sl, r0
 8007cba:	468b      	mov	fp, r1
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	b1c3      	cbz	r3, 8007cf2 <_strtod_l+0x622>
 8007cc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007cc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	4659      	mov	r1, fp
 8007ccc:	dd11      	ble.n	8007cf2 <_strtod_l+0x622>
 8007cce:	2b1f      	cmp	r3, #31
 8007cd0:	f340 8124 	ble.w	8007f1c <_strtod_l+0x84c>
 8007cd4:	2b34      	cmp	r3, #52	; 0x34
 8007cd6:	bfde      	ittt	le
 8007cd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007cdc:	f04f 33ff 	movle.w	r3, #4294967295
 8007ce0:	fa03 f202 	lslle.w	r2, r3, r2
 8007ce4:	f04f 0a00 	mov.w	sl, #0
 8007ce8:	bfcc      	ite	gt
 8007cea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007cee:	ea02 0b01 	andle.w	fp, r2, r1
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4650      	mov	r0, sl
 8007cf8:	4659      	mov	r1, fp
 8007cfa:	f7f8 ff05 	bl	8000b08 <__aeabi_dcmpeq>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d1a2      	bne.n	8007c48 <_strtod_l+0x578>
 8007d02:	9b07      	ldr	r3, [sp, #28]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	9908      	ldr	r1, [sp, #32]
 8007d08:	462b      	mov	r3, r5
 8007d0a:	463a      	mov	r2, r7
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f001 fe63 	bl	80099d8 <__s2b>
 8007d12:	9007      	str	r0, [sp, #28]
 8007d14:	2800      	cmp	r0, #0
 8007d16:	f43f af1f 	beq.w	8007b58 <_strtod_l+0x488>
 8007d1a:	9b05      	ldr	r3, [sp, #20]
 8007d1c:	1b9e      	subs	r6, r3, r6
 8007d1e:	9b06      	ldr	r3, [sp, #24]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bfb4      	ite	lt
 8007d24:	4633      	movlt	r3, r6
 8007d26:	2300      	movge	r3, #0
 8007d28:	930c      	str	r3, [sp, #48]	; 0x30
 8007d2a:	9b06      	ldr	r3, [sp, #24]
 8007d2c:	2500      	movs	r5, #0
 8007d2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d32:	9312      	str	r3, [sp, #72]	; 0x48
 8007d34:	462e      	mov	r6, r5
 8007d36:	9b07      	ldr	r3, [sp, #28]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	6859      	ldr	r1, [r3, #4]
 8007d3c:	f001 fda4 	bl	8009888 <_Balloc>
 8007d40:	9005      	str	r0, [sp, #20]
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f43f af0c 	beq.w	8007b60 <_strtod_l+0x490>
 8007d48:	9b07      	ldr	r3, [sp, #28]
 8007d4a:	691a      	ldr	r2, [r3, #16]
 8007d4c:	3202      	adds	r2, #2
 8007d4e:	f103 010c 	add.w	r1, r3, #12
 8007d52:	0092      	lsls	r2, r2, #2
 8007d54:	300c      	adds	r0, #12
 8007d56:	f001 fd89 	bl	800986c <memcpy>
 8007d5a:	ec4b ab10 	vmov	d0, sl, fp
 8007d5e:	aa1a      	add	r2, sp, #104	; 0x68
 8007d60:	a919      	add	r1, sp, #100	; 0x64
 8007d62:	4620      	mov	r0, r4
 8007d64:	f002 f97e 	bl	800a064 <__d2b>
 8007d68:	ec4b ab18 	vmov	d8, sl, fp
 8007d6c:	9018      	str	r0, [sp, #96]	; 0x60
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f43f aef6 	beq.w	8007b60 <_strtod_l+0x490>
 8007d74:	2101      	movs	r1, #1
 8007d76:	4620      	mov	r0, r4
 8007d78:	f001 fec8 	bl	8009b0c <__i2b>
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f43f aeee 	beq.w	8007b60 <_strtod_l+0x490>
 8007d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d86:	9904      	ldr	r1, [sp, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bfab      	itete	ge
 8007d8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007d8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007d90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007d92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007d96:	bfac      	ite	ge
 8007d98:	eb03 0902 	addge.w	r9, r3, r2
 8007d9c:	1ad7      	sublt	r7, r2, r3
 8007d9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007da0:	eba3 0801 	sub.w	r8, r3, r1
 8007da4:	4490      	add	r8, r2
 8007da6:	4ba1      	ldr	r3, [pc, #644]	; (800802c <_strtod_l+0x95c>)
 8007da8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007dac:	4598      	cmp	r8, r3
 8007dae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007db2:	f280 80c7 	bge.w	8007f44 <_strtod_l+0x874>
 8007db6:	eba3 0308 	sub.w	r3, r3, r8
 8007dba:	2b1f      	cmp	r3, #31
 8007dbc:	eba2 0203 	sub.w	r2, r2, r3
 8007dc0:	f04f 0101 	mov.w	r1, #1
 8007dc4:	f300 80b1 	bgt.w	8007f2a <_strtod_l+0x85a>
 8007dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9308      	str	r3, [sp, #32]
 8007dd2:	eb09 0802 	add.w	r8, r9, r2
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	45c1      	cmp	r9, r8
 8007dda:	4417      	add	r7, r2
 8007ddc:	441f      	add	r7, r3
 8007dde:	464b      	mov	r3, r9
 8007de0:	bfa8      	it	ge
 8007de2:	4643      	movge	r3, r8
 8007de4:	42bb      	cmp	r3, r7
 8007de6:	bfa8      	it	ge
 8007de8:	463b      	movge	r3, r7
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfc2      	ittt	gt
 8007dee:	eba8 0803 	subgt.w	r8, r8, r3
 8007df2:	1aff      	subgt	r7, r7, r3
 8007df4:	eba9 0903 	subgt.w	r9, r9, r3
 8007df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dd17      	ble.n	8007e2e <_strtod_l+0x75e>
 8007dfe:	4631      	mov	r1, r6
 8007e00:	461a      	mov	r2, r3
 8007e02:	4620      	mov	r0, r4
 8007e04:	f001 ff42 	bl	8009c8c <__pow5mult>
 8007e08:	4606      	mov	r6, r0
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	f43f aea8 	beq.w	8007b60 <_strtod_l+0x490>
 8007e10:	4601      	mov	r1, r0
 8007e12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e14:	4620      	mov	r0, r4
 8007e16:	f001 fe8f 	bl	8009b38 <__multiply>
 8007e1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f43f ae9f 	beq.w	8007b60 <_strtod_l+0x490>
 8007e22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e24:	4620      	mov	r0, r4
 8007e26:	f001 fd6f 	bl	8009908 <_Bfree>
 8007e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2c:	9318      	str	r3, [sp, #96]	; 0x60
 8007e2e:	f1b8 0f00 	cmp.w	r8, #0
 8007e32:	f300 808c 	bgt.w	8007f4e <_strtod_l+0x87e>
 8007e36:	9b06      	ldr	r3, [sp, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dd08      	ble.n	8007e4e <_strtod_l+0x77e>
 8007e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e3e:	9905      	ldr	r1, [sp, #20]
 8007e40:	4620      	mov	r0, r4
 8007e42:	f001 ff23 	bl	8009c8c <__pow5mult>
 8007e46:	9005      	str	r0, [sp, #20]
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f43f ae89 	beq.w	8007b60 <_strtod_l+0x490>
 8007e4e:	2f00      	cmp	r7, #0
 8007e50:	dd08      	ble.n	8007e64 <_strtod_l+0x794>
 8007e52:	9905      	ldr	r1, [sp, #20]
 8007e54:	463a      	mov	r2, r7
 8007e56:	4620      	mov	r0, r4
 8007e58:	f001 ff72 	bl	8009d40 <__lshift>
 8007e5c:	9005      	str	r0, [sp, #20]
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f43f ae7e 	beq.w	8007b60 <_strtod_l+0x490>
 8007e64:	f1b9 0f00 	cmp.w	r9, #0
 8007e68:	dd08      	ble.n	8007e7c <_strtod_l+0x7ac>
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	464a      	mov	r2, r9
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f001 ff66 	bl	8009d40 <__lshift>
 8007e74:	4606      	mov	r6, r0
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f43f ae72 	beq.w	8007b60 <_strtod_l+0x490>
 8007e7c:	9a05      	ldr	r2, [sp, #20]
 8007e7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e80:	4620      	mov	r0, r4
 8007e82:	f001 ffe9 	bl	8009e58 <__mdiff>
 8007e86:	4605      	mov	r5, r0
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	f43f ae69 	beq.w	8007b60 <_strtod_l+0x490>
 8007e8e:	68c3      	ldr	r3, [r0, #12]
 8007e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e92:	2300      	movs	r3, #0
 8007e94:	60c3      	str	r3, [r0, #12]
 8007e96:	4631      	mov	r1, r6
 8007e98:	f001 ffc2 	bl	8009e20 <__mcmp>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	da60      	bge.n	8007f62 <_strtod_l+0x892>
 8007ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ea6:	f040 8082 	bne.w	8007fae <_strtod_l+0x8de>
 8007eaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d17d      	bne.n	8007fae <_strtod_l+0x8de>
 8007eb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007eb6:	0d1b      	lsrs	r3, r3, #20
 8007eb8:	051b      	lsls	r3, r3, #20
 8007eba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ebe:	d976      	bls.n	8007fae <_strtod_l+0x8de>
 8007ec0:	696b      	ldr	r3, [r5, #20]
 8007ec2:	b913      	cbnz	r3, 8007eca <_strtod_l+0x7fa>
 8007ec4:	692b      	ldr	r3, [r5, #16]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	dd71      	ble.n	8007fae <_strtod_l+0x8de>
 8007eca:	4629      	mov	r1, r5
 8007ecc:	2201      	movs	r2, #1
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f001 ff36 	bl	8009d40 <__lshift>
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	f001 ffa2 	bl	8009e20 <__mcmp>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	dd66      	ble.n	8007fae <_strtod_l+0x8de>
 8007ee0:	9904      	ldr	r1, [sp, #16]
 8007ee2:	4a53      	ldr	r2, [pc, #332]	; (8008030 <_strtod_l+0x960>)
 8007ee4:	465b      	mov	r3, fp
 8007ee6:	2900      	cmp	r1, #0
 8007ee8:	f000 8081 	beq.w	8007fee <_strtod_l+0x91e>
 8007eec:	ea02 010b 	and.w	r1, r2, fp
 8007ef0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ef4:	dc7b      	bgt.n	8007fee <_strtod_l+0x91e>
 8007ef6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007efa:	f77f aea9 	ble.w	8007c50 <_strtod_l+0x580>
 8007efe:	4b4d      	ldr	r3, [pc, #308]	; (8008034 <_strtod_l+0x964>)
 8007f00:	4650      	mov	r0, sl
 8007f02:	4659      	mov	r1, fp
 8007f04:	2200      	movs	r2, #0
 8007f06:	f7f8 fb97 	bl	8000638 <__aeabi_dmul>
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4303      	orrs	r3, r0
 8007f0e:	bf08      	it	eq
 8007f10:	2322      	moveq	r3, #34	; 0x22
 8007f12:	4682      	mov	sl, r0
 8007f14:	468b      	mov	fp, r1
 8007f16:	bf08      	it	eq
 8007f18:	6023      	streq	r3, [r4, #0]
 8007f1a:	e62b      	b.n	8007b74 <_strtod_l+0x4a4>
 8007f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	ea03 0a0a 	and.w	sl, r3, sl
 8007f28:	e6e3      	b.n	8007cf2 <_strtod_l+0x622>
 8007f2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007f2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007f32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007f36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007f3a:	fa01 f308 	lsl.w	r3, r1, r8
 8007f3e:	9308      	str	r3, [sp, #32]
 8007f40:	910d      	str	r1, [sp, #52]	; 0x34
 8007f42:	e746      	b.n	8007dd2 <_strtod_l+0x702>
 8007f44:	2300      	movs	r3, #0
 8007f46:	9308      	str	r3, [sp, #32]
 8007f48:	2301      	movs	r3, #1
 8007f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f4c:	e741      	b.n	8007dd2 <_strtod_l+0x702>
 8007f4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f50:	4642      	mov	r2, r8
 8007f52:	4620      	mov	r0, r4
 8007f54:	f001 fef4 	bl	8009d40 <__lshift>
 8007f58:	9018      	str	r0, [sp, #96]	; 0x60
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	f47f af6b 	bne.w	8007e36 <_strtod_l+0x766>
 8007f60:	e5fe      	b.n	8007b60 <_strtod_l+0x490>
 8007f62:	465f      	mov	r7, fp
 8007f64:	d16e      	bne.n	8008044 <_strtod_l+0x974>
 8007f66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f6c:	b342      	cbz	r2, 8007fc0 <_strtod_l+0x8f0>
 8007f6e:	4a32      	ldr	r2, [pc, #200]	; (8008038 <_strtod_l+0x968>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d128      	bne.n	8007fc6 <_strtod_l+0x8f6>
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	4651      	mov	r1, sl
 8007f78:	b1eb      	cbz	r3, 8007fb6 <_strtod_l+0x8e6>
 8007f7a:	4b2d      	ldr	r3, [pc, #180]	; (8008030 <_strtod_l+0x960>)
 8007f7c:	403b      	ands	r3, r7
 8007f7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f82:	f04f 32ff 	mov.w	r2, #4294967295
 8007f86:	d819      	bhi.n	8007fbc <_strtod_l+0x8ec>
 8007f88:	0d1b      	lsrs	r3, r3, #20
 8007f8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	4299      	cmp	r1, r3
 8007f94:	d117      	bne.n	8007fc6 <_strtod_l+0x8f6>
 8007f96:	4b29      	ldr	r3, [pc, #164]	; (800803c <_strtod_l+0x96c>)
 8007f98:	429f      	cmp	r7, r3
 8007f9a:	d102      	bne.n	8007fa2 <_strtod_l+0x8d2>
 8007f9c:	3101      	adds	r1, #1
 8007f9e:	f43f addf 	beq.w	8007b60 <_strtod_l+0x490>
 8007fa2:	4b23      	ldr	r3, [pc, #140]	; (8008030 <_strtod_l+0x960>)
 8007fa4:	403b      	ands	r3, r7
 8007fa6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007faa:	f04f 0a00 	mov.w	sl, #0
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1a4      	bne.n	8007efe <_strtod_l+0x82e>
 8007fb4:	e5de      	b.n	8007b74 <_strtod_l+0x4a4>
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fba:	e7ea      	b.n	8007f92 <_strtod_l+0x8c2>
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	e7e8      	b.n	8007f92 <_strtod_l+0x8c2>
 8007fc0:	ea53 030a 	orrs.w	r3, r3, sl
 8007fc4:	d08c      	beq.n	8007ee0 <_strtod_l+0x810>
 8007fc6:	9b08      	ldr	r3, [sp, #32]
 8007fc8:	b1db      	cbz	r3, 8008002 <_strtod_l+0x932>
 8007fca:	423b      	tst	r3, r7
 8007fcc:	d0ef      	beq.n	8007fae <_strtod_l+0x8de>
 8007fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd0:	9a04      	ldr	r2, [sp, #16]
 8007fd2:	4650      	mov	r0, sl
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	b1c3      	cbz	r3, 800800a <_strtod_l+0x93a>
 8007fd8:	f7ff fb5d 	bl	8007696 <sulp>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	ec51 0b18 	vmov	r0, r1, d8
 8007fe4:	f7f8 f972 	bl	80002cc <__adddf3>
 8007fe8:	4682      	mov	sl, r0
 8007fea:	468b      	mov	fp, r1
 8007fec:	e7df      	b.n	8007fae <_strtod_l+0x8de>
 8007fee:	4013      	ands	r3, r2
 8007ff0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007ff4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007ff8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007ffc:	f04f 3aff 	mov.w	sl, #4294967295
 8008000:	e7d5      	b.n	8007fae <_strtod_l+0x8de>
 8008002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008004:	ea13 0f0a 	tst.w	r3, sl
 8008008:	e7e0      	b.n	8007fcc <_strtod_l+0x8fc>
 800800a:	f7ff fb44 	bl	8007696 <sulp>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	ec51 0b18 	vmov	r0, r1, d8
 8008016:	f7f8 f957 	bl	80002c8 <__aeabi_dsub>
 800801a:	2200      	movs	r2, #0
 800801c:	2300      	movs	r3, #0
 800801e:	4682      	mov	sl, r0
 8008020:	468b      	mov	fp, r1
 8008022:	f7f8 fd71 	bl	8000b08 <__aeabi_dcmpeq>
 8008026:	2800      	cmp	r0, #0
 8008028:	d0c1      	beq.n	8007fae <_strtod_l+0x8de>
 800802a:	e611      	b.n	8007c50 <_strtod_l+0x580>
 800802c:	fffffc02 	.word	0xfffffc02
 8008030:	7ff00000 	.word	0x7ff00000
 8008034:	39500000 	.word	0x39500000
 8008038:	000fffff 	.word	0x000fffff
 800803c:	7fefffff 	.word	0x7fefffff
 8008040:	0800ba80 	.word	0x0800ba80
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	f002 f868 	bl	800a11c <__ratio>
 800804c:	ec59 8b10 	vmov	r8, r9, d0
 8008050:	ee10 0a10 	vmov	r0, s0
 8008054:	2200      	movs	r2, #0
 8008056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800805a:	4649      	mov	r1, r9
 800805c:	f7f8 fd68 	bl	8000b30 <__aeabi_dcmple>
 8008060:	2800      	cmp	r0, #0
 8008062:	d07a      	beq.n	800815a <_strtod_l+0xa8a>
 8008064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d04a      	beq.n	8008100 <_strtod_l+0xa30>
 800806a:	4b95      	ldr	r3, [pc, #596]	; (80082c0 <_strtod_l+0xbf0>)
 800806c:	2200      	movs	r2, #0
 800806e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008072:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80082c0 <_strtod_l+0xbf0>
 8008076:	f04f 0800 	mov.w	r8, #0
 800807a:	4b92      	ldr	r3, [pc, #584]	; (80082c4 <_strtod_l+0xbf4>)
 800807c:	403b      	ands	r3, r7
 800807e:	930d      	str	r3, [sp, #52]	; 0x34
 8008080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008082:	4b91      	ldr	r3, [pc, #580]	; (80082c8 <_strtod_l+0xbf8>)
 8008084:	429a      	cmp	r2, r3
 8008086:	f040 80b0 	bne.w	80081ea <_strtod_l+0xb1a>
 800808a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800808e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008092:	ec4b ab10 	vmov	d0, sl, fp
 8008096:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800809a:	f001 ff67 	bl	8009f6c <__ulp>
 800809e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080a2:	ec53 2b10 	vmov	r2, r3, d0
 80080a6:	f7f8 fac7 	bl	8000638 <__aeabi_dmul>
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	f7f8 f90d 	bl	80002cc <__adddf3>
 80080b2:	460b      	mov	r3, r1
 80080b4:	4983      	ldr	r1, [pc, #524]	; (80082c4 <_strtod_l+0xbf4>)
 80080b6:	4a85      	ldr	r2, [pc, #532]	; (80082cc <_strtod_l+0xbfc>)
 80080b8:	4019      	ands	r1, r3
 80080ba:	4291      	cmp	r1, r2
 80080bc:	4682      	mov	sl, r0
 80080be:	d960      	bls.n	8008182 <_strtod_l+0xab2>
 80080c0:	ee18 3a90 	vmov	r3, s17
 80080c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d104      	bne.n	80080d6 <_strtod_l+0xa06>
 80080cc:	ee18 3a10 	vmov	r3, s16
 80080d0:	3301      	adds	r3, #1
 80080d2:	f43f ad45 	beq.w	8007b60 <_strtod_l+0x490>
 80080d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80082d8 <_strtod_l+0xc08>
 80080da:	f04f 3aff 	mov.w	sl, #4294967295
 80080de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080e0:	4620      	mov	r0, r4
 80080e2:	f001 fc11 	bl	8009908 <_Bfree>
 80080e6:	9905      	ldr	r1, [sp, #20]
 80080e8:	4620      	mov	r0, r4
 80080ea:	f001 fc0d 	bl	8009908 <_Bfree>
 80080ee:	4631      	mov	r1, r6
 80080f0:	4620      	mov	r0, r4
 80080f2:	f001 fc09 	bl	8009908 <_Bfree>
 80080f6:	4629      	mov	r1, r5
 80080f8:	4620      	mov	r0, r4
 80080fa:	f001 fc05 	bl	8009908 <_Bfree>
 80080fe:	e61a      	b.n	8007d36 <_strtod_l+0x666>
 8008100:	f1ba 0f00 	cmp.w	sl, #0
 8008104:	d11b      	bne.n	800813e <_strtod_l+0xa6e>
 8008106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800810a:	b9f3      	cbnz	r3, 800814a <_strtod_l+0xa7a>
 800810c:	4b6c      	ldr	r3, [pc, #432]	; (80082c0 <_strtod_l+0xbf0>)
 800810e:	2200      	movs	r2, #0
 8008110:	4640      	mov	r0, r8
 8008112:	4649      	mov	r1, r9
 8008114:	f7f8 fd02 	bl	8000b1c <__aeabi_dcmplt>
 8008118:	b9d0      	cbnz	r0, 8008150 <_strtod_l+0xa80>
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	4b6c      	ldr	r3, [pc, #432]	; (80082d0 <_strtod_l+0xc00>)
 8008120:	2200      	movs	r2, #0
 8008122:	f7f8 fa89 	bl	8000638 <__aeabi_dmul>
 8008126:	4680      	mov	r8, r0
 8008128:	4689      	mov	r9, r1
 800812a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800812e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008132:	9315      	str	r3, [sp, #84]	; 0x54
 8008134:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008138:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800813c:	e79d      	b.n	800807a <_strtod_l+0x9aa>
 800813e:	f1ba 0f01 	cmp.w	sl, #1
 8008142:	d102      	bne.n	800814a <_strtod_l+0xa7a>
 8008144:	2f00      	cmp	r7, #0
 8008146:	f43f ad83 	beq.w	8007c50 <_strtod_l+0x580>
 800814a:	4b62      	ldr	r3, [pc, #392]	; (80082d4 <_strtod_l+0xc04>)
 800814c:	2200      	movs	r2, #0
 800814e:	e78e      	b.n	800806e <_strtod_l+0x99e>
 8008150:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80082d0 <_strtod_l+0xc00>
 8008154:	f04f 0800 	mov.w	r8, #0
 8008158:	e7e7      	b.n	800812a <_strtod_l+0xa5a>
 800815a:	4b5d      	ldr	r3, [pc, #372]	; (80082d0 <_strtod_l+0xc00>)
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	2200      	movs	r2, #0
 8008162:	f7f8 fa69 	bl	8000638 <__aeabi_dmul>
 8008166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008168:	4680      	mov	r8, r0
 800816a:	4689      	mov	r9, r1
 800816c:	b933      	cbnz	r3, 800817c <_strtod_l+0xaac>
 800816e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008172:	900e      	str	r0, [sp, #56]	; 0x38
 8008174:	930f      	str	r3, [sp, #60]	; 0x3c
 8008176:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800817a:	e7dd      	b.n	8008138 <_strtod_l+0xa68>
 800817c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008180:	e7f9      	b.n	8008176 <_strtod_l+0xaa6>
 8008182:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1a8      	bne.n	80080de <_strtod_l+0xa0e>
 800818c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008192:	0d1b      	lsrs	r3, r3, #20
 8008194:	051b      	lsls	r3, r3, #20
 8008196:	429a      	cmp	r2, r3
 8008198:	d1a1      	bne.n	80080de <_strtod_l+0xa0e>
 800819a:	4640      	mov	r0, r8
 800819c:	4649      	mov	r1, r9
 800819e:	f7f8 fdab 	bl	8000cf8 <__aeabi_d2lz>
 80081a2:	f7f8 fa1b 	bl	80005dc <__aeabi_l2d>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4640      	mov	r0, r8
 80081ac:	4649      	mov	r1, r9
 80081ae:	f7f8 f88b 	bl	80002c8 <__aeabi_dsub>
 80081b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081b8:	ea43 030a 	orr.w	r3, r3, sl
 80081bc:	4313      	orrs	r3, r2
 80081be:	4680      	mov	r8, r0
 80081c0:	4689      	mov	r9, r1
 80081c2:	d055      	beq.n	8008270 <_strtod_l+0xba0>
 80081c4:	a336      	add	r3, pc, #216	; (adr r3, 80082a0 <_strtod_l+0xbd0>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	f7f8 fca7 	bl	8000b1c <__aeabi_dcmplt>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f47f acd0 	bne.w	8007b74 <_strtod_l+0x4a4>
 80081d4:	a334      	add	r3, pc, #208	; (adr r3, 80082a8 <_strtod_l+0xbd8>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	f7f8 fcbb 	bl	8000b58 <__aeabi_dcmpgt>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	f43f af7b 	beq.w	80080de <_strtod_l+0xa0e>
 80081e8:	e4c4      	b.n	8007b74 <_strtod_l+0x4a4>
 80081ea:	9b04      	ldr	r3, [sp, #16]
 80081ec:	b333      	cbz	r3, 800823c <_strtod_l+0xb6c>
 80081ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80081f4:	d822      	bhi.n	800823c <_strtod_l+0xb6c>
 80081f6:	a32e      	add	r3, pc, #184	; (adr r3, 80082b0 <_strtod_l+0xbe0>)
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	4640      	mov	r0, r8
 80081fe:	4649      	mov	r1, r9
 8008200:	f7f8 fc96 	bl	8000b30 <__aeabi_dcmple>
 8008204:	b1a0      	cbz	r0, 8008230 <_strtod_l+0xb60>
 8008206:	4649      	mov	r1, r9
 8008208:	4640      	mov	r0, r8
 800820a:	f7f8 fced 	bl	8000be8 <__aeabi_d2uiz>
 800820e:	2801      	cmp	r0, #1
 8008210:	bf38      	it	cc
 8008212:	2001      	movcc	r0, #1
 8008214:	f7f8 f996 	bl	8000544 <__aeabi_ui2d>
 8008218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800821a:	4680      	mov	r8, r0
 800821c:	4689      	mov	r9, r1
 800821e:	bb23      	cbnz	r3, 800826a <_strtod_l+0xb9a>
 8008220:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008224:	9010      	str	r0, [sp, #64]	; 0x40
 8008226:	9311      	str	r3, [sp, #68]	; 0x44
 8008228:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800822c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008232:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008234:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	9309      	str	r3, [sp, #36]	; 0x24
 800823c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008240:	eeb0 0a48 	vmov.f32	s0, s16
 8008244:	eef0 0a68 	vmov.f32	s1, s17
 8008248:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800824c:	f001 fe8e 	bl	8009f6c <__ulp>
 8008250:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008254:	ec53 2b10 	vmov	r2, r3, d0
 8008258:	f7f8 f9ee 	bl	8000638 <__aeabi_dmul>
 800825c:	ec53 2b18 	vmov	r2, r3, d8
 8008260:	f7f8 f834 	bl	80002cc <__adddf3>
 8008264:	4682      	mov	sl, r0
 8008266:	468b      	mov	fp, r1
 8008268:	e78d      	b.n	8008186 <_strtod_l+0xab6>
 800826a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800826e:	e7db      	b.n	8008228 <_strtod_l+0xb58>
 8008270:	a311      	add	r3, pc, #68	; (adr r3, 80082b8 <_strtod_l+0xbe8>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f8 fc51 	bl	8000b1c <__aeabi_dcmplt>
 800827a:	e7b2      	b.n	80081e2 <_strtod_l+0xb12>
 800827c:	2300      	movs	r3, #0
 800827e:	930a      	str	r3, [sp, #40]	; 0x28
 8008280:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	f7ff ba6b 	b.w	8007760 <_strtod_l+0x90>
 800828a:	2a65      	cmp	r2, #101	; 0x65
 800828c:	f43f ab5f 	beq.w	800794e <_strtod_l+0x27e>
 8008290:	2a45      	cmp	r2, #69	; 0x45
 8008292:	f43f ab5c 	beq.w	800794e <_strtod_l+0x27e>
 8008296:	2301      	movs	r3, #1
 8008298:	f7ff bb94 	b.w	80079c4 <_strtod_l+0x2f4>
 800829c:	f3af 8000 	nop.w
 80082a0:	94a03595 	.word	0x94a03595
 80082a4:	3fdfffff 	.word	0x3fdfffff
 80082a8:	35afe535 	.word	0x35afe535
 80082ac:	3fe00000 	.word	0x3fe00000
 80082b0:	ffc00000 	.word	0xffc00000
 80082b4:	41dfffff 	.word	0x41dfffff
 80082b8:	94a03595 	.word	0x94a03595
 80082bc:	3fcfffff 	.word	0x3fcfffff
 80082c0:	3ff00000 	.word	0x3ff00000
 80082c4:	7ff00000 	.word	0x7ff00000
 80082c8:	7fe00000 	.word	0x7fe00000
 80082cc:	7c9fffff 	.word	0x7c9fffff
 80082d0:	3fe00000 	.word	0x3fe00000
 80082d4:	bff00000 	.word	0xbff00000
 80082d8:	7fefffff 	.word	0x7fefffff

080082dc <_strtod_r>:
 80082dc:	4b01      	ldr	r3, [pc, #4]	; (80082e4 <_strtod_r+0x8>)
 80082de:	f7ff b9f7 	b.w	80076d0 <_strtod_l>
 80082e2:	bf00      	nop
 80082e4:	20000078 	.word	0x20000078

080082e8 <_strtol_l.constprop.0>:
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ee:	d001      	beq.n	80082f4 <_strtol_l.constprop.0+0xc>
 80082f0:	2b24      	cmp	r3, #36	; 0x24
 80082f2:	d906      	bls.n	8008302 <_strtol_l.constprop.0+0x1a>
 80082f4:	f7fe fa58 	bl	80067a8 <__errno>
 80082f8:	2316      	movs	r3, #22
 80082fa:	6003      	str	r3, [r0, #0]
 80082fc:	2000      	movs	r0, #0
 80082fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008302:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80083e8 <_strtol_l.constprop.0+0x100>
 8008306:	460d      	mov	r5, r1
 8008308:	462e      	mov	r6, r5
 800830a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800830e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008312:	f017 0708 	ands.w	r7, r7, #8
 8008316:	d1f7      	bne.n	8008308 <_strtol_l.constprop.0+0x20>
 8008318:	2c2d      	cmp	r4, #45	; 0x2d
 800831a:	d132      	bne.n	8008382 <_strtol_l.constprop.0+0x9a>
 800831c:	782c      	ldrb	r4, [r5, #0]
 800831e:	2701      	movs	r7, #1
 8008320:	1cb5      	adds	r5, r6, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d05b      	beq.n	80083de <_strtol_l.constprop.0+0xf6>
 8008326:	2b10      	cmp	r3, #16
 8008328:	d109      	bne.n	800833e <_strtol_l.constprop.0+0x56>
 800832a:	2c30      	cmp	r4, #48	; 0x30
 800832c:	d107      	bne.n	800833e <_strtol_l.constprop.0+0x56>
 800832e:	782c      	ldrb	r4, [r5, #0]
 8008330:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008334:	2c58      	cmp	r4, #88	; 0x58
 8008336:	d14d      	bne.n	80083d4 <_strtol_l.constprop.0+0xec>
 8008338:	786c      	ldrb	r4, [r5, #1]
 800833a:	2310      	movs	r3, #16
 800833c:	3502      	adds	r5, #2
 800833e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008342:	f108 38ff 	add.w	r8, r8, #4294967295
 8008346:	f04f 0c00 	mov.w	ip, #0
 800834a:	fbb8 f9f3 	udiv	r9, r8, r3
 800834e:	4666      	mov	r6, ip
 8008350:	fb03 8a19 	mls	sl, r3, r9, r8
 8008354:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008358:	f1be 0f09 	cmp.w	lr, #9
 800835c:	d816      	bhi.n	800838c <_strtol_l.constprop.0+0xa4>
 800835e:	4674      	mov	r4, lr
 8008360:	42a3      	cmp	r3, r4
 8008362:	dd24      	ble.n	80083ae <_strtol_l.constprop.0+0xc6>
 8008364:	f1bc 0f00 	cmp.w	ip, #0
 8008368:	db1e      	blt.n	80083a8 <_strtol_l.constprop.0+0xc0>
 800836a:	45b1      	cmp	r9, r6
 800836c:	d31c      	bcc.n	80083a8 <_strtol_l.constprop.0+0xc0>
 800836e:	d101      	bne.n	8008374 <_strtol_l.constprop.0+0x8c>
 8008370:	45a2      	cmp	sl, r4
 8008372:	db19      	blt.n	80083a8 <_strtol_l.constprop.0+0xc0>
 8008374:	fb06 4603 	mla	r6, r6, r3, r4
 8008378:	f04f 0c01 	mov.w	ip, #1
 800837c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008380:	e7e8      	b.n	8008354 <_strtol_l.constprop.0+0x6c>
 8008382:	2c2b      	cmp	r4, #43	; 0x2b
 8008384:	bf04      	itt	eq
 8008386:	782c      	ldrbeq	r4, [r5, #0]
 8008388:	1cb5      	addeq	r5, r6, #2
 800838a:	e7ca      	b.n	8008322 <_strtol_l.constprop.0+0x3a>
 800838c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008390:	f1be 0f19 	cmp.w	lr, #25
 8008394:	d801      	bhi.n	800839a <_strtol_l.constprop.0+0xb2>
 8008396:	3c37      	subs	r4, #55	; 0x37
 8008398:	e7e2      	b.n	8008360 <_strtol_l.constprop.0+0x78>
 800839a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800839e:	f1be 0f19 	cmp.w	lr, #25
 80083a2:	d804      	bhi.n	80083ae <_strtol_l.constprop.0+0xc6>
 80083a4:	3c57      	subs	r4, #87	; 0x57
 80083a6:	e7db      	b.n	8008360 <_strtol_l.constprop.0+0x78>
 80083a8:	f04f 3cff 	mov.w	ip, #4294967295
 80083ac:	e7e6      	b.n	800837c <_strtol_l.constprop.0+0x94>
 80083ae:	f1bc 0f00 	cmp.w	ip, #0
 80083b2:	da05      	bge.n	80083c0 <_strtol_l.constprop.0+0xd8>
 80083b4:	2322      	movs	r3, #34	; 0x22
 80083b6:	6003      	str	r3, [r0, #0]
 80083b8:	4646      	mov	r6, r8
 80083ba:	b942      	cbnz	r2, 80083ce <_strtol_l.constprop.0+0xe6>
 80083bc:	4630      	mov	r0, r6
 80083be:	e79e      	b.n	80082fe <_strtol_l.constprop.0+0x16>
 80083c0:	b107      	cbz	r7, 80083c4 <_strtol_l.constprop.0+0xdc>
 80083c2:	4276      	negs	r6, r6
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	d0f9      	beq.n	80083bc <_strtol_l.constprop.0+0xd4>
 80083c8:	f1bc 0f00 	cmp.w	ip, #0
 80083cc:	d000      	beq.n	80083d0 <_strtol_l.constprop.0+0xe8>
 80083ce:	1e69      	subs	r1, r5, #1
 80083d0:	6011      	str	r1, [r2, #0]
 80083d2:	e7f3      	b.n	80083bc <_strtol_l.constprop.0+0xd4>
 80083d4:	2430      	movs	r4, #48	; 0x30
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1b1      	bne.n	800833e <_strtol_l.constprop.0+0x56>
 80083da:	2308      	movs	r3, #8
 80083dc:	e7af      	b.n	800833e <_strtol_l.constprop.0+0x56>
 80083de:	2c30      	cmp	r4, #48	; 0x30
 80083e0:	d0a5      	beq.n	800832e <_strtol_l.constprop.0+0x46>
 80083e2:	230a      	movs	r3, #10
 80083e4:	e7ab      	b.n	800833e <_strtol_l.constprop.0+0x56>
 80083e6:	bf00      	nop
 80083e8:	0800baa9 	.word	0x0800baa9

080083ec <_strtol_r>:
 80083ec:	f7ff bf7c 	b.w	80082e8 <_strtol_l.constprop.0>

080083f0 <_write_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	; (8008410 <_write_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7f9 fb99 	bl	8001b36 <_write>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_write_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_write_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	200004ec 	.word	0x200004ec

08008414 <_close_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d06      	ldr	r5, [pc, #24]	; (8008430 <_close_r+0x1c>)
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	f7f9 fba5 	bl	8001b6e <_close>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_close_r+0x1a>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_close_r+0x1a>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	200004ec 	.word	0x200004ec

08008434 <quorem>:
 8008434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	6903      	ldr	r3, [r0, #16]
 800843a:	690c      	ldr	r4, [r1, #16]
 800843c:	42a3      	cmp	r3, r4
 800843e:	4607      	mov	r7, r0
 8008440:	f2c0 8081 	blt.w	8008546 <quorem+0x112>
 8008444:	3c01      	subs	r4, #1
 8008446:	f101 0814 	add.w	r8, r1, #20
 800844a:	f100 0514 	add.w	r5, r0, #20
 800844e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800845c:	3301      	adds	r3, #1
 800845e:	429a      	cmp	r2, r3
 8008460:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008464:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008468:	fbb2 f6f3 	udiv	r6, r2, r3
 800846c:	d331      	bcc.n	80084d2 <quorem+0x9e>
 800846e:	f04f 0e00 	mov.w	lr, #0
 8008472:	4640      	mov	r0, r8
 8008474:	46ac      	mov	ip, r5
 8008476:	46f2      	mov	sl, lr
 8008478:	f850 2b04 	ldr.w	r2, [r0], #4
 800847c:	b293      	uxth	r3, r2
 800847e:	fb06 e303 	mla	r3, r6, r3, lr
 8008482:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008486:	b29b      	uxth	r3, r3
 8008488:	ebaa 0303 	sub.w	r3, sl, r3
 800848c:	f8dc a000 	ldr.w	sl, [ip]
 8008490:	0c12      	lsrs	r2, r2, #16
 8008492:	fa13 f38a 	uxtah	r3, r3, sl
 8008496:	fb06 e202 	mla	r2, r6, r2, lr
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	9b00      	ldr	r3, [sp, #0]
 800849e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084a2:	b292      	uxth	r2, r2
 80084a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80084b0:	4581      	cmp	r9, r0
 80084b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084b6:	f84c 3b04 	str.w	r3, [ip], #4
 80084ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084be:	d2db      	bcs.n	8008478 <quorem+0x44>
 80084c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80084c4:	b92b      	cbnz	r3, 80084d2 <quorem+0x9e>
 80084c6:	9b01      	ldr	r3, [sp, #4]
 80084c8:	3b04      	subs	r3, #4
 80084ca:	429d      	cmp	r5, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	d32e      	bcc.n	800852e <quorem+0xfa>
 80084d0:	613c      	str	r4, [r7, #16]
 80084d2:	4638      	mov	r0, r7
 80084d4:	f001 fca4 	bl	8009e20 <__mcmp>
 80084d8:	2800      	cmp	r0, #0
 80084da:	db24      	blt.n	8008526 <quorem+0xf2>
 80084dc:	3601      	adds	r6, #1
 80084de:	4628      	mov	r0, r5
 80084e0:	f04f 0c00 	mov.w	ip, #0
 80084e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80084e8:	f8d0 e000 	ldr.w	lr, [r0]
 80084ec:	b293      	uxth	r3, r2
 80084ee:	ebac 0303 	sub.w	r3, ip, r3
 80084f2:	0c12      	lsrs	r2, r2, #16
 80084f4:	fa13 f38e 	uxtah	r3, r3, lr
 80084f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80084fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008500:	b29b      	uxth	r3, r3
 8008502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008506:	45c1      	cmp	r9, r8
 8008508:	f840 3b04 	str.w	r3, [r0], #4
 800850c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008510:	d2e8      	bcs.n	80084e4 <quorem+0xb0>
 8008512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800851a:	b922      	cbnz	r2, 8008526 <quorem+0xf2>
 800851c:	3b04      	subs	r3, #4
 800851e:	429d      	cmp	r5, r3
 8008520:	461a      	mov	r2, r3
 8008522:	d30a      	bcc.n	800853a <quorem+0x106>
 8008524:	613c      	str	r4, [r7, #16]
 8008526:	4630      	mov	r0, r6
 8008528:	b003      	add	sp, #12
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	3b04      	subs	r3, #4
 8008532:	2a00      	cmp	r2, #0
 8008534:	d1cc      	bne.n	80084d0 <quorem+0x9c>
 8008536:	3c01      	subs	r4, #1
 8008538:	e7c7      	b.n	80084ca <quorem+0x96>
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	3b04      	subs	r3, #4
 800853e:	2a00      	cmp	r2, #0
 8008540:	d1f0      	bne.n	8008524 <quorem+0xf0>
 8008542:	3c01      	subs	r4, #1
 8008544:	e7eb      	b.n	800851e <quorem+0xea>
 8008546:	2000      	movs	r0, #0
 8008548:	e7ee      	b.n	8008528 <quorem+0xf4>
 800854a:	0000      	movs	r0, r0
 800854c:	0000      	movs	r0, r0
	...

08008550 <_dtoa_r>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	ed2d 8b04 	vpush	{d8-d9}
 8008558:	ec57 6b10 	vmov	r6, r7, d0
 800855c:	b093      	sub	sp, #76	; 0x4c
 800855e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008560:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008564:	9106      	str	r1, [sp, #24]
 8008566:	ee10 aa10 	vmov	sl, s0
 800856a:	4604      	mov	r4, r0
 800856c:	9209      	str	r2, [sp, #36]	; 0x24
 800856e:	930c      	str	r3, [sp, #48]	; 0x30
 8008570:	46bb      	mov	fp, r7
 8008572:	b975      	cbnz	r5, 8008592 <_dtoa_r+0x42>
 8008574:	2010      	movs	r0, #16
 8008576:	f001 f95f 	bl	8009838 <malloc>
 800857a:	4602      	mov	r2, r0
 800857c:	6260      	str	r0, [r4, #36]	; 0x24
 800857e:	b920      	cbnz	r0, 800858a <_dtoa_r+0x3a>
 8008580:	4ba7      	ldr	r3, [pc, #668]	; (8008820 <_dtoa_r+0x2d0>)
 8008582:	21ea      	movs	r1, #234	; 0xea
 8008584:	48a7      	ldr	r0, [pc, #668]	; (8008824 <_dtoa_r+0x2d4>)
 8008586:	f002 fceb 	bl	800af60 <__assert_func>
 800858a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800858e:	6005      	str	r5, [r0, #0]
 8008590:	60c5      	str	r5, [r0, #12]
 8008592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008594:	6819      	ldr	r1, [r3, #0]
 8008596:	b151      	cbz	r1, 80085ae <_dtoa_r+0x5e>
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	604a      	str	r2, [r1, #4]
 800859c:	2301      	movs	r3, #1
 800859e:	4093      	lsls	r3, r2
 80085a0:	608b      	str	r3, [r1, #8]
 80085a2:	4620      	mov	r0, r4
 80085a4:	f001 f9b0 	bl	8009908 <_Bfree>
 80085a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	1e3b      	subs	r3, r7, #0
 80085b0:	bfaa      	itet	ge
 80085b2:	2300      	movge	r3, #0
 80085b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80085b8:	f8c8 3000 	strge.w	r3, [r8]
 80085bc:	4b9a      	ldr	r3, [pc, #616]	; (8008828 <_dtoa_r+0x2d8>)
 80085be:	bfbc      	itt	lt
 80085c0:	2201      	movlt	r2, #1
 80085c2:	f8c8 2000 	strlt.w	r2, [r8]
 80085c6:	ea33 030b 	bics.w	r3, r3, fp
 80085ca:	d11b      	bne.n	8008604 <_dtoa_r+0xb4>
 80085cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085d8:	4333      	orrs	r3, r6
 80085da:	f000 8592 	beq.w	8009102 <_dtoa_r+0xbb2>
 80085de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085e0:	b963      	cbnz	r3, 80085fc <_dtoa_r+0xac>
 80085e2:	4b92      	ldr	r3, [pc, #584]	; (800882c <_dtoa_r+0x2dc>)
 80085e4:	e022      	b.n	800862c <_dtoa_r+0xdc>
 80085e6:	4b92      	ldr	r3, [pc, #584]	; (8008830 <_dtoa_r+0x2e0>)
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	3308      	adds	r3, #8
 80085ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	9801      	ldr	r0, [sp, #4]
 80085f2:	b013      	add	sp, #76	; 0x4c
 80085f4:	ecbd 8b04 	vpop	{d8-d9}
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	4b8b      	ldr	r3, [pc, #556]	; (800882c <_dtoa_r+0x2dc>)
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	3303      	adds	r3, #3
 8008602:	e7f3      	b.n	80085ec <_dtoa_r+0x9c>
 8008604:	2200      	movs	r2, #0
 8008606:	2300      	movs	r3, #0
 8008608:	4650      	mov	r0, sl
 800860a:	4659      	mov	r1, fp
 800860c:	f7f8 fa7c 	bl	8000b08 <__aeabi_dcmpeq>
 8008610:	ec4b ab19 	vmov	d9, sl, fp
 8008614:	4680      	mov	r8, r0
 8008616:	b158      	cbz	r0, 8008630 <_dtoa_r+0xe0>
 8008618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800861a:	2301      	movs	r3, #1
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 856b 	beq.w	80090fc <_dtoa_r+0xbac>
 8008626:	4883      	ldr	r0, [pc, #524]	; (8008834 <_dtoa_r+0x2e4>)
 8008628:	6018      	str	r0, [r3, #0]
 800862a:	1e43      	subs	r3, r0, #1
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	e7df      	b.n	80085f0 <_dtoa_r+0xa0>
 8008630:	ec4b ab10 	vmov	d0, sl, fp
 8008634:	aa10      	add	r2, sp, #64	; 0x40
 8008636:	a911      	add	r1, sp, #68	; 0x44
 8008638:	4620      	mov	r0, r4
 800863a:	f001 fd13 	bl	800a064 <__d2b>
 800863e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008642:	ee08 0a10 	vmov	s16, r0
 8008646:	2d00      	cmp	r5, #0
 8008648:	f000 8084 	beq.w	8008754 <_dtoa_r+0x204>
 800864c:	ee19 3a90 	vmov	r3, s19
 8008650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008654:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008658:	4656      	mov	r6, sl
 800865a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800865e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008662:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008666:	4b74      	ldr	r3, [pc, #464]	; (8008838 <_dtoa_r+0x2e8>)
 8008668:	2200      	movs	r2, #0
 800866a:	4630      	mov	r0, r6
 800866c:	4639      	mov	r1, r7
 800866e:	f7f7 fe2b 	bl	80002c8 <__aeabi_dsub>
 8008672:	a365      	add	r3, pc, #404	; (adr r3, 8008808 <_dtoa_r+0x2b8>)
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	f7f7 ffde 	bl	8000638 <__aeabi_dmul>
 800867c:	a364      	add	r3, pc, #400	; (adr r3, 8008810 <_dtoa_r+0x2c0>)
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	f7f7 fe23 	bl	80002cc <__adddf3>
 8008686:	4606      	mov	r6, r0
 8008688:	4628      	mov	r0, r5
 800868a:	460f      	mov	r7, r1
 800868c:	f7f7 ff6a 	bl	8000564 <__aeabi_i2d>
 8008690:	a361      	add	r3, pc, #388	; (adr r3, 8008818 <_dtoa_r+0x2c8>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 ffcf 	bl	8000638 <__aeabi_dmul>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4630      	mov	r0, r6
 80086a0:	4639      	mov	r1, r7
 80086a2:	f7f7 fe13 	bl	80002cc <__adddf3>
 80086a6:	4606      	mov	r6, r0
 80086a8:	460f      	mov	r7, r1
 80086aa:	f7f8 fa75 	bl	8000b98 <__aeabi_d2iz>
 80086ae:	2200      	movs	r2, #0
 80086b0:	9000      	str	r0, [sp, #0]
 80086b2:	2300      	movs	r3, #0
 80086b4:	4630      	mov	r0, r6
 80086b6:	4639      	mov	r1, r7
 80086b8:	f7f8 fa30 	bl	8000b1c <__aeabi_dcmplt>
 80086bc:	b150      	cbz	r0, 80086d4 <_dtoa_r+0x184>
 80086be:	9800      	ldr	r0, [sp, #0]
 80086c0:	f7f7 ff50 	bl	8000564 <__aeabi_i2d>
 80086c4:	4632      	mov	r2, r6
 80086c6:	463b      	mov	r3, r7
 80086c8:	f7f8 fa1e 	bl	8000b08 <__aeabi_dcmpeq>
 80086cc:	b910      	cbnz	r0, 80086d4 <_dtoa_r+0x184>
 80086ce:	9b00      	ldr	r3, [sp, #0]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	9b00      	ldr	r3, [sp, #0]
 80086d6:	2b16      	cmp	r3, #22
 80086d8:	d85a      	bhi.n	8008790 <_dtoa_r+0x240>
 80086da:	9a00      	ldr	r2, [sp, #0]
 80086dc:	4b57      	ldr	r3, [pc, #348]	; (800883c <_dtoa_r+0x2ec>)
 80086de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	ec51 0b19 	vmov	r0, r1, d9
 80086ea:	f7f8 fa17 	bl	8000b1c <__aeabi_dcmplt>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d050      	beq.n	8008794 <_dtoa_r+0x244>
 80086f2:	9b00      	ldr	r3, [sp, #0]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	2300      	movs	r3, #0
 80086fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80086fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086fe:	1b5d      	subs	r5, r3, r5
 8008700:	1e6b      	subs	r3, r5, #1
 8008702:	9305      	str	r3, [sp, #20]
 8008704:	bf45      	ittet	mi
 8008706:	f1c5 0301 	rsbmi	r3, r5, #1
 800870a:	9304      	strmi	r3, [sp, #16]
 800870c:	2300      	movpl	r3, #0
 800870e:	2300      	movmi	r3, #0
 8008710:	bf4c      	ite	mi
 8008712:	9305      	strmi	r3, [sp, #20]
 8008714:	9304      	strpl	r3, [sp, #16]
 8008716:	9b00      	ldr	r3, [sp, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db3d      	blt.n	8008798 <_dtoa_r+0x248>
 800871c:	9b05      	ldr	r3, [sp, #20]
 800871e:	9a00      	ldr	r2, [sp, #0]
 8008720:	920a      	str	r2, [sp, #40]	; 0x28
 8008722:	4413      	add	r3, r2
 8008724:	9305      	str	r3, [sp, #20]
 8008726:	2300      	movs	r3, #0
 8008728:	9307      	str	r3, [sp, #28]
 800872a:	9b06      	ldr	r3, [sp, #24]
 800872c:	2b09      	cmp	r3, #9
 800872e:	f200 8089 	bhi.w	8008844 <_dtoa_r+0x2f4>
 8008732:	2b05      	cmp	r3, #5
 8008734:	bfc4      	itt	gt
 8008736:	3b04      	subgt	r3, #4
 8008738:	9306      	strgt	r3, [sp, #24]
 800873a:	9b06      	ldr	r3, [sp, #24]
 800873c:	f1a3 0302 	sub.w	r3, r3, #2
 8008740:	bfcc      	ite	gt
 8008742:	2500      	movgt	r5, #0
 8008744:	2501      	movle	r5, #1
 8008746:	2b03      	cmp	r3, #3
 8008748:	f200 8087 	bhi.w	800885a <_dtoa_r+0x30a>
 800874c:	e8df f003 	tbb	[pc, r3]
 8008750:	59383a2d 	.word	0x59383a2d
 8008754:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008758:	441d      	add	r5, r3
 800875a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800875e:	2b20      	cmp	r3, #32
 8008760:	bfc1      	itttt	gt
 8008762:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008766:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800876a:	fa0b f303 	lslgt.w	r3, fp, r3
 800876e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008772:	bfda      	itte	le
 8008774:	f1c3 0320 	rsble	r3, r3, #32
 8008778:	fa06 f003 	lslle.w	r0, r6, r3
 800877c:	4318      	orrgt	r0, r3
 800877e:	f7f7 fee1 	bl	8000544 <__aeabi_ui2d>
 8008782:	2301      	movs	r3, #1
 8008784:	4606      	mov	r6, r0
 8008786:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800878a:	3d01      	subs	r5, #1
 800878c:	930e      	str	r3, [sp, #56]	; 0x38
 800878e:	e76a      	b.n	8008666 <_dtoa_r+0x116>
 8008790:	2301      	movs	r3, #1
 8008792:	e7b2      	b.n	80086fa <_dtoa_r+0x1aa>
 8008794:	900b      	str	r0, [sp, #44]	; 0x2c
 8008796:	e7b1      	b.n	80086fc <_dtoa_r+0x1ac>
 8008798:	9b04      	ldr	r3, [sp, #16]
 800879a:	9a00      	ldr	r2, [sp, #0]
 800879c:	1a9b      	subs	r3, r3, r2
 800879e:	9304      	str	r3, [sp, #16]
 80087a0:	4253      	negs	r3, r2
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	2300      	movs	r3, #0
 80087a6:	930a      	str	r3, [sp, #40]	; 0x28
 80087a8:	e7bf      	b.n	800872a <_dtoa_r+0x1da>
 80087aa:	2300      	movs	r3, #0
 80087ac:	9308      	str	r3, [sp, #32]
 80087ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc55      	bgt.n	8008860 <_dtoa_r+0x310>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087ba:	461a      	mov	r2, r3
 80087bc:	9209      	str	r2, [sp, #36]	; 0x24
 80087be:	e00c      	b.n	80087da <_dtoa_r+0x28a>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e7f3      	b.n	80087ac <_dtoa_r+0x25c>
 80087c4:	2300      	movs	r3, #0
 80087c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087c8:	9308      	str	r3, [sp, #32]
 80087ca:	9b00      	ldr	r3, [sp, #0]
 80087cc:	4413      	add	r3, r2
 80087ce:	9302      	str	r3, [sp, #8]
 80087d0:	3301      	adds	r3, #1
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	bfb8      	it	lt
 80087d8:	2301      	movlt	r3, #1
 80087da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087dc:	2200      	movs	r2, #0
 80087de:	6042      	str	r2, [r0, #4]
 80087e0:	2204      	movs	r2, #4
 80087e2:	f102 0614 	add.w	r6, r2, #20
 80087e6:	429e      	cmp	r6, r3
 80087e8:	6841      	ldr	r1, [r0, #4]
 80087ea:	d93d      	bls.n	8008868 <_dtoa_r+0x318>
 80087ec:	4620      	mov	r0, r4
 80087ee:	f001 f84b 	bl	8009888 <_Balloc>
 80087f2:	9001      	str	r0, [sp, #4]
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d13b      	bne.n	8008870 <_dtoa_r+0x320>
 80087f8:	4b11      	ldr	r3, [pc, #68]	; (8008840 <_dtoa_r+0x2f0>)
 80087fa:	4602      	mov	r2, r0
 80087fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008800:	e6c0      	b.n	8008584 <_dtoa_r+0x34>
 8008802:	2301      	movs	r3, #1
 8008804:	e7df      	b.n	80087c6 <_dtoa_r+0x276>
 8008806:	bf00      	nop
 8008808:	636f4361 	.word	0x636f4361
 800880c:	3fd287a7 	.word	0x3fd287a7
 8008810:	8b60c8b3 	.word	0x8b60c8b3
 8008814:	3fc68a28 	.word	0x3fc68a28
 8008818:	509f79fb 	.word	0x509f79fb
 800881c:	3fd34413 	.word	0x3fd34413
 8008820:	0800bbb6 	.word	0x0800bbb6
 8008824:	0800bbcd 	.word	0x0800bbcd
 8008828:	7ff00000 	.word	0x7ff00000
 800882c:	0800bbb2 	.word	0x0800bbb2
 8008830:	0800bba9 	.word	0x0800bba9
 8008834:	0800be22 	.word	0x0800be22
 8008838:	3ff80000 	.word	0x3ff80000
 800883c:	0800bd38 	.word	0x0800bd38
 8008840:	0800bc28 	.word	0x0800bc28
 8008844:	2501      	movs	r5, #1
 8008846:	2300      	movs	r3, #0
 8008848:	9306      	str	r3, [sp, #24]
 800884a:	9508      	str	r5, [sp, #32]
 800884c:	f04f 33ff 	mov.w	r3, #4294967295
 8008850:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008854:	2200      	movs	r2, #0
 8008856:	2312      	movs	r3, #18
 8008858:	e7b0      	b.n	80087bc <_dtoa_r+0x26c>
 800885a:	2301      	movs	r3, #1
 800885c:	9308      	str	r3, [sp, #32]
 800885e:	e7f5      	b.n	800884c <_dtoa_r+0x2fc>
 8008860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008862:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008866:	e7b8      	b.n	80087da <_dtoa_r+0x28a>
 8008868:	3101      	adds	r1, #1
 800886a:	6041      	str	r1, [r0, #4]
 800886c:	0052      	lsls	r2, r2, #1
 800886e:	e7b8      	b.n	80087e2 <_dtoa_r+0x292>
 8008870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008872:	9a01      	ldr	r2, [sp, #4]
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	2b0e      	cmp	r3, #14
 800887a:	f200 809d 	bhi.w	80089b8 <_dtoa_r+0x468>
 800887e:	2d00      	cmp	r5, #0
 8008880:	f000 809a 	beq.w	80089b8 <_dtoa_r+0x468>
 8008884:	9b00      	ldr	r3, [sp, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	dd32      	ble.n	80088f0 <_dtoa_r+0x3a0>
 800888a:	4ab7      	ldr	r2, [pc, #732]	; (8008b68 <_dtoa_r+0x618>)
 800888c:	f003 030f 	and.w	r3, r3, #15
 8008890:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008894:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008898:	9b00      	ldr	r3, [sp, #0]
 800889a:	05d8      	lsls	r0, r3, #23
 800889c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80088a0:	d516      	bpl.n	80088d0 <_dtoa_r+0x380>
 80088a2:	4bb2      	ldr	r3, [pc, #712]	; (8008b6c <_dtoa_r+0x61c>)
 80088a4:	ec51 0b19 	vmov	r0, r1, d9
 80088a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088ac:	f7f7 ffee 	bl	800088c <__aeabi_ddiv>
 80088b0:	f007 070f 	and.w	r7, r7, #15
 80088b4:	4682      	mov	sl, r0
 80088b6:	468b      	mov	fp, r1
 80088b8:	2503      	movs	r5, #3
 80088ba:	4eac      	ldr	r6, [pc, #688]	; (8008b6c <_dtoa_r+0x61c>)
 80088bc:	b957      	cbnz	r7, 80088d4 <_dtoa_r+0x384>
 80088be:	4642      	mov	r2, r8
 80088c0:	464b      	mov	r3, r9
 80088c2:	4650      	mov	r0, sl
 80088c4:	4659      	mov	r1, fp
 80088c6:	f7f7 ffe1 	bl	800088c <__aeabi_ddiv>
 80088ca:	4682      	mov	sl, r0
 80088cc:	468b      	mov	fp, r1
 80088ce:	e028      	b.n	8008922 <_dtoa_r+0x3d2>
 80088d0:	2502      	movs	r5, #2
 80088d2:	e7f2      	b.n	80088ba <_dtoa_r+0x36a>
 80088d4:	07f9      	lsls	r1, r7, #31
 80088d6:	d508      	bpl.n	80088ea <_dtoa_r+0x39a>
 80088d8:	4640      	mov	r0, r8
 80088da:	4649      	mov	r1, r9
 80088dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088e0:	f7f7 feaa 	bl	8000638 <__aeabi_dmul>
 80088e4:	3501      	adds	r5, #1
 80088e6:	4680      	mov	r8, r0
 80088e8:	4689      	mov	r9, r1
 80088ea:	107f      	asrs	r7, r7, #1
 80088ec:	3608      	adds	r6, #8
 80088ee:	e7e5      	b.n	80088bc <_dtoa_r+0x36c>
 80088f0:	f000 809b 	beq.w	8008a2a <_dtoa_r+0x4da>
 80088f4:	9b00      	ldr	r3, [sp, #0]
 80088f6:	4f9d      	ldr	r7, [pc, #628]	; (8008b6c <_dtoa_r+0x61c>)
 80088f8:	425e      	negs	r6, r3
 80088fa:	4b9b      	ldr	r3, [pc, #620]	; (8008b68 <_dtoa_r+0x618>)
 80088fc:	f006 020f 	and.w	r2, r6, #15
 8008900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	ec51 0b19 	vmov	r0, r1, d9
 800890c:	f7f7 fe94 	bl	8000638 <__aeabi_dmul>
 8008910:	1136      	asrs	r6, r6, #4
 8008912:	4682      	mov	sl, r0
 8008914:	468b      	mov	fp, r1
 8008916:	2300      	movs	r3, #0
 8008918:	2502      	movs	r5, #2
 800891a:	2e00      	cmp	r6, #0
 800891c:	d17a      	bne.n	8008a14 <_dtoa_r+0x4c4>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1d3      	bne.n	80088ca <_dtoa_r+0x37a>
 8008922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 8082 	beq.w	8008a2e <_dtoa_r+0x4de>
 800892a:	4b91      	ldr	r3, [pc, #580]	; (8008b70 <_dtoa_r+0x620>)
 800892c:	2200      	movs	r2, #0
 800892e:	4650      	mov	r0, sl
 8008930:	4659      	mov	r1, fp
 8008932:	f7f8 f8f3 	bl	8000b1c <__aeabi_dcmplt>
 8008936:	2800      	cmp	r0, #0
 8008938:	d079      	beq.n	8008a2e <_dtoa_r+0x4de>
 800893a:	9b03      	ldr	r3, [sp, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d076      	beq.n	8008a2e <_dtoa_r+0x4de>
 8008940:	9b02      	ldr	r3, [sp, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	dd36      	ble.n	80089b4 <_dtoa_r+0x464>
 8008946:	9b00      	ldr	r3, [sp, #0]
 8008948:	4650      	mov	r0, sl
 800894a:	4659      	mov	r1, fp
 800894c:	1e5f      	subs	r7, r3, #1
 800894e:	2200      	movs	r2, #0
 8008950:	4b88      	ldr	r3, [pc, #544]	; (8008b74 <_dtoa_r+0x624>)
 8008952:	f7f7 fe71 	bl	8000638 <__aeabi_dmul>
 8008956:	9e02      	ldr	r6, [sp, #8]
 8008958:	4682      	mov	sl, r0
 800895a:	468b      	mov	fp, r1
 800895c:	3501      	adds	r5, #1
 800895e:	4628      	mov	r0, r5
 8008960:	f7f7 fe00 	bl	8000564 <__aeabi_i2d>
 8008964:	4652      	mov	r2, sl
 8008966:	465b      	mov	r3, fp
 8008968:	f7f7 fe66 	bl	8000638 <__aeabi_dmul>
 800896c:	4b82      	ldr	r3, [pc, #520]	; (8008b78 <_dtoa_r+0x628>)
 800896e:	2200      	movs	r2, #0
 8008970:	f7f7 fcac 	bl	80002cc <__adddf3>
 8008974:	46d0      	mov	r8, sl
 8008976:	46d9      	mov	r9, fp
 8008978:	4682      	mov	sl, r0
 800897a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800897e:	2e00      	cmp	r6, #0
 8008980:	d158      	bne.n	8008a34 <_dtoa_r+0x4e4>
 8008982:	4b7e      	ldr	r3, [pc, #504]	; (8008b7c <_dtoa_r+0x62c>)
 8008984:	2200      	movs	r2, #0
 8008986:	4640      	mov	r0, r8
 8008988:	4649      	mov	r1, r9
 800898a:	f7f7 fc9d 	bl	80002c8 <__aeabi_dsub>
 800898e:	4652      	mov	r2, sl
 8008990:	465b      	mov	r3, fp
 8008992:	4680      	mov	r8, r0
 8008994:	4689      	mov	r9, r1
 8008996:	f7f8 f8df 	bl	8000b58 <__aeabi_dcmpgt>
 800899a:	2800      	cmp	r0, #0
 800899c:	f040 8295 	bne.w	8008eca <_dtoa_r+0x97a>
 80089a0:	4652      	mov	r2, sl
 80089a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089a6:	4640      	mov	r0, r8
 80089a8:	4649      	mov	r1, r9
 80089aa:	f7f8 f8b7 	bl	8000b1c <__aeabi_dcmplt>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	f040 8289 	bne.w	8008ec6 <_dtoa_r+0x976>
 80089b4:	ec5b ab19 	vmov	sl, fp, d9
 80089b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f2c0 8148 	blt.w	8008c50 <_dtoa_r+0x700>
 80089c0:	9a00      	ldr	r2, [sp, #0]
 80089c2:	2a0e      	cmp	r2, #14
 80089c4:	f300 8144 	bgt.w	8008c50 <_dtoa_r+0x700>
 80089c8:	4b67      	ldr	r3, [pc, #412]	; (8008b68 <_dtoa_r+0x618>)
 80089ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f280 80d5 	bge.w	8008b84 <_dtoa_r+0x634>
 80089da:	9b03      	ldr	r3, [sp, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f300 80d1 	bgt.w	8008b84 <_dtoa_r+0x634>
 80089e2:	f040 826f 	bne.w	8008ec4 <_dtoa_r+0x974>
 80089e6:	4b65      	ldr	r3, [pc, #404]	; (8008b7c <_dtoa_r+0x62c>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	4640      	mov	r0, r8
 80089ec:	4649      	mov	r1, r9
 80089ee:	f7f7 fe23 	bl	8000638 <__aeabi_dmul>
 80089f2:	4652      	mov	r2, sl
 80089f4:	465b      	mov	r3, fp
 80089f6:	f7f8 f8a5 	bl	8000b44 <__aeabi_dcmpge>
 80089fa:	9e03      	ldr	r6, [sp, #12]
 80089fc:	4637      	mov	r7, r6
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f040 8245 	bne.w	8008e8e <_dtoa_r+0x93e>
 8008a04:	9d01      	ldr	r5, [sp, #4]
 8008a06:	2331      	movs	r3, #49	; 0x31
 8008a08:	f805 3b01 	strb.w	r3, [r5], #1
 8008a0c:	9b00      	ldr	r3, [sp, #0]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	e240      	b.n	8008e96 <_dtoa_r+0x946>
 8008a14:	07f2      	lsls	r2, r6, #31
 8008a16:	d505      	bpl.n	8008a24 <_dtoa_r+0x4d4>
 8008a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a1c:	f7f7 fe0c 	bl	8000638 <__aeabi_dmul>
 8008a20:	3501      	adds	r5, #1
 8008a22:	2301      	movs	r3, #1
 8008a24:	1076      	asrs	r6, r6, #1
 8008a26:	3708      	adds	r7, #8
 8008a28:	e777      	b.n	800891a <_dtoa_r+0x3ca>
 8008a2a:	2502      	movs	r5, #2
 8008a2c:	e779      	b.n	8008922 <_dtoa_r+0x3d2>
 8008a2e:	9f00      	ldr	r7, [sp, #0]
 8008a30:	9e03      	ldr	r6, [sp, #12]
 8008a32:	e794      	b.n	800895e <_dtoa_r+0x40e>
 8008a34:	9901      	ldr	r1, [sp, #4]
 8008a36:	4b4c      	ldr	r3, [pc, #304]	; (8008b68 <_dtoa_r+0x618>)
 8008a38:	4431      	add	r1, r6
 8008a3a:	910d      	str	r1, [sp, #52]	; 0x34
 8008a3c:	9908      	ldr	r1, [sp, #32]
 8008a3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a46:	2900      	cmp	r1, #0
 8008a48:	d043      	beq.n	8008ad2 <_dtoa_r+0x582>
 8008a4a:	494d      	ldr	r1, [pc, #308]	; (8008b80 <_dtoa_r+0x630>)
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f7f7 ff1d 	bl	800088c <__aeabi_ddiv>
 8008a52:	4652      	mov	r2, sl
 8008a54:	465b      	mov	r3, fp
 8008a56:	f7f7 fc37 	bl	80002c8 <__aeabi_dsub>
 8008a5a:	9d01      	ldr	r5, [sp, #4]
 8008a5c:	4682      	mov	sl, r0
 8008a5e:	468b      	mov	fp, r1
 8008a60:	4649      	mov	r1, r9
 8008a62:	4640      	mov	r0, r8
 8008a64:	f7f8 f898 	bl	8000b98 <__aeabi_d2iz>
 8008a68:	4606      	mov	r6, r0
 8008a6a:	f7f7 fd7b 	bl	8000564 <__aeabi_i2d>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4640      	mov	r0, r8
 8008a74:	4649      	mov	r1, r9
 8008a76:	f7f7 fc27 	bl	80002c8 <__aeabi_dsub>
 8008a7a:	3630      	adds	r6, #48	; 0x30
 8008a7c:	f805 6b01 	strb.w	r6, [r5], #1
 8008a80:	4652      	mov	r2, sl
 8008a82:	465b      	mov	r3, fp
 8008a84:	4680      	mov	r8, r0
 8008a86:	4689      	mov	r9, r1
 8008a88:	f7f8 f848 	bl	8000b1c <__aeabi_dcmplt>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d163      	bne.n	8008b58 <_dtoa_r+0x608>
 8008a90:	4642      	mov	r2, r8
 8008a92:	464b      	mov	r3, r9
 8008a94:	4936      	ldr	r1, [pc, #216]	; (8008b70 <_dtoa_r+0x620>)
 8008a96:	2000      	movs	r0, #0
 8008a98:	f7f7 fc16 	bl	80002c8 <__aeabi_dsub>
 8008a9c:	4652      	mov	r2, sl
 8008a9e:	465b      	mov	r3, fp
 8008aa0:	f7f8 f83c 	bl	8000b1c <__aeabi_dcmplt>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	f040 80b5 	bne.w	8008c14 <_dtoa_r+0x6c4>
 8008aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aac:	429d      	cmp	r5, r3
 8008aae:	d081      	beq.n	80089b4 <_dtoa_r+0x464>
 8008ab0:	4b30      	ldr	r3, [pc, #192]	; (8008b74 <_dtoa_r+0x624>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	4650      	mov	r0, sl
 8008ab6:	4659      	mov	r1, fp
 8008ab8:	f7f7 fdbe 	bl	8000638 <__aeabi_dmul>
 8008abc:	4b2d      	ldr	r3, [pc, #180]	; (8008b74 <_dtoa_r+0x624>)
 8008abe:	4682      	mov	sl, r0
 8008ac0:	468b      	mov	fp, r1
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f7f7 fdb6 	bl	8000638 <__aeabi_dmul>
 8008acc:	4680      	mov	r8, r0
 8008ace:	4689      	mov	r9, r1
 8008ad0:	e7c6      	b.n	8008a60 <_dtoa_r+0x510>
 8008ad2:	4650      	mov	r0, sl
 8008ad4:	4659      	mov	r1, fp
 8008ad6:	f7f7 fdaf 	bl	8000638 <__aeabi_dmul>
 8008ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008adc:	9d01      	ldr	r5, [sp, #4]
 8008ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ae0:	4682      	mov	sl, r0
 8008ae2:	468b      	mov	fp, r1
 8008ae4:	4649      	mov	r1, r9
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	f7f8 f856 	bl	8000b98 <__aeabi_d2iz>
 8008aec:	4606      	mov	r6, r0
 8008aee:	f7f7 fd39 	bl	8000564 <__aeabi_i2d>
 8008af2:	3630      	adds	r6, #48	; 0x30
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fbe4 	bl	80002c8 <__aeabi_dsub>
 8008b00:	f805 6b01 	strb.w	r6, [r5], #1
 8008b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b06:	429d      	cmp	r5, r3
 8008b08:	4680      	mov	r8, r0
 8008b0a:	4689      	mov	r9, r1
 8008b0c:	f04f 0200 	mov.w	r2, #0
 8008b10:	d124      	bne.n	8008b5c <_dtoa_r+0x60c>
 8008b12:	4b1b      	ldr	r3, [pc, #108]	; (8008b80 <_dtoa_r+0x630>)
 8008b14:	4650      	mov	r0, sl
 8008b16:	4659      	mov	r1, fp
 8008b18:	f7f7 fbd8 	bl	80002cc <__adddf3>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	4640      	mov	r0, r8
 8008b22:	4649      	mov	r1, r9
 8008b24:	f7f8 f818 	bl	8000b58 <__aeabi_dcmpgt>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d173      	bne.n	8008c14 <_dtoa_r+0x6c4>
 8008b2c:	4652      	mov	r2, sl
 8008b2e:	465b      	mov	r3, fp
 8008b30:	4913      	ldr	r1, [pc, #76]	; (8008b80 <_dtoa_r+0x630>)
 8008b32:	2000      	movs	r0, #0
 8008b34:	f7f7 fbc8 	bl	80002c8 <__aeabi_dsub>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	4649      	mov	r1, r9
 8008b40:	f7f7 ffec 	bl	8000b1c <__aeabi_dcmplt>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	f43f af35 	beq.w	80089b4 <_dtoa_r+0x464>
 8008b4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b4c:	1e6b      	subs	r3, r5, #1
 8008b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b54:	2b30      	cmp	r3, #48	; 0x30
 8008b56:	d0f8      	beq.n	8008b4a <_dtoa_r+0x5fa>
 8008b58:	9700      	str	r7, [sp, #0]
 8008b5a:	e049      	b.n	8008bf0 <_dtoa_r+0x6a0>
 8008b5c:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <_dtoa_r+0x624>)
 8008b5e:	f7f7 fd6b 	bl	8000638 <__aeabi_dmul>
 8008b62:	4680      	mov	r8, r0
 8008b64:	4689      	mov	r9, r1
 8008b66:	e7bd      	b.n	8008ae4 <_dtoa_r+0x594>
 8008b68:	0800bd38 	.word	0x0800bd38
 8008b6c:	0800bd10 	.word	0x0800bd10
 8008b70:	3ff00000 	.word	0x3ff00000
 8008b74:	40240000 	.word	0x40240000
 8008b78:	401c0000 	.word	0x401c0000
 8008b7c:	40140000 	.word	0x40140000
 8008b80:	3fe00000 	.word	0x3fe00000
 8008b84:	9d01      	ldr	r5, [sp, #4]
 8008b86:	4656      	mov	r6, sl
 8008b88:	465f      	mov	r7, fp
 8008b8a:	4642      	mov	r2, r8
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	4630      	mov	r0, r6
 8008b90:	4639      	mov	r1, r7
 8008b92:	f7f7 fe7b 	bl	800088c <__aeabi_ddiv>
 8008b96:	f7f7 ffff 	bl	8000b98 <__aeabi_d2iz>
 8008b9a:	4682      	mov	sl, r0
 8008b9c:	f7f7 fce2 	bl	8000564 <__aeabi_i2d>
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	f7f7 fd48 	bl	8000638 <__aeabi_dmul>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4630      	mov	r0, r6
 8008bae:	4639      	mov	r1, r7
 8008bb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008bb4:	f7f7 fb88 	bl	80002c8 <__aeabi_dsub>
 8008bb8:	f805 6b01 	strb.w	r6, [r5], #1
 8008bbc:	9e01      	ldr	r6, [sp, #4]
 8008bbe:	9f03      	ldr	r7, [sp, #12]
 8008bc0:	1bae      	subs	r6, r5, r6
 8008bc2:	42b7      	cmp	r7, r6
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	d135      	bne.n	8008c36 <_dtoa_r+0x6e6>
 8008bca:	f7f7 fb7f 	bl	80002cc <__adddf3>
 8008bce:	4642      	mov	r2, r8
 8008bd0:	464b      	mov	r3, r9
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	f7f7 ffbf 	bl	8000b58 <__aeabi_dcmpgt>
 8008bda:	b9d0      	cbnz	r0, 8008c12 <_dtoa_r+0x6c2>
 8008bdc:	4642      	mov	r2, r8
 8008bde:	464b      	mov	r3, r9
 8008be0:	4630      	mov	r0, r6
 8008be2:	4639      	mov	r1, r7
 8008be4:	f7f7 ff90 	bl	8000b08 <__aeabi_dcmpeq>
 8008be8:	b110      	cbz	r0, 8008bf0 <_dtoa_r+0x6a0>
 8008bea:	f01a 0f01 	tst.w	sl, #1
 8008bee:	d110      	bne.n	8008c12 <_dtoa_r+0x6c2>
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	ee18 1a10 	vmov	r1, s16
 8008bf6:	f000 fe87 	bl	8009908 <_Bfree>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	9800      	ldr	r0, [sp, #0]
 8008bfe:	702b      	strb	r3, [r5, #0]
 8008c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c02:	3001      	adds	r0, #1
 8008c04:	6018      	str	r0, [r3, #0]
 8008c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f43f acf1 	beq.w	80085f0 <_dtoa_r+0xa0>
 8008c0e:	601d      	str	r5, [r3, #0]
 8008c10:	e4ee      	b.n	80085f0 <_dtoa_r+0xa0>
 8008c12:	9f00      	ldr	r7, [sp, #0]
 8008c14:	462b      	mov	r3, r5
 8008c16:	461d      	mov	r5, r3
 8008c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c1c:	2a39      	cmp	r2, #57	; 0x39
 8008c1e:	d106      	bne.n	8008c2e <_dtoa_r+0x6de>
 8008c20:	9a01      	ldr	r2, [sp, #4]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d1f7      	bne.n	8008c16 <_dtoa_r+0x6c6>
 8008c26:	9901      	ldr	r1, [sp, #4]
 8008c28:	2230      	movs	r2, #48	; 0x30
 8008c2a:	3701      	adds	r7, #1
 8008c2c:	700a      	strb	r2, [r1, #0]
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	3201      	adds	r2, #1
 8008c32:	701a      	strb	r2, [r3, #0]
 8008c34:	e790      	b.n	8008b58 <_dtoa_r+0x608>
 8008c36:	4ba6      	ldr	r3, [pc, #664]	; (8008ed0 <_dtoa_r+0x980>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f7f7 fcfd 	bl	8000638 <__aeabi_dmul>
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2300      	movs	r3, #0
 8008c42:	4606      	mov	r6, r0
 8008c44:	460f      	mov	r7, r1
 8008c46:	f7f7 ff5f 	bl	8000b08 <__aeabi_dcmpeq>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d09d      	beq.n	8008b8a <_dtoa_r+0x63a>
 8008c4e:	e7cf      	b.n	8008bf0 <_dtoa_r+0x6a0>
 8008c50:	9a08      	ldr	r2, [sp, #32]
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	f000 80d7 	beq.w	8008e06 <_dtoa_r+0x8b6>
 8008c58:	9a06      	ldr	r2, [sp, #24]
 8008c5a:	2a01      	cmp	r2, #1
 8008c5c:	f300 80ba 	bgt.w	8008dd4 <_dtoa_r+0x884>
 8008c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	f000 80b2 	beq.w	8008dcc <_dtoa_r+0x87c>
 8008c68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c6c:	9e07      	ldr	r6, [sp, #28]
 8008c6e:	9d04      	ldr	r5, [sp, #16]
 8008c70:	9a04      	ldr	r2, [sp, #16]
 8008c72:	441a      	add	r2, r3
 8008c74:	9204      	str	r2, [sp, #16]
 8008c76:	9a05      	ldr	r2, [sp, #20]
 8008c78:	2101      	movs	r1, #1
 8008c7a:	441a      	add	r2, r3
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	9205      	str	r2, [sp, #20]
 8008c80:	f000 ff44 	bl	8009b0c <__i2b>
 8008c84:	4607      	mov	r7, r0
 8008c86:	2d00      	cmp	r5, #0
 8008c88:	dd0c      	ble.n	8008ca4 <_dtoa_r+0x754>
 8008c8a:	9b05      	ldr	r3, [sp, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	dd09      	ble.n	8008ca4 <_dtoa_r+0x754>
 8008c90:	42ab      	cmp	r3, r5
 8008c92:	9a04      	ldr	r2, [sp, #16]
 8008c94:	bfa8      	it	ge
 8008c96:	462b      	movge	r3, r5
 8008c98:	1ad2      	subs	r2, r2, r3
 8008c9a:	9204      	str	r2, [sp, #16]
 8008c9c:	9a05      	ldr	r2, [sp, #20]
 8008c9e:	1aed      	subs	r5, r5, r3
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	9b07      	ldr	r3, [sp, #28]
 8008ca6:	b31b      	cbz	r3, 8008cf0 <_dtoa_r+0x7a0>
 8008ca8:	9b08      	ldr	r3, [sp, #32]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80af 	beq.w	8008e0e <_dtoa_r+0x8be>
 8008cb0:	2e00      	cmp	r6, #0
 8008cb2:	dd13      	ble.n	8008cdc <_dtoa_r+0x78c>
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	4632      	mov	r2, r6
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 ffe7 	bl	8009c8c <__pow5mult>
 8008cbe:	ee18 2a10 	vmov	r2, s16
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 ff36 	bl	8009b38 <__multiply>
 8008ccc:	ee18 1a10 	vmov	r1, s16
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f000 fe18 	bl	8009908 <_Bfree>
 8008cd8:	ee08 8a10 	vmov	s16, r8
 8008cdc:	9b07      	ldr	r3, [sp, #28]
 8008cde:	1b9a      	subs	r2, r3, r6
 8008ce0:	d006      	beq.n	8008cf0 <_dtoa_r+0x7a0>
 8008ce2:	ee18 1a10 	vmov	r1, s16
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 ffd0 	bl	8009c8c <__pow5mult>
 8008cec:	ee08 0a10 	vmov	s16, r0
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 ff0a 	bl	8009b0c <__i2b>
 8008cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	f340 8088 	ble.w	8008e12 <_dtoa_r+0x8c2>
 8008d02:	461a      	mov	r2, r3
 8008d04:	4601      	mov	r1, r0
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 ffc0 	bl	8009c8c <__pow5mult>
 8008d0c:	9b06      	ldr	r3, [sp, #24]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	4606      	mov	r6, r0
 8008d12:	f340 8081 	ble.w	8008e18 <_dtoa_r+0x8c8>
 8008d16:	f04f 0800 	mov.w	r8, #0
 8008d1a:	6933      	ldr	r3, [r6, #16]
 8008d1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d20:	6918      	ldr	r0, [r3, #16]
 8008d22:	f000 fea3 	bl	8009a6c <__hi0bits>
 8008d26:	f1c0 0020 	rsb	r0, r0, #32
 8008d2a:	9b05      	ldr	r3, [sp, #20]
 8008d2c:	4418      	add	r0, r3
 8008d2e:	f010 001f 	ands.w	r0, r0, #31
 8008d32:	f000 8092 	beq.w	8008e5a <_dtoa_r+0x90a>
 8008d36:	f1c0 0320 	rsb	r3, r0, #32
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	f340 808a 	ble.w	8008e54 <_dtoa_r+0x904>
 8008d40:	f1c0 001c 	rsb	r0, r0, #28
 8008d44:	9b04      	ldr	r3, [sp, #16]
 8008d46:	4403      	add	r3, r0
 8008d48:	9304      	str	r3, [sp, #16]
 8008d4a:	9b05      	ldr	r3, [sp, #20]
 8008d4c:	4403      	add	r3, r0
 8008d4e:	4405      	add	r5, r0
 8008d50:	9305      	str	r3, [sp, #20]
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dd07      	ble.n	8008d68 <_dtoa_r+0x818>
 8008d58:	ee18 1a10 	vmov	r1, s16
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 ffee 	bl	8009d40 <__lshift>
 8008d64:	ee08 0a10 	vmov	s16, r0
 8008d68:	9b05      	ldr	r3, [sp, #20]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	dd05      	ble.n	8008d7a <_dtoa_r+0x82a>
 8008d6e:	4631      	mov	r1, r6
 8008d70:	461a      	mov	r2, r3
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 ffe4 	bl	8009d40 <__lshift>
 8008d78:	4606      	mov	r6, r0
 8008d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d06e      	beq.n	8008e5e <_dtoa_r+0x90e>
 8008d80:	ee18 0a10 	vmov	r0, s16
 8008d84:	4631      	mov	r1, r6
 8008d86:	f001 f84b 	bl	8009e20 <__mcmp>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	da67      	bge.n	8008e5e <_dtoa_r+0x90e>
 8008d8e:	9b00      	ldr	r3, [sp, #0]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	ee18 1a10 	vmov	r1, s16
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	220a      	movs	r2, #10
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 fdd5 	bl	800994c <__multadd>
 8008da2:	9b08      	ldr	r3, [sp, #32]
 8008da4:	ee08 0a10 	vmov	s16, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 81b1 	beq.w	8009110 <_dtoa_r+0xbc0>
 8008dae:	2300      	movs	r3, #0
 8008db0:	4639      	mov	r1, r7
 8008db2:	220a      	movs	r2, #10
 8008db4:	4620      	mov	r0, r4
 8008db6:	f000 fdc9 	bl	800994c <__multadd>
 8008dba:	9b02      	ldr	r3, [sp, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	4607      	mov	r7, r0
 8008dc0:	f300 808e 	bgt.w	8008ee0 <_dtoa_r+0x990>
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	dc51      	bgt.n	8008e6e <_dtoa_r+0x91e>
 8008dca:	e089      	b.n	8008ee0 <_dtoa_r+0x990>
 8008dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dd2:	e74b      	b.n	8008c6c <_dtoa_r+0x71c>
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	1e5e      	subs	r6, r3, #1
 8008dd8:	9b07      	ldr	r3, [sp, #28]
 8008dda:	42b3      	cmp	r3, r6
 8008ddc:	bfbf      	itttt	lt
 8008dde:	9b07      	ldrlt	r3, [sp, #28]
 8008de0:	9607      	strlt	r6, [sp, #28]
 8008de2:	1af2      	sublt	r2, r6, r3
 8008de4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008de6:	bfb6      	itet	lt
 8008de8:	189b      	addlt	r3, r3, r2
 8008dea:	1b9e      	subge	r6, r3, r6
 8008dec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	bfb8      	it	lt
 8008df2:	2600      	movlt	r6, #0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfb7      	itett	lt
 8008df8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008dfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008e00:	1a9d      	sublt	r5, r3, r2
 8008e02:	2300      	movlt	r3, #0
 8008e04:	e734      	b.n	8008c70 <_dtoa_r+0x720>
 8008e06:	9e07      	ldr	r6, [sp, #28]
 8008e08:	9d04      	ldr	r5, [sp, #16]
 8008e0a:	9f08      	ldr	r7, [sp, #32]
 8008e0c:	e73b      	b.n	8008c86 <_dtoa_r+0x736>
 8008e0e:	9a07      	ldr	r2, [sp, #28]
 8008e10:	e767      	b.n	8008ce2 <_dtoa_r+0x792>
 8008e12:	9b06      	ldr	r3, [sp, #24]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	dc18      	bgt.n	8008e4a <_dtoa_r+0x8fa>
 8008e18:	f1ba 0f00 	cmp.w	sl, #0
 8008e1c:	d115      	bne.n	8008e4a <_dtoa_r+0x8fa>
 8008e1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e22:	b993      	cbnz	r3, 8008e4a <_dtoa_r+0x8fa>
 8008e24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e28:	0d1b      	lsrs	r3, r3, #20
 8008e2a:	051b      	lsls	r3, r3, #20
 8008e2c:	b183      	cbz	r3, 8008e50 <_dtoa_r+0x900>
 8008e2e:	9b04      	ldr	r3, [sp, #16]
 8008e30:	3301      	adds	r3, #1
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	9b05      	ldr	r3, [sp, #20]
 8008e36:	3301      	adds	r3, #1
 8008e38:	9305      	str	r3, [sp, #20]
 8008e3a:	f04f 0801 	mov.w	r8, #1
 8008e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f47f af6a 	bne.w	8008d1a <_dtoa_r+0x7ca>
 8008e46:	2001      	movs	r0, #1
 8008e48:	e76f      	b.n	8008d2a <_dtoa_r+0x7da>
 8008e4a:	f04f 0800 	mov.w	r8, #0
 8008e4e:	e7f6      	b.n	8008e3e <_dtoa_r+0x8ee>
 8008e50:	4698      	mov	r8, r3
 8008e52:	e7f4      	b.n	8008e3e <_dtoa_r+0x8ee>
 8008e54:	f43f af7d 	beq.w	8008d52 <_dtoa_r+0x802>
 8008e58:	4618      	mov	r0, r3
 8008e5a:	301c      	adds	r0, #28
 8008e5c:	e772      	b.n	8008d44 <_dtoa_r+0x7f4>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dc37      	bgt.n	8008ed4 <_dtoa_r+0x984>
 8008e64:	9b06      	ldr	r3, [sp, #24]
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	dd34      	ble.n	8008ed4 <_dtoa_r+0x984>
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	9302      	str	r3, [sp, #8]
 8008e6e:	9b02      	ldr	r3, [sp, #8]
 8008e70:	b96b      	cbnz	r3, 8008e8e <_dtoa_r+0x93e>
 8008e72:	4631      	mov	r1, r6
 8008e74:	2205      	movs	r2, #5
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 fd68 	bl	800994c <__multadd>
 8008e7c:	4601      	mov	r1, r0
 8008e7e:	4606      	mov	r6, r0
 8008e80:	ee18 0a10 	vmov	r0, s16
 8008e84:	f000 ffcc 	bl	8009e20 <__mcmp>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f73f adbb 	bgt.w	8008a04 <_dtoa_r+0x4b4>
 8008e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e90:	9d01      	ldr	r5, [sp, #4]
 8008e92:	43db      	mvns	r3, r3
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	f04f 0800 	mov.w	r8, #0
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 fd33 	bl	8009908 <_Bfree>
 8008ea2:	2f00      	cmp	r7, #0
 8008ea4:	f43f aea4 	beq.w	8008bf0 <_dtoa_r+0x6a0>
 8008ea8:	f1b8 0f00 	cmp.w	r8, #0
 8008eac:	d005      	beq.n	8008eba <_dtoa_r+0x96a>
 8008eae:	45b8      	cmp	r8, r7
 8008eb0:	d003      	beq.n	8008eba <_dtoa_r+0x96a>
 8008eb2:	4641      	mov	r1, r8
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 fd27 	bl	8009908 <_Bfree>
 8008eba:	4639      	mov	r1, r7
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f000 fd23 	bl	8009908 <_Bfree>
 8008ec2:	e695      	b.n	8008bf0 <_dtoa_r+0x6a0>
 8008ec4:	2600      	movs	r6, #0
 8008ec6:	4637      	mov	r7, r6
 8008ec8:	e7e1      	b.n	8008e8e <_dtoa_r+0x93e>
 8008eca:	9700      	str	r7, [sp, #0]
 8008ecc:	4637      	mov	r7, r6
 8008ece:	e599      	b.n	8008a04 <_dtoa_r+0x4b4>
 8008ed0:	40240000 	.word	0x40240000
 8008ed4:	9b08      	ldr	r3, [sp, #32]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 80ca 	beq.w	8009070 <_dtoa_r+0xb20>
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	9302      	str	r3, [sp, #8]
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	dd05      	ble.n	8008ef0 <_dtoa_r+0x9a0>
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f000 ff29 	bl	8009d40 <__lshift>
 8008eee:	4607      	mov	r7, r0
 8008ef0:	f1b8 0f00 	cmp.w	r8, #0
 8008ef4:	d05b      	beq.n	8008fae <_dtoa_r+0xa5e>
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f000 fcc5 	bl	8009888 <_Balloc>
 8008efe:	4605      	mov	r5, r0
 8008f00:	b928      	cbnz	r0, 8008f0e <_dtoa_r+0x9be>
 8008f02:	4b87      	ldr	r3, [pc, #540]	; (8009120 <_dtoa_r+0xbd0>)
 8008f04:	4602      	mov	r2, r0
 8008f06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f0a:	f7ff bb3b 	b.w	8008584 <_dtoa_r+0x34>
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	3202      	adds	r2, #2
 8008f12:	0092      	lsls	r2, r2, #2
 8008f14:	f107 010c 	add.w	r1, r7, #12
 8008f18:	300c      	adds	r0, #12
 8008f1a:	f000 fca7 	bl	800986c <memcpy>
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4629      	mov	r1, r5
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 ff0c 	bl	8009d40 <__lshift>
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	f103 0901 	add.w	r9, r3, #1
 8008f2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008f32:	4413      	add	r3, r2
 8008f34:	9305      	str	r3, [sp, #20]
 8008f36:	f00a 0301 	and.w	r3, sl, #1
 8008f3a:	46b8      	mov	r8, r7
 8008f3c:	9304      	str	r3, [sp, #16]
 8008f3e:	4607      	mov	r7, r0
 8008f40:	4631      	mov	r1, r6
 8008f42:	ee18 0a10 	vmov	r0, s16
 8008f46:	f7ff fa75 	bl	8008434 <quorem>
 8008f4a:	4641      	mov	r1, r8
 8008f4c:	9002      	str	r0, [sp, #8]
 8008f4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f52:	ee18 0a10 	vmov	r0, s16
 8008f56:	f000 ff63 	bl	8009e20 <__mcmp>
 8008f5a:	463a      	mov	r2, r7
 8008f5c:	9003      	str	r0, [sp, #12]
 8008f5e:	4631      	mov	r1, r6
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 ff79 	bl	8009e58 <__mdiff>
 8008f66:	68c2      	ldr	r2, [r0, #12]
 8008f68:	f109 3bff 	add.w	fp, r9, #4294967295
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	bb02      	cbnz	r2, 8008fb2 <_dtoa_r+0xa62>
 8008f70:	4601      	mov	r1, r0
 8008f72:	ee18 0a10 	vmov	r0, s16
 8008f76:	f000 ff53 	bl	8009e20 <__mcmp>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4620      	mov	r0, r4
 8008f80:	9207      	str	r2, [sp, #28]
 8008f82:	f000 fcc1 	bl	8009908 <_Bfree>
 8008f86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008f8a:	ea43 0102 	orr.w	r1, r3, r2
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	430b      	orrs	r3, r1
 8008f92:	464d      	mov	r5, r9
 8008f94:	d10f      	bne.n	8008fb6 <_dtoa_r+0xa66>
 8008f96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f9a:	d02a      	beq.n	8008ff2 <_dtoa_r+0xaa2>
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dd02      	ble.n	8008fa8 <_dtoa_r+0xa58>
 8008fa2:	9b02      	ldr	r3, [sp, #8]
 8008fa4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008fa8:	f88b a000 	strb.w	sl, [fp]
 8008fac:	e775      	b.n	8008e9a <_dtoa_r+0x94a>
 8008fae:	4638      	mov	r0, r7
 8008fb0:	e7ba      	b.n	8008f28 <_dtoa_r+0x9d8>
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	e7e2      	b.n	8008f7c <_dtoa_r+0xa2c>
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	db04      	blt.n	8008fc6 <_dtoa_r+0xa76>
 8008fbc:	9906      	ldr	r1, [sp, #24]
 8008fbe:	430b      	orrs	r3, r1
 8008fc0:	9904      	ldr	r1, [sp, #16]
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	d122      	bne.n	800900c <_dtoa_r+0xabc>
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	ddee      	ble.n	8008fa8 <_dtoa_r+0xa58>
 8008fca:	ee18 1a10 	vmov	r1, s16
 8008fce:	2201      	movs	r2, #1
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 feb5 	bl	8009d40 <__lshift>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	ee08 0a10 	vmov	s16, r0
 8008fdc:	f000 ff20 	bl	8009e20 <__mcmp>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	dc03      	bgt.n	8008fec <_dtoa_r+0xa9c>
 8008fe4:	d1e0      	bne.n	8008fa8 <_dtoa_r+0xa58>
 8008fe6:	f01a 0f01 	tst.w	sl, #1
 8008fea:	d0dd      	beq.n	8008fa8 <_dtoa_r+0xa58>
 8008fec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ff0:	d1d7      	bne.n	8008fa2 <_dtoa_r+0xa52>
 8008ff2:	2339      	movs	r3, #57	; 0x39
 8008ff4:	f88b 3000 	strb.w	r3, [fp]
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	461d      	mov	r5, r3
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009002:	2a39      	cmp	r2, #57	; 0x39
 8009004:	d071      	beq.n	80090ea <_dtoa_r+0xb9a>
 8009006:	3201      	adds	r2, #1
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	e746      	b.n	8008e9a <_dtoa_r+0x94a>
 800900c:	2a00      	cmp	r2, #0
 800900e:	dd07      	ble.n	8009020 <_dtoa_r+0xad0>
 8009010:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009014:	d0ed      	beq.n	8008ff2 <_dtoa_r+0xaa2>
 8009016:	f10a 0301 	add.w	r3, sl, #1
 800901a:	f88b 3000 	strb.w	r3, [fp]
 800901e:	e73c      	b.n	8008e9a <_dtoa_r+0x94a>
 8009020:	9b05      	ldr	r3, [sp, #20]
 8009022:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009026:	4599      	cmp	r9, r3
 8009028:	d047      	beq.n	80090ba <_dtoa_r+0xb6a>
 800902a:	ee18 1a10 	vmov	r1, s16
 800902e:	2300      	movs	r3, #0
 8009030:	220a      	movs	r2, #10
 8009032:	4620      	mov	r0, r4
 8009034:	f000 fc8a 	bl	800994c <__multadd>
 8009038:	45b8      	cmp	r8, r7
 800903a:	ee08 0a10 	vmov	s16, r0
 800903e:	f04f 0300 	mov.w	r3, #0
 8009042:	f04f 020a 	mov.w	r2, #10
 8009046:	4641      	mov	r1, r8
 8009048:	4620      	mov	r0, r4
 800904a:	d106      	bne.n	800905a <_dtoa_r+0xb0a>
 800904c:	f000 fc7e 	bl	800994c <__multadd>
 8009050:	4680      	mov	r8, r0
 8009052:	4607      	mov	r7, r0
 8009054:	f109 0901 	add.w	r9, r9, #1
 8009058:	e772      	b.n	8008f40 <_dtoa_r+0x9f0>
 800905a:	f000 fc77 	bl	800994c <__multadd>
 800905e:	4639      	mov	r1, r7
 8009060:	4680      	mov	r8, r0
 8009062:	2300      	movs	r3, #0
 8009064:	220a      	movs	r2, #10
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fc70 	bl	800994c <__multadd>
 800906c:	4607      	mov	r7, r0
 800906e:	e7f1      	b.n	8009054 <_dtoa_r+0xb04>
 8009070:	9b03      	ldr	r3, [sp, #12]
 8009072:	9302      	str	r3, [sp, #8]
 8009074:	9d01      	ldr	r5, [sp, #4]
 8009076:	ee18 0a10 	vmov	r0, s16
 800907a:	4631      	mov	r1, r6
 800907c:	f7ff f9da 	bl	8008434 <quorem>
 8009080:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009084:	9b01      	ldr	r3, [sp, #4]
 8009086:	f805 ab01 	strb.w	sl, [r5], #1
 800908a:	1aea      	subs	r2, r5, r3
 800908c:	9b02      	ldr	r3, [sp, #8]
 800908e:	4293      	cmp	r3, r2
 8009090:	dd09      	ble.n	80090a6 <_dtoa_r+0xb56>
 8009092:	ee18 1a10 	vmov	r1, s16
 8009096:	2300      	movs	r3, #0
 8009098:	220a      	movs	r2, #10
 800909a:	4620      	mov	r0, r4
 800909c:	f000 fc56 	bl	800994c <__multadd>
 80090a0:	ee08 0a10 	vmov	s16, r0
 80090a4:	e7e7      	b.n	8009076 <_dtoa_r+0xb26>
 80090a6:	9b02      	ldr	r3, [sp, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bfc8      	it	gt
 80090ac:	461d      	movgt	r5, r3
 80090ae:	9b01      	ldr	r3, [sp, #4]
 80090b0:	bfd8      	it	le
 80090b2:	2501      	movle	r5, #1
 80090b4:	441d      	add	r5, r3
 80090b6:	f04f 0800 	mov.w	r8, #0
 80090ba:	ee18 1a10 	vmov	r1, s16
 80090be:	2201      	movs	r2, #1
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fe3d 	bl	8009d40 <__lshift>
 80090c6:	4631      	mov	r1, r6
 80090c8:	ee08 0a10 	vmov	s16, r0
 80090cc:	f000 fea8 	bl	8009e20 <__mcmp>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	dc91      	bgt.n	8008ff8 <_dtoa_r+0xaa8>
 80090d4:	d102      	bne.n	80090dc <_dtoa_r+0xb8c>
 80090d6:	f01a 0f01 	tst.w	sl, #1
 80090da:	d18d      	bne.n	8008ff8 <_dtoa_r+0xaa8>
 80090dc:	462b      	mov	r3, r5
 80090de:	461d      	mov	r5, r3
 80090e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090e4:	2a30      	cmp	r2, #48	; 0x30
 80090e6:	d0fa      	beq.n	80090de <_dtoa_r+0xb8e>
 80090e8:	e6d7      	b.n	8008e9a <_dtoa_r+0x94a>
 80090ea:	9a01      	ldr	r2, [sp, #4]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d184      	bne.n	8008ffa <_dtoa_r+0xaaa>
 80090f0:	9b00      	ldr	r3, [sp, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	2331      	movs	r3, #49	; 0x31
 80090f8:	7013      	strb	r3, [r2, #0]
 80090fa:	e6ce      	b.n	8008e9a <_dtoa_r+0x94a>
 80090fc:	4b09      	ldr	r3, [pc, #36]	; (8009124 <_dtoa_r+0xbd4>)
 80090fe:	f7ff ba95 	b.w	800862c <_dtoa_r+0xdc>
 8009102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009104:	2b00      	cmp	r3, #0
 8009106:	f47f aa6e 	bne.w	80085e6 <_dtoa_r+0x96>
 800910a:	4b07      	ldr	r3, [pc, #28]	; (8009128 <_dtoa_r+0xbd8>)
 800910c:	f7ff ba8e 	b.w	800862c <_dtoa_r+0xdc>
 8009110:	9b02      	ldr	r3, [sp, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	dcae      	bgt.n	8009074 <_dtoa_r+0xb24>
 8009116:	9b06      	ldr	r3, [sp, #24]
 8009118:	2b02      	cmp	r3, #2
 800911a:	f73f aea8 	bgt.w	8008e6e <_dtoa_r+0x91e>
 800911e:	e7a9      	b.n	8009074 <_dtoa_r+0xb24>
 8009120:	0800bc28 	.word	0x0800bc28
 8009124:	0800be21 	.word	0x0800be21
 8009128:	0800bba9 	.word	0x0800bba9

0800912c <rshift>:
 800912c:	6903      	ldr	r3, [r0, #16]
 800912e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009132:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009136:	ea4f 1261 	mov.w	r2, r1, asr #5
 800913a:	f100 0414 	add.w	r4, r0, #20
 800913e:	dd45      	ble.n	80091cc <rshift+0xa0>
 8009140:	f011 011f 	ands.w	r1, r1, #31
 8009144:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009148:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800914c:	d10c      	bne.n	8009168 <rshift+0x3c>
 800914e:	f100 0710 	add.w	r7, r0, #16
 8009152:	4629      	mov	r1, r5
 8009154:	42b1      	cmp	r1, r6
 8009156:	d334      	bcc.n	80091c2 <rshift+0x96>
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	1eea      	subs	r2, r5, #3
 800915e:	4296      	cmp	r6, r2
 8009160:	bf38      	it	cc
 8009162:	2300      	movcc	r3, #0
 8009164:	4423      	add	r3, r4
 8009166:	e015      	b.n	8009194 <rshift+0x68>
 8009168:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800916c:	f1c1 0820 	rsb	r8, r1, #32
 8009170:	40cf      	lsrs	r7, r1
 8009172:	f105 0e04 	add.w	lr, r5, #4
 8009176:	46a1      	mov	r9, r4
 8009178:	4576      	cmp	r6, lr
 800917a:	46f4      	mov	ip, lr
 800917c:	d815      	bhi.n	80091aa <rshift+0x7e>
 800917e:	1a9a      	subs	r2, r3, r2
 8009180:	0092      	lsls	r2, r2, #2
 8009182:	3a04      	subs	r2, #4
 8009184:	3501      	adds	r5, #1
 8009186:	42ae      	cmp	r6, r5
 8009188:	bf38      	it	cc
 800918a:	2200      	movcc	r2, #0
 800918c:	18a3      	adds	r3, r4, r2
 800918e:	50a7      	str	r7, [r4, r2]
 8009190:	b107      	cbz	r7, 8009194 <rshift+0x68>
 8009192:	3304      	adds	r3, #4
 8009194:	1b1a      	subs	r2, r3, r4
 8009196:	42a3      	cmp	r3, r4
 8009198:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800919c:	bf08      	it	eq
 800919e:	2300      	moveq	r3, #0
 80091a0:	6102      	str	r2, [r0, #16]
 80091a2:	bf08      	it	eq
 80091a4:	6143      	streq	r3, [r0, #20]
 80091a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091aa:	f8dc c000 	ldr.w	ip, [ip]
 80091ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80091b2:	ea4c 0707 	orr.w	r7, ip, r7
 80091b6:	f849 7b04 	str.w	r7, [r9], #4
 80091ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091be:	40cf      	lsrs	r7, r1
 80091c0:	e7da      	b.n	8009178 <rshift+0x4c>
 80091c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80091c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80091ca:	e7c3      	b.n	8009154 <rshift+0x28>
 80091cc:	4623      	mov	r3, r4
 80091ce:	e7e1      	b.n	8009194 <rshift+0x68>

080091d0 <__hexdig_fun>:
 80091d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80091d4:	2b09      	cmp	r3, #9
 80091d6:	d802      	bhi.n	80091de <__hexdig_fun+0xe>
 80091d8:	3820      	subs	r0, #32
 80091da:	b2c0      	uxtb	r0, r0
 80091dc:	4770      	bx	lr
 80091de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80091e2:	2b05      	cmp	r3, #5
 80091e4:	d801      	bhi.n	80091ea <__hexdig_fun+0x1a>
 80091e6:	3847      	subs	r0, #71	; 0x47
 80091e8:	e7f7      	b.n	80091da <__hexdig_fun+0xa>
 80091ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80091ee:	2b05      	cmp	r3, #5
 80091f0:	d801      	bhi.n	80091f6 <__hexdig_fun+0x26>
 80091f2:	3827      	subs	r0, #39	; 0x27
 80091f4:	e7f1      	b.n	80091da <__hexdig_fun+0xa>
 80091f6:	2000      	movs	r0, #0
 80091f8:	4770      	bx	lr
	...

080091fc <__gethex>:
 80091fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	ed2d 8b02 	vpush	{d8}
 8009204:	b089      	sub	sp, #36	; 0x24
 8009206:	ee08 0a10 	vmov	s16, r0
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	4bb4      	ldr	r3, [pc, #720]	; (80094e0 <__gethex+0x2e4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	4618      	mov	r0, r3
 8009214:	468b      	mov	fp, r1
 8009216:	4690      	mov	r8, r2
 8009218:	f7f6 fffa 	bl	8000210 <strlen>
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	f8db 2000 	ldr.w	r2, [fp]
 8009222:	4403      	add	r3, r0
 8009224:	4682      	mov	sl, r0
 8009226:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800922a:	9305      	str	r3, [sp, #20]
 800922c:	1c93      	adds	r3, r2, #2
 800922e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009232:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009236:	32fe      	adds	r2, #254	; 0xfe
 8009238:	18d1      	adds	r1, r2, r3
 800923a:	461f      	mov	r7, r3
 800923c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009240:	9100      	str	r1, [sp, #0]
 8009242:	2830      	cmp	r0, #48	; 0x30
 8009244:	d0f8      	beq.n	8009238 <__gethex+0x3c>
 8009246:	f7ff ffc3 	bl	80091d0 <__hexdig_fun>
 800924a:	4604      	mov	r4, r0
 800924c:	2800      	cmp	r0, #0
 800924e:	d13a      	bne.n	80092c6 <__gethex+0xca>
 8009250:	9901      	ldr	r1, [sp, #4]
 8009252:	4652      	mov	r2, sl
 8009254:	4638      	mov	r0, r7
 8009256:	f001 fdb3 	bl	800adc0 <strncmp>
 800925a:	4605      	mov	r5, r0
 800925c:	2800      	cmp	r0, #0
 800925e:	d168      	bne.n	8009332 <__gethex+0x136>
 8009260:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009264:	eb07 060a 	add.w	r6, r7, sl
 8009268:	f7ff ffb2 	bl	80091d0 <__hexdig_fun>
 800926c:	2800      	cmp	r0, #0
 800926e:	d062      	beq.n	8009336 <__gethex+0x13a>
 8009270:	4633      	mov	r3, r6
 8009272:	7818      	ldrb	r0, [r3, #0]
 8009274:	2830      	cmp	r0, #48	; 0x30
 8009276:	461f      	mov	r7, r3
 8009278:	f103 0301 	add.w	r3, r3, #1
 800927c:	d0f9      	beq.n	8009272 <__gethex+0x76>
 800927e:	f7ff ffa7 	bl	80091d0 <__hexdig_fun>
 8009282:	2301      	movs	r3, #1
 8009284:	fab0 f480 	clz	r4, r0
 8009288:	0964      	lsrs	r4, r4, #5
 800928a:	4635      	mov	r5, r6
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	463a      	mov	r2, r7
 8009290:	4616      	mov	r6, r2
 8009292:	3201      	adds	r2, #1
 8009294:	7830      	ldrb	r0, [r6, #0]
 8009296:	f7ff ff9b 	bl	80091d0 <__hexdig_fun>
 800929a:	2800      	cmp	r0, #0
 800929c:	d1f8      	bne.n	8009290 <__gethex+0x94>
 800929e:	9901      	ldr	r1, [sp, #4]
 80092a0:	4652      	mov	r2, sl
 80092a2:	4630      	mov	r0, r6
 80092a4:	f001 fd8c 	bl	800adc0 <strncmp>
 80092a8:	b980      	cbnz	r0, 80092cc <__gethex+0xd0>
 80092aa:	b94d      	cbnz	r5, 80092c0 <__gethex+0xc4>
 80092ac:	eb06 050a 	add.w	r5, r6, sl
 80092b0:	462a      	mov	r2, r5
 80092b2:	4616      	mov	r6, r2
 80092b4:	3201      	adds	r2, #1
 80092b6:	7830      	ldrb	r0, [r6, #0]
 80092b8:	f7ff ff8a 	bl	80091d0 <__hexdig_fun>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d1f8      	bne.n	80092b2 <__gethex+0xb6>
 80092c0:	1bad      	subs	r5, r5, r6
 80092c2:	00ad      	lsls	r5, r5, #2
 80092c4:	e004      	b.n	80092d0 <__gethex+0xd4>
 80092c6:	2400      	movs	r4, #0
 80092c8:	4625      	mov	r5, r4
 80092ca:	e7e0      	b.n	800928e <__gethex+0x92>
 80092cc:	2d00      	cmp	r5, #0
 80092ce:	d1f7      	bne.n	80092c0 <__gethex+0xc4>
 80092d0:	7833      	ldrb	r3, [r6, #0]
 80092d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092d6:	2b50      	cmp	r3, #80	; 0x50
 80092d8:	d13b      	bne.n	8009352 <__gethex+0x156>
 80092da:	7873      	ldrb	r3, [r6, #1]
 80092dc:	2b2b      	cmp	r3, #43	; 0x2b
 80092de:	d02c      	beq.n	800933a <__gethex+0x13e>
 80092e0:	2b2d      	cmp	r3, #45	; 0x2d
 80092e2:	d02e      	beq.n	8009342 <__gethex+0x146>
 80092e4:	1c71      	adds	r1, r6, #1
 80092e6:	f04f 0900 	mov.w	r9, #0
 80092ea:	7808      	ldrb	r0, [r1, #0]
 80092ec:	f7ff ff70 	bl	80091d0 <__hexdig_fun>
 80092f0:	1e43      	subs	r3, r0, #1
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b18      	cmp	r3, #24
 80092f6:	d82c      	bhi.n	8009352 <__gethex+0x156>
 80092f8:	f1a0 0210 	sub.w	r2, r0, #16
 80092fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009300:	f7ff ff66 	bl	80091d0 <__hexdig_fun>
 8009304:	1e43      	subs	r3, r0, #1
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b18      	cmp	r3, #24
 800930a:	d91d      	bls.n	8009348 <__gethex+0x14c>
 800930c:	f1b9 0f00 	cmp.w	r9, #0
 8009310:	d000      	beq.n	8009314 <__gethex+0x118>
 8009312:	4252      	negs	r2, r2
 8009314:	4415      	add	r5, r2
 8009316:	f8cb 1000 	str.w	r1, [fp]
 800931a:	b1e4      	cbz	r4, 8009356 <__gethex+0x15a>
 800931c:	9b00      	ldr	r3, [sp, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	bf14      	ite	ne
 8009322:	2700      	movne	r7, #0
 8009324:	2706      	moveq	r7, #6
 8009326:	4638      	mov	r0, r7
 8009328:	b009      	add	sp, #36	; 0x24
 800932a:	ecbd 8b02 	vpop	{d8}
 800932e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009332:	463e      	mov	r6, r7
 8009334:	4625      	mov	r5, r4
 8009336:	2401      	movs	r4, #1
 8009338:	e7ca      	b.n	80092d0 <__gethex+0xd4>
 800933a:	f04f 0900 	mov.w	r9, #0
 800933e:	1cb1      	adds	r1, r6, #2
 8009340:	e7d3      	b.n	80092ea <__gethex+0xee>
 8009342:	f04f 0901 	mov.w	r9, #1
 8009346:	e7fa      	b.n	800933e <__gethex+0x142>
 8009348:	230a      	movs	r3, #10
 800934a:	fb03 0202 	mla	r2, r3, r2, r0
 800934e:	3a10      	subs	r2, #16
 8009350:	e7d4      	b.n	80092fc <__gethex+0x100>
 8009352:	4631      	mov	r1, r6
 8009354:	e7df      	b.n	8009316 <__gethex+0x11a>
 8009356:	1bf3      	subs	r3, r6, r7
 8009358:	3b01      	subs	r3, #1
 800935a:	4621      	mov	r1, r4
 800935c:	2b07      	cmp	r3, #7
 800935e:	dc0b      	bgt.n	8009378 <__gethex+0x17c>
 8009360:	ee18 0a10 	vmov	r0, s16
 8009364:	f000 fa90 	bl	8009888 <_Balloc>
 8009368:	4604      	mov	r4, r0
 800936a:	b940      	cbnz	r0, 800937e <__gethex+0x182>
 800936c:	4b5d      	ldr	r3, [pc, #372]	; (80094e4 <__gethex+0x2e8>)
 800936e:	4602      	mov	r2, r0
 8009370:	21de      	movs	r1, #222	; 0xde
 8009372:	485d      	ldr	r0, [pc, #372]	; (80094e8 <__gethex+0x2ec>)
 8009374:	f001 fdf4 	bl	800af60 <__assert_func>
 8009378:	3101      	adds	r1, #1
 800937a:	105b      	asrs	r3, r3, #1
 800937c:	e7ee      	b.n	800935c <__gethex+0x160>
 800937e:	f100 0914 	add.w	r9, r0, #20
 8009382:	f04f 0b00 	mov.w	fp, #0
 8009386:	f1ca 0301 	rsb	r3, sl, #1
 800938a:	f8cd 9008 	str.w	r9, [sp, #8]
 800938e:	f8cd b000 	str.w	fp, [sp]
 8009392:	9306      	str	r3, [sp, #24]
 8009394:	42b7      	cmp	r7, r6
 8009396:	d340      	bcc.n	800941a <__gethex+0x21e>
 8009398:	9802      	ldr	r0, [sp, #8]
 800939a:	9b00      	ldr	r3, [sp, #0]
 800939c:	f840 3b04 	str.w	r3, [r0], #4
 80093a0:	eba0 0009 	sub.w	r0, r0, r9
 80093a4:	1080      	asrs	r0, r0, #2
 80093a6:	0146      	lsls	r6, r0, #5
 80093a8:	6120      	str	r0, [r4, #16]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fb5e 	bl	8009a6c <__hi0bits>
 80093b0:	1a30      	subs	r0, r6, r0
 80093b2:	f8d8 6000 	ldr.w	r6, [r8]
 80093b6:	42b0      	cmp	r0, r6
 80093b8:	dd63      	ble.n	8009482 <__gethex+0x286>
 80093ba:	1b87      	subs	r7, r0, r6
 80093bc:	4639      	mov	r1, r7
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 ff02 	bl	800a1c8 <__any_on>
 80093c4:	4682      	mov	sl, r0
 80093c6:	b1a8      	cbz	r0, 80093f4 <__gethex+0x1f8>
 80093c8:	1e7b      	subs	r3, r7, #1
 80093ca:	1159      	asrs	r1, r3, #5
 80093cc:	f003 021f 	and.w	r2, r3, #31
 80093d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80093d4:	f04f 0a01 	mov.w	sl, #1
 80093d8:	fa0a f202 	lsl.w	r2, sl, r2
 80093dc:	420a      	tst	r2, r1
 80093de:	d009      	beq.n	80093f4 <__gethex+0x1f8>
 80093e0:	4553      	cmp	r3, sl
 80093e2:	dd05      	ble.n	80093f0 <__gethex+0x1f4>
 80093e4:	1eb9      	subs	r1, r7, #2
 80093e6:	4620      	mov	r0, r4
 80093e8:	f000 feee 	bl	800a1c8 <__any_on>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d145      	bne.n	800947c <__gethex+0x280>
 80093f0:	f04f 0a02 	mov.w	sl, #2
 80093f4:	4639      	mov	r1, r7
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7ff fe98 	bl	800912c <rshift>
 80093fc:	443d      	add	r5, r7
 80093fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009402:	42ab      	cmp	r3, r5
 8009404:	da4c      	bge.n	80094a0 <__gethex+0x2a4>
 8009406:	ee18 0a10 	vmov	r0, s16
 800940a:	4621      	mov	r1, r4
 800940c:	f000 fa7c 	bl	8009908 <_Bfree>
 8009410:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009412:	2300      	movs	r3, #0
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	27a3      	movs	r7, #163	; 0xa3
 8009418:	e785      	b.n	8009326 <__gethex+0x12a>
 800941a:	1e73      	subs	r3, r6, #1
 800941c:	9a05      	ldr	r2, [sp, #20]
 800941e:	9303      	str	r3, [sp, #12]
 8009420:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009424:	4293      	cmp	r3, r2
 8009426:	d019      	beq.n	800945c <__gethex+0x260>
 8009428:	f1bb 0f20 	cmp.w	fp, #32
 800942c:	d107      	bne.n	800943e <__gethex+0x242>
 800942e:	9b02      	ldr	r3, [sp, #8]
 8009430:	9a00      	ldr	r2, [sp, #0]
 8009432:	f843 2b04 	str.w	r2, [r3], #4
 8009436:	9302      	str	r3, [sp, #8]
 8009438:	2300      	movs	r3, #0
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	469b      	mov	fp, r3
 800943e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009442:	f7ff fec5 	bl	80091d0 <__hexdig_fun>
 8009446:	9b00      	ldr	r3, [sp, #0]
 8009448:	f000 000f 	and.w	r0, r0, #15
 800944c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009450:	4303      	orrs	r3, r0
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	f10b 0b04 	add.w	fp, fp, #4
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	e00d      	b.n	8009478 <__gethex+0x27c>
 800945c:	9b03      	ldr	r3, [sp, #12]
 800945e:	9a06      	ldr	r2, [sp, #24]
 8009460:	4413      	add	r3, r2
 8009462:	42bb      	cmp	r3, r7
 8009464:	d3e0      	bcc.n	8009428 <__gethex+0x22c>
 8009466:	4618      	mov	r0, r3
 8009468:	9901      	ldr	r1, [sp, #4]
 800946a:	9307      	str	r3, [sp, #28]
 800946c:	4652      	mov	r2, sl
 800946e:	f001 fca7 	bl	800adc0 <strncmp>
 8009472:	9b07      	ldr	r3, [sp, #28]
 8009474:	2800      	cmp	r0, #0
 8009476:	d1d7      	bne.n	8009428 <__gethex+0x22c>
 8009478:	461e      	mov	r6, r3
 800947a:	e78b      	b.n	8009394 <__gethex+0x198>
 800947c:	f04f 0a03 	mov.w	sl, #3
 8009480:	e7b8      	b.n	80093f4 <__gethex+0x1f8>
 8009482:	da0a      	bge.n	800949a <__gethex+0x29e>
 8009484:	1a37      	subs	r7, r6, r0
 8009486:	4621      	mov	r1, r4
 8009488:	ee18 0a10 	vmov	r0, s16
 800948c:	463a      	mov	r2, r7
 800948e:	f000 fc57 	bl	8009d40 <__lshift>
 8009492:	1bed      	subs	r5, r5, r7
 8009494:	4604      	mov	r4, r0
 8009496:	f100 0914 	add.w	r9, r0, #20
 800949a:	f04f 0a00 	mov.w	sl, #0
 800949e:	e7ae      	b.n	80093fe <__gethex+0x202>
 80094a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80094a4:	42a8      	cmp	r0, r5
 80094a6:	dd72      	ble.n	800958e <__gethex+0x392>
 80094a8:	1b45      	subs	r5, r0, r5
 80094aa:	42ae      	cmp	r6, r5
 80094ac:	dc36      	bgt.n	800951c <__gethex+0x320>
 80094ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d02a      	beq.n	800950c <__gethex+0x310>
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d02c      	beq.n	8009514 <__gethex+0x318>
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d11c      	bne.n	80094f8 <__gethex+0x2fc>
 80094be:	42ae      	cmp	r6, r5
 80094c0:	d11a      	bne.n	80094f8 <__gethex+0x2fc>
 80094c2:	2e01      	cmp	r6, #1
 80094c4:	d112      	bne.n	80094ec <__gethex+0x2f0>
 80094c6:	9a04      	ldr	r2, [sp, #16]
 80094c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	2301      	movs	r3, #1
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	f8c9 3000 	str.w	r3, [r9]
 80094d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094d8:	2762      	movs	r7, #98	; 0x62
 80094da:	601c      	str	r4, [r3, #0]
 80094dc:	e723      	b.n	8009326 <__gethex+0x12a>
 80094de:	bf00      	nop
 80094e0:	0800bca0 	.word	0x0800bca0
 80094e4:	0800bc28 	.word	0x0800bc28
 80094e8:	0800bc39 	.word	0x0800bc39
 80094ec:	1e71      	subs	r1, r6, #1
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 fe6a 	bl	800a1c8 <__any_on>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d1e6      	bne.n	80094c6 <__gethex+0x2ca>
 80094f8:	ee18 0a10 	vmov	r0, s16
 80094fc:	4621      	mov	r1, r4
 80094fe:	f000 fa03 	bl	8009908 <_Bfree>
 8009502:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009504:	2300      	movs	r3, #0
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	2750      	movs	r7, #80	; 0x50
 800950a:	e70c      	b.n	8009326 <__gethex+0x12a>
 800950c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1f2      	bne.n	80094f8 <__gethex+0x2fc>
 8009512:	e7d8      	b.n	80094c6 <__gethex+0x2ca>
 8009514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1d5      	bne.n	80094c6 <__gethex+0x2ca>
 800951a:	e7ed      	b.n	80094f8 <__gethex+0x2fc>
 800951c:	1e6f      	subs	r7, r5, #1
 800951e:	f1ba 0f00 	cmp.w	sl, #0
 8009522:	d131      	bne.n	8009588 <__gethex+0x38c>
 8009524:	b127      	cbz	r7, 8009530 <__gethex+0x334>
 8009526:	4639      	mov	r1, r7
 8009528:	4620      	mov	r0, r4
 800952a:	f000 fe4d 	bl	800a1c8 <__any_on>
 800952e:	4682      	mov	sl, r0
 8009530:	117b      	asrs	r3, r7, #5
 8009532:	2101      	movs	r1, #1
 8009534:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009538:	f007 071f 	and.w	r7, r7, #31
 800953c:	fa01 f707 	lsl.w	r7, r1, r7
 8009540:	421f      	tst	r7, r3
 8009542:	4629      	mov	r1, r5
 8009544:	4620      	mov	r0, r4
 8009546:	bf18      	it	ne
 8009548:	f04a 0a02 	orrne.w	sl, sl, #2
 800954c:	1b76      	subs	r6, r6, r5
 800954e:	f7ff fded 	bl	800912c <rshift>
 8009552:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009556:	2702      	movs	r7, #2
 8009558:	f1ba 0f00 	cmp.w	sl, #0
 800955c:	d048      	beq.n	80095f0 <__gethex+0x3f4>
 800955e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d015      	beq.n	8009592 <__gethex+0x396>
 8009566:	2b03      	cmp	r3, #3
 8009568:	d017      	beq.n	800959a <__gethex+0x39e>
 800956a:	2b01      	cmp	r3, #1
 800956c:	d109      	bne.n	8009582 <__gethex+0x386>
 800956e:	f01a 0f02 	tst.w	sl, #2
 8009572:	d006      	beq.n	8009582 <__gethex+0x386>
 8009574:	f8d9 0000 	ldr.w	r0, [r9]
 8009578:	ea4a 0a00 	orr.w	sl, sl, r0
 800957c:	f01a 0f01 	tst.w	sl, #1
 8009580:	d10e      	bne.n	80095a0 <__gethex+0x3a4>
 8009582:	f047 0710 	orr.w	r7, r7, #16
 8009586:	e033      	b.n	80095f0 <__gethex+0x3f4>
 8009588:	f04f 0a01 	mov.w	sl, #1
 800958c:	e7d0      	b.n	8009530 <__gethex+0x334>
 800958e:	2701      	movs	r7, #1
 8009590:	e7e2      	b.n	8009558 <__gethex+0x35c>
 8009592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009594:	f1c3 0301 	rsb	r3, r3, #1
 8009598:	9315      	str	r3, [sp, #84]	; 0x54
 800959a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0f0      	beq.n	8009582 <__gethex+0x386>
 80095a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095a4:	f104 0314 	add.w	r3, r4, #20
 80095a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095b0:	f04f 0c00 	mov.w	ip, #0
 80095b4:	4618      	mov	r0, r3
 80095b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 80095be:	d01c      	beq.n	80095fa <__gethex+0x3fe>
 80095c0:	3201      	adds	r2, #1
 80095c2:	6002      	str	r2, [r0, #0]
 80095c4:	2f02      	cmp	r7, #2
 80095c6:	f104 0314 	add.w	r3, r4, #20
 80095ca:	d13f      	bne.n	800964c <__gethex+0x450>
 80095cc:	f8d8 2000 	ldr.w	r2, [r8]
 80095d0:	3a01      	subs	r2, #1
 80095d2:	42b2      	cmp	r2, r6
 80095d4:	d10a      	bne.n	80095ec <__gethex+0x3f0>
 80095d6:	1171      	asrs	r1, r6, #5
 80095d8:	2201      	movs	r2, #1
 80095da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095de:	f006 061f 	and.w	r6, r6, #31
 80095e2:	fa02 f606 	lsl.w	r6, r2, r6
 80095e6:	421e      	tst	r6, r3
 80095e8:	bf18      	it	ne
 80095ea:	4617      	movne	r7, r2
 80095ec:	f047 0720 	orr.w	r7, r7, #32
 80095f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095f2:	601c      	str	r4, [r3, #0]
 80095f4:	9b04      	ldr	r3, [sp, #16]
 80095f6:	601d      	str	r5, [r3, #0]
 80095f8:	e695      	b.n	8009326 <__gethex+0x12a>
 80095fa:	4299      	cmp	r1, r3
 80095fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009600:	d8d8      	bhi.n	80095b4 <__gethex+0x3b8>
 8009602:	68a3      	ldr	r3, [r4, #8]
 8009604:	459b      	cmp	fp, r3
 8009606:	db19      	blt.n	800963c <__gethex+0x440>
 8009608:	6861      	ldr	r1, [r4, #4]
 800960a:	ee18 0a10 	vmov	r0, s16
 800960e:	3101      	adds	r1, #1
 8009610:	f000 f93a 	bl	8009888 <_Balloc>
 8009614:	4681      	mov	r9, r0
 8009616:	b918      	cbnz	r0, 8009620 <__gethex+0x424>
 8009618:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <__gethex+0x488>)
 800961a:	4602      	mov	r2, r0
 800961c:	2184      	movs	r1, #132	; 0x84
 800961e:	e6a8      	b.n	8009372 <__gethex+0x176>
 8009620:	6922      	ldr	r2, [r4, #16]
 8009622:	3202      	adds	r2, #2
 8009624:	f104 010c 	add.w	r1, r4, #12
 8009628:	0092      	lsls	r2, r2, #2
 800962a:	300c      	adds	r0, #12
 800962c:	f000 f91e 	bl	800986c <memcpy>
 8009630:	4621      	mov	r1, r4
 8009632:	ee18 0a10 	vmov	r0, s16
 8009636:	f000 f967 	bl	8009908 <_Bfree>
 800963a:	464c      	mov	r4, r9
 800963c:	6923      	ldr	r3, [r4, #16]
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009644:	6122      	str	r2, [r4, #16]
 8009646:	2201      	movs	r2, #1
 8009648:	615a      	str	r2, [r3, #20]
 800964a:	e7bb      	b.n	80095c4 <__gethex+0x3c8>
 800964c:	6922      	ldr	r2, [r4, #16]
 800964e:	455a      	cmp	r2, fp
 8009650:	dd0b      	ble.n	800966a <__gethex+0x46e>
 8009652:	2101      	movs	r1, #1
 8009654:	4620      	mov	r0, r4
 8009656:	f7ff fd69 	bl	800912c <rshift>
 800965a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800965e:	3501      	adds	r5, #1
 8009660:	42ab      	cmp	r3, r5
 8009662:	f6ff aed0 	blt.w	8009406 <__gethex+0x20a>
 8009666:	2701      	movs	r7, #1
 8009668:	e7c0      	b.n	80095ec <__gethex+0x3f0>
 800966a:	f016 061f 	ands.w	r6, r6, #31
 800966e:	d0fa      	beq.n	8009666 <__gethex+0x46a>
 8009670:	4453      	add	r3, sl
 8009672:	f1c6 0620 	rsb	r6, r6, #32
 8009676:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800967a:	f000 f9f7 	bl	8009a6c <__hi0bits>
 800967e:	42b0      	cmp	r0, r6
 8009680:	dbe7      	blt.n	8009652 <__gethex+0x456>
 8009682:	e7f0      	b.n	8009666 <__gethex+0x46a>
 8009684:	0800bc28 	.word	0x0800bc28

08009688 <L_shift>:
 8009688:	f1c2 0208 	rsb	r2, r2, #8
 800968c:	0092      	lsls	r2, r2, #2
 800968e:	b570      	push	{r4, r5, r6, lr}
 8009690:	f1c2 0620 	rsb	r6, r2, #32
 8009694:	6843      	ldr	r3, [r0, #4]
 8009696:	6804      	ldr	r4, [r0, #0]
 8009698:	fa03 f506 	lsl.w	r5, r3, r6
 800969c:	432c      	orrs	r4, r5
 800969e:	40d3      	lsrs	r3, r2
 80096a0:	6004      	str	r4, [r0, #0]
 80096a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80096a6:	4288      	cmp	r0, r1
 80096a8:	d3f4      	bcc.n	8009694 <L_shift+0xc>
 80096aa:	bd70      	pop	{r4, r5, r6, pc}

080096ac <__match>:
 80096ac:	b530      	push	{r4, r5, lr}
 80096ae:	6803      	ldr	r3, [r0, #0]
 80096b0:	3301      	adds	r3, #1
 80096b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096b6:	b914      	cbnz	r4, 80096be <__match+0x12>
 80096b8:	6003      	str	r3, [r0, #0]
 80096ba:	2001      	movs	r0, #1
 80096bc:	bd30      	pop	{r4, r5, pc}
 80096be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80096c6:	2d19      	cmp	r5, #25
 80096c8:	bf98      	it	ls
 80096ca:	3220      	addls	r2, #32
 80096cc:	42a2      	cmp	r2, r4
 80096ce:	d0f0      	beq.n	80096b2 <__match+0x6>
 80096d0:	2000      	movs	r0, #0
 80096d2:	e7f3      	b.n	80096bc <__match+0x10>

080096d4 <__hexnan>:
 80096d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	680b      	ldr	r3, [r1, #0]
 80096da:	115e      	asrs	r6, r3, #5
 80096dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096e0:	f013 031f 	ands.w	r3, r3, #31
 80096e4:	b087      	sub	sp, #28
 80096e6:	bf18      	it	ne
 80096e8:	3604      	addne	r6, #4
 80096ea:	2500      	movs	r5, #0
 80096ec:	1f37      	subs	r7, r6, #4
 80096ee:	4690      	mov	r8, r2
 80096f0:	6802      	ldr	r2, [r0, #0]
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	4682      	mov	sl, r0
 80096f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80096fa:	46b9      	mov	r9, r7
 80096fc:	463c      	mov	r4, r7
 80096fe:	9502      	str	r5, [sp, #8]
 8009700:	46ab      	mov	fp, r5
 8009702:	7851      	ldrb	r1, [r2, #1]
 8009704:	1c53      	adds	r3, r2, #1
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	b341      	cbz	r1, 800975c <__hexnan+0x88>
 800970a:	4608      	mov	r0, r1
 800970c:	9205      	str	r2, [sp, #20]
 800970e:	9104      	str	r1, [sp, #16]
 8009710:	f7ff fd5e 	bl	80091d0 <__hexdig_fun>
 8009714:	2800      	cmp	r0, #0
 8009716:	d14f      	bne.n	80097b8 <__hexnan+0xe4>
 8009718:	9904      	ldr	r1, [sp, #16]
 800971a:	9a05      	ldr	r2, [sp, #20]
 800971c:	2920      	cmp	r1, #32
 800971e:	d818      	bhi.n	8009752 <__hexnan+0x7e>
 8009720:	9b02      	ldr	r3, [sp, #8]
 8009722:	459b      	cmp	fp, r3
 8009724:	dd13      	ble.n	800974e <__hexnan+0x7a>
 8009726:	454c      	cmp	r4, r9
 8009728:	d206      	bcs.n	8009738 <__hexnan+0x64>
 800972a:	2d07      	cmp	r5, #7
 800972c:	dc04      	bgt.n	8009738 <__hexnan+0x64>
 800972e:	462a      	mov	r2, r5
 8009730:	4649      	mov	r1, r9
 8009732:	4620      	mov	r0, r4
 8009734:	f7ff ffa8 	bl	8009688 <L_shift>
 8009738:	4544      	cmp	r4, r8
 800973a:	d950      	bls.n	80097de <__hexnan+0x10a>
 800973c:	2300      	movs	r3, #0
 800973e:	f1a4 0904 	sub.w	r9, r4, #4
 8009742:	f844 3c04 	str.w	r3, [r4, #-4]
 8009746:	f8cd b008 	str.w	fp, [sp, #8]
 800974a:	464c      	mov	r4, r9
 800974c:	461d      	mov	r5, r3
 800974e:	9a03      	ldr	r2, [sp, #12]
 8009750:	e7d7      	b.n	8009702 <__hexnan+0x2e>
 8009752:	2929      	cmp	r1, #41	; 0x29
 8009754:	d156      	bne.n	8009804 <__hexnan+0x130>
 8009756:	3202      	adds	r2, #2
 8009758:	f8ca 2000 	str.w	r2, [sl]
 800975c:	f1bb 0f00 	cmp.w	fp, #0
 8009760:	d050      	beq.n	8009804 <__hexnan+0x130>
 8009762:	454c      	cmp	r4, r9
 8009764:	d206      	bcs.n	8009774 <__hexnan+0xa0>
 8009766:	2d07      	cmp	r5, #7
 8009768:	dc04      	bgt.n	8009774 <__hexnan+0xa0>
 800976a:	462a      	mov	r2, r5
 800976c:	4649      	mov	r1, r9
 800976e:	4620      	mov	r0, r4
 8009770:	f7ff ff8a 	bl	8009688 <L_shift>
 8009774:	4544      	cmp	r4, r8
 8009776:	d934      	bls.n	80097e2 <__hexnan+0x10e>
 8009778:	f1a8 0204 	sub.w	r2, r8, #4
 800977c:	4623      	mov	r3, r4
 800977e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009782:	f842 1f04 	str.w	r1, [r2, #4]!
 8009786:	429f      	cmp	r7, r3
 8009788:	d2f9      	bcs.n	800977e <__hexnan+0xaa>
 800978a:	1b3b      	subs	r3, r7, r4
 800978c:	f023 0303 	bic.w	r3, r3, #3
 8009790:	3304      	adds	r3, #4
 8009792:	3401      	adds	r4, #1
 8009794:	3e03      	subs	r6, #3
 8009796:	42b4      	cmp	r4, r6
 8009798:	bf88      	it	hi
 800979a:	2304      	movhi	r3, #4
 800979c:	4443      	add	r3, r8
 800979e:	2200      	movs	r2, #0
 80097a0:	f843 2b04 	str.w	r2, [r3], #4
 80097a4:	429f      	cmp	r7, r3
 80097a6:	d2fb      	bcs.n	80097a0 <__hexnan+0xcc>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	b91b      	cbnz	r3, 80097b4 <__hexnan+0xe0>
 80097ac:	4547      	cmp	r7, r8
 80097ae:	d127      	bne.n	8009800 <__hexnan+0x12c>
 80097b0:	2301      	movs	r3, #1
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	2005      	movs	r0, #5
 80097b6:	e026      	b.n	8009806 <__hexnan+0x132>
 80097b8:	3501      	adds	r5, #1
 80097ba:	2d08      	cmp	r5, #8
 80097bc:	f10b 0b01 	add.w	fp, fp, #1
 80097c0:	dd06      	ble.n	80097d0 <__hexnan+0xfc>
 80097c2:	4544      	cmp	r4, r8
 80097c4:	d9c3      	bls.n	800974e <__hexnan+0x7a>
 80097c6:	2300      	movs	r3, #0
 80097c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80097cc:	2501      	movs	r5, #1
 80097ce:	3c04      	subs	r4, #4
 80097d0:	6822      	ldr	r2, [r4, #0]
 80097d2:	f000 000f 	and.w	r0, r0, #15
 80097d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80097da:	6022      	str	r2, [r4, #0]
 80097dc:	e7b7      	b.n	800974e <__hexnan+0x7a>
 80097de:	2508      	movs	r5, #8
 80097e0:	e7b5      	b.n	800974e <__hexnan+0x7a>
 80097e2:	9b01      	ldr	r3, [sp, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0df      	beq.n	80097a8 <__hexnan+0xd4>
 80097e8:	f04f 32ff 	mov.w	r2, #4294967295
 80097ec:	f1c3 0320 	rsb	r3, r3, #32
 80097f0:	fa22 f303 	lsr.w	r3, r2, r3
 80097f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80097f8:	401a      	ands	r2, r3
 80097fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80097fe:	e7d3      	b.n	80097a8 <__hexnan+0xd4>
 8009800:	3f04      	subs	r7, #4
 8009802:	e7d1      	b.n	80097a8 <__hexnan+0xd4>
 8009804:	2004      	movs	r0, #4
 8009806:	b007      	add	sp, #28
 8009808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800980c <_localeconv_r>:
 800980c:	4800      	ldr	r0, [pc, #0]	; (8009810 <_localeconv_r+0x4>)
 800980e:	4770      	bx	lr
 8009810:	20000168 	.word	0x20000168

08009814 <_lseek_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d07      	ldr	r5, [pc, #28]	; (8009834 <_lseek_r+0x20>)
 8009818:	4604      	mov	r4, r0
 800981a:	4608      	mov	r0, r1
 800981c:	4611      	mov	r1, r2
 800981e:	2200      	movs	r2, #0
 8009820:	602a      	str	r2, [r5, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	f7f8 f9ca 	bl	8001bbc <_lseek>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_lseek_r+0x1e>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_lseek_r+0x1e>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	200004ec 	.word	0x200004ec

08009838 <malloc>:
 8009838:	4b02      	ldr	r3, [pc, #8]	; (8009844 <malloc+0xc>)
 800983a:	4601      	mov	r1, r0
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f000 bd67 	b.w	800a310 <_malloc_r>
 8009842:	bf00      	nop
 8009844:	20000010 	.word	0x20000010

08009848 <__ascii_mbtowc>:
 8009848:	b082      	sub	sp, #8
 800984a:	b901      	cbnz	r1, 800984e <__ascii_mbtowc+0x6>
 800984c:	a901      	add	r1, sp, #4
 800984e:	b142      	cbz	r2, 8009862 <__ascii_mbtowc+0x1a>
 8009850:	b14b      	cbz	r3, 8009866 <__ascii_mbtowc+0x1e>
 8009852:	7813      	ldrb	r3, [r2, #0]
 8009854:	600b      	str	r3, [r1, #0]
 8009856:	7812      	ldrb	r2, [r2, #0]
 8009858:	1e10      	subs	r0, r2, #0
 800985a:	bf18      	it	ne
 800985c:	2001      	movne	r0, #1
 800985e:	b002      	add	sp, #8
 8009860:	4770      	bx	lr
 8009862:	4610      	mov	r0, r2
 8009864:	e7fb      	b.n	800985e <__ascii_mbtowc+0x16>
 8009866:	f06f 0001 	mvn.w	r0, #1
 800986a:	e7f8      	b.n	800985e <__ascii_mbtowc+0x16>

0800986c <memcpy>:
 800986c:	440a      	add	r2, r1
 800986e:	4291      	cmp	r1, r2
 8009870:	f100 33ff 	add.w	r3, r0, #4294967295
 8009874:	d100      	bne.n	8009878 <memcpy+0xc>
 8009876:	4770      	bx	lr
 8009878:	b510      	push	{r4, lr}
 800987a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800987e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009882:	4291      	cmp	r1, r2
 8009884:	d1f9      	bne.n	800987a <memcpy+0xe>
 8009886:	bd10      	pop	{r4, pc}

08009888 <_Balloc>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800988c:	4604      	mov	r4, r0
 800988e:	460d      	mov	r5, r1
 8009890:	b976      	cbnz	r6, 80098b0 <_Balloc+0x28>
 8009892:	2010      	movs	r0, #16
 8009894:	f7ff ffd0 	bl	8009838 <malloc>
 8009898:	4602      	mov	r2, r0
 800989a:	6260      	str	r0, [r4, #36]	; 0x24
 800989c:	b920      	cbnz	r0, 80098a8 <_Balloc+0x20>
 800989e:	4b18      	ldr	r3, [pc, #96]	; (8009900 <_Balloc+0x78>)
 80098a0:	4818      	ldr	r0, [pc, #96]	; (8009904 <_Balloc+0x7c>)
 80098a2:	2166      	movs	r1, #102	; 0x66
 80098a4:	f001 fb5c 	bl	800af60 <__assert_func>
 80098a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098ac:	6006      	str	r6, [r0, #0]
 80098ae:	60c6      	str	r6, [r0, #12]
 80098b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098b2:	68f3      	ldr	r3, [r6, #12]
 80098b4:	b183      	cbz	r3, 80098d8 <_Balloc+0x50>
 80098b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098be:	b9b8      	cbnz	r0, 80098f0 <_Balloc+0x68>
 80098c0:	2101      	movs	r1, #1
 80098c2:	fa01 f605 	lsl.w	r6, r1, r5
 80098c6:	1d72      	adds	r2, r6, #5
 80098c8:	0092      	lsls	r2, r2, #2
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 fc9d 	bl	800a20a <_calloc_r>
 80098d0:	b160      	cbz	r0, 80098ec <_Balloc+0x64>
 80098d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098d6:	e00e      	b.n	80098f6 <_Balloc+0x6e>
 80098d8:	2221      	movs	r2, #33	; 0x21
 80098da:	2104      	movs	r1, #4
 80098dc:	4620      	mov	r0, r4
 80098de:	f000 fc94 	bl	800a20a <_calloc_r>
 80098e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098e4:	60f0      	str	r0, [r6, #12]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1e4      	bne.n	80098b6 <_Balloc+0x2e>
 80098ec:	2000      	movs	r0, #0
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	6802      	ldr	r2, [r0, #0]
 80098f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098f6:	2300      	movs	r3, #0
 80098f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098fc:	e7f7      	b.n	80098ee <_Balloc+0x66>
 80098fe:	bf00      	nop
 8009900:	0800bbb6 	.word	0x0800bbb6
 8009904:	0800bcb4 	.word	0x0800bcb4

08009908 <_Bfree>:
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800990c:	4605      	mov	r5, r0
 800990e:	460c      	mov	r4, r1
 8009910:	b976      	cbnz	r6, 8009930 <_Bfree+0x28>
 8009912:	2010      	movs	r0, #16
 8009914:	f7ff ff90 	bl	8009838 <malloc>
 8009918:	4602      	mov	r2, r0
 800991a:	6268      	str	r0, [r5, #36]	; 0x24
 800991c:	b920      	cbnz	r0, 8009928 <_Bfree+0x20>
 800991e:	4b09      	ldr	r3, [pc, #36]	; (8009944 <_Bfree+0x3c>)
 8009920:	4809      	ldr	r0, [pc, #36]	; (8009948 <_Bfree+0x40>)
 8009922:	218a      	movs	r1, #138	; 0x8a
 8009924:	f001 fb1c 	bl	800af60 <__assert_func>
 8009928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800992c:	6006      	str	r6, [r0, #0]
 800992e:	60c6      	str	r6, [r0, #12]
 8009930:	b13c      	cbz	r4, 8009942 <_Bfree+0x3a>
 8009932:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009934:	6862      	ldr	r2, [r4, #4]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800993c:	6021      	str	r1, [r4, #0]
 800993e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009942:	bd70      	pop	{r4, r5, r6, pc}
 8009944:	0800bbb6 	.word	0x0800bbb6
 8009948:	0800bcb4 	.word	0x0800bcb4

0800994c <__multadd>:
 800994c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009950:	690d      	ldr	r5, [r1, #16]
 8009952:	4607      	mov	r7, r0
 8009954:	460c      	mov	r4, r1
 8009956:	461e      	mov	r6, r3
 8009958:	f101 0c14 	add.w	ip, r1, #20
 800995c:	2000      	movs	r0, #0
 800995e:	f8dc 3000 	ldr.w	r3, [ip]
 8009962:	b299      	uxth	r1, r3
 8009964:	fb02 6101 	mla	r1, r2, r1, r6
 8009968:	0c1e      	lsrs	r6, r3, #16
 800996a:	0c0b      	lsrs	r3, r1, #16
 800996c:	fb02 3306 	mla	r3, r2, r6, r3
 8009970:	b289      	uxth	r1, r1
 8009972:	3001      	adds	r0, #1
 8009974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009978:	4285      	cmp	r5, r0
 800997a:	f84c 1b04 	str.w	r1, [ip], #4
 800997e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009982:	dcec      	bgt.n	800995e <__multadd+0x12>
 8009984:	b30e      	cbz	r6, 80099ca <__multadd+0x7e>
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	42ab      	cmp	r3, r5
 800998a:	dc19      	bgt.n	80099c0 <__multadd+0x74>
 800998c:	6861      	ldr	r1, [r4, #4]
 800998e:	4638      	mov	r0, r7
 8009990:	3101      	adds	r1, #1
 8009992:	f7ff ff79 	bl	8009888 <_Balloc>
 8009996:	4680      	mov	r8, r0
 8009998:	b928      	cbnz	r0, 80099a6 <__multadd+0x5a>
 800999a:	4602      	mov	r2, r0
 800999c:	4b0c      	ldr	r3, [pc, #48]	; (80099d0 <__multadd+0x84>)
 800999e:	480d      	ldr	r0, [pc, #52]	; (80099d4 <__multadd+0x88>)
 80099a0:	21b5      	movs	r1, #181	; 0xb5
 80099a2:	f001 fadd 	bl	800af60 <__assert_func>
 80099a6:	6922      	ldr	r2, [r4, #16]
 80099a8:	3202      	adds	r2, #2
 80099aa:	f104 010c 	add.w	r1, r4, #12
 80099ae:	0092      	lsls	r2, r2, #2
 80099b0:	300c      	adds	r0, #12
 80099b2:	f7ff ff5b 	bl	800986c <memcpy>
 80099b6:	4621      	mov	r1, r4
 80099b8:	4638      	mov	r0, r7
 80099ba:	f7ff ffa5 	bl	8009908 <_Bfree>
 80099be:	4644      	mov	r4, r8
 80099c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099c4:	3501      	adds	r5, #1
 80099c6:	615e      	str	r6, [r3, #20]
 80099c8:	6125      	str	r5, [r4, #16]
 80099ca:	4620      	mov	r0, r4
 80099cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d0:	0800bc28 	.word	0x0800bc28
 80099d4:	0800bcb4 	.word	0x0800bcb4

080099d8 <__s2b>:
 80099d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099dc:	460c      	mov	r4, r1
 80099de:	4615      	mov	r5, r2
 80099e0:	461f      	mov	r7, r3
 80099e2:	2209      	movs	r2, #9
 80099e4:	3308      	adds	r3, #8
 80099e6:	4606      	mov	r6, r0
 80099e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80099ec:	2100      	movs	r1, #0
 80099ee:	2201      	movs	r2, #1
 80099f0:	429a      	cmp	r2, r3
 80099f2:	db09      	blt.n	8009a08 <__s2b+0x30>
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7ff ff47 	bl	8009888 <_Balloc>
 80099fa:	b940      	cbnz	r0, 8009a0e <__s2b+0x36>
 80099fc:	4602      	mov	r2, r0
 80099fe:	4b19      	ldr	r3, [pc, #100]	; (8009a64 <__s2b+0x8c>)
 8009a00:	4819      	ldr	r0, [pc, #100]	; (8009a68 <__s2b+0x90>)
 8009a02:	21ce      	movs	r1, #206	; 0xce
 8009a04:	f001 faac 	bl	800af60 <__assert_func>
 8009a08:	0052      	lsls	r2, r2, #1
 8009a0a:	3101      	adds	r1, #1
 8009a0c:	e7f0      	b.n	80099f0 <__s2b+0x18>
 8009a0e:	9b08      	ldr	r3, [sp, #32]
 8009a10:	6143      	str	r3, [r0, #20]
 8009a12:	2d09      	cmp	r5, #9
 8009a14:	f04f 0301 	mov.w	r3, #1
 8009a18:	6103      	str	r3, [r0, #16]
 8009a1a:	dd16      	ble.n	8009a4a <__s2b+0x72>
 8009a1c:	f104 0909 	add.w	r9, r4, #9
 8009a20:	46c8      	mov	r8, r9
 8009a22:	442c      	add	r4, r5
 8009a24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a28:	4601      	mov	r1, r0
 8009a2a:	3b30      	subs	r3, #48	; 0x30
 8009a2c:	220a      	movs	r2, #10
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f7ff ff8c 	bl	800994c <__multadd>
 8009a34:	45a0      	cmp	r8, r4
 8009a36:	d1f5      	bne.n	8009a24 <__s2b+0x4c>
 8009a38:	f1a5 0408 	sub.w	r4, r5, #8
 8009a3c:	444c      	add	r4, r9
 8009a3e:	1b2d      	subs	r5, r5, r4
 8009a40:	1963      	adds	r3, r4, r5
 8009a42:	42bb      	cmp	r3, r7
 8009a44:	db04      	blt.n	8009a50 <__s2b+0x78>
 8009a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a4a:	340a      	adds	r4, #10
 8009a4c:	2509      	movs	r5, #9
 8009a4e:	e7f6      	b.n	8009a3e <__s2b+0x66>
 8009a50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a54:	4601      	mov	r1, r0
 8009a56:	3b30      	subs	r3, #48	; 0x30
 8009a58:	220a      	movs	r2, #10
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f7ff ff76 	bl	800994c <__multadd>
 8009a60:	e7ee      	b.n	8009a40 <__s2b+0x68>
 8009a62:	bf00      	nop
 8009a64:	0800bc28 	.word	0x0800bc28
 8009a68:	0800bcb4 	.word	0x0800bcb4

08009a6c <__hi0bits>:
 8009a6c:	0c03      	lsrs	r3, r0, #16
 8009a6e:	041b      	lsls	r3, r3, #16
 8009a70:	b9d3      	cbnz	r3, 8009aa8 <__hi0bits+0x3c>
 8009a72:	0400      	lsls	r0, r0, #16
 8009a74:	2310      	movs	r3, #16
 8009a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a7a:	bf04      	itt	eq
 8009a7c:	0200      	lsleq	r0, r0, #8
 8009a7e:	3308      	addeq	r3, #8
 8009a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a84:	bf04      	itt	eq
 8009a86:	0100      	lsleq	r0, r0, #4
 8009a88:	3304      	addeq	r3, #4
 8009a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a8e:	bf04      	itt	eq
 8009a90:	0080      	lsleq	r0, r0, #2
 8009a92:	3302      	addeq	r3, #2
 8009a94:	2800      	cmp	r0, #0
 8009a96:	db05      	blt.n	8009aa4 <__hi0bits+0x38>
 8009a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a9c:	f103 0301 	add.w	r3, r3, #1
 8009aa0:	bf08      	it	eq
 8009aa2:	2320      	moveq	r3, #32
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	4770      	bx	lr
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	e7e4      	b.n	8009a76 <__hi0bits+0xa>

08009aac <__lo0bits>:
 8009aac:	6803      	ldr	r3, [r0, #0]
 8009aae:	f013 0207 	ands.w	r2, r3, #7
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	d00b      	beq.n	8009ace <__lo0bits+0x22>
 8009ab6:	07da      	lsls	r2, r3, #31
 8009ab8:	d423      	bmi.n	8009b02 <__lo0bits+0x56>
 8009aba:	0798      	lsls	r0, r3, #30
 8009abc:	bf49      	itett	mi
 8009abe:	085b      	lsrmi	r3, r3, #1
 8009ac0:	089b      	lsrpl	r3, r3, #2
 8009ac2:	2001      	movmi	r0, #1
 8009ac4:	600b      	strmi	r3, [r1, #0]
 8009ac6:	bf5c      	itt	pl
 8009ac8:	600b      	strpl	r3, [r1, #0]
 8009aca:	2002      	movpl	r0, #2
 8009acc:	4770      	bx	lr
 8009ace:	b298      	uxth	r0, r3
 8009ad0:	b9a8      	cbnz	r0, 8009afe <__lo0bits+0x52>
 8009ad2:	0c1b      	lsrs	r3, r3, #16
 8009ad4:	2010      	movs	r0, #16
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	b90a      	cbnz	r2, 8009ade <__lo0bits+0x32>
 8009ada:	3008      	adds	r0, #8
 8009adc:	0a1b      	lsrs	r3, r3, #8
 8009ade:	071a      	lsls	r2, r3, #28
 8009ae0:	bf04      	itt	eq
 8009ae2:	091b      	lsreq	r3, r3, #4
 8009ae4:	3004      	addeq	r0, #4
 8009ae6:	079a      	lsls	r2, r3, #30
 8009ae8:	bf04      	itt	eq
 8009aea:	089b      	lsreq	r3, r3, #2
 8009aec:	3002      	addeq	r0, #2
 8009aee:	07da      	lsls	r2, r3, #31
 8009af0:	d403      	bmi.n	8009afa <__lo0bits+0x4e>
 8009af2:	085b      	lsrs	r3, r3, #1
 8009af4:	f100 0001 	add.w	r0, r0, #1
 8009af8:	d005      	beq.n	8009b06 <__lo0bits+0x5a>
 8009afa:	600b      	str	r3, [r1, #0]
 8009afc:	4770      	bx	lr
 8009afe:	4610      	mov	r0, r2
 8009b00:	e7e9      	b.n	8009ad6 <__lo0bits+0x2a>
 8009b02:	2000      	movs	r0, #0
 8009b04:	4770      	bx	lr
 8009b06:	2020      	movs	r0, #32
 8009b08:	4770      	bx	lr
	...

08009b0c <__i2b>:
 8009b0c:	b510      	push	{r4, lr}
 8009b0e:	460c      	mov	r4, r1
 8009b10:	2101      	movs	r1, #1
 8009b12:	f7ff feb9 	bl	8009888 <_Balloc>
 8009b16:	4602      	mov	r2, r0
 8009b18:	b928      	cbnz	r0, 8009b26 <__i2b+0x1a>
 8009b1a:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <__i2b+0x24>)
 8009b1c:	4805      	ldr	r0, [pc, #20]	; (8009b34 <__i2b+0x28>)
 8009b1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b22:	f001 fa1d 	bl	800af60 <__assert_func>
 8009b26:	2301      	movs	r3, #1
 8009b28:	6144      	str	r4, [r0, #20]
 8009b2a:	6103      	str	r3, [r0, #16]
 8009b2c:	bd10      	pop	{r4, pc}
 8009b2e:	bf00      	nop
 8009b30:	0800bc28 	.word	0x0800bc28
 8009b34:	0800bcb4 	.word	0x0800bcb4

08009b38 <__multiply>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	4691      	mov	r9, r2
 8009b3e:	690a      	ldr	r2, [r1, #16]
 8009b40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	bfb8      	it	lt
 8009b48:	460b      	movlt	r3, r1
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	bfbc      	itt	lt
 8009b4e:	464c      	movlt	r4, r9
 8009b50:	4699      	movlt	r9, r3
 8009b52:	6927      	ldr	r7, [r4, #16]
 8009b54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b58:	68a3      	ldr	r3, [r4, #8]
 8009b5a:	6861      	ldr	r1, [r4, #4]
 8009b5c:	eb07 060a 	add.w	r6, r7, sl
 8009b60:	42b3      	cmp	r3, r6
 8009b62:	b085      	sub	sp, #20
 8009b64:	bfb8      	it	lt
 8009b66:	3101      	addlt	r1, #1
 8009b68:	f7ff fe8e 	bl	8009888 <_Balloc>
 8009b6c:	b930      	cbnz	r0, 8009b7c <__multiply+0x44>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	4b44      	ldr	r3, [pc, #272]	; (8009c84 <__multiply+0x14c>)
 8009b72:	4845      	ldr	r0, [pc, #276]	; (8009c88 <__multiply+0x150>)
 8009b74:	f240 115d 	movw	r1, #349	; 0x15d
 8009b78:	f001 f9f2 	bl	800af60 <__assert_func>
 8009b7c:	f100 0514 	add.w	r5, r0, #20
 8009b80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b84:	462b      	mov	r3, r5
 8009b86:	2200      	movs	r2, #0
 8009b88:	4543      	cmp	r3, r8
 8009b8a:	d321      	bcc.n	8009bd0 <__multiply+0x98>
 8009b8c:	f104 0314 	add.w	r3, r4, #20
 8009b90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b94:	f109 0314 	add.w	r3, r9, #20
 8009b98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b9c:	9202      	str	r2, [sp, #8]
 8009b9e:	1b3a      	subs	r2, r7, r4
 8009ba0:	3a15      	subs	r2, #21
 8009ba2:	f022 0203 	bic.w	r2, r2, #3
 8009ba6:	3204      	adds	r2, #4
 8009ba8:	f104 0115 	add.w	r1, r4, #21
 8009bac:	428f      	cmp	r7, r1
 8009bae:	bf38      	it	cc
 8009bb0:	2204      	movcc	r2, #4
 8009bb2:	9201      	str	r2, [sp, #4]
 8009bb4:	9a02      	ldr	r2, [sp, #8]
 8009bb6:	9303      	str	r3, [sp, #12]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d80c      	bhi.n	8009bd6 <__multiply+0x9e>
 8009bbc:	2e00      	cmp	r6, #0
 8009bbe:	dd03      	ble.n	8009bc8 <__multiply+0x90>
 8009bc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d05a      	beq.n	8009c7e <__multiply+0x146>
 8009bc8:	6106      	str	r6, [r0, #16]
 8009bca:	b005      	add	sp, #20
 8009bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd0:	f843 2b04 	str.w	r2, [r3], #4
 8009bd4:	e7d8      	b.n	8009b88 <__multiply+0x50>
 8009bd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bda:	f1ba 0f00 	cmp.w	sl, #0
 8009bde:	d024      	beq.n	8009c2a <__multiply+0xf2>
 8009be0:	f104 0e14 	add.w	lr, r4, #20
 8009be4:	46a9      	mov	r9, r5
 8009be6:	f04f 0c00 	mov.w	ip, #0
 8009bea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009bee:	f8d9 1000 	ldr.w	r1, [r9]
 8009bf2:	fa1f fb82 	uxth.w	fp, r2
 8009bf6:	b289      	uxth	r1, r1
 8009bf8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009bfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c00:	f8d9 2000 	ldr.w	r2, [r9]
 8009c04:	4461      	add	r1, ip
 8009c06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c12:	b289      	uxth	r1, r1
 8009c14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c18:	4577      	cmp	r7, lr
 8009c1a:	f849 1b04 	str.w	r1, [r9], #4
 8009c1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c22:	d8e2      	bhi.n	8009bea <__multiply+0xb2>
 8009c24:	9a01      	ldr	r2, [sp, #4]
 8009c26:	f845 c002 	str.w	ip, [r5, r2]
 8009c2a:	9a03      	ldr	r2, [sp, #12]
 8009c2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c30:	3304      	adds	r3, #4
 8009c32:	f1b9 0f00 	cmp.w	r9, #0
 8009c36:	d020      	beq.n	8009c7a <__multiply+0x142>
 8009c38:	6829      	ldr	r1, [r5, #0]
 8009c3a:	f104 0c14 	add.w	ip, r4, #20
 8009c3e:	46ae      	mov	lr, r5
 8009c40:	f04f 0a00 	mov.w	sl, #0
 8009c44:	f8bc b000 	ldrh.w	fp, [ip]
 8009c48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c4c:	fb09 220b 	mla	r2, r9, fp, r2
 8009c50:	4492      	add	sl, r2
 8009c52:	b289      	uxth	r1, r1
 8009c54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c58:	f84e 1b04 	str.w	r1, [lr], #4
 8009c5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c60:	f8be 1000 	ldrh.w	r1, [lr]
 8009c64:	0c12      	lsrs	r2, r2, #16
 8009c66:	fb09 1102 	mla	r1, r9, r2, r1
 8009c6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009c6e:	4567      	cmp	r7, ip
 8009c70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c74:	d8e6      	bhi.n	8009c44 <__multiply+0x10c>
 8009c76:	9a01      	ldr	r2, [sp, #4]
 8009c78:	50a9      	str	r1, [r5, r2]
 8009c7a:	3504      	adds	r5, #4
 8009c7c:	e79a      	b.n	8009bb4 <__multiply+0x7c>
 8009c7e:	3e01      	subs	r6, #1
 8009c80:	e79c      	b.n	8009bbc <__multiply+0x84>
 8009c82:	bf00      	nop
 8009c84:	0800bc28 	.word	0x0800bc28
 8009c88:	0800bcb4 	.word	0x0800bcb4

08009c8c <__pow5mult>:
 8009c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c90:	4615      	mov	r5, r2
 8009c92:	f012 0203 	ands.w	r2, r2, #3
 8009c96:	4606      	mov	r6, r0
 8009c98:	460f      	mov	r7, r1
 8009c9a:	d007      	beq.n	8009cac <__pow5mult+0x20>
 8009c9c:	4c25      	ldr	r4, [pc, #148]	; (8009d34 <__pow5mult+0xa8>)
 8009c9e:	3a01      	subs	r2, #1
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ca6:	f7ff fe51 	bl	800994c <__multadd>
 8009caa:	4607      	mov	r7, r0
 8009cac:	10ad      	asrs	r5, r5, #2
 8009cae:	d03d      	beq.n	8009d2c <__pow5mult+0xa0>
 8009cb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009cb2:	b97c      	cbnz	r4, 8009cd4 <__pow5mult+0x48>
 8009cb4:	2010      	movs	r0, #16
 8009cb6:	f7ff fdbf 	bl	8009838 <malloc>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	6270      	str	r0, [r6, #36]	; 0x24
 8009cbe:	b928      	cbnz	r0, 8009ccc <__pow5mult+0x40>
 8009cc0:	4b1d      	ldr	r3, [pc, #116]	; (8009d38 <__pow5mult+0xac>)
 8009cc2:	481e      	ldr	r0, [pc, #120]	; (8009d3c <__pow5mult+0xb0>)
 8009cc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009cc8:	f001 f94a 	bl	800af60 <__assert_func>
 8009ccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cd0:	6004      	str	r4, [r0, #0]
 8009cd2:	60c4      	str	r4, [r0, #12]
 8009cd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009cd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cdc:	b94c      	cbnz	r4, 8009cf2 <__pow5mult+0x66>
 8009cde:	f240 2171 	movw	r1, #625	; 0x271
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7ff ff12 	bl	8009b0c <__i2b>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cee:	4604      	mov	r4, r0
 8009cf0:	6003      	str	r3, [r0, #0]
 8009cf2:	f04f 0900 	mov.w	r9, #0
 8009cf6:	07eb      	lsls	r3, r5, #31
 8009cf8:	d50a      	bpl.n	8009d10 <__pow5mult+0x84>
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f7ff ff1a 	bl	8009b38 <__multiply>
 8009d04:	4639      	mov	r1, r7
 8009d06:	4680      	mov	r8, r0
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f7ff fdfd 	bl	8009908 <_Bfree>
 8009d0e:	4647      	mov	r7, r8
 8009d10:	106d      	asrs	r5, r5, #1
 8009d12:	d00b      	beq.n	8009d2c <__pow5mult+0xa0>
 8009d14:	6820      	ldr	r0, [r4, #0]
 8009d16:	b938      	cbnz	r0, 8009d28 <__pow5mult+0x9c>
 8009d18:	4622      	mov	r2, r4
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7ff ff0b 	bl	8009b38 <__multiply>
 8009d22:	6020      	str	r0, [r4, #0]
 8009d24:	f8c0 9000 	str.w	r9, [r0]
 8009d28:	4604      	mov	r4, r0
 8009d2a:	e7e4      	b.n	8009cf6 <__pow5mult+0x6a>
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d32:	bf00      	nop
 8009d34:	0800be00 	.word	0x0800be00
 8009d38:	0800bbb6 	.word	0x0800bbb6
 8009d3c:	0800bcb4 	.word	0x0800bcb4

08009d40 <__lshift>:
 8009d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d44:	460c      	mov	r4, r1
 8009d46:	6849      	ldr	r1, [r1, #4]
 8009d48:	6923      	ldr	r3, [r4, #16]
 8009d4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d4e:	68a3      	ldr	r3, [r4, #8]
 8009d50:	4607      	mov	r7, r0
 8009d52:	4691      	mov	r9, r2
 8009d54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d58:	f108 0601 	add.w	r6, r8, #1
 8009d5c:	42b3      	cmp	r3, r6
 8009d5e:	db0b      	blt.n	8009d78 <__lshift+0x38>
 8009d60:	4638      	mov	r0, r7
 8009d62:	f7ff fd91 	bl	8009888 <_Balloc>
 8009d66:	4605      	mov	r5, r0
 8009d68:	b948      	cbnz	r0, 8009d7e <__lshift+0x3e>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	4b2a      	ldr	r3, [pc, #168]	; (8009e18 <__lshift+0xd8>)
 8009d6e:	482b      	ldr	r0, [pc, #172]	; (8009e1c <__lshift+0xdc>)
 8009d70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d74:	f001 f8f4 	bl	800af60 <__assert_func>
 8009d78:	3101      	adds	r1, #1
 8009d7a:	005b      	lsls	r3, r3, #1
 8009d7c:	e7ee      	b.n	8009d5c <__lshift+0x1c>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f100 0114 	add.w	r1, r0, #20
 8009d84:	f100 0210 	add.w	r2, r0, #16
 8009d88:	4618      	mov	r0, r3
 8009d8a:	4553      	cmp	r3, sl
 8009d8c:	db37      	blt.n	8009dfe <__lshift+0xbe>
 8009d8e:	6920      	ldr	r0, [r4, #16]
 8009d90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d94:	f104 0314 	add.w	r3, r4, #20
 8009d98:	f019 091f 	ands.w	r9, r9, #31
 8009d9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009da0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009da4:	d02f      	beq.n	8009e06 <__lshift+0xc6>
 8009da6:	f1c9 0e20 	rsb	lr, r9, #32
 8009daa:	468a      	mov	sl, r1
 8009dac:	f04f 0c00 	mov.w	ip, #0
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	fa02 f209 	lsl.w	r2, r2, r9
 8009db6:	ea42 020c 	orr.w	r2, r2, ip
 8009dba:	f84a 2b04 	str.w	r2, [sl], #4
 8009dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc2:	4298      	cmp	r0, r3
 8009dc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009dc8:	d8f2      	bhi.n	8009db0 <__lshift+0x70>
 8009dca:	1b03      	subs	r3, r0, r4
 8009dcc:	3b15      	subs	r3, #21
 8009dce:	f023 0303 	bic.w	r3, r3, #3
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	f104 0215 	add.w	r2, r4, #21
 8009dd8:	4290      	cmp	r0, r2
 8009dda:	bf38      	it	cc
 8009ddc:	2304      	movcc	r3, #4
 8009dde:	f841 c003 	str.w	ip, [r1, r3]
 8009de2:	f1bc 0f00 	cmp.w	ip, #0
 8009de6:	d001      	beq.n	8009dec <__lshift+0xac>
 8009de8:	f108 0602 	add.w	r6, r8, #2
 8009dec:	3e01      	subs	r6, #1
 8009dee:	4638      	mov	r0, r7
 8009df0:	612e      	str	r6, [r5, #16]
 8009df2:	4621      	mov	r1, r4
 8009df4:	f7ff fd88 	bl	8009908 <_Bfree>
 8009df8:	4628      	mov	r0, r5
 8009dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e02:	3301      	adds	r3, #1
 8009e04:	e7c1      	b.n	8009d8a <__lshift+0x4a>
 8009e06:	3904      	subs	r1, #4
 8009e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e10:	4298      	cmp	r0, r3
 8009e12:	d8f9      	bhi.n	8009e08 <__lshift+0xc8>
 8009e14:	e7ea      	b.n	8009dec <__lshift+0xac>
 8009e16:	bf00      	nop
 8009e18:	0800bc28 	.word	0x0800bc28
 8009e1c:	0800bcb4 	.word	0x0800bcb4

08009e20 <__mcmp>:
 8009e20:	b530      	push	{r4, r5, lr}
 8009e22:	6902      	ldr	r2, [r0, #16]
 8009e24:	690c      	ldr	r4, [r1, #16]
 8009e26:	1b12      	subs	r2, r2, r4
 8009e28:	d10e      	bne.n	8009e48 <__mcmp+0x28>
 8009e2a:	f100 0314 	add.w	r3, r0, #20
 8009e2e:	3114      	adds	r1, #20
 8009e30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e40:	42a5      	cmp	r5, r4
 8009e42:	d003      	beq.n	8009e4c <__mcmp+0x2c>
 8009e44:	d305      	bcc.n	8009e52 <__mcmp+0x32>
 8009e46:	2201      	movs	r2, #1
 8009e48:	4610      	mov	r0, r2
 8009e4a:	bd30      	pop	{r4, r5, pc}
 8009e4c:	4283      	cmp	r3, r0
 8009e4e:	d3f3      	bcc.n	8009e38 <__mcmp+0x18>
 8009e50:	e7fa      	b.n	8009e48 <__mcmp+0x28>
 8009e52:	f04f 32ff 	mov.w	r2, #4294967295
 8009e56:	e7f7      	b.n	8009e48 <__mcmp+0x28>

08009e58 <__mdiff>:
 8009e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	4606      	mov	r6, r0
 8009e60:	4611      	mov	r1, r2
 8009e62:	4620      	mov	r0, r4
 8009e64:	4690      	mov	r8, r2
 8009e66:	f7ff ffdb 	bl	8009e20 <__mcmp>
 8009e6a:	1e05      	subs	r5, r0, #0
 8009e6c:	d110      	bne.n	8009e90 <__mdiff+0x38>
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4630      	mov	r0, r6
 8009e72:	f7ff fd09 	bl	8009888 <_Balloc>
 8009e76:	b930      	cbnz	r0, 8009e86 <__mdiff+0x2e>
 8009e78:	4b3a      	ldr	r3, [pc, #232]	; (8009f64 <__mdiff+0x10c>)
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	f240 2132 	movw	r1, #562	; 0x232
 8009e80:	4839      	ldr	r0, [pc, #228]	; (8009f68 <__mdiff+0x110>)
 8009e82:	f001 f86d 	bl	800af60 <__assert_func>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e90:	bfa4      	itt	ge
 8009e92:	4643      	movge	r3, r8
 8009e94:	46a0      	movge	r8, r4
 8009e96:	4630      	mov	r0, r6
 8009e98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e9c:	bfa6      	itte	ge
 8009e9e:	461c      	movge	r4, r3
 8009ea0:	2500      	movge	r5, #0
 8009ea2:	2501      	movlt	r5, #1
 8009ea4:	f7ff fcf0 	bl	8009888 <_Balloc>
 8009ea8:	b920      	cbnz	r0, 8009eb4 <__mdiff+0x5c>
 8009eaa:	4b2e      	ldr	r3, [pc, #184]	; (8009f64 <__mdiff+0x10c>)
 8009eac:	4602      	mov	r2, r0
 8009eae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009eb2:	e7e5      	b.n	8009e80 <__mdiff+0x28>
 8009eb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009eb8:	6926      	ldr	r6, [r4, #16]
 8009eba:	60c5      	str	r5, [r0, #12]
 8009ebc:	f104 0914 	add.w	r9, r4, #20
 8009ec0:	f108 0514 	add.w	r5, r8, #20
 8009ec4:	f100 0e14 	add.w	lr, r0, #20
 8009ec8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ecc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ed0:	f108 0210 	add.w	r2, r8, #16
 8009ed4:	46f2      	mov	sl, lr
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009edc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ee0:	fa1f f883 	uxth.w	r8, r3
 8009ee4:	fa11 f18b 	uxtah	r1, r1, fp
 8009ee8:	0c1b      	lsrs	r3, r3, #16
 8009eea:	eba1 0808 	sub.w	r8, r1, r8
 8009eee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ef2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ef6:	fa1f f888 	uxth.w	r8, r8
 8009efa:	1419      	asrs	r1, r3, #16
 8009efc:	454e      	cmp	r6, r9
 8009efe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f02:	f84a 3b04 	str.w	r3, [sl], #4
 8009f06:	d8e7      	bhi.n	8009ed8 <__mdiff+0x80>
 8009f08:	1b33      	subs	r3, r6, r4
 8009f0a:	3b15      	subs	r3, #21
 8009f0c:	f023 0303 	bic.w	r3, r3, #3
 8009f10:	3304      	adds	r3, #4
 8009f12:	3415      	adds	r4, #21
 8009f14:	42a6      	cmp	r6, r4
 8009f16:	bf38      	it	cc
 8009f18:	2304      	movcc	r3, #4
 8009f1a:	441d      	add	r5, r3
 8009f1c:	4473      	add	r3, lr
 8009f1e:	469e      	mov	lr, r3
 8009f20:	462e      	mov	r6, r5
 8009f22:	4566      	cmp	r6, ip
 8009f24:	d30e      	bcc.n	8009f44 <__mdiff+0xec>
 8009f26:	f10c 0203 	add.w	r2, ip, #3
 8009f2a:	1b52      	subs	r2, r2, r5
 8009f2c:	f022 0203 	bic.w	r2, r2, #3
 8009f30:	3d03      	subs	r5, #3
 8009f32:	45ac      	cmp	ip, r5
 8009f34:	bf38      	it	cc
 8009f36:	2200      	movcc	r2, #0
 8009f38:	441a      	add	r2, r3
 8009f3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f3e:	b17b      	cbz	r3, 8009f60 <__mdiff+0x108>
 8009f40:	6107      	str	r7, [r0, #16]
 8009f42:	e7a3      	b.n	8009e8c <__mdiff+0x34>
 8009f44:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f48:	fa11 f288 	uxtah	r2, r1, r8
 8009f4c:	1414      	asrs	r4, r2, #16
 8009f4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f52:	b292      	uxth	r2, r2
 8009f54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f58:	f84e 2b04 	str.w	r2, [lr], #4
 8009f5c:	1421      	asrs	r1, r4, #16
 8009f5e:	e7e0      	b.n	8009f22 <__mdiff+0xca>
 8009f60:	3f01      	subs	r7, #1
 8009f62:	e7ea      	b.n	8009f3a <__mdiff+0xe2>
 8009f64:	0800bc28 	.word	0x0800bc28
 8009f68:	0800bcb4 	.word	0x0800bcb4

08009f6c <__ulp>:
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	ed8d 0b00 	vstr	d0, [sp]
 8009f72:	9b01      	ldr	r3, [sp, #4]
 8009f74:	4912      	ldr	r1, [pc, #72]	; (8009fc0 <__ulp+0x54>)
 8009f76:	4019      	ands	r1, r3
 8009f78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	dd05      	ble.n	8009f8c <__ulp+0x20>
 8009f80:	2200      	movs	r2, #0
 8009f82:	460b      	mov	r3, r1
 8009f84:	ec43 2b10 	vmov	d0, r2, r3
 8009f88:	b002      	add	sp, #8
 8009f8a:	4770      	bx	lr
 8009f8c:	4249      	negs	r1, r1
 8009f8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009f92:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009f96:	f04f 0200 	mov.w	r2, #0
 8009f9a:	f04f 0300 	mov.w	r3, #0
 8009f9e:	da04      	bge.n	8009faa <__ulp+0x3e>
 8009fa0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009fa4:	fa41 f300 	asr.w	r3, r1, r0
 8009fa8:	e7ec      	b.n	8009f84 <__ulp+0x18>
 8009faa:	f1a0 0114 	sub.w	r1, r0, #20
 8009fae:	291e      	cmp	r1, #30
 8009fb0:	bfda      	itte	le
 8009fb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009fb6:	fa20 f101 	lsrle.w	r1, r0, r1
 8009fba:	2101      	movgt	r1, #1
 8009fbc:	460a      	mov	r2, r1
 8009fbe:	e7e1      	b.n	8009f84 <__ulp+0x18>
 8009fc0:	7ff00000 	.word	0x7ff00000

08009fc4 <__b2d>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	6905      	ldr	r5, [r0, #16]
 8009fc8:	f100 0714 	add.w	r7, r0, #20
 8009fcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009fd0:	1f2e      	subs	r6, r5, #4
 8009fd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f7ff fd48 	bl	8009a6c <__hi0bits>
 8009fdc:	f1c0 0320 	rsb	r3, r0, #32
 8009fe0:	280a      	cmp	r0, #10
 8009fe2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a060 <__b2d+0x9c>
 8009fe6:	600b      	str	r3, [r1, #0]
 8009fe8:	dc14      	bgt.n	800a014 <__b2d+0x50>
 8009fea:	f1c0 0e0b 	rsb	lr, r0, #11
 8009fee:	fa24 f10e 	lsr.w	r1, r4, lr
 8009ff2:	42b7      	cmp	r7, r6
 8009ff4:	ea41 030c 	orr.w	r3, r1, ip
 8009ff8:	bf34      	ite	cc
 8009ffa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ffe:	2100      	movcs	r1, #0
 800a000:	3015      	adds	r0, #21
 800a002:	fa04 f000 	lsl.w	r0, r4, r0
 800a006:	fa21 f10e 	lsr.w	r1, r1, lr
 800a00a:	ea40 0201 	orr.w	r2, r0, r1
 800a00e:	ec43 2b10 	vmov	d0, r2, r3
 800a012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a014:	42b7      	cmp	r7, r6
 800a016:	bf3a      	itte	cc
 800a018:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a01c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a020:	2100      	movcs	r1, #0
 800a022:	380b      	subs	r0, #11
 800a024:	d017      	beq.n	800a056 <__b2d+0x92>
 800a026:	f1c0 0c20 	rsb	ip, r0, #32
 800a02a:	fa04 f500 	lsl.w	r5, r4, r0
 800a02e:	42be      	cmp	r6, r7
 800a030:	fa21 f40c 	lsr.w	r4, r1, ip
 800a034:	ea45 0504 	orr.w	r5, r5, r4
 800a038:	bf8c      	ite	hi
 800a03a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a03e:	2400      	movls	r4, #0
 800a040:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a044:	fa01 f000 	lsl.w	r0, r1, r0
 800a048:	fa24 f40c 	lsr.w	r4, r4, ip
 800a04c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a050:	ea40 0204 	orr.w	r2, r0, r4
 800a054:	e7db      	b.n	800a00e <__b2d+0x4a>
 800a056:	ea44 030c 	orr.w	r3, r4, ip
 800a05a:	460a      	mov	r2, r1
 800a05c:	e7d7      	b.n	800a00e <__b2d+0x4a>
 800a05e:	bf00      	nop
 800a060:	3ff00000 	.word	0x3ff00000

0800a064 <__d2b>:
 800a064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a068:	4689      	mov	r9, r1
 800a06a:	2101      	movs	r1, #1
 800a06c:	ec57 6b10 	vmov	r6, r7, d0
 800a070:	4690      	mov	r8, r2
 800a072:	f7ff fc09 	bl	8009888 <_Balloc>
 800a076:	4604      	mov	r4, r0
 800a078:	b930      	cbnz	r0, 800a088 <__d2b+0x24>
 800a07a:	4602      	mov	r2, r0
 800a07c:	4b25      	ldr	r3, [pc, #148]	; (800a114 <__d2b+0xb0>)
 800a07e:	4826      	ldr	r0, [pc, #152]	; (800a118 <__d2b+0xb4>)
 800a080:	f240 310a 	movw	r1, #778	; 0x30a
 800a084:	f000 ff6c 	bl	800af60 <__assert_func>
 800a088:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a08c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a090:	bb35      	cbnz	r5, 800a0e0 <__d2b+0x7c>
 800a092:	2e00      	cmp	r6, #0
 800a094:	9301      	str	r3, [sp, #4]
 800a096:	d028      	beq.n	800a0ea <__d2b+0x86>
 800a098:	4668      	mov	r0, sp
 800a09a:	9600      	str	r6, [sp, #0]
 800a09c:	f7ff fd06 	bl	8009aac <__lo0bits>
 800a0a0:	9900      	ldr	r1, [sp, #0]
 800a0a2:	b300      	cbz	r0, 800a0e6 <__d2b+0x82>
 800a0a4:	9a01      	ldr	r2, [sp, #4]
 800a0a6:	f1c0 0320 	rsb	r3, r0, #32
 800a0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ae:	430b      	orrs	r3, r1
 800a0b0:	40c2      	lsrs	r2, r0
 800a0b2:	6163      	str	r3, [r4, #20]
 800a0b4:	9201      	str	r2, [sp, #4]
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	61a3      	str	r3, [r4, #24]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bf14      	ite	ne
 800a0be:	2202      	movne	r2, #2
 800a0c0:	2201      	moveq	r2, #1
 800a0c2:	6122      	str	r2, [r4, #16]
 800a0c4:	b1d5      	cbz	r5, 800a0fc <__d2b+0x98>
 800a0c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0ca:	4405      	add	r5, r0
 800a0cc:	f8c9 5000 	str.w	r5, [r9]
 800a0d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0d4:	f8c8 0000 	str.w	r0, [r8]
 800a0d8:	4620      	mov	r0, r4
 800a0da:	b003      	add	sp, #12
 800a0dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0e4:	e7d5      	b.n	800a092 <__d2b+0x2e>
 800a0e6:	6161      	str	r1, [r4, #20]
 800a0e8:	e7e5      	b.n	800a0b6 <__d2b+0x52>
 800a0ea:	a801      	add	r0, sp, #4
 800a0ec:	f7ff fcde 	bl	8009aac <__lo0bits>
 800a0f0:	9b01      	ldr	r3, [sp, #4]
 800a0f2:	6163      	str	r3, [r4, #20]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	6122      	str	r2, [r4, #16]
 800a0f8:	3020      	adds	r0, #32
 800a0fa:	e7e3      	b.n	800a0c4 <__d2b+0x60>
 800a0fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a100:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a104:	f8c9 0000 	str.w	r0, [r9]
 800a108:	6918      	ldr	r0, [r3, #16]
 800a10a:	f7ff fcaf 	bl	8009a6c <__hi0bits>
 800a10e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a112:	e7df      	b.n	800a0d4 <__d2b+0x70>
 800a114:	0800bc28 	.word	0x0800bc28
 800a118:	0800bcb4 	.word	0x0800bcb4

0800a11c <__ratio>:
 800a11c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	4688      	mov	r8, r1
 800a122:	4669      	mov	r1, sp
 800a124:	4681      	mov	r9, r0
 800a126:	f7ff ff4d 	bl	8009fc4 <__b2d>
 800a12a:	a901      	add	r1, sp, #4
 800a12c:	4640      	mov	r0, r8
 800a12e:	ec55 4b10 	vmov	r4, r5, d0
 800a132:	f7ff ff47 	bl	8009fc4 <__b2d>
 800a136:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a13a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a13e:	eba3 0c02 	sub.w	ip, r3, r2
 800a142:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a146:	1a9b      	subs	r3, r3, r2
 800a148:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a14c:	ec51 0b10 	vmov	r0, r1, d0
 800a150:	2b00      	cmp	r3, #0
 800a152:	bfd6      	itet	le
 800a154:	460a      	movle	r2, r1
 800a156:	462a      	movgt	r2, r5
 800a158:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a15c:	468b      	mov	fp, r1
 800a15e:	462f      	mov	r7, r5
 800a160:	bfd4      	ite	le
 800a162:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a166:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a16a:	4620      	mov	r0, r4
 800a16c:	ee10 2a10 	vmov	r2, s0
 800a170:	465b      	mov	r3, fp
 800a172:	4639      	mov	r1, r7
 800a174:	f7f6 fb8a 	bl	800088c <__aeabi_ddiv>
 800a178:	ec41 0b10 	vmov	d0, r0, r1
 800a17c:	b003      	add	sp, #12
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a182 <__copybits>:
 800a182:	3901      	subs	r1, #1
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	1149      	asrs	r1, r1, #5
 800a188:	6914      	ldr	r4, [r2, #16]
 800a18a:	3101      	adds	r1, #1
 800a18c:	f102 0314 	add.w	r3, r2, #20
 800a190:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a194:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a198:	1f05      	subs	r5, r0, #4
 800a19a:	42a3      	cmp	r3, r4
 800a19c:	d30c      	bcc.n	800a1b8 <__copybits+0x36>
 800a19e:	1aa3      	subs	r3, r4, r2
 800a1a0:	3b11      	subs	r3, #17
 800a1a2:	f023 0303 	bic.w	r3, r3, #3
 800a1a6:	3211      	adds	r2, #17
 800a1a8:	42a2      	cmp	r2, r4
 800a1aa:	bf88      	it	hi
 800a1ac:	2300      	movhi	r3, #0
 800a1ae:	4418      	add	r0, r3
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	4288      	cmp	r0, r1
 800a1b4:	d305      	bcc.n	800a1c2 <__copybits+0x40>
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1c0:	e7eb      	b.n	800a19a <__copybits+0x18>
 800a1c2:	f840 3b04 	str.w	r3, [r0], #4
 800a1c6:	e7f4      	b.n	800a1b2 <__copybits+0x30>

0800a1c8 <__any_on>:
 800a1c8:	f100 0214 	add.w	r2, r0, #20
 800a1cc:	6900      	ldr	r0, [r0, #16]
 800a1ce:	114b      	asrs	r3, r1, #5
 800a1d0:	4298      	cmp	r0, r3
 800a1d2:	b510      	push	{r4, lr}
 800a1d4:	db11      	blt.n	800a1fa <__any_on+0x32>
 800a1d6:	dd0a      	ble.n	800a1ee <__any_on+0x26>
 800a1d8:	f011 011f 	ands.w	r1, r1, #31
 800a1dc:	d007      	beq.n	800a1ee <__any_on+0x26>
 800a1de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1e2:	fa24 f001 	lsr.w	r0, r4, r1
 800a1e6:	fa00 f101 	lsl.w	r1, r0, r1
 800a1ea:	428c      	cmp	r4, r1
 800a1ec:	d10b      	bne.n	800a206 <__any_on+0x3e>
 800a1ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d803      	bhi.n	800a1fe <__any_on+0x36>
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	e7f7      	b.n	800a1ee <__any_on+0x26>
 800a1fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a202:	2900      	cmp	r1, #0
 800a204:	d0f5      	beq.n	800a1f2 <__any_on+0x2a>
 800a206:	2001      	movs	r0, #1
 800a208:	e7f6      	b.n	800a1f8 <__any_on+0x30>

0800a20a <_calloc_r>:
 800a20a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a20c:	fba1 2402 	umull	r2, r4, r1, r2
 800a210:	b94c      	cbnz	r4, 800a226 <_calloc_r+0x1c>
 800a212:	4611      	mov	r1, r2
 800a214:	9201      	str	r2, [sp, #4]
 800a216:	f000 f87b 	bl	800a310 <_malloc_r>
 800a21a:	9a01      	ldr	r2, [sp, #4]
 800a21c:	4605      	mov	r5, r0
 800a21e:	b930      	cbnz	r0, 800a22e <_calloc_r+0x24>
 800a220:	4628      	mov	r0, r5
 800a222:	b003      	add	sp, #12
 800a224:	bd30      	pop	{r4, r5, pc}
 800a226:	220c      	movs	r2, #12
 800a228:	6002      	str	r2, [r0, #0]
 800a22a:	2500      	movs	r5, #0
 800a22c:	e7f8      	b.n	800a220 <_calloc_r+0x16>
 800a22e:	4621      	mov	r1, r4
 800a230:	f7fc fae4 	bl	80067fc <memset>
 800a234:	e7f4      	b.n	800a220 <_calloc_r+0x16>
	...

0800a238 <_free_r>:
 800a238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a23a:	2900      	cmp	r1, #0
 800a23c:	d044      	beq.n	800a2c8 <_free_r+0x90>
 800a23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a242:	9001      	str	r0, [sp, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	f1a1 0404 	sub.w	r4, r1, #4
 800a24a:	bfb8      	it	lt
 800a24c:	18e4      	addlt	r4, r4, r3
 800a24e:	f001 f88b 	bl	800b368 <__malloc_lock>
 800a252:	4a1e      	ldr	r2, [pc, #120]	; (800a2cc <_free_r+0x94>)
 800a254:	9801      	ldr	r0, [sp, #4]
 800a256:	6813      	ldr	r3, [r2, #0]
 800a258:	b933      	cbnz	r3, 800a268 <_free_r+0x30>
 800a25a:	6063      	str	r3, [r4, #4]
 800a25c:	6014      	str	r4, [r2, #0]
 800a25e:	b003      	add	sp, #12
 800a260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a264:	f001 b886 	b.w	800b374 <__malloc_unlock>
 800a268:	42a3      	cmp	r3, r4
 800a26a:	d908      	bls.n	800a27e <_free_r+0x46>
 800a26c:	6825      	ldr	r5, [r4, #0]
 800a26e:	1961      	adds	r1, r4, r5
 800a270:	428b      	cmp	r3, r1
 800a272:	bf01      	itttt	eq
 800a274:	6819      	ldreq	r1, [r3, #0]
 800a276:	685b      	ldreq	r3, [r3, #4]
 800a278:	1949      	addeq	r1, r1, r5
 800a27a:	6021      	streq	r1, [r4, #0]
 800a27c:	e7ed      	b.n	800a25a <_free_r+0x22>
 800a27e:	461a      	mov	r2, r3
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	b10b      	cbz	r3, 800a288 <_free_r+0x50>
 800a284:	42a3      	cmp	r3, r4
 800a286:	d9fa      	bls.n	800a27e <_free_r+0x46>
 800a288:	6811      	ldr	r1, [r2, #0]
 800a28a:	1855      	adds	r5, r2, r1
 800a28c:	42a5      	cmp	r5, r4
 800a28e:	d10b      	bne.n	800a2a8 <_free_r+0x70>
 800a290:	6824      	ldr	r4, [r4, #0]
 800a292:	4421      	add	r1, r4
 800a294:	1854      	adds	r4, r2, r1
 800a296:	42a3      	cmp	r3, r4
 800a298:	6011      	str	r1, [r2, #0]
 800a29a:	d1e0      	bne.n	800a25e <_free_r+0x26>
 800a29c:	681c      	ldr	r4, [r3, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	6053      	str	r3, [r2, #4]
 800a2a2:	4421      	add	r1, r4
 800a2a4:	6011      	str	r1, [r2, #0]
 800a2a6:	e7da      	b.n	800a25e <_free_r+0x26>
 800a2a8:	d902      	bls.n	800a2b0 <_free_r+0x78>
 800a2aa:	230c      	movs	r3, #12
 800a2ac:	6003      	str	r3, [r0, #0]
 800a2ae:	e7d6      	b.n	800a25e <_free_r+0x26>
 800a2b0:	6825      	ldr	r5, [r4, #0]
 800a2b2:	1961      	adds	r1, r4, r5
 800a2b4:	428b      	cmp	r3, r1
 800a2b6:	bf04      	itt	eq
 800a2b8:	6819      	ldreq	r1, [r3, #0]
 800a2ba:	685b      	ldreq	r3, [r3, #4]
 800a2bc:	6063      	str	r3, [r4, #4]
 800a2be:	bf04      	itt	eq
 800a2c0:	1949      	addeq	r1, r1, r5
 800a2c2:	6021      	streq	r1, [r4, #0]
 800a2c4:	6054      	str	r4, [r2, #4]
 800a2c6:	e7ca      	b.n	800a25e <_free_r+0x26>
 800a2c8:	b003      	add	sp, #12
 800a2ca:	bd30      	pop	{r4, r5, pc}
 800a2cc:	200004e4 	.word	0x200004e4

0800a2d0 <sbrk_aligned>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	4e0e      	ldr	r6, [pc, #56]	; (800a30c <sbrk_aligned+0x3c>)
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	6831      	ldr	r1, [r6, #0]
 800a2d8:	4605      	mov	r5, r0
 800a2da:	b911      	cbnz	r1, 800a2e2 <sbrk_aligned+0x12>
 800a2dc:	f000 fd28 	bl	800ad30 <_sbrk_r>
 800a2e0:	6030      	str	r0, [r6, #0]
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f000 fd23 	bl	800ad30 <_sbrk_r>
 800a2ea:	1c43      	adds	r3, r0, #1
 800a2ec:	d00a      	beq.n	800a304 <sbrk_aligned+0x34>
 800a2ee:	1cc4      	adds	r4, r0, #3
 800a2f0:	f024 0403 	bic.w	r4, r4, #3
 800a2f4:	42a0      	cmp	r0, r4
 800a2f6:	d007      	beq.n	800a308 <sbrk_aligned+0x38>
 800a2f8:	1a21      	subs	r1, r4, r0
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 fd18 	bl	800ad30 <_sbrk_r>
 800a300:	3001      	adds	r0, #1
 800a302:	d101      	bne.n	800a308 <sbrk_aligned+0x38>
 800a304:	f04f 34ff 	mov.w	r4, #4294967295
 800a308:	4620      	mov	r0, r4
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	200004e8 	.word	0x200004e8

0800a310 <_malloc_r>:
 800a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a314:	1ccd      	adds	r5, r1, #3
 800a316:	f025 0503 	bic.w	r5, r5, #3
 800a31a:	3508      	adds	r5, #8
 800a31c:	2d0c      	cmp	r5, #12
 800a31e:	bf38      	it	cc
 800a320:	250c      	movcc	r5, #12
 800a322:	2d00      	cmp	r5, #0
 800a324:	4607      	mov	r7, r0
 800a326:	db01      	blt.n	800a32c <_malloc_r+0x1c>
 800a328:	42a9      	cmp	r1, r5
 800a32a:	d905      	bls.n	800a338 <_malloc_r+0x28>
 800a32c:	230c      	movs	r3, #12
 800a32e:	603b      	str	r3, [r7, #0]
 800a330:	2600      	movs	r6, #0
 800a332:	4630      	mov	r0, r6
 800a334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a338:	4e2e      	ldr	r6, [pc, #184]	; (800a3f4 <_malloc_r+0xe4>)
 800a33a:	f001 f815 	bl	800b368 <__malloc_lock>
 800a33e:	6833      	ldr	r3, [r6, #0]
 800a340:	461c      	mov	r4, r3
 800a342:	bb34      	cbnz	r4, 800a392 <_malloc_r+0x82>
 800a344:	4629      	mov	r1, r5
 800a346:	4638      	mov	r0, r7
 800a348:	f7ff ffc2 	bl	800a2d0 <sbrk_aligned>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	4604      	mov	r4, r0
 800a350:	d14d      	bne.n	800a3ee <_malloc_r+0xde>
 800a352:	6834      	ldr	r4, [r6, #0]
 800a354:	4626      	mov	r6, r4
 800a356:	2e00      	cmp	r6, #0
 800a358:	d140      	bne.n	800a3dc <_malloc_r+0xcc>
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	4631      	mov	r1, r6
 800a35e:	4638      	mov	r0, r7
 800a360:	eb04 0803 	add.w	r8, r4, r3
 800a364:	f000 fce4 	bl	800ad30 <_sbrk_r>
 800a368:	4580      	cmp	r8, r0
 800a36a:	d13a      	bne.n	800a3e2 <_malloc_r+0xd2>
 800a36c:	6821      	ldr	r1, [r4, #0]
 800a36e:	3503      	adds	r5, #3
 800a370:	1a6d      	subs	r5, r5, r1
 800a372:	f025 0503 	bic.w	r5, r5, #3
 800a376:	3508      	adds	r5, #8
 800a378:	2d0c      	cmp	r5, #12
 800a37a:	bf38      	it	cc
 800a37c:	250c      	movcc	r5, #12
 800a37e:	4629      	mov	r1, r5
 800a380:	4638      	mov	r0, r7
 800a382:	f7ff ffa5 	bl	800a2d0 <sbrk_aligned>
 800a386:	3001      	adds	r0, #1
 800a388:	d02b      	beq.n	800a3e2 <_malloc_r+0xd2>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	442b      	add	r3, r5
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	e00e      	b.n	800a3b0 <_malloc_r+0xa0>
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	1b52      	subs	r2, r2, r5
 800a396:	d41e      	bmi.n	800a3d6 <_malloc_r+0xc6>
 800a398:	2a0b      	cmp	r2, #11
 800a39a:	d916      	bls.n	800a3ca <_malloc_r+0xba>
 800a39c:	1961      	adds	r1, r4, r5
 800a39e:	42a3      	cmp	r3, r4
 800a3a0:	6025      	str	r5, [r4, #0]
 800a3a2:	bf18      	it	ne
 800a3a4:	6059      	strne	r1, [r3, #4]
 800a3a6:	6863      	ldr	r3, [r4, #4]
 800a3a8:	bf08      	it	eq
 800a3aa:	6031      	streq	r1, [r6, #0]
 800a3ac:	5162      	str	r2, [r4, r5]
 800a3ae:	604b      	str	r3, [r1, #4]
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	f104 060b 	add.w	r6, r4, #11
 800a3b6:	f000 ffdd 	bl	800b374 <__malloc_unlock>
 800a3ba:	f026 0607 	bic.w	r6, r6, #7
 800a3be:	1d23      	adds	r3, r4, #4
 800a3c0:	1af2      	subs	r2, r6, r3
 800a3c2:	d0b6      	beq.n	800a332 <_malloc_r+0x22>
 800a3c4:	1b9b      	subs	r3, r3, r6
 800a3c6:	50a3      	str	r3, [r4, r2]
 800a3c8:	e7b3      	b.n	800a332 <_malloc_r+0x22>
 800a3ca:	6862      	ldr	r2, [r4, #4]
 800a3cc:	42a3      	cmp	r3, r4
 800a3ce:	bf0c      	ite	eq
 800a3d0:	6032      	streq	r2, [r6, #0]
 800a3d2:	605a      	strne	r2, [r3, #4]
 800a3d4:	e7ec      	b.n	800a3b0 <_malloc_r+0xa0>
 800a3d6:	4623      	mov	r3, r4
 800a3d8:	6864      	ldr	r4, [r4, #4]
 800a3da:	e7b2      	b.n	800a342 <_malloc_r+0x32>
 800a3dc:	4634      	mov	r4, r6
 800a3de:	6876      	ldr	r6, [r6, #4]
 800a3e0:	e7b9      	b.n	800a356 <_malloc_r+0x46>
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	603b      	str	r3, [r7, #0]
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	f000 ffc4 	bl	800b374 <__malloc_unlock>
 800a3ec:	e7a1      	b.n	800a332 <_malloc_r+0x22>
 800a3ee:	6025      	str	r5, [r4, #0]
 800a3f0:	e7de      	b.n	800a3b0 <_malloc_r+0xa0>
 800a3f2:	bf00      	nop
 800a3f4:	200004e4 	.word	0x200004e4

0800a3f8 <__ssputs_r>:
 800a3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3fc:	688e      	ldr	r6, [r1, #8]
 800a3fe:	429e      	cmp	r6, r3
 800a400:	4682      	mov	sl, r0
 800a402:	460c      	mov	r4, r1
 800a404:	4690      	mov	r8, r2
 800a406:	461f      	mov	r7, r3
 800a408:	d838      	bhi.n	800a47c <__ssputs_r+0x84>
 800a40a:	898a      	ldrh	r2, [r1, #12]
 800a40c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a410:	d032      	beq.n	800a478 <__ssputs_r+0x80>
 800a412:	6825      	ldr	r5, [r4, #0]
 800a414:	6909      	ldr	r1, [r1, #16]
 800a416:	eba5 0901 	sub.w	r9, r5, r1
 800a41a:	6965      	ldr	r5, [r4, #20]
 800a41c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a420:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a424:	3301      	adds	r3, #1
 800a426:	444b      	add	r3, r9
 800a428:	106d      	asrs	r5, r5, #1
 800a42a:	429d      	cmp	r5, r3
 800a42c:	bf38      	it	cc
 800a42e:	461d      	movcc	r5, r3
 800a430:	0553      	lsls	r3, r2, #21
 800a432:	d531      	bpl.n	800a498 <__ssputs_r+0xa0>
 800a434:	4629      	mov	r1, r5
 800a436:	f7ff ff6b 	bl	800a310 <_malloc_r>
 800a43a:	4606      	mov	r6, r0
 800a43c:	b950      	cbnz	r0, 800a454 <__ssputs_r+0x5c>
 800a43e:	230c      	movs	r3, #12
 800a440:	f8ca 3000 	str.w	r3, [sl]
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a44a:	81a3      	strh	r3, [r4, #12]
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a454:	6921      	ldr	r1, [r4, #16]
 800a456:	464a      	mov	r2, r9
 800a458:	f7ff fa08 	bl	800986c <memcpy>
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a466:	81a3      	strh	r3, [r4, #12]
 800a468:	6126      	str	r6, [r4, #16]
 800a46a:	6165      	str	r5, [r4, #20]
 800a46c:	444e      	add	r6, r9
 800a46e:	eba5 0509 	sub.w	r5, r5, r9
 800a472:	6026      	str	r6, [r4, #0]
 800a474:	60a5      	str	r5, [r4, #8]
 800a476:	463e      	mov	r6, r7
 800a478:	42be      	cmp	r6, r7
 800a47a:	d900      	bls.n	800a47e <__ssputs_r+0x86>
 800a47c:	463e      	mov	r6, r7
 800a47e:	6820      	ldr	r0, [r4, #0]
 800a480:	4632      	mov	r2, r6
 800a482:	4641      	mov	r1, r8
 800a484:	f000 ff56 	bl	800b334 <memmove>
 800a488:	68a3      	ldr	r3, [r4, #8]
 800a48a:	1b9b      	subs	r3, r3, r6
 800a48c:	60a3      	str	r3, [r4, #8]
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	4433      	add	r3, r6
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	2000      	movs	r0, #0
 800a496:	e7db      	b.n	800a450 <__ssputs_r+0x58>
 800a498:	462a      	mov	r2, r5
 800a49a:	f000 ff71 	bl	800b380 <_realloc_r>
 800a49e:	4606      	mov	r6, r0
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d1e1      	bne.n	800a468 <__ssputs_r+0x70>
 800a4a4:	6921      	ldr	r1, [r4, #16]
 800a4a6:	4650      	mov	r0, sl
 800a4a8:	f7ff fec6 	bl	800a238 <_free_r>
 800a4ac:	e7c7      	b.n	800a43e <__ssputs_r+0x46>
	...

0800a4b0 <_svfiprintf_r>:
 800a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	4698      	mov	r8, r3
 800a4b6:	898b      	ldrh	r3, [r1, #12]
 800a4b8:	061b      	lsls	r3, r3, #24
 800a4ba:	b09d      	sub	sp, #116	; 0x74
 800a4bc:	4607      	mov	r7, r0
 800a4be:	460d      	mov	r5, r1
 800a4c0:	4614      	mov	r4, r2
 800a4c2:	d50e      	bpl.n	800a4e2 <_svfiprintf_r+0x32>
 800a4c4:	690b      	ldr	r3, [r1, #16]
 800a4c6:	b963      	cbnz	r3, 800a4e2 <_svfiprintf_r+0x32>
 800a4c8:	2140      	movs	r1, #64	; 0x40
 800a4ca:	f7ff ff21 	bl	800a310 <_malloc_r>
 800a4ce:	6028      	str	r0, [r5, #0]
 800a4d0:	6128      	str	r0, [r5, #16]
 800a4d2:	b920      	cbnz	r0, 800a4de <_svfiprintf_r+0x2e>
 800a4d4:	230c      	movs	r3, #12
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4dc:	e0d1      	b.n	800a682 <_svfiprintf_r+0x1d2>
 800a4de:	2340      	movs	r3, #64	; 0x40
 800a4e0:	616b      	str	r3, [r5, #20]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e6:	2320      	movs	r3, #32
 800a4e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4f0:	2330      	movs	r3, #48	; 0x30
 800a4f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a69c <_svfiprintf_r+0x1ec>
 800a4f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4fa:	f04f 0901 	mov.w	r9, #1
 800a4fe:	4623      	mov	r3, r4
 800a500:	469a      	mov	sl, r3
 800a502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a506:	b10a      	cbz	r2, 800a50c <_svfiprintf_r+0x5c>
 800a508:	2a25      	cmp	r2, #37	; 0x25
 800a50a:	d1f9      	bne.n	800a500 <_svfiprintf_r+0x50>
 800a50c:	ebba 0b04 	subs.w	fp, sl, r4
 800a510:	d00b      	beq.n	800a52a <_svfiprintf_r+0x7a>
 800a512:	465b      	mov	r3, fp
 800a514:	4622      	mov	r2, r4
 800a516:	4629      	mov	r1, r5
 800a518:	4638      	mov	r0, r7
 800a51a:	f7ff ff6d 	bl	800a3f8 <__ssputs_r>
 800a51e:	3001      	adds	r0, #1
 800a520:	f000 80aa 	beq.w	800a678 <_svfiprintf_r+0x1c8>
 800a524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a526:	445a      	add	r2, fp
 800a528:	9209      	str	r2, [sp, #36]	; 0x24
 800a52a:	f89a 3000 	ldrb.w	r3, [sl]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 80a2 	beq.w	800a678 <_svfiprintf_r+0x1c8>
 800a534:	2300      	movs	r3, #0
 800a536:	f04f 32ff 	mov.w	r2, #4294967295
 800a53a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a53e:	f10a 0a01 	add.w	sl, sl, #1
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	9307      	str	r3, [sp, #28]
 800a546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a54a:	931a      	str	r3, [sp, #104]	; 0x68
 800a54c:	4654      	mov	r4, sl
 800a54e:	2205      	movs	r2, #5
 800a550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a554:	4851      	ldr	r0, [pc, #324]	; (800a69c <_svfiprintf_r+0x1ec>)
 800a556:	f7f5 fe63 	bl	8000220 <memchr>
 800a55a:	9a04      	ldr	r2, [sp, #16]
 800a55c:	b9d8      	cbnz	r0, 800a596 <_svfiprintf_r+0xe6>
 800a55e:	06d0      	lsls	r0, r2, #27
 800a560:	bf44      	itt	mi
 800a562:	2320      	movmi	r3, #32
 800a564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a568:	0711      	lsls	r1, r2, #28
 800a56a:	bf44      	itt	mi
 800a56c:	232b      	movmi	r3, #43	; 0x2b
 800a56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a572:	f89a 3000 	ldrb.w	r3, [sl]
 800a576:	2b2a      	cmp	r3, #42	; 0x2a
 800a578:	d015      	beq.n	800a5a6 <_svfiprintf_r+0xf6>
 800a57a:	9a07      	ldr	r2, [sp, #28]
 800a57c:	4654      	mov	r4, sl
 800a57e:	2000      	movs	r0, #0
 800a580:	f04f 0c0a 	mov.w	ip, #10
 800a584:	4621      	mov	r1, r4
 800a586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a58a:	3b30      	subs	r3, #48	; 0x30
 800a58c:	2b09      	cmp	r3, #9
 800a58e:	d94e      	bls.n	800a62e <_svfiprintf_r+0x17e>
 800a590:	b1b0      	cbz	r0, 800a5c0 <_svfiprintf_r+0x110>
 800a592:	9207      	str	r2, [sp, #28]
 800a594:	e014      	b.n	800a5c0 <_svfiprintf_r+0x110>
 800a596:	eba0 0308 	sub.w	r3, r0, r8
 800a59a:	fa09 f303 	lsl.w	r3, r9, r3
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	9304      	str	r3, [sp, #16]
 800a5a2:	46a2      	mov	sl, r4
 800a5a4:	e7d2      	b.n	800a54c <_svfiprintf_r+0x9c>
 800a5a6:	9b03      	ldr	r3, [sp, #12]
 800a5a8:	1d19      	adds	r1, r3, #4
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	9103      	str	r1, [sp, #12]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	bfbb      	ittet	lt
 800a5b2:	425b      	neglt	r3, r3
 800a5b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5b8:	9307      	strge	r3, [sp, #28]
 800a5ba:	9307      	strlt	r3, [sp, #28]
 800a5bc:	bfb8      	it	lt
 800a5be:	9204      	strlt	r2, [sp, #16]
 800a5c0:	7823      	ldrb	r3, [r4, #0]
 800a5c2:	2b2e      	cmp	r3, #46	; 0x2e
 800a5c4:	d10c      	bne.n	800a5e0 <_svfiprintf_r+0x130>
 800a5c6:	7863      	ldrb	r3, [r4, #1]
 800a5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ca:	d135      	bne.n	800a638 <_svfiprintf_r+0x188>
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	1d1a      	adds	r2, r3, #4
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	9203      	str	r2, [sp, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	bfb8      	it	lt
 800a5d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5dc:	3402      	adds	r4, #2
 800a5de:	9305      	str	r3, [sp, #20]
 800a5e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6ac <_svfiprintf_r+0x1fc>
 800a5e4:	7821      	ldrb	r1, [r4, #0]
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	4650      	mov	r0, sl
 800a5ea:	f7f5 fe19 	bl	8000220 <memchr>
 800a5ee:	b140      	cbz	r0, 800a602 <_svfiprintf_r+0x152>
 800a5f0:	2340      	movs	r3, #64	; 0x40
 800a5f2:	eba0 000a 	sub.w	r0, r0, sl
 800a5f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a5fa:	9b04      	ldr	r3, [sp, #16]
 800a5fc:	4303      	orrs	r3, r0
 800a5fe:	3401      	adds	r4, #1
 800a600:	9304      	str	r3, [sp, #16]
 800a602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a606:	4826      	ldr	r0, [pc, #152]	; (800a6a0 <_svfiprintf_r+0x1f0>)
 800a608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a60c:	2206      	movs	r2, #6
 800a60e:	f7f5 fe07 	bl	8000220 <memchr>
 800a612:	2800      	cmp	r0, #0
 800a614:	d038      	beq.n	800a688 <_svfiprintf_r+0x1d8>
 800a616:	4b23      	ldr	r3, [pc, #140]	; (800a6a4 <_svfiprintf_r+0x1f4>)
 800a618:	bb1b      	cbnz	r3, 800a662 <_svfiprintf_r+0x1b2>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	3307      	adds	r3, #7
 800a61e:	f023 0307 	bic.w	r3, r3, #7
 800a622:	3308      	adds	r3, #8
 800a624:	9303      	str	r3, [sp, #12]
 800a626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a628:	4433      	add	r3, r6
 800a62a:	9309      	str	r3, [sp, #36]	; 0x24
 800a62c:	e767      	b.n	800a4fe <_svfiprintf_r+0x4e>
 800a62e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a632:	460c      	mov	r4, r1
 800a634:	2001      	movs	r0, #1
 800a636:	e7a5      	b.n	800a584 <_svfiprintf_r+0xd4>
 800a638:	2300      	movs	r3, #0
 800a63a:	3401      	adds	r4, #1
 800a63c:	9305      	str	r3, [sp, #20]
 800a63e:	4619      	mov	r1, r3
 800a640:	f04f 0c0a 	mov.w	ip, #10
 800a644:	4620      	mov	r0, r4
 800a646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a64a:	3a30      	subs	r2, #48	; 0x30
 800a64c:	2a09      	cmp	r2, #9
 800a64e:	d903      	bls.n	800a658 <_svfiprintf_r+0x1a8>
 800a650:	2b00      	cmp	r3, #0
 800a652:	d0c5      	beq.n	800a5e0 <_svfiprintf_r+0x130>
 800a654:	9105      	str	r1, [sp, #20]
 800a656:	e7c3      	b.n	800a5e0 <_svfiprintf_r+0x130>
 800a658:	fb0c 2101 	mla	r1, ip, r1, r2
 800a65c:	4604      	mov	r4, r0
 800a65e:	2301      	movs	r3, #1
 800a660:	e7f0      	b.n	800a644 <_svfiprintf_r+0x194>
 800a662:	ab03      	add	r3, sp, #12
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	462a      	mov	r2, r5
 800a668:	4b0f      	ldr	r3, [pc, #60]	; (800a6a8 <_svfiprintf_r+0x1f8>)
 800a66a:	a904      	add	r1, sp, #16
 800a66c:	4638      	mov	r0, r7
 800a66e:	f7fc f96d 	bl	800694c <_printf_float>
 800a672:	1c42      	adds	r2, r0, #1
 800a674:	4606      	mov	r6, r0
 800a676:	d1d6      	bne.n	800a626 <_svfiprintf_r+0x176>
 800a678:	89ab      	ldrh	r3, [r5, #12]
 800a67a:	065b      	lsls	r3, r3, #25
 800a67c:	f53f af2c 	bmi.w	800a4d8 <_svfiprintf_r+0x28>
 800a680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a682:	b01d      	add	sp, #116	; 0x74
 800a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	ab03      	add	r3, sp, #12
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	462a      	mov	r2, r5
 800a68e:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <_svfiprintf_r+0x1f8>)
 800a690:	a904      	add	r1, sp, #16
 800a692:	4638      	mov	r0, r7
 800a694:	f7fc fbfe 	bl	8006e94 <_printf_i>
 800a698:	e7eb      	b.n	800a672 <_svfiprintf_r+0x1c2>
 800a69a:	bf00      	nop
 800a69c:	0800be0c 	.word	0x0800be0c
 800a6a0:	0800be16 	.word	0x0800be16
 800a6a4:	0800694d 	.word	0x0800694d
 800a6a8:	0800a3f9 	.word	0x0800a3f9
 800a6ac:	0800be12 	.word	0x0800be12

0800a6b0 <_sungetc_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	1c4b      	adds	r3, r1, #1
 800a6b4:	4614      	mov	r4, r2
 800a6b6:	d103      	bne.n	800a6c0 <_sungetc_r+0x10>
 800a6b8:	f04f 35ff 	mov.w	r5, #4294967295
 800a6bc:	4628      	mov	r0, r5
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	8993      	ldrh	r3, [r2, #12]
 800a6c2:	f023 0320 	bic.w	r3, r3, #32
 800a6c6:	8193      	strh	r3, [r2, #12]
 800a6c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6ca:	6852      	ldr	r2, [r2, #4]
 800a6cc:	b2cd      	uxtb	r5, r1
 800a6ce:	b18b      	cbz	r3, 800a6f4 <_sungetc_r+0x44>
 800a6d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	dd08      	ble.n	800a6e8 <_sungetc_r+0x38>
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	1e5a      	subs	r2, r3, #1
 800a6da:	6022      	str	r2, [r4, #0]
 800a6dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a6e0:	6863      	ldr	r3, [r4, #4]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	6063      	str	r3, [r4, #4]
 800a6e6:	e7e9      	b.n	800a6bc <_sungetc_r+0xc>
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	f000 fbf1 	bl	800aed0 <__submore>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d0f1      	beq.n	800a6d6 <_sungetc_r+0x26>
 800a6f2:	e7e1      	b.n	800a6b8 <_sungetc_r+0x8>
 800a6f4:	6921      	ldr	r1, [r4, #16]
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	b151      	cbz	r1, 800a710 <_sungetc_r+0x60>
 800a6fa:	4299      	cmp	r1, r3
 800a6fc:	d208      	bcs.n	800a710 <_sungetc_r+0x60>
 800a6fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a702:	42a9      	cmp	r1, r5
 800a704:	d104      	bne.n	800a710 <_sungetc_r+0x60>
 800a706:	3b01      	subs	r3, #1
 800a708:	3201      	adds	r2, #1
 800a70a:	6023      	str	r3, [r4, #0]
 800a70c:	6062      	str	r2, [r4, #4]
 800a70e:	e7d5      	b.n	800a6bc <_sungetc_r+0xc>
 800a710:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a718:	6363      	str	r3, [r4, #52]	; 0x34
 800a71a:	2303      	movs	r3, #3
 800a71c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a71e:	4623      	mov	r3, r4
 800a720:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	2301      	movs	r3, #1
 800a728:	e7dc      	b.n	800a6e4 <_sungetc_r+0x34>

0800a72a <__ssrefill_r>:
 800a72a:	b510      	push	{r4, lr}
 800a72c:	460c      	mov	r4, r1
 800a72e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a730:	b169      	cbz	r1, 800a74e <__ssrefill_r+0x24>
 800a732:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a736:	4299      	cmp	r1, r3
 800a738:	d001      	beq.n	800a73e <__ssrefill_r+0x14>
 800a73a:	f7ff fd7d 	bl	800a238 <_free_r>
 800a73e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a740:	6063      	str	r3, [r4, #4]
 800a742:	2000      	movs	r0, #0
 800a744:	6360      	str	r0, [r4, #52]	; 0x34
 800a746:	b113      	cbz	r3, 800a74e <__ssrefill_r+0x24>
 800a748:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	bd10      	pop	{r4, pc}
 800a74e:	6923      	ldr	r3, [r4, #16]
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	2300      	movs	r3, #0
 800a754:	6063      	str	r3, [r4, #4]
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	f043 0320 	orr.w	r3, r3, #32
 800a75c:	81a3      	strh	r3, [r4, #12]
 800a75e:	f04f 30ff 	mov.w	r0, #4294967295
 800a762:	e7f3      	b.n	800a74c <__ssrefill_r+0x22>

0800a764 <__ssvfiscanf_r>:
 800a764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a768:	460c      	mov	r4, r1
 800a76a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a76e:	2100      	movs	r1, #0
 800a770:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a774:	49a6      	ldr	r1, [pc, #664]	; (800aa10 <__ssvfiscanf_r+0x2ac>)
 800a776:	91a0      	str	r1, [sp, #640]	; 0x280
 800a778:	f10d 0804 	add.w	r8, sp, #4
 800a77c:	49a5      	ldr	r1, [pc, #660]	; (800aa14 <__ssvfiscanf_r+0x2b0>)
 800a77e:	4fa6      	ldr	r7, [pc, #664]	; (800aa18 <__ssvfiscanf_r+0x2b4>)
 800a780:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800aa1c <__ssvfiscanf_r+0x2b8>
 800a784:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a788:	4606      	mov	r6, r0
 800a78a:	91a1      	str	r1, [sp, #644]	; 0x284
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	7813      	ldrb	r3, [r2, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 815a 	beq.w	800aa4a <__ssvfiscanf_r+0x2e6>
 800a796:	5dd9      	ldrb	r1, [r3, r7]
 800a798:	f011 0108 	ands.w	r1, r1, #8
 800a79c:	f102 0501 	add.w	r5, r2, #1
 800a7a0:	d019      	beq.n	800a7d6 <__ssvfiscanf_r+0x72>
 800a7a2:	6863      	ldr	r3, [r4, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dd0f      	ble.n	800a7c8 <__ssvfiscanf_r+0x64>
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	781a      	ldrb	r2, [r3, #0]
 800a7ac:	5cba      	ldrb	r2, [r7, r2]
 800a7ae:	0712      	lsls	r2, r2, #28
 800a7b0:	d401      	bmi.n	800a7b6 <__ssvfiscanf_r+0x52>
 800a7b2:	462a      	mov	r2, r5
 800a7b4:	e7eb      	b.n	800a78e <__ssvfiscanf_r+0x2a>
 800a7b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a7b8:	3201      	adds	r2, #1
 800a7ba:	9245      	str	r2, [sp, #276]	; 0x114
 800a7bc:	6862      	ldr	r2, [r4, #4]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	3a01      	subs	r2, #1
 800a7c2:	6062      	str	r2, [r4, #4]
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	e7ec      	b.n	800a7a2 <__ssvfiscanf_r+0x3e>
 800a7c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	4798      	blx	r3
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d0e9      	beq.n	800a7a8 <__ssvfiscanf_r+0x44>
 800a7d4:	e7ed      	b.n	800a7b2 <__ssvfiscanf_r+0x4e>
 800a7d6:	2b25      	cmp	r3, #37	; 0x25
 800a7d8:	d012      	beq.n	800a800 <__ssvfiscanf_r+0x9c>
 800a7da:	469a      	mov	sl, r3
 800a7dc:	6863      	ldr	r3, [r4, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f340 8091 	ble.w	800a906 <__ssvfiscanf_r+0x1a2>
 800a7e4:	6822      	ldr	r2, [r4, #0]
 800a7e6:	7813      	ldrb	r3, [r2, #0]
 800a7e8:	4553      	cmp	r3, sl
 800a7ea:	f040 812e 	bne.w	800aa4a <__ssvfiscanf_r+0x2e6>
 800a7ee:	6863      	ldr	r3, [r4, #4]
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	6063      	str	r3, [r4, #4]
 800a7f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a7f6:	3201      	adds	r2, #1
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	6022      	str	r2, [r4, #0]
 800a7fc:	9345      	str	r3, [sp, #276]	; 0x114
 800a7fe:	e7d8      	b.n	800a7b2 <__ssvfiscanf_r+0x4e>
 800a800:	9141      	str	r1, [sp, #260]	; 0x104
 800a802:	9143      	str	r1, [sp, #268]	; 0x10c
 800a804:	7853      	ldrb	r3, [r2, #1]
 800a806:	2b2a      	cmp	r3, #42	; 0x2a
 800a808:	bf02      	ittt	eq
 800a80a:	2310      	moveq	r3, #16
 800a80c:	1c95      	addeq	r5, r2, #2
 800a80e:	9341      	streq	r3, [sp, #260]	; 0x104
 800a810:	220a      	movs	r2, #10
 800a812:	46aa      	mov	sl, r5
 800a814:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a818:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a81c:	2b09      	cmp	r3, #9
 800a81e:	d91d      	bls.n	800a85c <__ssvfiscanf_r+0xf8>
 800a820:	487e      	ldr	r0, [pc, #504]	; (800aa1c <__ssvfiscanf_r+0x2b8>)
 800a822:	2203      	movs	r2, #3
 800a824:	f7f5 fcfc 	bl	8000220 <memchr>
 800a828:	b140      	cbz	r0, 800a83c <__ssvfiscanf_r+0xd8>
 800a82a:	2301      	movs	r3, #1
 800a82c:	eba0 0009 	sub.w	r0, r0, r9
 800a830:	fa03 f000 	lsl.w	r0, r3, r0
 800a834:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a836:	4318      	orrs	r0, r3
 800a838:	9041      	str	r0, [sp, #260]	; 0x104
 800a83a:	4655      	mov	r5, sl
 800a83c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a840:	2b78      	cmp	r3, #120	; 0x78
 800a842:	d806      	bhi.n	800a852 <__ssvfiscanf_r+0xee>
 800a844:	2b57      	cmp	r3, #87	; 0x57
 800a846:	d810      	bhi.n	800a86a <__ssvfiscanf_r+0x106>
 800a848:	2b25      	cmp	r3, #37	; 0x25
 800a84a:	d0c6      	beq.n	800a7da <__ssvfiscanf_r+0x76>
 800a84c:	d856      	bhi.n	800a8fc <__ssvfiscanf_r+0x198>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d064      	beq.n	800a91c <__ssvfiscanf_r+0x1b8>
 800a852:	2303      	movs	r3, #3
 800a854:	9347      	str	r3, [sp, #284]	; 0x11c
 800a856:	230a      	movs	r3, #10
 800a858:	9342      	str	r3, [sp, #264]	; 0x108
 800a85a:	e071      	b.n	800a940 <__ssvfiscanf_r+0x1dc>
 800a85c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a85e:	fb02 1103 	mla	r1, r2, r3, r1
 800a862:	3930      	subs	r1, #48	; 0x30
 800a864:	9143      	str	r1, [sp, #268]	; 0x10c
 800a866:	4655      	mov	r5, sl
 800a868:	e7d3      	b.n	800a812 <__ssvfiscanf_r+0xae>
 800a86a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a86e:	2a20      	cmp	r2, #32
 800a870:	d8ef      	bhi.n	800a852 <__ssvfiscanf_r+0xee>
 800a872:	a101      	add	r1, pc, #4	; (adr r1, 800a878 <__ssvfiscanf_r+0x114>)
 800a874:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a878:	0800a92b 	.word	0x0800a92b
 800a87c:	0800a853 	.word	0x0800a853
 800a880:	0800a853 	.word	0x0800a853
 800a884:	0800a989 	.word	0x0800a989
 800a888:	0800a853 	.word	0x0800a853
 800a88c:	0800a853 	.word	0x0800a853
 800a890:	0800a853 	.word	0x0800a853
 800a894:	0800a853 	.word	0x0800a853
 800a898:	0800a853 	.word	0x0800a853
 800a89c:	0800a853 	.word	0x0800a853
 800a8a0:	0800a853 	.word	0x0800a853
 800a8a4:	0800a99f 	.word	0x0800a99f
 800a8a8:	0800a975 	.word	0x0800a975
 800a8ac:	0800a903 	.word	0x0800a903
 800a8b0:	0800a903 	.word	0x0800a903
 800a8b4:	0800a903 	.word	0x0800a903
 800a8b8:	0800a853 	.word	0x0800a853
 800a8bc:	0800a979 	.word	0x0800a979
 800a8c0:	0800a853 	.word	0x0800a853
 800a8c4:	0800a853 	.word	0x0800a853
 800a8c8:	0800a853 	.word	0x0800a853
 800a8cc:	0800a853 	.word	0x0800a853
 800a8d0:	0800a9af 	.word	0x0800a9af
 800a8d4:	0800a981 	.word	0x0800a981
 800a8d8:	0800a923 	.word	0x0800a923
 800a8dc:	0800a853 	.word	0x0800a853
 800a8e0:	0800a853 	.word	0x0800a853
 800a8e4:	0800a9ab 	.word	0x0800a9ab
 800a8e8:	0800a853 	.word	0x0800a853
 800a8ec:	0800a975 	.word	0x0800a975
 800a8f0:	0800a853 	.word	0x0800a853
 800a8f4:	0800a853 	.word	0x0800a853
 800a8f8:	0800a92b 	.word	0x0800a92b
 800a8fc:	3b45      	subs	r3, #69	; 0x45
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d8a7      	bhi.n	800a852 <__ssvfiscanf_r+0xee>
 800a902:	2305      	movs	r3, #5
 800a904:	e01b      	b.n	800a93e <__ssvfiscanf_r+0x1da>
 800a906:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a908:	4621      	mov	r1, r4
 800a90a:	4630      	mov	r0, r6
 800a90c:	4798      	blx	r3
 800a90e:	2800      	cmp	r0, #0
 800a910:	f43f af68 	beq.w	800a7e4 <__ssvfiscanf_r+0x80>
 800a914:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a916:	2800      	cmp	r0, #0
 800a918:	f040 808d 	bne.w	800aa36 <__ssvfiscanf_r+0x2d2>
 800a91c:	f04f 30ff 	mov.w	r0, #4294967295
 800a920:	e08f      	b.n	800aa42 <__ssvfiscanf_r+0x2de>
 800a922:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a924:	f042 0220 	orr.w	r2, r2, #32
 800a928:	9241      	str	r2, [sp, #260]	; 0x104
 800a92a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a92c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a930:	9241      	str	r2, [sp, #260]	; 0x104
 800a932:	2210      	movs	r2, #16
 800a934:	2b6f      	cmp	r3, #111	; 0x6f
 800a936:	9242      	str	r2, [sp, #264]	; 0x108
 800a938:	bf34      	ite	cc
 800a93a:	2303      	movcc	r3, #3
 800a93c:	2304      	movcs	r3, #4
 800a93e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a940:	6863      	ldr	r3, [r4, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	dd42      	ble.n	800a9cc <__ssvfiscanf_r+0x268>
 800a946:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a948:	0659      	lsls	r1, r3, #25
 800a94a:	d404      	bmi.n	800a956 <__ssvfiscanf_r+0x1f2>
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	781a      	ldrb	r2, [r3, #0]
 800a950:	5cba      	ldrb	r2, [r7, r2]
 800a952:	0712      	lsls	r2, r2, #28
 800a954:	d441      	bmi.n	800a9da <__ssvfiscanf_r+0x276>
 800a956:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a958:	2b02      	cmp	r3, #2
 800a95a:	dc50      	bgt.n	800a9fe <__ssvfiscanf_r+0x29a>
 800a95c:	466b      	mov	r3, sp
 800a95e:	4622      	mov	r2, r4
 800a960:	a941      	add	r1, sp, #260	; 0x104
 800a962:	4630      	mov	r0, r6
 800a964:	f000 f876 	bl	800aa54 <_scanf_chars>
 800a968:	2801      	cmp	r0, #1
 800a96a:	d06e      	beq.n	800aa4a <__ssvfiscanf_r+0x2e6>
 800a96c:	2802      	cmp	r0, #2
 800a96e:	f47f af20 	bne.w	800a7b2 <__ssvfiscanf_r+0x4e>
 800a972:	e7cf      	b.n	800a914 <__ssvfiscanf_r+0x1b0>
 800a974:	220a      	movs	r2, #10
 800a976:	e7dd      	b.n	800a934 <__ssvfiscanf_r+0x1d0>
 800a978:	2300      	movs	r3, #0
 800a97a:	9342      	str	r3, [sp, #264]	; 0x108
 800a97c:	2303      	movs	r3, #3
 800a97e:	e7de      	b.n	800a93e <__ssvfiscanf_r+0x1da>
 800a980:	2308      	movs	r3, #8
 800a982:	9342      	str	r3, [sp, #264]	; 0x108
 800a984:	2304      	movs	r3, #4
 800a986:	e7da      	b.n	800a93e <__ssvfiscanf_r+0x1da>
 800a988:	4629      	mov	r1, r5
 800a98a:	4640      	mov	r0, r8
 800a98c:	f000 f9e0 	bl	800ad50 <__sccl>
 800a990:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a996:	9341      	str	r3, [sp, #260]	; 0x104
 800a998:	4605      	mov	r5, r0
 800a99a:	2301      	movs	r3, #1
 800a99c:	e7cf      	b.n	800a93e <__ssvfiscanf_r+0x1da>
 800a99e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a4:	9341      	str	r3, [sp, #260]	; 0x104
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	e7c9      	b.n	800a93e <__ssvfiscanf_r+0x1da>
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	e7c7      	b.n	800a93e <__ssvfiscanf_r+0x1da>
 800a9ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a9b0:	06c3      	lsls	r3, r0, #27
 800a9b2:	f53f aefe 	bmi.w	800a7b2 <__ssvfiscanf_r+0x4e>
 800a9b6:	9b00      	ldr	r3, [sp, #0]
 800a9b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a9ba:	1d19      	adds	r1, r3, #4
 800a9bc:	9100      	str	r1, [sp, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f010 0f01 	tst.w	r0, #1
 800a9c4:	bf14      	ite	ne
 800a9c6:	801a      	strhne	r2, [r3, #0]
 800a9c8:	601a      	streq	r2, [r3, #0]
 800a9ca:	e6f2      	b.n	800a7b2 <__ssvfiscanf_r+0x4e>
 800a9cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	4798      	blx	r3
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d0b6      	beq.n	800a946 <__ssvfiscanf_r+0x1e2>
 800a9d8:	e79c      	b.n	800a914 <__ssvfiscanf_r+0x1b0>
 800a9da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a9dc:	3201      	adds	r2, #1
 800a9de:	9245      	str	r2, [sp, #276]	; 0x114
 800a9e0:	6862      	ldr	r2, [r4, #4]
 800a9e2:	3a01      	subs	r2, #1
 800a9e4:	2a00      	cmp	r2, #0
 800a9e6:	6062      	str	r2, [r4, #4]
 800a9e8:	dd02      	ble.n	800a9f0 <__ssvfiscanf_r+0x28c>
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	e7ad      	b.n	800a94c <__ssvfiscanf_r+0x1e8>
 800a9f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	4798      	blx	r3
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d0a7      	beq.n	800a94c <__ssvfiscanf_r+0x1e8>
 800a9fc:	e78a      	b.n	800a914 <__ssvfiscanf_r+0x1b0>
 800a9fe:	2b04      	cmp	r3, #4
 800aa00:	dc0e      	bgt.n	800aa20 <__ssvfiscanf_r+0x2bc>
 800aa02:	466b      	mov	r3, sp
 800aa04:	4622      	mov	r2, r4
 800aa06:	a941      	add	r1, sp, #260	; 0x104
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f000 f87d 	bl	800ab08 <_scanf_i>
 800aa0e:	e7ab      	b.n	800a968 <__ssvfiscanf_r+0x204>
 800aa10:	0800a6b1 	.word	0x0800a6b1
 800aa14:	0800a72b 	.word	0x0800a72b
 800aa18:	0800baa9 	.word	0x0800baa9
 800aa1c:	0800be12 	.word	0x0800be12
 800aa20:	4b0b      	ldr	r3, [pc, #44]	; (800aa50 <__ssvfiscanf_r+0x2ec>)
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f43f aec5 	beq.w	800a7b2 <__ssvfiscanf_r+0x4e>
 800aa28:	466b      	mov	r3, sp
 800aa2a:	4622      	mov	r2, r4
 800aa2c:	a941      	add	r1, sp, #260	; 0x104
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f7fc fb56 	bl	80070e0 <_scanf_float>
 800aa34:	e798      	b.n	800a968 <__ssvfiscanf_r+0x204>
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aa3c:	bf18      	it	ne
 800aa3e:	f04f 30ff 	movne.w	r0, #4294967295
 800aa42:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800aa46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa4a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aa4c:	e7f9      	b.n	800aa42 <__ssvfiscanf_r+0x2de>
 800aa4e:	bf00      	nop
 800aa50:	080070e1 	.word	0x080070e1

0800aa54 <_scanf_chars>:
 800aa54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa58:	4615      	mov	r5, r2
 800aa5a:	688a      	ldr	r2, [r1, #8]
 800aa5c:	4680      	mov	r8, r0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	b932      	cbnz	r2, 800aa70 <_scanf_chars+0x1c>
 800aa62:	698a      	ldr	r2, [r1, #24]
 800aa64:	2a00      	cmp	r2, #0
 800aa66:	bf0c      	ite	eq
 800aa68:	2201      	moveq	r2, #1
 800aa6a:	f04f 32ff 	movne.w	r2, #4294967295
 800aa6e:	608a      	str	r2, [r1, #8]
 800aa70:	6822      	ldr	r2, [r4, #0]
 800aa72:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ab04 <_scanf_chars+0xb0>
 800aa76:	06d1      	lsls	r1, r2, #27
 800aa78:	bf5f      	itttt	pl
 800aa7a:	681a      	ldrpl	r2, [r3, #0]
 800aa7c:	1d11      	addpl	r1, r2, #4
 800aa7e:	6019      	strpl	r1, [r3, #0]
 800aa80:	6816      	ldrpl	r6, [r2, #0]
 800aa82:	2700      	movs	r7, #0
 800aa84:	69a0      	ldr	r0, [r4, #24]
 800aa86:	b188      	cbz	r0, 800aaac <_scanf_chars+0x58>
 800aa88:	2801      	cmp	r0, #1
 800aa8a:	d107      	bne.n	800aa9c <_scanf_chars+0x48>
 800aa8c:	682a      	ldr	r2, [r5, #0]
 800aa8e:	7811      	ldrb	r1, [r2, #0]
 800aa90:	6962      	ldr	r2, [r4, #20]
 800aa92:	5c52      	ldrb	r2, [r2, r1]
 800aa94:	b952      	cbnz	r2, 800aaac <_scanf_chars+0x58>
 800aa96:	2f00      	cmp	r7, #0
 800aa98:	d031      	beq.n	800aafe <_scanf_chars+0xaa>
 800aa9a:	e022      	b.n	800aae2 <_scanf_chars+0x8e>
 800aa9c:	2802      	cmp	r0, #2
 800aa9e:	d120      	bne.n	800aae2 <_scanf_chars+0x8e>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800aaa8:	071b      	lsls	r3, r3, #28
 800aaaa:	d41a      	bmi.n	800aae2 <_scanf_chars+0x8e>
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	06da      	lsls	r2, r3, #27
 800aab0:	bf5e      	ittt	pl
 800aab2:	682b      	ldrpl	r3, [r5, #0]
 800aab4:	781b      	ldrbpl	r3, [r3, #0]
 800aab6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aaba:	682a      	ldr	r2, [r5, #0]
 800aabc:	686b      	ldr	r3, [r5, #4]
 800aabe:	3201      	adds	r2, #1
 800aac0:	602a      	str	r2, [r5, #0]
 800aac2:	68a2      	ldr	r2, [r4, #8]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	3a01      	subs	r2, #1
 800aac8:	606b      	str	r3, [r5, #4]
 800aaca:	3701      	adds	r7, #1
 800aacc:	60a2      	str	r2, [r4, #8]
 800aace:	b142      	cbz	r2, 800aae2 <_scanf_chars+0x8e>
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	dcd7      	bgt.n	800aa84 <_scanf_chars+0x30>
 800aad4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aad8:	4629      	mov	r1, r5
 800aada:	4640      	mov	r0, r8
 800aadc:	4798      	blx	r3
 800aade:	2800      	cmp	r0, #0
 800aae0:	d0d0      	beq.n	800aa84 <_scanf_chars+0x30>
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	f013 0310 	ands.w	r3, r3, #16
 800aae8:	d105      	bne.n	800aaf6 <_scanf_chars+0xa2>
 800aaea:	68e2      	ldr	r2, [r4, #12]
 800aaec:	3201      	adds	r2, #1
 800aaee:	60e2      	str	r2, [r4, #12]
 800aaf0:	69a2      	ldr	r2, [r4, #24]
 800aaf2:	b102      	cbz	r2, 800aaf6 <_scanf_chars+0xa2>
 800aaf4:	7033      	strb	r3, [r6, #0]
 800aaf6:	6923      	ldr	r3, [r4, #16]
 800aaf8:	443b      	add	r3, r7
 800aafa:	6123      	str	r3, [r4, #16]
 800aafc:	2000      	movs	r0, #0
 800aafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab02:	bf00      	nop
 800ab04:	0800baa9 	.word	0x0800baa9

0800ab08 <_scanf_i>:
 800ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0c:	4698      	mov	r8, r3
 800ab0e:	4b76      	ldr	r3, [pc, #472]	; (800ace8 <_scanf_i+0x1e0>)
 800ab10:	460c      	mov	r4, r1
 800ab12:	4682      	mov	sl, r0
 800ab14:	4616      	mov	r6, r2
 800ab16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	ab03      	add	r3, sp, #12
 800ab1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ab22:	4b72      	ldr	r3, [pc, #456]	; (800acec <_scanf_i+0x1e4>)
 800ab24:	69a1      	ldr	r1, [r4, #24]
 800ab26:	4a72      	ldr	r2, [pc, #456]	; (800acf0 <_scanf_i+0x1e8>)
 800ab28:	2903      	cmp	r1, #3
 800ab2a:	bf18      	it	ne
 800ab2c:	461a      	movne	r2, r3
 800ab2e:	68a3      	ldr	r3, [r4, #8]
 800ab30:	9201      	str	r2, [sp, #4]
 800ab32:	1e5a      	subs	r2, r3, #1
 800ab34:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ab38:	bf88      	it	hi
 800ab3a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ab3e:	4627      	mov	r7, r4
 800ab40:	bf82      	ittt	hi
 800ab42:	eb03 0905 	addhi.w	r9, r3, r5
 800ab46:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ab4a:	60a3      	strhi	r3, [r4, #8]
 800ab4c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ab50:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ab54:	bf98      	it	ls
 800ab56:	f04f 0900 	movls.w	r9, #0
 800ab5a:	6023      	str	r3, [r4, #0]
 800ab5c:	463d      	mov	r5, r7
 800ab5e:	f04f 0b00 	mov.w	fp, #0
 800ab62:	6831      	ldr	r1, [r6, #0]
 800ab64:	ab03      	add	r3, sp, #12
 800ab66:	7809      	ldrb	r1, [r1, #0]
 800ab68:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ab6c:	2202      	movs	r2, #2
 800ab6e:	f7f5 fb57 	bl	8000220 <memchr>
 800ab72:	b328      	cbz	r0, 800abc0 <_scanf_i+0xb8>
 800ab74:	f1bb 0f01 	cmp.w	fp, #1
 800ab78:	d159      	bne.n	800ac2e <_scanf_i+0x126>
 800ab7a:	6862      	ldr	r2, [r4, #4]
 800ab7c:	b92a      	cbnz	r2, 800ab8a <_scanf_i+0x82>
 800ab7e:	6822      	ldr	r2, [r4, #0]
 800ab80:	2308      	movs	r3, #8
 800ab82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab86:	6063      	str	r3, [r4, #4]
 800ab88:	6022      	str	r2, [r4, #0]
 800ab8a:	6822      	ldr	r2, [r4, #0]
 800ab8c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ab90:	6022      	str	r2, [r4, #0]
 800ab92:	68a2      	ldr	r2, [r4, #8]
 800ab94:	1e51      	subs	r1, r2, #1
 800ab96:	60a1      	str	r1, [r4, #8]
 800ab98:	b192      	cbz	r2, 800abc0 <_scanf_i+0xb8>
 800ab9a:	6832      	ldr	r2, [r6, #0]
 800ab9c:	1c51      	adds	r1, r2, #1
 800ab9e:	6031      	str	r1, [r6, #0]
 800aba0:	7812      	ldrb	r2, [r2, #0]
 800aba2:	f805 2b01 	strb.w	r2, [r5], #1
 800aba6:	6872      	ldr	r2, [r6, #4]
 800aba8:	3a01      	subs	r2, #1
 800abaa:	2a00      	cmp	r2, #0
 800abac:	6072      	str	r2, [r6, #4]
 800abae:	dc07      	bgt.n	800abc0 <_scanf_i+0xb8>
 800abb0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800abb4:	4631      	mov	r1, r6
 800abb6:	4650      	mov	r0, sl
 800abb8:	4790      	blx	r2
 800abba:	2800      	cmp	r0, #0
 800abbc:	f040 8085 	bne.w	800acca <_scanf_i+0x1c2>
 800abc0:	f10b 0b01 	add.w	fp, fp, #1
 800abc4:	f1bb 0f03 	cmp.w	fp, #3
 800abc8:	d1cb      	bne.n	800ab62 <_scanf_i+0x5a>
 800abca:	6863      	ldr	r3, [r4, #4]
 800abcc:	b90b      	cbnz	r3, 800abd2 <_scanf_i+0xca>
 800abce:	230a      	movs	r3, #10
 800abd0:	6063      	str	r3, [r4, #4]
 800abd2:	6863      	ldr	r3, [r4, #4]
 800abd4:	4947      	ldr	r1, [pc, #284]	; (800acf4 <_scanf_i+0x1ec>)
 800abd6:	6960      	ldr	r0, [r4, #20]
 800abd8:	1ac9      	subs	r1, r1, r3
 800abda:	f000 f8b9 	bl	800ad50 <__sccl>
 800abde:	f04f 0b00 	mov.w	fp, #0
 800abe2:	68a3      	ldr	r3, [r4, #8]
 800abe4:	6822      	ldr	r2, [r4, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d03d      	beq.n	800ac66 <_scanf_i+0x15e>
 800abea:	6831      	ldr	r1, [r6, #0]
 800abec:	6960      	ldr	r0, [r4, #20]
 800abee:	f891 c000 	ldrb.w	ip, [r1]
 800abf2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d035      	beq.n	800ac66 <_scanf_i+0x15e>
 800abfa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800abfe:	d124      	bne.n	800ac4a <_scanf_i+0x142>
 800ac00:	0510      	lsls	r0, r2, #20
 800ac02:	d522      	bpl.n	800ac4a <_scanf_i+0x142>
 800ac04:	f10b 0b01 	add.w	fp, fp, #1
 800ac08:	f1b9 0f00 	cmp.w	r9, #0
 800ac0c:	d003      	beq.n	800ac16 <_scanf_i+0x10e>
 800ac0e:	3301      	adds	r3, #1
 800ac10:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac14:	60a3      	str	r3, [r4, #8]
 800ac16:	6873      	ldr	r3, [r6, #4]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	6073      	str	r3, [r6, #4]
 800ac1e:	dd1b      	ble.n	800ac58 <_scanf_i+0x150>
 800ac20:	6833      	ldr	r3, [r6, #0]
 800ac22:	3301      	adds	r3, #1
 800ac24:	6033      	str	r3, [r6, #0]
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	60a3      	str	r3, [r4, #8]
 800ac2c:	e7d9      	b.n	800abe2 <_scanf_i+0xda>
 800ac2e:	f1bb 0f02 	cmp.w	fp, #2
 800ac32:	d1ae      	bne.n	800ab92 <_scanf_i+0x8a>
 800ac34:	6822      	ldr	r2, [r4, #0]
 800ac36:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ac3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ac3e:	d1bf      	bne.n	800abc0 <_scanf_i+0xb8>
 800ac40:	2310      	movs	r3, #16
 800ac42:	6063      	str	r3, [r4, #4]
 800ac44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac48:	e7a2      	b.n	800ab90 <_scanf_i+0x88>
 800ac4a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ac4e:	6022      	str	r2, [r4, #0]
 800ac50:	780b      	ldrb	r3, [r1, #0]
 800ac52:	f805 3b01 	strb.w	r3, [r5], #1
 800ac56:	e7de      	b.n	800ac16 <_scanf_i+0x10e>
 800ac58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4650      	mov	r0, sl
 800ac60:	4798      	blx	r3
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d0df      	beq.n	800ac26 <_scanf_i+0x11e>
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	05db      	lsls	r3, r3, #23
 800ac6a:	d50d      	bpl.n	800ac88 <_scanf_i+0x180>
 800ac6c:	42bd      	cmp	r5, r7
 800ac6e:	d909      	bls.n	800ac84 <_scanf_i+0x17c>
 800ac70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ac74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac78:	4632      	mov	r2, r6
 800ac7a:	4650      	mov	r0, sl
 800ac7c:	4798      	blx	r3
 800ac7e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ac82:	464d      	mov	r5, r9
 800ac84:	42bd      	cmp	r5, r7
 800ac86:	d02d      	beq.n	800ace4 <_scanf_i+0x1dc>
 800ac88:	6822      	ldr	r2, [r4, #0]
 800ac8a:	f012 0210 	ands.w	r2, r2, #16
 800ac8e:	d113      	bne.n	800acb8 <_scanf_i+0x1b0>
 800ac90:	702a      	strb	r2, [r5, #0]
 800ac92:	6863      	ldr	r3, [r4, #4]
 800ac94:	9e01      	ldr	r6, [sp, #4]
 800ac96:	4639      	mov	r1, r7
 800ac98:	4650      	mov	r0, sl
 800ac9a:	47b0      	blx	r6
 800ac9c:	6821      	ldr	r1, [r4, #0]
 800ac9e:	f8d8 3000 	ldr.w	r3, [r8]
 800aca2:	f011 0f20 	tst.w	r1, #32
 800aca6:	d013      	beq.n	800acd0 <_scanf_i+0x1c8>
 800aca8:	1d1a      	adds	r2, r3, #4
 800acaa:	f8c8 2000 	str.w	r2, [r8]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	6018      	str	r0, [r3, #0]
 800acb2:	68e3      	ldr	r3, [r4, #12]
 800acb4:	3301      	adds	r3, #1
 800acb6:	60e3      	str	r3, [r4, #12]
 800acb8:	1bed      	subs	r5, r5, r7
 800acba:	44ab      	add	fp, r5
 800acbc:	6925      	ldr	r5, [r4, #16]
 800acbe:	445d      	add	r5, fp
 800acc0:	6125      	str	r5, [r4, #16]
 800acc2:	2000      	movs	r0, #0
 800acc4:	b007      	add	sp, #28
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	f04f 0b00 	mov.w	fp, #0
 800acce:	e7ca      	b.n	800ac66 <_scanf_i+0x15e>
 800acd0:	1d1a      	adds	r2, r3, #4
 800acd2:	f8c8 2000 	str.w	r2, [r8]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f011 0f01 	tst.w	r1, #1
 800acdc:	bf14      	ite	ne
 800acde:	8018      	strhne	r0, [r3, #0]
 800ace0:	6018      	streq	r0, [r3, #0]
 800ace2:	e7e6      	b.n	800acb2 <_scanf_i+0x1aa>
 800ace4:	2001      	movs	r0, #1
 800ace6:	e7ed      	b.n	800acc4 <_scanf_i+0x1bc>
 800ace8:	0800b9f4 	.word	0x0800b9f4
 800acec:	0800aecd 	.word	0x0800aecd
 800acf0:	080083ed 	.word	0x080083ed
 800acf4:	0800be36 	.word	0x0800be36

0800acf8 <_read_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d07      	ldr	r5, [pc, #28]	; (800ad18 <_read_r+0x20>)
 800acfc:	4604      	mov	r4, r0
 800acfe:	4608      	mov	r0, r1
 800ad00:	4611      	mov	r1, r2
 800ad02:	2200      	movs	r2, #0
 800ad04:	602a      	str	r2, [r5, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	f7f6 fef8 	bl	8001afc <_read>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d102      	bne.n	800ad16 <_read_r+0x1e>
 800ad10:	682b      	ldr	r3, [r5, #0]
 800ad12:	b103      	cbz	r3, 800ad16 <_read_r+0x1e>
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	200004ec 	.word	0x200004ec
 800ad1c:	00000000 	.word	0x00000000

0800ad20 <nan>:
 800ad20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad28 <nan+0x8>
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	00000000 	.word	0x00000000
 800ad2c:	7ff80000 	.word	0x7ff80000

0800ad30 <_sbrk_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d06      	ldr	r5, [pc, #24]	; (800ad4c <_sbrk_r+0x1c>)
 800ad34:	2300      	movs	r3, #0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	f7f6 ff4c 	bl	8001bd8 <_sbrk>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d102      	bne.n	800ad4a <_sbrk_r+0x1a>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	b103      	cbz	r3, 800ad4a <_sbrk_r+0x1a>
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	200004ec 	.word	0x200004ec

0800ad50 <__sccl>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	780b      	ldrb	r3, [r1, #0]
 800ad54:	4604      	mov	r4, r0
 800ad56:	2b5e      	cmp	r3, #94	; 0x5e
 800ad58:	bf0b      	itete	eq
 800ad5a:	784b      	ldrbeq	r3, [r1, #1]
 800ad5c:	1c48      	addne	r0, r1, #1
 800ad5e:	1c88      	addeq	r0, r1, #2
 800ad60:	2200      	movne	r2, #0
 800ad62:	bf08      	it	eq
 800ad64:	2201      	moveq	r2, #1
 800ad66:	1e61      	subs	r1, r4, #1
 800ad68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ad6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ad70:	42a9      	cmp	r1, r5
 800ad72:	d1fb      	bne.n	800ad6c <__sccl+0x1c>
 800ad74:	b90b      	cbnz	r3, 800ad7a <__sccl+0x2a>
 800ad76:	3801      	subs	r0, #1
 800ad78:	bd70      	pop	{r4, r5, r6, pc}
 800ad7a:	f082 0201 	eor.w	r2, r2, #1
 800ad7e:	54e2      	strb	r2, [r4, r3]
 800ad80:	4605      	mov	r5, r0
 800ad82:	4628      	mov	r0, r5
 800ad84:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ad88:	292d      	cmp	r1, #45	; 0x2d
 800ad8a:	d006      	beq.n	800ad9a <__sccl+0x4a>
 800ad8c:	295d      	cmp	r1, #93	; 0x5d
 800ad8e:	d0f3      	beq.n	800ad78 <__sccl+0x28>
 800ad90:	b909      	cbnz	r1, 800ad96 <__sccl+0x46>
 800ad92:	4628      	mov	r0, r5
 800ad94:	e7f0      	b.n	800ad78 <__sccl+0x28>
 800ad96:	460b      	mov	r3, r1
 800ad98:	e7f1      	b.n	800ad7e <__sccl+0x2e>
 800ad9a:	786e      	ldrb	r6, [r5, #1]
 800ad9c:	2e5d      	cmp	r6, #93	; 0x5d
 800ad9e:	d0fa      	beq.n	800ad96 <__sccl+0x46>
 800ada0:	42b3      	cmp	r3, r6
 800ada2:	dcf8      	bgt.n	800ad96 <__sccl+0x46>
 800ada4:	3502      	adds	r5, #2
 800ada6:	4619      	mov	r1, r3
 800ada8:	3101      	adds	r1, #1
 800adaa:	428e      	cmp	r6, r1
 800adac:	5462      	strb	r2, [r4, r1]
 800adae:	dcfb      	bgt.n	800ada8 <__sccl+0x58>
 800adb0:	1af1      	subs	r1, r6, r3
 800adb2:	3901      	subs	r1, #1
 800adb4:	1c58      	adds	r0, r3, #1
 800adb6:	42b3      	cmp	r3, r6
 800adb8:	bfa8      	it	ge
 800adba:	2100      	movge	r1, #0
 800adbc:	1843      	adds	r3, r0, r1
 800adbe:	e7e0      	b.n	800ad82 <__sccl+0x32>

0800adc0 <strncmp>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	b17a      	cbz	r2, 800ade4 <strncmp+0x24>
 800adc4:	4603      	mov	r3, r0
 800adc6:	3901      	subs	r1, #1
 800adc8:	1884      	adds	r4, r0, r2
 800adca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800adce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800add2:	4290      	cmp	r0, r2
 800add4:	d101      	bne.n	800adda <strncmp+0x1a>
 800add6:	42a3      	cmp	r3, r4
 800add8:	d101      	bne.n	800adde <strncmp+0x1e>
 800adda:	1a80      	subs	r0, r0, r2
 800addc:	bd10      	pop	{r4, pc}
 800adde:	2800      	cmp	r0, #0
 800ade0:	d1f3      	bne.n	800adca <strncmp+0xa>
 800ade2:	e7fa      	b.n	800adda <strncmp+0x1a>
 800ade4:	4610      	mov	r0, r2
 800ade6:	e7f9      	b.n	800addc <strncmp+0x1c>

0800ade8 <_strtoul_l.constprop.0>:
 800ade8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adec:	4f36      	ldr	r7, [pc, #216]	; (800aec8 <_strtoul_l.constprop.0+0xe0>)
 800adee:	4686      	mov	lr, r0
 800adf0:	460d      	mov	r5, r1
 800adf2:	4628      	mov	r0, r5
 800adf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adf8:	5de6      	ldrb	r6, [r4, r7]
 800adfa:	f016 0608 	ands.w	r6, r6, #8
 800adfe:	d1f8      	bne.n	800adf2 <_strtoul_l.constprop.0+0xa>
 800ae00:	2c2d      	cmp	r4, #45	; 0x2d
 800ae02:	d12f      	bne.n	800ae64 <_strtoul_l.constprop.0+0x7c>
 800ae04:	782c      	ldrb	r4, [r5, #0]
 800ae06:	2601      	movs	r6, #1
 800ae08:	1c85      	adds	r5, r0, #2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d057      	beq.n	800aebe <_strtoul_l.constprop.0+0xd6>
 800ae0e:	2b10      	cmp	r3, #16
 800ae10:	d109      	bne.n	800ae26 <_strtoul_l.constprop.0+0x3e>
 800ae12:	2c30      	cmp	r4, #48	; 0x30
 800ae14:	d107      	bne.n	800ae26 <_strtoul_l.constprop.0+0x3e>
 800ae16:	7828      	ldrb	r0, [r5, #0]
 800ae18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ae1c:	2858      	cmp	r0, #88	; 0x58
 800ae1e:	d149      	bne.n	800aeb4 <_strtoul_l.constprop.0+0xcc>
 800ae20:	786c      	ldrb	r4, [r5, #1]
 800ae22:	2310      	movs	r3, #16
 800ae24:	3502      	adds	r5, #2
 800ae26:	f04f 38ff 	mov.w	r8, #4294967295
 800ae2a:	2700      	movs	r7, #0
 800ae2c:	fbb8 f8f3 	udiv	r8, r8, r3
 800ae30:	fb03 f908 	mul.w	r9, r3, r8
 800ae34:	ea6f 0909 	mvn.w	r9, r9
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ae3e:	f1bc 0f09 	cmp.w	ip, #9
 800ae42:	d814      	bhi.n	800ae6e <_strtoul_l.constprop.0+0x86>
 800ae44:	4664      	mov	r4, ip
 800ae46:	42a3      	cmp	r3, r4
 800ae48:	dd22      	ble.n	800ae90 <_strtoul_l.constprop.0+0xa8>
 800ae4a:	2f00      	cmp	r7, #0
 800ae4c:	db1d      	blt.n	800ae8a <_strtoul_l.constprop.0+0xa2>
 800ae4e:	4580      	cmp	r8, r0
 800ae50:	d31b      	bcc.n	800ae8a <_strtoul_l.constprop.0+0xa2>
 800ae52:	d101      	bne.n	800ae58 <_strtoul_l.constprop.0+0x70>
 800ae54:	45a1      	cmp	r9, r4
 800ae56:	db18      	blt.n	800ae8a <_strtoul_l.constprop.0+0xa2>
 800ae58:	fb00 4003 	mla	r0, r0, r3, r4
 800ae5c:	2701      	movs	r7, #1
 800ae5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae62:	e7ea      	b.n	800ae3a <_strtoul_l.constprop.0+0x52>
 800ae64:	2c2b      	cmp	r4, #43	; 0x2b
 800ae66:	bf04      	itt	eq
 800ae68:	782c      	ldrbeq	r4, [r5, #0]
 800ae6a:	1c85      	addeq	r5, r0, #2
 800ae6c:	e7cd      	b.n	800ae0a <_strtoul_l.constprop.0+0x22>
 800ae6e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ae72:	f1bc 0f19 	cmp.w	ip, #25
 800ae76:	d801      	bhi.n	800ae7c <_strtoul_l.constprop.0+0x94>
 800ae78:	3c37      	subs	r4, #55	; 0x37
 800ae7a:	e7e4      	b.n	800ae46 <_strtoul_l.constprop.0+0x5e>
 800ae7c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ae80:	f1bc 0f19 	cmp.w	ip, #25
 800ae84:	d804      	bhi.n	800ae90 <_strtoul_l.constprop.0+0xa8>
 800ae86:	3c57      	subs	r4, #87	; 0x57
 800ae88:	e7dd      	b.n	800ae46 <_strtoul_l.constprop.0+0x5e>
 800ae8a:	f04f 37ff 	mov.w	r7, #4294967295
 800ae8e:	e7e6      	b.n	800ae5e <_strtoul_l.constprop.0+0x76>
 800ae90:	2f00      	cmp	r7, #0
 800ae92:	da07      	bge.n	800aea4 <_strtoul_l.constprop.0+0xbc>
 800ae94:	2322      	movs	r3, #34	; 0x22
 800ae96:	f8ce 3000 	str.w	r3, [lr]
 800ae9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9e:	b932      	cbnz	r2, 800aeae <_strtoul_l.constprop.0+0xc6>
 800aea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aea4:	b106      	cbz	r6, 800aea8 <_strtoul_l.constprop.0+0xc0>
 800aea6:	4240      	negs	r0, r0
 800aea8:	2a00      	cmp	r2, #0
 800aeaa:	d0f9      	beq.n	800aea0 <_strtoul_l.constprop.0+0xb8>
 800aeac:	b107      	cbz	r7, 800aeb0 <_strtoul_l.constprop.0+0xc8>
 800aeae:	1e69      	subs	r1, r5, #1
 800aeb0:	6011      	str	r1, [r2, #0]
 800aeb2:	e7f5      	b.n	800aea0 <_strtoul_l.constprop.0+0xb8>
 800aeb4:	2430      	movs	r4, #48	; 0x30
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1b5      	bne.n	800ae26 <_strtoul_l.constprop.0+0x3e>
 800aeba:	2308      	movs	r3, #8
 800aebc:	e7b3      	b.n	800ae26 <_strtoul_l.constprop.0+0x3e>
 800aebe:	2c30      	cmp	r4, #48	; 0x30
 800aec0:	d0a9      	beq.n	800ae16 <_strtoul_l.constprop.0+0x2e>
 800aec2:	230a      	movs	r3, #10
 800aec4:	e7af      	b.n	800ae26 <_strtoul_l.constprop.0+0x3e>
 800aec6:	bf00      	nop
 800aec8:	0800baa9 	.word	0x0800baa9

0800aecc <_strtoul_r>:
 800aecc:	f7ff bf8c 	b.w	800ade8 <_strtoul_l.constprop.0>

0800aed0 <__submore>:
 800aed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed4:	460c      	mov	r4, r1
 800aed6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aedc:	4299      	cmp	r1, r3
 800aede:	d11d      	bne.n	800af1c <__submore+0x4c>
 800aee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aee4:	f7ff fa14 	bl	800a310 <_malloc_r>
 800aee8:	b918      	cbnz	r0, 800aef2 <__submore+0x22>
 800aeea:	f04f 30ff 	mov.w	r0, #4294967295
 800aeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aef6:	63a3      	str	r3, [r4, #56]	; 0x38
 800aef8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aefc:	6360      	str	r0, [r4, #52]	; 0x34
 800aefe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800af02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800af06:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800af0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800af0e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800af12:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800af16:	6020      	str	r0, [r4, #0]
 800af18:	2000      	movs	r0, #0
 800af1a:	e7e8      	b.n	800aeee <__submore+0x1e>
 800af1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800af1e:	0077      	lsls	r7, r6, #1
 800af20:	463a      	mov	r2, r7
 800af22:	f000 fa2d 	bl	800b380 <_realloc_r>
 800af26:	4605      	mov	r5, r0
 800af28:	2800      	cmp	r0, #0
 800af2a:	d0de      	beq.n	800aeea <__submore+0x1a>
 800af2c:	eb00 0806 	add.w	r8, r0, r6
 800af30:	4601      	mov	r1, r0
 800af32:	4632      	mov	r2, r6
 800af34:	4640      	mov	r0, r8
 800af36:	f7fe fc99 	bl	800986c <memcpy>
 800af3a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800af3e:	f8c4 8000 	str.w	r8, [r4]
 800af42:	e7e9      	b.n	800af18 <__submore+0x48>

0800af44 <__ascii_wctomb>:
 800af44:	b149      	cbz	r1, 800af5a <__ascii_wctomb+0x16>
 800af46:	2aff      	cmp	r2, #255	; 0xff
 800af48:	bf85      	ittet	hi
 800af4a:	238a      	movhi	r3, #138	; 0x8a
 800af4c:	6003      	strhi	r3, [r0, #0]
 800af4e:	700a      	strbls	r2, [r1, #0]
 800af50:	f04f 30ff 	movhi.w	r0, #4294967295
 800af54:	bf98      	it	ls
 800af56:	2001      	movls	r0, #1
 800af58:	4770      	bx	lr
 800af5a:	4608      	mov	r0, r1
 800af5c:	4770      	bx	lr
	...

0800af60 <__assert_func>:
 800af60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af62:	4614      	mov	r4, r2
 800af64:	461a      	mov	r2, r3
 800af66:	4b09      	ldr	r3, [pc, #36]	; (800af8c <__assert_func+0x2c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4605      	mov	r5, r0
 800af6c:	68d8      	ldr	r0, [r3, #12]
 800af6e:	b14c      	cbz	r4, 800af84 <__assert_func+0x24>
 800af70:	4b07      	ldr	r3, [pc, #28]	; (800af90 <__assert_func+0x30>)
 800af72:	9100      	str	r1, [sp, #0]
 800af74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af78:	4906      	ldr	r1, [pc, #24]	; (800af94 <__assert_func+0x34>)
 800af7a:	462b      	mov	r3, r5
 800af7c:	f000 f9a6 	bl	800b2cc <fiprintf>
 800af80:	f000 fc46 	bl	800b810 <abort>
 800af84:	4b04      	ldr	r3, [pc, #16]	; (800af98 <__assert_func+0x38>)
 800af86:	461c      	mov	r4, r3
 800af88:	e7f3      	b.n	800af72 <__assert_func+0x12>
 800af8a:	bf00      	nop
 800af8c:	20000010 	.word	0x20000010
 800af90:	0800be38 	.word	0x0800be38
 800af94:	0800be45 	.word	0x0800be45
 800af98:	0800be73 	.word	0x0800be73

0800af9c <__sflush_r>:
 800af9c:	898a      	ldrh	r2, [r1, #12]
 800af9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa2:	4605      	mov	r5, r0
 800afa4:	0710      	lsls	r0, r2, #28
 800afa6:	460c      	mov	r4, r1
 800afa8:	d458      	bmi.n	800b05c <__sflush_r+0xc0>
 800afaa:	684b      	ldr	r3, [r1, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	dc05      	bgt.n	800afbc <__sflush_r+0x20>
 800afb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dc02      	bgt.n	800afbc <__sflush_r+0x20>
 800afb6:	2000      	movs	r0, #0
 800afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afbe:	2e00      	cmp	r6, #0
 800afc0:	d0f9      	beq.n	800afb6 <__sflush_r+0x1a>
 800afc2:	2300      	movs	r3, #0
 800afc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afc8:	682f      	ldr	r7, [r5, #0]
 800afca:	602b      	str	r3, [r5, #0]
 800afcc:	d032      	beq.n	800b034 <__sflush_r+0x98>
 800afce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	075a      	lsls	r2, r3, #29
 800afd4:	d505      	bpl.n	800afe2 <__sflush_r+0x46>
 800afd6:	6863      	ldr	r3, [r4, #4]
 800afd8:	1ac0      	subs	r0, r0, r3
 800afda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afdc:	b10b      	cbz	r3, 800afe2 <__sflush_r+0x46>
 800afde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afe0:	1ac0      	subs	r0, r0, r3
 800afe2:	2300      	movs	r3, #0
 800afe4:	4602      	mov	r2, r0
 800afe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afe8:	6a21      	ldr	r1, [r4, #32]
 800afea:	4628      	mov	r0, r5
 800afec:	47b0      	blx	r6
 800afee:	1c43      	adds	r3, r0, #1
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	d106      	bne.n	800b002 <__sflush_r+0x66>
 800aff4:	6829      	ldr	r1, [r5, #0]
 800aff6:	291d      	cmp	r1, #29
 800aff8:	d82c      	bhi.n	800b054 <__sflush_r+0xb8>
 800affa:	4a2a      	ldr	r2, [pc, #168]	; (800b0a4 <__sflush_r+0x108>)
 800affc:	40ca      	lsrs	r2, r1
 800affe:	07d6      	lsls	r6, r2, #31
 800b000:	d528      	bpl.n	800b054 <__sflush_r+0xb8>
 800b002:	2200      	movs	r2, #0
 800b004:	6062      	str	r2, [r4, #4]
 800b006:	04d9      	lsls	r1, r3, #19
 800b008:	6922      	ldr	r2, [r4, #16]
 800b00a:	6022      	str	r2, [r4, #0]
 800b00c:	d504      	bpl.n	800b018 <__sflush_r+0x7c>
 800b00e:	1c42      	adds	r2, r0, #1
 800b010:	d101      	bne.n	800b016 <__sflush_r+0x7a>
 800b012:	682b      	ldr	r3, [r5, #0]
 800b014:	b903      	cbnz	r3, 800b018 <__sflush_r+0x7c>
 800b016:	6560      	str	r0, [r4, #84]	; 0x54
 800b018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b01a:	602f      	str	r7, [r5, #0]
 800b01c:	2900      	cmp	r1, #0
 800b01e:	d0ca      	beq.n	800afb6 <__sflush_r+0x1a>
 800b020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b024:	4299      	cmp	r1, r3
 800b026:	d002      	beq.n	800b02e <__sflush_r+0x92>
 800b028:	4628      	mov	r0, r5
 800b02a:	f7ff f905 	bl	800a238 <_free_r>
 800b02e:	2000      	movs	r0, #0
 800b030:	6360      	str	r0, [r4, #52]	; 0x34
 800b032:	e7c1      	b.n	800afb8 <__sflush_r+0x1c>
 800b034:	6a21      	ldr	r1, [r4, #32]
 800b036:	2301      	movs	r3, #1
 800b038:	4628      	mov	r0, r5
 800b03a:	47b0      	blx	r6
 800b03c:	1c41      	adds	r1, r0, #1
 800b03e:	d1c7      	bne.n	800afd0 <__sflush_r+0x34>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0c4      	beq.n	800afd0 <__sflush_r+0x34>
 800b046:	2b1d      	cmp	r3, #29
 800b048:	d001      	beq.n	800b04e <__sflush_r+0xb2>
 800b04a:	2b16      	cmp	r3, #22
 800b04c:	d101      	bne.n	800b052 <__sflush_r+0xb6>
 800b04e:	602f      	str	r7, [r5, #0]
 800b050:	e7b1      	b.n	800afb6 <__sflush_r+0x1a>
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b058:	81a3      	strh	r3, [r4, #12]
 800b05a:	e7ad      	b.n	800afb8 <__sflush_r+0x1c>
 800b05c:	690f      	ldr	r7, [r1, #16]
 800b05e:	2f00      	cmp	r7, #0
 800b060:	d0a9      	beq.n	800afb6 <__sflush_r+0x1a>
 800b062:	0793      	lsls	r3, r2, #30
 800b064:	680e      	ldr	r6, [r1, #0]
 800b066:	bf08      	it	eq
 800b068:	694b      	ldreq	r3, [r1, #20]
 800b06a:	600f      	str	r7, [r1, #0]
 800b06c:	bf18      	it	ne
 800b06e:	2300      	movne	r3, #0
 800b070:	eba6 0807 	sub.w	r8, r6, r7
 800b074:	608b      	str	r3, [r1, #8]
 800b076:	f1b8 0f00 	cmp.w	r8, #0
 800b07a:	dd9c      	ble.n	800afb6 <__sflush_r+0x1a>
 800b07c:	6a21      	ldr	r1, [r4, #32]
 800b07e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b080:	4643      	mov	r3, r8
 800b082:	463a      	mov	r2, r7
 800b084:	4628      	mov	r0, r5
 800b086:	47b0      	blx	r6
 800b088:	2800      	cmp	r0, #0
 800b08a:	dc06      	bgt.n	800b09a <__sflush_r+0xfe>
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b092:	81a3      	strh	r3, [r4, #12]
 800b094:	f04f 30ff 	mov.w	r0, #4294967295
 800b098:	e78e      	b.n	800afb8 <__sflush_r+0x1c>
 800b09a:	4407      	add	r7, r0
 800b09c:	eba8 0800 	sub.w	r8, r8, r0
 800b0a0:	e7e9      	b.n	800b076 <__sflush_r+0xda>
 800b0a2:	bf00      	nop
 800b0a4:	20400001 	.word	0x20400001

0800b0a8 <_fflush_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	690b      	ldr	r3, [r1, #16]
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	b913      	cbnz	r3, 800b0b8 <_fflush_r+0x10>
 800b0b2:	2500      	movs	r5, #0
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	b118      	cbz	r0, 800b0c2 <_fflush_r+0x1a>
 800b0ba:	6983      	ldr	r3, [r0, #24]
 800b0bc:	b90b      	cbnz	r3, 800b0c2 <_fflush_r+0x1a>
 800b0be:	f000 f887 	bl	800b1d0 <__sinit>
 800b0c2:	4b14      	ldr	r3, [pc, #80]	; (800b114 <_fflush_r+0x6c>)
 800b0c4:	429c      	cmp	r4, r3
 800b0c6:	d11b      	bne.n	800b100 <_fflush_r+0x58>
 800b0c8:	686c      	ldr	r4, [r5, #4]
 800b0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0ef      	beq.n	800b0b2 <_fflush_r+0xa>
 800b0d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0d4:	07d0      	lsls	r0, r2, #31
 800b0d6:	d404      	bmi.n	800b0e2 <_fflush_r+0x3a>
 800b0d8:	0599      	lsls	r1, r3, #22
 800b0da:	d402      	bmi.n	800b0e2 <_fflush_r+0x3a>
 800b0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0de:	f000 f927 	bl	800b330 <__retarget_lock_acquire_recursive>
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	f7ff ff59 	bl	800af9c <__sflush_r>
 800b0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0ec:	07da      	lsls	r2, r3, #31
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	d4e0      	bmi.n	800b0b4 <_fflush_r+0xc>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	059b      	lsls	r3, r3, #22
 800b0f6:	d4dd      	bmi.n	800b0b4 <_fflush_r+0xc>
 800b0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0fa:	f000 f91a 	bl	800b332 <__retarget_lock_release_recursive>
 800b0fe:	e7d9      	b.n	800b0b4 <_fflush_r+0xc>
 800b100:	4b05      	ldr	r3, [pc, #20]	; (800b118 <_fflush_r+0x70>)
 800b102:	429c      	cmp	r4, r3
 800b104:	d101      	bne.n	800b10a <_fflush_r+0x62>
 800b106:	68ac      	ldr	r4, [r5, #8]
 800b108:	e7df      	b.n	800b0ca <_fflush_r+0x22>
 800b10a:	4b04      	ldr	r3, [pc, #16]	; (800b11c <_fflush_r+0x74>)
 800b10c:	429c      	cmp	r4, r3
 800b10e:	bf08      	it	eq
 800b110:	68ec      	ldreq	r4, [r5, #12]
 800b112:	e7da      	b.n	800b0ca <_fflush_r+0x22>
 800b114:	0800be94 	.word	0x0800be94
 800b118:	0800beb4 	.word	0x0800beb4
 800b11c:	0800be74 	.word	0x0800be74

0800b120 <std>:
 800b120:	2300      	movs	r3, #0
 800b122:	b510      	push	{r4, lr}
 800b124:	4604      	mov	r4, r0
 800b126:	e9c0 3300 	strd	r3, r3, [r0]
 800b12a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b12e:	6083      	str	r3, [r0, #8]
 800b130:	8181      	strh	r1, [r0, #12]
 800b132:	6643      	str	r3, [r0, #100]	; 0x64
 800b134:	81c2      	strh	r2, [r0, #14]
 800b136:	6183      	str	r3, [r0, #24]
 800b138:	4619      	mov	r1, r3
 800b13a:	2208      	movs	r2, #8
 800b13c:	305c      	adds	r0, #92	; 0x5c
 800b13e:	f7fb fb5d 	bl	80067fc <memset>
 800b142:	4b05      	ldr	r3, [pc, #20]	; (800b158 <std+0x38>)
 800b144:	6263      	str	r3, [r4, #36]	; 0x24
 800b146:	4b05      	ldr	r3, [pc, #20]	; (800b15c <std+0x3c>)
 800b148:	62a3      	str	r3, [r4, #40]	; 0x28
 800b14a:	4b05      	ldr	r3, [pc, #20]	; (800b160 <std+0x40>)
 800b14c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b14e:	4b05      	ldr	r3, [pc, #20]	; (800b164 <std+0x44>)
 800b150:	6224      	str	r4, [r4, #32]
 800b152:	6323      	str	r3, [r4, #48]	; 0x30
 800b154:	bd10      	pop	{r4, pc}
 800b156:	bf00      	nop
 800b158:	0800760d 	.word	0x0800760d
 800b15c:	08007633 	.word	0x08007633
 800b160:	0800766b 	.word	0x0800766b
 800b164:	0800768f 	.word	0x0800768f

0800b168 <_cleanup_r>:
 800b168:	4901      	ldr	r1, [pc, #4]	; (800b170 <_cleanup_r+0x8>)
 800b16a:	f000 b8c1 	b.w	800b2f0 <_fwalk_reent>
 800b16e:	bf00      	nop
 800b170:	0800b0a9 	.word	0x0800b0a9

0800b174 <__sfmoreglue>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	2268      	movs	r2, #104	; 0x68
 800b178:	1e4d      	subs	r5, r1, #1
 800b17a:	4355      	muls	r5, r2
 800b17c:	460e      	mov	r6, r1
 800b17e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b182:	f7ff f8c5 	bl	800a310 <_malloc_r>
 800b186:	4604      	mov	r4, r0
 800b188:	b140      	cbz	r0, 800b19c <__sfmoreglue+0x28>
 800b18a:	2100      	movs	r1, #0
 800b18c:	e9c0 1600 	strd	r1, r6, [r0]
 800b190:	300c      	adds	r0, #12
 800b192:	60a0      	str	r0, [r4, #8]
 800b194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b198:	f7fb fb30 	bl	80067fc <memset>
 800b19c:	4620      	mov	r0, r4
 800b19e:	bd70      	pop	{r4, r5, r6, pc}

0800b1a0 <__sfp_lock_acquire>:
 800b1a0:	4801      	ldr	r0, [pc, #4]	; (800b1a8 <__sfp_lock_acquire+0x8>)
 800b1a2:	f000 b8c5 	b.w	800b330 <__retarget_lock_acquire_recursive>
 800b1a6:	bf00      	nop
 800b1a8:	200004f1 	.word	0x200004f1

0800b1ac <__sfp_lock_release>:
 800b1ac:	4801      	ldr	r0, [pc, #4]	; (800b1b4 <__sfp_lock_release+0x8>)
 800b1ae:	f000 b8c0 	b.w	800b332 <__retarget_lock_release_recursive>
 800b1b2:	bf00      	nop
 800b1b4:	200004f1 	.word	0x200004f1

0800b1b8 <__sinit_lock_acquire>:
 800b1b8:	4801      	ldr	r0, [pc, #4]	; (800b1c0 <__sinit_lock_acquire+0x8>)
 800b1ba:	f000 b8b9 	b.w	800b330 <__retarget_lock_acquire_recursive>
 800b1be:	bf00      	nop
 800b1c0:	200004f2 	.word	0x200004f2

0800b1c4 <__sinit_lock_release>:
 800b1c4:	4801      	ldr	r0, [pc, #4]	; (800b1cc <__sinit_lock_release+0x8>)
 800b1c6:	f000 b8b4 	b.w	800b332 <__retarget_lock_release_recursive>
 800b1ca:	bf00      	nop
 800b1cc:	200004f2 	.word	0x200004f2

0800b1d0 <__sinit>:
 800b1d0:	b510      	push	{r4, lr}
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	f7ff fff0 	bl	800b1b8 <__sinit_lock_acquire>
 800b1d8:	69a3      	ldr	r3, [r4, #24]
 800b1da:	b11b      	cbz	r3, 800b1e4 <__sinit+0x14>
 800b1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e0:	f7ff bff0 	b.w	800b1c4 <__sinit_lock_release>
 800b1e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1e8:	6523      	str	r3, [r4, #80]	; 0x50
 800b1ea:	4b13      	ldr	r3, [pc, #76]	; (800b238 <__sinit+0x68>)
 800b1ec:	4a13      	ldr	r2, [pc, #76]	; (800b23c <__sinit+0x6c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1f2:	42a3      	cmp	r3, r4
 800b1f4:	bf04      	itt	eq
 800b1f6:	2301      	moveq	r3, #1
 800b1f8:	61a3      	streq	r3, [r4, #24]
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 f820 	bl	800b240 <__sfp>
 800b200:	6060      	str	r0, [r4, #4]
 800b202:	4620      	mov	r0, r4
 800b204:	f000 f81c 	bl	800b240 <__sfp>
 800b208:	60a0      	str	r0, [r4, #8]
 800b20a:	4620      	mov	r0, r4
 800b20c:	f000 f818 	bl	800b240 <__sfp>
 800b210:	2200      	movs	r2, #0
 800b212:	60e0      	str	r0, [r4, #12]
 800b214:	2104      	movs	r1, #4
 800b216:	6860      	ldr	r0, [r4, #4]
 800b218:	f7ff ff82 	bl	800b120 <std>
 800b21c:	68a0      	ldr	r0, [r4, #8]
 800b21e:	2201      	movs	r2, #1
 800b220:	2109      	movs	r1, #9
 800b222:	f7ff ff7d 	bl	800b120 <std>
 800b226:	68e0      	ldr	r0, [r4, #12]
 800b228:	2202      	movs	r2, #2
 800b22a:	2112      	movs	r1, #18
 800b22c:	f7ff ff78 	bl	800b120 <std>
 800b230:	2301      	movs	r3, #1
 800b232:	61a3      	str	r3, [r4, #24]
 800b234:	e7d2      	b.n	800b1dc <__sinit+0xc>
 800b236:	bf00      	nop
 800b238:	0800ba18 	.word	0x0800ba18
 800b23c:	0800b169 	.word	0x0800b169

0800b240 <__sfp>:
 800b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b242:	4607      	mov	r7, r0
 800b244:	f7ff ffac 	bl	800b1a0 <__sfp_lock_acquire>
 800b248:	4b1e      	ldr	r3, [pc, #120]	; (800b2c4 <__sfp+0x84>)
 800b24a:	681e      	ldr	r6, [r3, #0]
 800b24c:	69b3      	ldr	r3, [r6, #24]
 800b24e:	b913      	cbnz	r3, 800b256 <__sfp+0x16>
 800b250:	4630      	mov	r0, r6
 800b252:	f7ff ffbd 	bl	800b1d0 <__sinit>
 800b256:	3648      	adds	r6, #72	; 0x48
 800b258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	d503      	bpl.n	800b268 <__sfp+0x28>
 800b260:	6833      	ldr	r3, [r6, #0]
 800b262:	b30b      	cbz	r3, 800b2a8 <__sfp+0x68>
 800b264:	6836      	ldr	r6, [r6, #0]
 800b266:	e7f7      	b.n	800b258 <__sfp+0x18>
 800b268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b26c:	b9d5      	cbnz	r5, 800b2a4 <__sfp+0x64>
 800b26e:	4b16      	ldr	r3, [pc, #88]	; (800b2c8 <__sfp+0x88>)
 800b270:	60e3      	str	r3, [r4, #12]
 800b272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b276:	6665      	str	r5, [r4, #100]	; 0x64
 800b278:	f000 f859 	bl	800b32e <__retarget_lock_init_recursive>
 800b27c:	f7ff ff96 	bl	800b1ac <__sfp_lock_release>
 800b280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b288:	6025      	str	r5, [r4, #0]
 800b28a:	61a5      	str	r5, [r4, #24]
 800b28c:	2208      	movs	r2, #8
 800b28e:	4629      	mov	r1, r5
 800b290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b294:	f7fb fab2 	bl	80067fc <memset>
 800b298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b29c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a4:	3468      	adds	r4, #104	; 0x68
 800b2a6:	e7d9      	b.n	800b25c <__sfp+0x1c>
 800b2a8:	2104      	movs	r1, #4
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	f7ff ff62 	bl	800b174 <__sfmoreglue>
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	6030      	str	r0, [r6, #0]
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d1d5      	bne.n	800b264 <__sfp+0x24>
 800b2b8:	f7ff ff78 	bl	800b1ac <__sfp_lock_release>
 800b2bc:	230c      	movs	r3, #12
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	e7ee      	b.n	800b2a0 <__sfp+0x60>
 800b2c2:	bf00      	nop
 800b2c4:	0800ba18 	.word	0x0800ba18
 800b2c8:	ffff0001 	.word	0xffff0001

0800b2cc <fiprintf>:
 800b2cc:	b40e      	push	{r1, r2, r3}
 800b2ce:	b503      	push	{r0, r1, lr}
 800b2d0:	4601      	mov	r1, r0
 800b2d2:	ab03      	add	r3, sp, #12
 800b2d4:	4805      	ldr	r0, [pc, #20]	; (800b2ec <fiprintf+0x20>)
 800b2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2da:	6800      	ldr	r0, [r0, #0]
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	f000 f8a7 	bl	800b430 <_vfiprintf_r>
 800b2e2:	b002      	add	sp, #8
 800b2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2e8:	b003      	add	sp, #12
 800b2ea:	4770      	bx	lr
 800b2ec:	20000010 	.word	0x20000010

0800b2f0 <_fwalk_reent>:
 800b2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	4688      	mov	r8, r1
 800b2f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2fc:	2700      	movs	r7, #0
 800b2fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b302:	f1b9 0901 	subs.w	r9, r9, #1
 800b306:	d505      	bpl.n	800b314 <_fwalk_reent+0x24>
 800b308:	6824      	ldr	r4, [r4, #0]
 800b30a:	2c00      	cmp	r4, #0
 800b30c:	d1f7      	bne.n	800b2fe <_fwalk_reent+0xe>
 800b30e:	4638      	mov	r0, r7
 800b310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b314:	89ab      	ldrh	r3, [r5, #12]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d907      	bls.n	800b32a <_fwalk_reent+0x3a>
 800b31a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b31e:	3301      	adds	r3, #1
 800b320:	d003      	beq.n	800b32a <_fwalk_reent+0x3a>
 800b322:	4629      	mov	r1, r5
 800b324:	4630      	mov	r0, r6
 800b326:	47c0      	blx	r8
 800b328:	4307      	orrs	r7, r0
 800b32a:	3568      	adds	r5, #104	; 0x68
 800b32c:	e7e9      	b.n	800b302 <_fwalk_reent+0x12>

0800b32e <__retarget_lock_init_recursive>:
 800b32e:	4770      	bx	lr

0800b330 <__retarget_lock_acquire_recursive>:
 800b330:	4770      	bx	lr

0800b332 <__retarget_lock_release_recursive>:
 800b332:	4770      	bx	lr

0800b334 <memmove>:
 800b334:	4288      	cmp	r0, r1
 800b336:	b510      	push	{r4, lr}
 800b338:	eb01 0402 	add.w	r4, r1, r2
 800b33c:	d902      	bls.n	800b344 <memmove+0x10>
 800b33e:	4284      	cmp	r4, r0
 800b340:	4623      	mov	r3, r4
 800b342:	d807      	bhi.n	800b354 <memmove+0x20>
 800b344:	1e43      	subs	r3, r0, #1
 800b346:	42a1      	cmp	r1, r4
 800b348:	d008      	beq.n	800b35c <memmove+0x28>
 800b34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b34e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b352:	e7f8      	b.n	800b346 <memmove+0x12>
 800b354:	4402      	add	r2, r0
 800b356:	4601      	mov	r1, r0
 800b358:	428a      	cmp	r2, r1
 800b35a:	d100      	bne.n	800b35e <memmove+0x2a>
 800b35c:	bd10      	pop	{r4, pc}
 800b35e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b366:	e7f7      	b.n	800b358 <memmove+0x24>

0800b368 <__malloc_lock>:
 800b368:	4801      	ldr	r0, [pc, #4]	; (800b370 <__malloc_lock+0x8>)
 800b36a:	f7ff bfe1 	b.w	800b330 <__retarget_lock_acquire_recursive>
 800b36e:	bf00      	nop
 800b370:	200004f0 	.word	0x200004f0

0800b374 <__malloc_unlock>:
 800b374:	4801      	ldr	r0, [pc, #4]	; (800b37c <__malloc_unlock+0x8>)
 800b376:	f7ff bfdc 	b.w	800b332 <__retarget_lock_release_recursive>
 800b37a:	bf00      	nop
 800b37c:	200004f0 	.word	0x200004f0

0800b380 <_realloc_r>:
 800b380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b384:	4680      	mov	r8, r0
 800b386:	4614      	mov	r4, r2
 800b388:	460e      	mov	r6, r1
 800b38a:	b921      	cbnz	r1, 800b396 <_realloc_r+0x16>
 800b38c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b390:	4611      	mov	r1, r2
 800b392:	f7fe bfbd 	b.w	800a310 <_malloc_r>
 800b396:	b92a      	cbnz	r2, 800b3a4 <_realloc_r+0x24>
 800b398:	f7fe ff4e 	bl	800a238 <_free_r>
 800b39c:	4625      	mov	r5, r4
 800b39e:	4628      	mov	r0, r5
 800b3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a4:	f000 faa0 	bl	800b8e8 <_malloc_usable_size_r>
 800b3a8:	4284      	cmp	r4, r0
 800b3aa:	4607      	mov	r7, r0
 800b3ac:	d802      	bhi.n	800b3b4 <_realloc_r+0x34>
 800b3ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3b2:	d812      	bhi.n	800b3da <_realloc_r+0x5a>
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	f7fe ffaa 	bl	800a310 <_malloc_r>
 800b3bc:	4605      	mov	r5, r0
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d0ed      	beq.n	800b39e <_realloc_r+0x1e>
 800b3c2:	42bc      	cmp	r4, r7
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	bf28      	it	cs
 800b3ca:	463a      	movcs	r2, r7
 800b3cc:	f7fe fa4e 	bl	800986c <memcpy>
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	f7fe ff30 	bl	800a238 <_free_r>
 800b3d8:	e7e1      	b.n	800b39e <_realloc_r+0x1e>
 800b3da:	4635      	mov	r5, r6
 800b3dc:	e7df      	b.n	800b39e <_realloc_r+0x1e>

0800b3de <__sfputc_r>:
 800b3de:	6893      	ldr	r3, [r2, #8]
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	b410      	push	{r4}
 800b3e6:	6093      	str	r3, [r2, #8]
 800b3e8:	da08      	bge.n	800b3fc <__sfputc_r+0x1e>
 800b3ea:	6994      	ldr	r4, [r2, #24]
 800b3ec:	42a3      	cmp	r3, r4
 800b3ee:	db01      	blt.n	800b3f4 <__sfputc_r+0x16>
 800b3f0:	290a      	cmp	r1, #10
 800b3f2:	d103      	bne.n	800b3fc <__sfputc_r+0x1e>
 800b3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f8:	f000 b94a 	b.w	800b690 <__swbuf_r>
 800b3fc:	6813      	ldr	r3, [r2, #0]
 800b3fe:	1c58      	adds	r0, r3, #1
 800b400:	6010      	str	r0, [r2, #0]
 800b402:	7019      	strb	r1, [r3, #0]
 800b404:	4608      	mov	r0, r1
 800b406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <__sfputs_r>:
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40e:	4606      	mov	r6, r0
 800b410:	460f      	mov	r7, r1
 800b412:	4614      	mov	r4, r2
 800b414:	18d5      	adds	r5, r2, r3
 800b416:	42ac      	cmp	r4, r5
 800b418:	d101      	bne.n	800b41e <__sfputs_r+0x12>
 800b41a:	2000      	movs	r0, #0
 800b41c:	e007      	b.n	800b42e <__sfputs_r+0x22>
 800b41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b422:	463a      	mov	r2, r7
 800b424:	4630      	mov	r0, r6
 800b426:	f7ff ffda 	bl	800b3de <__sfputc_r>
 800b42a:	1c43      	adds	r3, r0, #1
 800b42c:	d1f3      	bne.n	800b416 <__sfputs_r+0xa>
 800b42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b430 <_vfiprintf_r>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	460d      	mov	r5, r1
 800b436:	b09d      	sub	sp, #116	; 0x74
 800b438:	4614      	mov	r4, r2
 800b43a:	4698      	mov	r8, r3
 800b43c:	4606      	mov	r6, r0
 800b43e:	b118      	cbz	r0, 800b448 <_vfiprintf_r+0x18>
 800b440:	6983      	ldr	r3, [r0, #24]
 800b442:	b90b      	cbnz	r3, 800b448 <_vfiprintf_r+0x18>
 800b444:	f7ff fec4 	bl	800b1d0 <__sinit>
 800b448:	4b89      	ldr	r3, [pc, #548]	; (800b670 <_vfiprintf_r+0x240>)
 800b44a:	429d      	cmp	r5, r3
 800b44c:	d11b      	bne.n	800b486 <_vfiprintf_r+0x56>
 800b44e:	6875      	ldr	r5, [r6, #4]
 800b450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b452:	07d9      	lsls	r1, r3, #31
 800b454:	d405      	bmi.n	800b462 <_vfiprintf_r+0x32>
 800b456:	89ab      	ldrh	r3, [r5, #12]
 800b458:	059a      	lsls	r2, r3, #22
 800b45a:	d402      	bmi.n	800b462 <_vfiprintf_r+0x32>
 800b45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b45e:	f7ff ff67 	bl	800b330 <__retarget_lock_acquire_recursive>
 800b462:	89ab      	ldrh	r3, [r5, #12]
 800b464:	071b      	lsls	r3, r3, #28
 800b466:	d501      	bpl.n	800b46c <_vfiprintf_r+0x3c>
 800b468:	692b      	ldr	r3, [r5, #16]
 800b46a:	b9eb      	cbnz	r3, 800b4a8 <_vfiprintf_r+0x78>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4630      	mov	r0, r6
 800b470:	f000 f960 	bl	800b734 <__swsetup_r>
 800b474:	b1c0      	cbz	r0, 800b4a8 <_vfiprintf_r+0x78>
 800b476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b478:	07dc      	lsls	r4, r3, #31
 800b47a:	d50e      	bpl.n	800b49a <_vfiprintf_r+0x6a>
 800b47c:	f04f 30ff 	mov.w	r0, #4294967295
 800b480:	b01d      	add	sp, #116	; 0x74
 800b482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b486:	4b7b      	ldr	r3, [pc, #492]	; (800b674 <_vfiprintf_r+0x244>)
 800b488:	429d      	cmp	r5, r3
 800b48a:	d101      	bne.n	800b490 <_vfiprintf_r+0x60>
 800b48c:	68b5      	ldr	r5, [r6, #8]
 800b48e:	e7df      	b.n	800b450 <_vfiprintf_r+0x20>
 800b490:	4b79      	ldr	r3, [pc, #484]	; (800b678 <_vfiprintf_r+0x248>)
 800b492:	429d      	cmp	r5, r3
 800b494:	bf08      	it	eq
 800b496:	68f5      	ldreq	r5, [r6, #12]
 800b498:	e7da      	b.n	800b450 <_vfiprintf_r+0x20>
 800b49a:	89ab      	ldrh	r3, [r5, #12]
 800b49c:	0598      	lsls	r0, r3, #22
 800b49e:	d4ed      	bmi.n	800b47c <_vfiprintf_r+0x4c>
 800b4a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4a2:	f7ff ff46 	bl	800b332 <__retarget_lock_release_recursive>
 800b4a6:	e7e9      	b.n	800b47c <_vfiprintf_r+0x4c>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ac:	2320      	movs	r3, #32
 800b4ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4b6:	2330      	movs	r3, #48	; 0x30
 800b4b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b67c <_vfiprintf_r+0x24c>
 800b4bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4c0:	f04f 0901 	mov.w	r9, #1
 800b4c4:	4623      	mov	r3, r4
 800b4c6:	469a      	mov	sl, r3
 800b4c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4cc:	b10a      	cbz	r2, 800b4d2 <_vfiprintf_r+0xa2>
 800b4ce:	2a25      	cmp	r2, #37	; 0x25
 800b4d0:	d1f9      	bne.n	800b4c6 <_vfiprintf_r+0x96>
 800b4d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b4d6:	d00b      	beq.n	800b4f0 <_vfiprintf_r+0xc0>
 800b4d8:	465b      	mov	r3, fp
 800b4da:	4622      	mov	r2, r4
 800b4dc:	4629      	mov	r1, r5
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f7ff ff94 	bl	800b40c <__sfputs_r>
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	f000 80aa 	beq.w	800b63e <_vfiprintf_r+0x20e>
 800b4ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ec:	445a      	add	r2, fp
 800b4ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b4f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 80a2 	beq.w	800b63e <_vfiprintf_r+0x20e>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b504:	f10a 0a01 	add.w	sl, sl, #1
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	9307      	str	r3, [sp, #28]
 800b50c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b510:	931a      	str	r3, [sp, #104]	; 0x68
 800b512:	4654      	mov	r4, sl
 800b514:	2205      	movs	r2, #5
 800b516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b51a:	4858      	ldr	r0, [pc, #352]	; (800b67c <_vfiprintf_r+0x24c>)
 800b51c:	f7f4 fe80 	bl	8000220 <memchr>
 800b520:	9a04      	ldr	r2, [sp, #16]
 800b522:	b9d8      	cbnz	r0, 800b55c <_vfiprintf_r+0x12c>
 800b524:	06d1      	lsls	r1, r2, #27
 800b526:	bf44      	itt	mi
 800b528:	2320      	movmi	r3, #32
 800b52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b52e:	0713      	lsls	r3, r2, #28
 800b530:	bf44      	itt	mi
 800b532:	232b      	movmi	r3, #43	; 0x2b
 800b534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b538:	f89a 3000 	ldrb.w	r3, [sl]
 800b53c:	2b2a      	cmp	r3, #42	; 0x2a
 800b53e:	d015      	beq.n	800b56c <_vfiprintf_r+0x13c>
 800b540:	9a07      	ldr	r2, [sp, #28]
 800b542:	4654      	mov	r4, sl
 800b544:	2000      	movs	r0, #0
 800b546:	f04f 0c0a 	mov.w	ip, #10
 800b54a:	4621      	mov	r1, r4
 800b54c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b550:	3b30      	subs	r3, #48	; 0x30
 800b552:	2b09      	cmp	r3, #9
 800b554:	d94e      	bls.n	800b5f4 <_vfiprintf_r+0x1c4>
 800b556:	b1b0      	cbz	r0, 800b586 <_vfiprintf_r+0x156>
 800b558:	9207      	str	r2, [sp, #28]
 800b55a:	e014      	b.n	800b586 <_vfiprintf_r+0x156>
 800b55c:	eba0 0308 	sub.w	r3, r0, r8
 800b560:	fa09 f303 	lsl.w	r3, r9, r3
 800b564:	4313      	orrs	r3, r2
 800b566:	9304      	str	r3, [sp, #16]
 800b568:	46a2      	mov	sl, r4
 800b56a:	e7d2      	b.n	800b512 <_vfiprintf_r+0xe2>
 800b56c:	9b03      	ldr	r3, [sp, #12]
 800b56e:	1d19      	adds	r1, r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	9103      	str	r1, [sp, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	bfbb      	ittet	lt
 800b578:	425b      	neglt	r3, r3
 800b57a:	f042 0202 	orrlt.w	r2, r2, #2
 800b57e:	9307      	strge	r3, [sp, #28]
 800b580:	9307      	strlt	r3, [sp, #28]
 800b582:	bfb8      	it	lt
 800b584:	9204      	strlt	r2, [sp, #16]
 800b586:	7823      	ldrb	r3, [r4, #0]
 800b588:	2b2e      	cmp	r3, #46	; 0x2e
 800b58a:	d10c      	bne.n	800b5a6 <_vfiprintf_r+0x176>
 800b58c:	7863      	ldrb	r3, [r4, #1]
 800b58e:	2b2a      	cmp	r3, #42	; 0x2a
 800b590:	d135      	bne.n	800b5fe <_vfiprintf_r+0x1ce>
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	1d1a      	adds	r2, r3, #4
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	9203      	str	r2, [sp, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	bfb8      	it	lt
 800b59e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5a2:	3402      	adds	r4, #2
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b68c <_vfiprintf_r+0x25c>
 800b5aa:	7821      	ldrb	r1, [r4, #0]
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	4650      	mov	r0, sl
 800b5b0:	f7f4 fe36 	bl	8000220 <memchr>
 800b5b4:	b140      	cbz	r0, 800b5c8 <_vfiprintf_r+0x198>
 800b5b6:	2340      	movs	r3, #64	; 0x40
 800b5b8:	eba0 000a 	sub.w	r0, r0, sl
 800b5bc:	fa03 f000 	lsl.w	r0, r3, r0
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	4303      	orrs	r3, r0
 800b5c4:	3401      	adds	r4, #1
 800b5c6:	9304      	str	r3, [sp, #16]
 800b5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5cc:	482c      	ldr	r0, [pc, #176]	; (800b680 <_vfiprintf_r+0x250>)
 800b5ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5d2:	2206      	movs	r2, #6
 800b5d4:	f7f4 fe24 	bl	8000220 <memchr>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d03f      	beq.n	800b65c <_vfiprintf_r+0x22c>
 800b5dc:	4b29      	ldr	r3, [pc, #164]	; (800b684 <_vfiprintf_r+0x254>)
 800b5de:	bb1b      	cbnz	r3, 800b628 <_vfiprintf_r+0x1f8>
 800b5e0:	9b03      	ldr	r3, [sp, #12]
 800b5e2:	3307      	adds	r3, #7
 800b5e4:	f023 0307 	bic.w	r3, r3, #7
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	9303      	str	r3, [sp, #12]
 800b5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ee:	443b      	add	r3, r7
 800b5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f2:	e767      	b.n	800b4c4 <_vfiprintf_r+0x94>
 800b5f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	2001      	movs	r0, #1
 800b5fc:	e7a5      	b.n	800b54a <_vfiprintf_r+0x11a>
 800b5fe:	2300      	movs	r3, #0
 800b600:	3401      	adds	r4, #1
 800b602:	9305      	str	r3, [sp, #20]
 800b604:	4619      	mov	r1, r3
 800b606:	f04f 0c0a 	mov.w	ip, #10
 800b60a:	4620      	mov	r0, r4
 800b60c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b610:	3a30      	subs	r2, #48	; 0x30
 800b612:	2a09      	cmp	r2, #9
 800b614:	d903      	bls.n	800b61e <_vfiprintf_r+0x1ee>
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0c5      	beq.n	800b5a6 <_vfiprintf_r+0x176>
 800b61a:	9105      	str	r1, [sp, #20]
 800b61c:	e7c3      	b.n	800b5a6 <_vfiprintf_r+0x176>
 800b61e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b622:	4604      	mov	r4, r0
 800b624:	2301      	movs	r3, #1
 800b626:	e7f0      	b.n	800b60a <_vfiprintf_r+0x1da>
 800b628:	ab03      	add	r3, sp, #12
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	462a      	mov	r2, r5
 800b62e:	4b16      	ldr	r3, [pc, #88]	; (800b688 <_vfiprintf_r+0x258>)
 800b630:	a904      	add	r1, sp, #16
 800b632:	4630      	mov	r0, r6
 800b634:	f7fb f98a 	bl	800694c <_printf_float>
 800b638:	4607      	mov	r7, r0
 800b63a:	1c78      	adds	r0, r7, #1
 800b63c:	d1d6      	bne.n	800b5ec <_vfiprintf_r+0x1bc>
 800b63e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b640:	07d9      	lsls	r1, r3, #31
 800b642:	d405      	bmi.n	800b650 <_vfiprintf_r+0x220>
 800b644:	89ab      	ldrh	r3, [r5, #12]
 800b646:	059a      	lsls	r2, r3, #22
 800b648:	d402      	bmi.n	800b650 <_vfiprintf_r+0x220>
 800b64a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b64c:	f7ff fe71 	bl	800b332 <__retarget_lock_release_recursive>
 800b650:	89ab      	ldrh	r3, [r5, #12]
 800b652:	065b      	lsls	r3, r3, #25
 800b654:	f53f af12 	bmi.w	800b47c <_vfiprintf_r+0x4c>
 800b658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b65a:	e711      	b.n	800b480 <_vfiprintf_r+0x50>
 800b65c:	ab03      	add	r3, sp, #12
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	462a      	mov	r2, r5
 800b662:	4b09      	ldr	r3, [pc, #36]	; (800b688 <_vfiprintf_r+0x258>)
 800b664:	a904      	add	r1, sp, #16
 800b666:	4630      	mov	r0, r6
 800b668:	f7fb fc14 	bl	8006e94 <_printf_i>
 800b66c:	e7e4      	b.n	800b638 <_vfiprintf_r+0x208>
 800b66e:	bf00      	nop
 800b670:	0800be94 	.word	0x0800be94
 800b674:	0800beb4 	.word	0x0800beb4
 800b678:	0800be74 	.word	0x0800be74
 800b67c:	0800be0c 	.word	0x0800be0c
 800b680:	0800be16 	.word	0x0800be16
 800b684:	0800694d 	.word	0x0800694d
 800b688:	0800b40d 	.word	0x0800b40d
 800b68c:	0800be12 	.word	0x0800be12

0800b690 <__swbuf_r>:
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	460e      	mov	r6, r1
 800b694:	4614      	mov	r4, r2
 800b696:	4605      	mov	r5, r0
 800b698:	b118      	cbz	r0, 800b6a2 <__swbuf_r+0x12>
 800b69a:	6983      	ldr	r3, [r0, #24]
 800b69c:	b90b      	cbnz	r3, 800b6a2 <__swbuf_r+0x12>
 800b69e:	f7ff fd97 	bl	800b1d0 <__sinit>
 800b6a2:	4b21      	ldr	r3, [pc, #132]	; (800b728 <__swbuf_r+0x98>)
 800b6a4:	429c      	cmp	r4, r3
 800b6a6:	d12b      	bne.n	800b700 <__swbuf_r+0x70>
 800b6a8:	686c      	ldr	r4, [r5, #4]
 800b6aa:	69a3      	ldr	r3, [r4, #24]
 800b6ac:	60a3      	str	r3, [r4, #8]
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	071a      	lsls	r2, r3, #28
 800b6b2:	d52f      	bpl.n	800b714 <__swbuf_r+0x84>
 800b6b4:	6923      	ldr	r3, [r4, #16]
 800b6b6:	b36b      	cbz	r3, 800b714 <__swbuf_r+0x84>
 800b6b8:	6923      	ldr	r3, [r4, #16]
 800b6ba:	6820      	ldr	r0, [r4, #0]
 800b6bc:	1ac0      	subs	r0, r0, r3
 800b6be:	6963      	ldr	r3, [r4, #20]
 800b6c0:	b2f6      	uxtb	r6, r6
 800b6c2:	4283      	cmp	r3, r0
 800b6c4:	4637      	mov	r7, r6
 800b6c6:	dc04      	bgt.n	800b6d2 <__swbuf_r+0x42>
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f7ff fcec 	bl	800b0a8 <_fflush_r>
 800b6d0:	bb30      	cbnz	r0, 800b720 <__swbuf_r+0x90>
 800b6d2:	68a3      	ldr	r3, [r4, #8]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	60a3      	str	r3, [r4, #8]
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	6022      	str	r2, [r4, #0]
 800b6de:	701e      	strb	r6, [r3, #0]
 800b6e0:	6963      	ldr	r3, [r4, #20]
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	4283      	cmp	r3, r0
 800b6e6:	d004      	beq.n	800b6f2 <__swbuf_r+0x62>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	07db      	lsls	r3, r3, #31
 800b6ec:	d506      	bpl.n	800b6fc <__swbuf_r+0x6c>
 800b6ee:	2e0a      	cmp	r6, #10
 800b6f0:	d104      	bne.n	800b6fc <__swbuf_r+0x6c>
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f7ff fcd7 	bl	800b0a8 <_fflush_r>
 800b6fa:	b988      	cbnz	r0, 800b720 <__swbuf_r+0x90>
 800b6fc:	4638      	mov	r0, r7
 800b6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b700:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <__swbuf_r+0x9c>)
 800b702:	429c      	cmp	r4, r3
 800b704:	d101      	bne.n	800b70a <__swbuf_r+0x7a>
 800b706:	68ac      	ldr	r4, [r5, #8]
 800b708:	e7cf      	b.n	800b6aa <__swbuf_r+0x1a>
 800b70a:	4b09      	ldr	r3, [pc, #36]	; (800b730 <__swbuf_r+0xa0>)
 800b70c:	429c      	cmp	r4, r3
 800b70e:	bf08      	it	eq
 800b710:	68ec      	ldreq	r4, [r5, #12]
 800b712:	e7ca      	b.n	800b6aa <__swbuf_r+0x1a>
 800b714:	4621      	mov	r1, r4
 800b716:	4628      	mov	r0, r5
 800b718:	f000 f80c 	bl	800b734 <__swsetup_r>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d0cb      	beq.n	800b6b8 <__swbuf_r+0x28>
 800b720:	f04f 37ff 	mov.w	r7, #4294967295
 800b724:	e7ea      	b.n	800b6fc <__swbuf_r+0x6c>
 800b726:	bf00      	nop
 800b728:	0800be94 	.word	0x0800be94
 800b72c:	0800beb4 	.word	0x0800beb4
 800b730:	0800be74 	.word	0x0800be74

0800b734 <__swsetup_r>:
 800b734:	4b32      	ldr	r3, [pc, #200]	; (800b800 <__swsetup_r+0xcc>)
 800b736:	b570      	push	{r4, r5, r6, lr}
 800b738:	681d      	ldr	r5, [r3, #0]
 800b73a:	4606      	mov	r6, r0
 800b73c:	460c      	mov	r4, r1
 800b73e:	b125      	cbz	r5, 800b74a <__swsetup_r+0x16>
 800b740:	69ab      	ldr	r3, [r5, #24]
 800b742:	b913      	cbnz	r3, 800b74a <__swsetup_r+0x16>
 800b744:	4628      	mov	r0, r5
 800b746:	f7ff fd43 	bl	800b1d0 <__sinit>
 800b74a:	4b2e      	ldr	r3, [pc, #184]	; (800b804 <__swsetup_r+0xd0>)
 800b74c:	429c      	cmp	r4, r3
 800b74e:	d10f      	bne.n	800b770 <__swsetup_r+0x3c>
 800b750:	686c      	ldr	r4, [r5, #4]
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b758:	0719      	lsls	r1, r3, #28
 800b75a:	d42c      	bmi.n	800b7b6 <__swsetup_r+0x82>
 800b75c:	06dd      	lsls	r5, r3, #27
 800b75e:	d411      	bmi.n	800b784 <__swsetup_r+0x50>
 800b760:	2309      	movs	r3, #9
 800b762:	6033      	str	r3, [r6, #0]
 800b764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b768:	81a3      	strh	r3, [r4, #12]
 800b76a:	f04f 30ff 	mov.w	r0, #4294967295
 800b76e:	e03e      	b.n	800b7ee <__swsetup_r+0xba>
 800b770:	4b25      	ldr	r3, [pc, #148]	; (800b808 <__swsetup_r+0xd4>)
 800b772:	429c      	cmp	r4, r3
 800b774:	d101      	bne.n	800b77a <__swsetup_r+0x46>
 800b776:	68ac      	ldr	r4, [r5, #8]
 800b778:	e7eb      	b.n	800b752 <__swsetup_r+0x1e>
 800b77a:	4b24      	ldr	r3, [pc, #144]	; (800b80c <__swsetup_r+0xd8>)
 800b77c:	429c      	cmp	r4, r3
 800b77e:	bf08      	it	eq
 800b780:	68ec      	ldreq	r4, [r5, #12]
 800b782:	e7e6      	b.n	800b752 <__swsetup_r+0x1e>
 800b784:	0758      	lsls	r0, r3, #29
 800b786:	d512      	bpl.n	800b7ae <__swsetup_r+0x7a>
 800b788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b78a:	b141      	cbz	r1, 800b79e <__swsetup_r+0x6a>
 800b78c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b790:	4299      	cmp	r1, r3
 800b792:	d002      	beq.n	800b79a <__swsetup_r+0x66>
 800b794:	4630      	mov	r0, r6
 800b796:	f7fe fd4f 	bl	800a238 <_free_r>
 800b79a:	2300      	movs	r3, #0
 800b79c:	6363      	str	r3, [r4, #52]	; 0x34
 800b79e:	89a3      	ldrh	r3, [r4, #12]
 800b7a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7a4:	81a3      	strh	r3, [r4, #12]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	6063      	str	r3, [r4, #4]
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	f043 0308 	orr.w	r3, r3, #8
 800b7b4:	81a3      	strh	r3, [r4, #12]
 800b7b6:	6923      	ldr	r3, [r4, #16]
 800b7b8:	b94b      	cbnz	r3, 800b7ce <__swsetup_r+0x9a>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7c4:	d003      	beq.n	800b7ce <__swsetup_r+0x9a>
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f000 f84d 	bl	800b868 <__smakebuf_r>
 800b7ce:	89a0      	ldrh	r0, [r4, #12]
 800b7d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7d4:	f010 0301 	ands.w	r3, r0, #1
 800b7d8:	d00a      	beq.n	800b7f0 <__swsetup_r+0xbc>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60a3      	str	r3, [r4, #8]
 800b7de:	6963      	ldr	r3, [r4, #20]
 800b7e0:	425b      	negs	r3, r3
 800b7e2:	61a3      	str	r3, [r4, #24]
 800b7e4:	6923      	ldr	r3, [r4, #16]
 800b7e6:	b943      	cbnz	r3, 800b7fa <__swsetup_r+0xc6>
 800b7e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7ec:	d1ba      	bne.n	800b764 <__swsetup_r+0x30>
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	0781      	lsls	r1, r0, #30
 800b7f2:	bf58      	it	pl
 800b7f4:	6963      	ldrpl	r3, [r4, #20]
 800b7f6:	60a3      	str	r3, [r4, #8]
 800b7f8:	e7f4      	b.n	800b7e4 <__swsetup_r+0xb0>
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	e7f7      	b.n	800b7ee <__swsetup_r+0xba>
 800b7fe:	bf00      	nop
 800b800:	20000010 	.word	0x20000010
 800b804:	0800be94 	.word	0x0800be94
 800b808:	0800beb4 	.word	0x0800beb4
 800b80c:	0800be74 	.word	0x0800be74

0800b810 <abort>:
 800b810:	b508      	push	{r3, lr}
 800b812:	2006      	movs	r0, #6
 800b814:	f000 f898 	bl	800b948 <raise>
 800b818:	2001      	movs	r0, #1
 800b81a:	f7f6 f965 	bl	8001ae8 <_exit>

0800b81e <__swhatbuf_r>:
 800b81e:	b570      	push	{r4, r5, r6, lr}
 800b820:	460e      	mov	r6, r1
 800b822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b826:	2900      	cmp	r1, #0
 800b828:	b096      	sub	sp, #88	; 0x58
 800b82a:	4614      	mov	r4, r2
 800b82c:	461d      	mov	r5, r3
 800b82e:	da08      	bge.n	800b842 <__swhatbuf_r+0x24>
 800b830:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	602a      	str	r2, [r5, #0]
 800b838:	061a      	lsls	r2, r3, #24
 800b83a:	d410      	bmi.n	800b85e <__swhatbuf_r+0x40>
 800b83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b840:	e00e      	b.n	800b860 <__swhatbuf_r+0x42>
 800b842:	466a      	mov	r2, sp
 800b844:	f000 f89c 	bl	800b980 <_fstat_r>
 800b848:	2800      	cmp	r0, #0
 800b84a:	dbf1      	blt.n	800b830 <__swhatbuf_r+0x12>
 800b84c:	9a01      	ldr	r2, [sp, #4]
 800b84e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b852:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b856:	425a      	negs	r2, r3
 800b858:	415a      	adcs	r2, r3
 800b85a:	602a      	str	r2, [r5, #0]
 800b85c:	e7ee      	b.n	800b83c <__swhatbuf_r+0x1e>
 800b85e:	2340      	movs	r3, #64	; 0x40
 800b860:	2000      	movs	r0, #0
 800b862:	6023      	str	r3, [r4, #0]
 800b864:	b016      	add	sp, #88	; 0x58
 800b866:	bd70      	pop	{r4, r5, r6, pc}

0800b868 <__smakebuf_r>:
 800b868:	898b      	ldrh	r3, [r1, #12]
 800b86a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b86c:	079d      	lsls	r5, r3, #30
 800b86e:	4606      	mov	r6, r0
 800b870:	460c      	mov	r4, r1
 800b872:	d507      	bpl.n	800b884 <__smakebuf_r+0x1c>
 800b874:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	6123      	str	r3, [r4, #16]
 800b87c:	2301      	movs	r3, #1
 800b87e:	6163      	str	r3, [r4, #20]
 800b880:	b002      	add	sp, #8
 800b882:	bd70      	pop	{r4, r5, r6, pc}
 800b884:	ab01      	add	r3, sp, #4
 800b886:	466a      	mov	r2, sp
 800b888:	f7ff ffc9 	bl	800b81e <__swhatbuf_r>
 800b88c:	9900      	ldr	r1, [sp, #0]
 800b88e:	4605      	mov	r5, r0
 800b890:	4630      	mov	r0, r6
 800b892:	f7fe fd3d 	bl	800a310 <_malloc_r>
 800b896:	b948      	cbnz	r0, 800b8ac <__smakebuf_r+0x44>
 800b898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b89c:	059a      	lsls	r2, r3, #22
 800b89e:	d4ef      	bmi.n	800b880 <__smakebuf_r+0x18>
 800b8a0:	f023 0303 	bic.w	r3, r3, #3
 800b8a4:	f043 0302 	orr.w	r3, r3, #2
 800b8a8:	81a3      	strh	r3, [r4, #12]
 800b8aa:	e7e3      	b.n	800b874 <__smakebuf_r+0xc>
 800b8ac:	4b0d      	ldr	r3, [pc, #52]	; (800b8e4 <__smakebuf_r+0x7c>)
 800b8ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	6020      	str	r0, [r4, #0]
 800b8b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	9b00      	ldr	r3, [sp, #0]
 800b8bc:	6163      	str	r3, [r4, #20]
 800b8be:	9b01      	ldr	r3, [sp, #4]
 800b8c0:	6120      	str	r0, [r4, #16]
 800b8c2:	b15b      	cbz	r3, 800b8dc <__smakebuf_r+0x74>
 800b8c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f000 f86b 	bl	800b9a4 <_isatty_r>
 800b8ce:	b128      	cbz	r0, 800b8dc <__smakebuf_r+0x74>
 800b8d0:	89a3      	ldrh	r3, [r4, #12]
 800b8d2:	f023 0303 	bic.w	r3, r3, #3
 800b8d6:	f043 0301 	orr.w	r3, r3, #1
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	89a0      	ldrh	r0, [r4, #12]
 800b8de:	4305      	orrs	r5, r0
 800b8e0:	81a5      	strh	r5, [r4, #12]
 800b8e2:	e7cd      	b.n	800b880 <__smakebuf_r+0x18>
 800b8e4:	0800b169 	.word	0x0800b169

0800b8e8 <_malloc_usable_size_r>:
 800b8e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ec:	1f18      	subs	r0, r3, #4
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	bfbc      	itt	lt
 800b8f2:	580b      	ldrlt	r3, [r1, r0]
 800b8f4:	18c0      	addlt	r0, r0, r3
 800b8f6:	4770      	bx	lr

0800b8f8 <_raise_r>:
 800b8f8:	291f      	cmp	r1, #31
 800b8fa:	b538      	push	{r3, r4, r5, lr}
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	460d      	mov	r5, r1
 800b900:	d904      	bls.n	800b90c <_raise_r+0x14>
 800b902:	2316      	movs	r3, #22
 800b904:	6003      	str	r3, [r0, #0]
 800b906:	f04f 30ff 	mov.w	r0, #4294967295
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b90e:	b112      	cbz	r2, 800b916 <_raise_r+0x1e>
 800b910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b914:	b94b      	cbnz	r3, 800b92a <_raise_r+0x32>
 800b916:	4620      	mov	r0, r4
 800b918:	f000 f830 	bl	800b97c <_getpid_r>
 800b91c:	462a      	mov	r2, r5
 800b91e:	4601      	mov	r1, r0
 800b920:	4620      	mov	r0, r4
 800b922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b926:	f000 b817 	b.w	800b958 <_kill_r>
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d00a      	beq.n	800b944 <_raise_r+0x4c>
 800b92e:	1c59      	adds	r1, r3, #1
 800b930:	d103      	bne.n	800b93a <_raise_r+0x42>
 800b932:	2316      	movs	r3, #22
 800b934:	6003      	str	r3, [r0, #0]
 800b936:	2001      	movs	r0, #1
 800b938:	e7e7      	b.n	800b90a <_raise_r+0x12>
 800b93a:	2400      	movs	r4, #0
 800b93c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b940:	4628      	mov	r0, r5
 800b942:	4798      	blx	r3
 800b944:	2000      	movs	r0, #0
 800b946:	e7e0      	b.n	800b90a <_raise_r+0x12>

0800b948 <raise>:
 800b948:	4b02      	ldr	r3, [pc, #8]	; (800b954 <raise+0xc>)
 800b94a:	4601      	mov	r1, r0
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	f7ff bfd3 	b.w	800b8f8 <_raise_r>
 800b952:	bf00      	nop
 800b954:	20000010 	.word	0x20000010

0800b958 <_kill_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d07      	ldr	r5, [pc, #28]	; (800b978 <_kill_r+0x20>)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	4611      	mov	r1, r2
 800b964:	602b      	str	r3, [r5, #0]
 800b966:	f7f6 f8af 	bl	8001ac8 <_kill>
 800b96a:	1c43      	adds	r3, r0, #1
 800b96c:	d102      	bne.n	800b974 <_kill_r+0x1c>
 800b96e:	682b      	ldr	r3, [r5, #0]
 800b970:	b103      	cbz	r3, 800b974 <_kill_r+0x1c>
 800b972:	6023      	str	r3, [r4, #0]
 800b974:	bd38      	pop	{r3, r4, r5, pc}
 800b976:	bf00      	nop
 800b978:	200004ec 	.word	0x200004ec

0800b97c <_getpid_r>:
 800b97c:	f7f6 b89c 	b.w	8001ab8 <_getpid>

0800b980 <_fstat_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d07      	ldr	r5, [pc, #28]	; (800b9a0 <_fstat_r+0x20>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	4611      	mov	r1, r2
 800b98c:	602b      	str	r3, [r5, #0]
 800b98e:	f7f6 f8fa 	bl	8001b86 <_fstat>
 800b992:	1c43      	adds	r3, r0, #1
 800b994:	d102      	bne.n	800b99c <_fstat_r+0x1c>
 800b996:	682b      	ldr	r3, [r5, #0]
 800b998:	b103      	cbz	r3, 800b99c <_fstat_r+0x1c>
 800b99a:	6023      	str	r3, [r4, #0]
 800b99c:	bd38      	pop	{r3, r4, r5, pc}
 800b99e:	bf00      	nop
 800b9a0:	200004ec 	.word	0x200004ec

0800b9a4 <_isatty_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4d06      	ldr	r5, [pc, #24]	; (800b9c0 <_isatty_r+0x1c>)
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	4608      	mov	r0, r1
 800b9ae:	602b      	str	r3, [r5, #0]
 800b9b0:	f7f6 f8f9 	bl	8001ba6 <_isatty>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d102      	bne.n	800b9be <_isatty_r+0x1a>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	b103      	cbz	r3, 800b9be <_isatty_r+0x1a>
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	200004ec 	.word	0x200004ec

0800b9c4 <_init>:
 800b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c6:	bf00      	nop
 800b9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ca:	bc08      	pop	{r3}
 800b9cc:	469e      	mov	lr, r3
 800b9ce:	4770      	bx	lr

0800b9d0 <_fini>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	bf00      	nop
 800b9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9d6:	bc08      	pop	{r3}
 800b9d8:	469e      	mov	lr, r3
 800b9da:	4770      	bx	lr
