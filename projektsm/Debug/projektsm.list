
projektsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c5c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e3c  08005e3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e3c  08005e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e44  08005e44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000000c  08005e58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08005e58  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ca2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281d  00000000  00000000  00032cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00035500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  000363e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bc1  00000000  00000000  000371c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142ad  00000000  00000000  0005ed89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f61c7  00000000  00000000  00073036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001691fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  00169250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005e0c 	.word	0x08005e0c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005e0c 	.word	0x08005e0c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <Motor_INIT>:
 *  Created on: Feb 8, 2023
 *      Author: tomas
 */
#include "DC_Motor.h"

void Motor_INIT(struct Motor* motor, TIM_HandleTypeDef* TIMER, uint32_t PWM_CHANNEL, GPIO_TypeDef* DIR1_PORT, GPIO_TypeDef* DIR2_PORT, uint16_t DIR1_PIN, uint16_t DIR2_PIN){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	603b      	str	r3, [r7, #0]
	motor->DUTY = 0.0f;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
	motor->TIMER = TIMER;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	601a      	str	r2, [r3, #0]
	motor->PWM_CHANNEL = PWM_CHANNEL;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	605a      	str	r2, [r3, #4]
	motor->DIR1_PORT = DIR1_PORT;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	609a      	str	r2, [r3, #8]
	motor->DIR2_PORT = DIR2_PORT;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	60da      	str	r2, [r3, #12]
	motor->DIR1_PIN = DIR1_PIN;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	8bba      	ldrh	r2, [r7, #28]
 8000d7a:	821a      	strh	r2, [r3, #16]
	motor->DIR2_PIN = DIR2_PIN;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	8c3a      	ldrh	r2, [r7, #32]
 8000d80:	825a      	strh	r2, [r3, #18]

	Motor_STOP(motor);
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f000 f9ca 	bl	800111c <Motor_STOP>
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <Motor_SET_DIR>:

void Motor_SET_DIR(struct Motor* motor, _Bool dir){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	70fb      	strb	r3, [r7, #3]
	if(dir == 1){
 8000d9c:	78fb      	ldrb	r3, [r7, #3]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d010      	beq.n	8000dc4 <Motor_SET_DIR+0x34>
		HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 1);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6898      	ldr	r0, [r3, #8]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	8a1b      	ldrh	r3, [r3, #16]
 8000daa:	2201      	movs	r2, #1
 8000dac:	4619      	mov	r1, r3
 8000dae:	f002 f891 	bl	8002ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 0);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68d8      	ldr	r0, [r3, #12]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	8a5b      	ldrh	r3, [r3, #18]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f002 f889 	bl	8002ed4 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 0);
		HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 1);
	}
}
 8000dc2:	e00f      	b.n	8000de4 <Motor_SET_DIR+0x54>
		HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 0);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6898      	ldr	r0, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	8a1b      	ldrh	r3, [r3, #16]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f002 f880 	bl	8002ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 1);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68d8      	ldr	r0, [r3, #12]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	8a5b      	ldrh	r3, [r3, #18]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4619      	mov	r1, r3
 8000de0:	f002 f878 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <Motor_MOVE>:
void Motor_MOVE(struct Motor* motor, float  duty){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	ed87 0a00 	vstr	s0, [r7]
	motor->DUTY = duty;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	615a      	str	r2, [r3, #20]
	if(motor->DUTY > 0){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0c:	dd7b      	ble.n	8000f06 <Motor_MOVE+0x11a>
		Motor_SET_DIR(motor, 1);
 8000e0e:	2101      	movs	r1, #1
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ffbd 	bl	8000d90 <Motor_SET_DIR>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10f      	bne.n	8000e3e <Motor_MOVE+0x52>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e28:	ee17 3a90 	vmov	r3, s15
 8000e2c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e30:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e3c:	e063      	b.n	8000f06 <Motor_MOVE+0x11a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d110      	bne.n	8000e68 <Motor_MOVE+0x7c>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e50:	ee17 3a90 	vmov	r3, s15
 8000e54:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000e58:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	460b      	mov	r3, r1
 8000e64:	6393      	str	r3, [r2, #56]	; 0x38
 8000e66:	e04e      	b.n	8000f06 <Motor_MOVE+0x11a>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d110      	bne.n	8000e92 <Motor_MOVE+0xa6>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e7a:	ee17 3a90 	vmov	r3, s15
 8000e7e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000e82:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000e90:	e039      	b.n	8000f06 <Motor_MOVE+0x11a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b0c      	cmp	r3, #12
 8000e98:	d110      	bne.n	8000ebc <Motor_MOVE+0xd0>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea4:	ee17 3a90 	vmov	r3, s15
 8000ea8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000eac:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	e024      	b.n	8000f06 <Motor_MOVE+0x11a>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b10      	cmp	r3, #16
 8000ec2:	d110      	bne.n	8000ee6 <Motor_MOVE+0xfa>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ece:	ee17 3a90 	vmov	r3, s15
 8000ed2:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000ed6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee4:	e00f      	b.n	8000f06 <Motor_MOVE+0x11a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000eec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ef0:	ee17 3a90 	vmov	r3, s15
 8000ef4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000ef8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	460b      	mov	r3, r1
 8000f04:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
	if(motor->DUTY < 0){
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	d57b      	bpl.n	800100e <Motor_MOVE+0x222>
		Motor_SET_DIR(motor, 0);
 8000f16:	2100      	movs	r1, #0
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff39 	bl	8000d90 <Motor_SET_DIR>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10f      	bne.n	8000f46 <Motor_MOVE+0x15a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f30:	ee17 3a90 	vmov	r3, s15
 8000f34:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f38:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
 8000f44:	e063      	b.n	800100e <Motor_MOVE+0x222>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d110      	bne.n	8000f70 <Motor_MOVE+0x184>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f58:	ee17 3a90 	vmov	r3, s15
 8000f5c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000f60:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f6e:	e04e      	b.n	800100e <Motor_MOVE+0x222>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d110      	bne.n	8000f9a <Motor_MOVE+0x1ae>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f82:	ee17 3a90 	vmov	r3, s15
 8000f86:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000f8a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	460b      	mov	r3, r1
 8000f96:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f98:	e039      	b.n	800100e <Motor_MOVE+0x222>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b0c      	cmp	r3, #12
 8000fa0:	d110      	bne.n	8000fc4 <Motor_MOVE+0x1d8>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fac:	ee17 3a90 	vmov	r3, s15
 8000fb0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000fb4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	e024      	b.n	800100e <Motor_MOVE+0x222>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b10      	cmp	r3, #16
 8000fca:	d110      	bne.n	8000fee <Motor_MOVE+0x202>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd6:	ee17 3a90 	vmov	r3, s15
 8000fda:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000fde:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	6593      	str	r3, [r2, #88]	; 0x58
 8000fec:	e00f      	b.n	800100e <Motor_MOVE+0x222>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff8:	ee17 3a90 	vmov	r3, s15
 8000ffc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001000:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	460b      	mov	r3, r1
 800100c:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
	if(motor->DUTY == 0){
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	edd3 7a05 	vldr	s15, [r3, #20]
 8001014:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	d17a      	bne.n	8001114 <Motor_MOVE+0x328>
		Motor_STOP(motor);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f87c 	bl	800111c <Motor_STOP>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10f      	bne.n	800104c <Motor_MOVE+0x260>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001036:	ee17 3a90 	vmov	r3, s15
 800103a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800103e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800104a:	e063      	b.n	8001114 <Motor_MOVE+0x328>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b04      	cmp	r3, #4
 8001052:	d110      	bne.n	8001076 <Motor_MOVE+0x28a>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 7a05 	vldr	s15, [r3, #20]
 800105a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105e:	ee17 3a90 	vmov	r3, s15
 8001062:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001066:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	460b      	mov	r3, r1
 8001072:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001074:	e04e      	b.n	8001114 <Motor_MOVE+0x328>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b08      	cmp	r3, #8
 800107c:	d110      	bne.n	80010a0 <Motor_MOVE+0x2b4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edd3 7a05 	vldr	s15, [r3, #20]
 8001084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001088:	ee17 3a90 	vmov	r3, s15
 800108c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001090:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	460b      	mov	r3, r1
 800109c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800109e:	e039      	b.n	8001114 <Motor_MOVE+0x328>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b0c      	cmp	r3, #12
 80010a6:	d110      	bne.n	80010ca <Motor_MOVE+0x2de>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b2:	ee17 3a90 	vmov	r3, s15
 80010b6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80010ba:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	460b      	mov	r3, r1
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010c8:	e024      	b.n	8001114 <Motor_MOVE+0x328>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b10      	cmp	r3, #16
 80010d0:	d110      	bne.n	80010f4 <Motor_MOVE+0x308>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80010d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010dc:	ee17 3a90 	vmov	r3, s15
 80010e0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80010e4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	460b      	mov	r3, r1
 80010f0:	6593      	str	r3, [r2, #88]	; 0x58
}
 80010f2:	e00f      	b.n	8001114 <Motor_MOVE+0x328>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80010fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fe:	ee17 3a90 	vmov	r3, s15
 8001102:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001106:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	460b      	mov	r3, r1
 8001112:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <Motor_STOP>:

void Motor_STOP(struct Motor* motor){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 0);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6898      	ldr	r0, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	8a1b      	ldrh	r3, [r3, #16]
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	f001 fed0 	bl	8002ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 0);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68d8      	ldr	r0, [r3, #12]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	8a5b      	ldrh	r3, [r3, #18]
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	f001 fec8 	bl	8002ed4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d105      	bne.n	8001158 <Motor_STOP+0x3c>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001156:	e02c      	b.n	80011b2 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d105      	bne.n	800116c <Motor_STOP+0x50>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2300      	movs	r3, #0
 8001168:	6393      	str	r3, [r2, #56]	; 0x38
}
 800116a:	e022      	b.n	80011b2 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b08      	cmp	r3, #8
 8001172:	d105      	bne.n	8001180 <Motor_STOP+0x64>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	2300      	movs	r3, #0
 800117c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800117e:	e018      	b.n	80011b2 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b0c      	cmp	r3, #12
 8001186:	d105      	bne.n	8001194 <Motor_STOP+0x78>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001192:	e00e      	b.n	80011b2 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b10      	cmp	r3, #16
 800119a:	d105      	bne.n	80011a8 <Motor_STOP+0x8c>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	2300      	movs	r3, #0
 80011a4:	6593      	str	r3, [r2, #88]	; 0x58
}
 80011a6:	e004      	b.n	80011b2 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2300      	movs	r3, #0
 80011b0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_ADC1_Init+0x98>)
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <MX_ADC1_Init+0x9c>)
 80011d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <MX_ADC1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_ADC1_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_ADC1_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_ADC1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_ADC1_Init+0x98>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_ADC1_Init+0x98>)
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <MX_ADC1_Init+0xa0>)
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_ADC1_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_ADC1_Init+0x98>)
 8001208:	2201      	movs	r2, #1
 800120a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_ADC1_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_ADC1_Init+0x98>)
 8001216:	2201      	movs	r2, #1
 8001218:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <MX_ADC1_Init+0x98>)
 800121c:	f001 f8f0 	bl	8002400 <HAL_ADC_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 fb03 	bl	8001830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800122a:	2301      	movs	r3, #1
 800122c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800122e:	2301      	movs	r3, #1
 8001230:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_ADC1_Init+0x98>)
 800123c:	f001 f924 	bl	8002488 <HAL_ADC_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001246:	f000 faf3 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000028 	.word	0x20000028
 8001258:	40012000 	.word	0x40012000
 800125c:	0f000001 	.word	0x0f000001

08001260 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <HAL_ADC_MspInit+0x74>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d123      	bne.n	80012ca <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_ADC_MspInit+0x78>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_ADC_MspInit+0x78>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_ADC_MspInit+0x78>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_ADC_MspInit+0x78>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_ADC_MspInit+0x78>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_ADC_MspInit+0x78>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012b2:	2302      	movs	r3, #2
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b6:	2303      	movs	r3, #3
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_ADC_MspInit+0x7c>)
 80012c6:	f001 fc41 	bl	8002b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40012000 	.word	0x40012000
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <control_INIT>:
 *      Author: tomas
 */

#include "control.h"

void control_INIT(struct Controller* controller, float MAX_SIGNAL, float MIN_SIGNAL, float MAX_ERROR, float MIN_ERROR){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b090      	sub	sp, #64	; 0x40
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6178      	str	r0, [r7, #20]
 80012e8:	ed87 0a04 	vstr	s0, [r7, #16]
 80012ec:	edc7 0a03 	vstr	s1, [r7, #12]
 80012f0:	ed87 1a02 	vstr	s2, [r7, #8]
 80012f4:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->MAX_SIGNAL = MAX_SIGNAL;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	601a      	str	r2, [r3, #0]
	controller->MIN_SIGNAL = MIN_SIGNAL;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	605a      	str	r2, [r3, #4]
	controller->MAX_ERROR = MAX_ERROR;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	609a      	str	r2, [r3, #8]
	controller->MIN_ERROR = MIN_ERROR;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	60da      	str	r2, [r3, #12]
	controller->prev_error = 0;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
	controller->prev_distance = 0;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
	controller->current_velocity = 0;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	619a      	str	r2, [r3, #24]

	controller->PID = (PID_HandleTypeDef){
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	331c      	adds	r3, #28
 800132c:	2228      	movs	r2, #40	; 0x28
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f004 fd63 	bl	8005dfc <memset>
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <control_INIT+0x94>)
 800133a:	61da      	str	r2, [r3, #28]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <control_INIT+0x98>)
 8001340:	621a      	str	r2, [r3, #32]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <control_INIT+0x9c>)
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <control_INIT+0xa0>)
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <control_INIT+0xa4>)
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <control_INIT+0xa8>)
 8001358:	63da      	str	r2, [r3, #60]	; 0x3c
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
			.Kp = 1.3f, .Ki = 0.2f, .Kd = 0.15f,
			.N = 0.01f, .Ts = 0.1f,
				.LimitUpper = 36.0f, .LimitLower = 8.0f
	};
	PID_Init(&controller->PID);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	331c      	adds	r3, #28
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fa67 	bl	800183a <PID_Init>
}
 800136c:	bf00      	nop
 800136e:	3740      	adds	r7, #64	; 0x40
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	3fa66666 	.word	0x3fa66666
 8001378:	3e4ccccd 	.word	0x3e4ccccd
 800137c:	3e19999a 	.word	0x3e19999a
 8001380:	3c23d70a 	.word	0x3c23d70a
 8001384:	3dcccccd 	.word	0x3dcccccd
 8001388:	42100000 	.word	0x42100000

0800138c <control_GET_SIGNAL>:

float control_GET_SIGNAL(struct Controller* controller, float y, float y_ref){
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	ed87 0a02 	vstr	s0, [r7, #8]
 8001398:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = y_ref - y;
 800139c:	ed97 7a01 	vldr	s14, [r7, #4]
 80013a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a8:	edc7 7a05 	vstr	s15, [r7, #20]
	control_GET_VELOCITY(controller, y);
 80013ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f000 f831 	bl	8001418 <control_GET_VELOCITY>
	if(abs(error) <= controller->MIN_ERROR){
 80013b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013be:	ee17 3a90 	vmov	r3, s15
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bfb8      	it	lt
 80013c6:	425b      	neglt	r3, r3
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80013d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d802      	bhi.n	80013e6 <control_GET_SIGNAL+0x5a>
		return 0;
 80013e0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001414 <control_GET_SIGNAL+0x88>
 80013e4:	e010      	b.n	8001408 <control_GET_SIGNAL+0x7c>
		else if(abs(error*10.0f) < controller->MIN_SIGNAL && error<0){
			return controller->MIN_SIGNAL * -1;
		}*/

	//else {
		return PID_GET_SIGNAL(&controller->PID, y_ref, controller->current_velocity, error);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f103 021c 	add.w	r2, r3, #28
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80013f2:	ed97 1a05 	vldr	s2, [r7, #20]
 80013f6:	eef0 0a67 	vmov.f32	s1, s15
 80013fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80013fe:	4610      	mov	r0, r2
 8001400:	f000 fa32 	bl	8001868 <PID_GET_SIGNAL>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
	//}
	//else if(error<0) return controller->MAX_SIGNAL;
	//else return -controller->MAX_SIGNAL;

}
 8001408:	eeb0 0a67 	vmov.f32	s0, s15
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	00000000 	.word	0x00000000

08001418 <control_GET_VELOCITY>:


float control_GET_VELOCITY(struct Controller* controller, float distance){
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	ed87 0a00 	vstr	s0, [r7]
	if(controller->prev_distance == 0) controller->prev_distance = distance;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edd3 7a05 	vldr	s15, [r3, #20]
 800142a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	d102      	bne.n	800143a <control_GET_VELOCITY+0x22>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	615a      	str	r2, [r3, #20]
	float velocity  = (distance-controller->prev_distance)/0.1;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001440:	ed97 7a00 	vldr	s14, [r7]
 8001444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001448:	ee17 0a90 	vmov	r0, s15
 800144c:	f7ff f840 	bl	80004d0 <__aeabi_f2d>
 8001450:	a30d      	add	r3, pc, #52	; (adr r3, 8001488 <control_GET_VELOCITY+0x70>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f9bd 	bl	80007d4 <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fa9f 	bl	80009a4 <__aeabi_d2f>
 8001466:	4603      	mov	r3, r0
 8001468:	60fb      	str	r3, [r7, #12]
	controller->prev_distance = distance;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	615a      	str	r2, [r3, #20]
	controller->current_velocity = velocity;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	619a      	str	r2, [r3, #24]
	return velocity;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	9999999a 	.word	0x9999999a
 800148c:	3fb99999 	.word	0x3fb99999

08001490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	4b4e      	ldr	r3, [pc, #312]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a4d      	ldr	r2, [pc, #308]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014be:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a47      	ldr	r2, [pc, #284]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b45      	ldr	r3, [pc, #276]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a41      	ldr	r2, [pc, #260]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a3b      	ldr	r2, [pc, #236]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <MX_GPIO_Init+0x150>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a35      	ldr	r2, [pc, #212]	; (80015e0 <MX_GPIO_Init+0x150>)
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <MX_GPIO_Init+0x150>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <MX_GPIO_Init+0x150>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a2f      	ldr	r2, [pc, #188]	; (80015e0 <MX_GPIO_Init+0x150>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <MX_GPIO_Init+0x150>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3_Pin|GPIO_PIN_4_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	21c0      	movs	r1, #192	; 0xc0
 800153a:	482a      	ldr	r0, [pc, #168]	; (80015e4 <MX_GPIO_Init+0x154>)
 800153c:	f001 fcca 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2106      	movs	r1, #6
 8001544:	4828      	ldr	r0, [pc, #160]	; (80015e8 <MX_GPIO_Init+0x158>)
 8001546:	f001 fcc5 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1_Pin|GPIO_PIN_2_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001550:	4826      	ldr	r0, [pc, #152]	; (80015ec <MX_GPIO_Init+0x15c>)
 8001552:	f001 fcbf 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001556:	2310      	movs	r3, #16
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800155a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	481e      	ldr	r0, [pc, #120]	; (80015e4 <MX_GPIO_Init+0x154>)
 800156c:	f001 faee 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3_Pin|GPIO_PIN_4_Pin;
 8001570:	23c0      	movs	r3, #192	; 0xc0
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4817      	ldr	r0, [pc, #92]	; (80015e4 <MX_GPIO_Init+0x154>)
 8001588:	f001 fae0 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin;
 800158c:	2306      	movs	r3, #6
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4811      	ldr	r0, [pc, #68]	; (80015e8 <MX_GPIO_Init+0x158>)
 80015a4:	f001 fad2 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1_Pin|GPIO_PIN_2_Pin;
 80015a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	480a      	ldr	r0, [pc, #40]	; (80015ec <MX_GPIO_Init+0x15c>)
 80015c2:	f001 fac3 	bl	8002b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	200a      	movs	r0, #10
 80015cc:	f001 fa87 	bl	8002ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015d0:	200a      	movs	r0, #10
 80015d2:	f001 faa0 	bl	8002b16 <HAL_NVIC_EnableIRQ>

}
 80015d6:	bf00      	nop
 80015d8:	3730      	adds	r7, #48	; 0x30
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020c00 	.word	0x40020c00

080015f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == ECHO_Pin){
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d13b      	bne.n	8001678 <HAL_GPIO_EXTI_Callback+0x88>
		_Bool state = HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin);
 8001600:	2110      	movs	r1, #16
 8001602:	481f      	ldr	r0, [pc, #124]	; (8001680 <HAL_GPIO_EXTI_Callback+0x90>)
 8001604:	f001 fc4e 	bl	8002ea4 <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	bf14      	ite	ne
 800160e:	2301      	movne	r3, #1
 8001610:	2300      	moveq	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
		if(state == 1){
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_GPIO_EXTI_Callback+0x3a>
			__HAL_TIM_SET_COUNTER(&htim5, 0);
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_GPIO_EXTI_Callback+0x94>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim5);
 8001622:	4818      	ldr	r0, [pc, #96]	; (8001684 <HAL_GPIO_EXTI_Callback+0x94>)
 8001624:	f002 fd6a 	bl	80040fc <HAL_TIM_Base_Start>
			HAL_TIM_Base_Stop(&htim5);
			x = __HAL_TIM_GET_COUNTER(&htim5);
			if(x/58.0f < 1000) value = x/58.0f;
		}
	}
}
 8001628:	e026      	b.n	8001678 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_Base_Stop(&htim5);
 800162a:	4816      	ldr	r0, [pc, #88]	; (8001684 <HAL_GPIO_EXTI_Callback+0x94>)
 800162c:	f002 fdd6 	bl	80041dc <HAL_TIM_Base_Stop>
			x = __HAL_TIM_GET_COUNTER(&htim5);
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_GPIO_EXTI_Callback+0x94>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_GPIO_EXTI_Callback+0x98>)
 8001638:	6013      	str	r3, [r2, #0]
			if(x/58.0f < 1000) value = x/58.0f;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_GPIO_EXTI_Callback+0x98>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001646:	eddf 6a11 	vldr	s13, [pc, #68]	; 800168c <HAL_GPIO_EXTI_Callback+0x9c>
 800164a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001690 <HAL_GPIO_EXTI_Callback+0xa0>
 8001652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	d400      	bmi.n	800165e <HAL_GPIO_EXTI_Callback+0x6e>
}
 800165c:	e00c      	b.n	8001678 <HAL_GPIO_EXTI_Callback+0x88>
			if(x/58.0f < 1000) value = x/58.0f;
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_GPIO_EXTI_Callback+0x98>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800166a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800168c <HAL_GPIO_EXTI_Callback+0x9c>
 800166e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001674:	edc3 7a00 	vstr	s15, [r3]
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020000 	.word	0x40020000
 8001684:	20000208 	.word	0x20000208
 8001688:	200000d0 	.word	0x200000d0
 800168c:	42680000 	.word	0x42680000
 8001690:	447a0000 	.word	0x447a0000
 8001694:	20000070 	.word	0x20000070

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169e:	f000 fe2e 	bl	80022fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a2:	f000 f85d 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a6:	f7ff fef3 	bl	8001490 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016aa:	f000 fb03 	bl	8001cb4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80016ae:	f000 fd6f 	bl	8002190 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80016b2:	f000 fa53 	bl	8001b5c <MX_TIM1_Init>
  MX_TIM3_Init();
 80016b6:	f000 fb73 	bl	8001da0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80016ba:	f000 fc0d 	bl	8001ed8 <MX_TIM5_Init>
  MX_ADC1_Init();
 80016be:	f7ff fd7d 	bl	80011bc <MX_ADC1_Init>
  MX_TIM4_Init();
 80016c2:	f000 fbbb 	bl	8001e3c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016c6:	2100      	movs	r1, #0
 80016c8:	481c      	ldr	r0, [pc, #112]	; (800173c <main+0xa4>)
 80016ca:	f002 fe0f 	bl	80042ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016ce:	2100      	movs	r1, #0
 80016d0:	481b      	ldr	r0, [pc, #108]	; (8001740 <main+0xa8>)
 80016d2:	f002 fe0b 	bl	80042ec <HAL_TIM_PWM_Start>

  Motor_INIT(&motor, &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR2_GPIO_Port, DIR1_Pin, DIR2_Pin);
 80016d6:	2304      	movs	r3, #4
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	2302      	movs	r3, #2
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <main+0xac>)
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <main+0xac>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	4916      	ldr	r1, [pc, #88]	; (8001740 <main+0xa8>)
 80016e8:	4817      	ldr	r0, [pc, #92]	; (8001748 <main+0xb0>)
 80016ea:	f7ff fb2d 	bl	8000d48 <Motor_INIT>
  control_INIT(&controller, 100.0f, 60.0f, 5.0f, 0.5f);
 80016ee:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80016f2:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80016f6:	eddf 0a15 	vldr	s1, [pc, #84]	; 800174c <main+0xb4>
 80016fa:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001750 <main+0xb8>
 80016fe:	4815      	ldr	r0, [pc, #84]	; (8001754 <main+0xbc>)
 8001700:	f7ff fdee 	bl	80012e0 <control_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lmao = control_GET_SIGNAL(&controller, value, 15.0f);
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <main+0xc0>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	4810      	ldr	r0, [pc, #64]	; (8001754 <main+0xbc>)
 8001714:	f7ff fe3a 	bl	800138c <control_GET_SIGNAL>
 8001718:	eef0 7a40 	vmov.f32	s15, s0
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <main+0xc4>)
 800171e:	edc3 7a00 	vstr	s15, [r3]
		  }
		  HAL_Delay(500);
	  }*/


	  Motor_MOVE(&motor, lmao);
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <main+0xc4>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <main+0xb0>)
 800172e:	f7ff fb5d 	bl	8000dec <Motor_MOVE>
	  HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	; 0x64
 8001734:	f000 fe40 	bl	80023b8 <HAL_Delay>
	  lmao = control_GET_SIGNAL(&controller, value, 15.0f);
 8001738:	e7e4      	b.n	8001704 <main+0x6c>
 800173a:	bf00      	nop
 800173c:	20000124 	.word	0x20000124
 8001740:	200000d8 	.word	0x200000d8
 8001744:	40020400 	.word	0x40020400
 8001748:	20000074 	.word	0x20000074
 800174c:	42700000 	.word	0x42700000
 8001750:	42c80000 	.word	0x42c80000
 8001754:	2000008c 	.word	0x2000008c
 8001758:	20000070 	.word	0x20000070
 800175c:	200000d4 	.word	0x200000d4

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b094      	sub	sp, #80	; 0x50
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	2230      	movs	r2, #48	; 0x30
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f004 fb44 	bl	8005dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001784:	f001 fbd8 	bl	8002f38 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <SystemClock_Config+0xc8>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a26      	ldr	r2, [pc, #152]	; (8001828 <SystemClock_Config+0xc8>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <SystemClock_Config+0xc8>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <SystemClock_Config+0xcc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017a8:	4a20      	ldr	r2, [pc, #128]	; (800182c <SystemClock_Config+0xcc>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <SystemClock_Config+0xcc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017bc:	2302      	movs	r3, #2
 80017be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c4:	2310      	movs	r3, #16
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c8:	2302      	movs	r3, #2
 80017ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017d0:	2308      	movs	r3, #8
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017d4:	2348      	movs	r3, #72	; 0x48
 80017d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d8:	2302      	movs	r3, #2
 80017da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017dc:	2302      	movs	r3, #2
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fbb7 	bl	8002f58 <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017f0:	f000 f81e 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f4:	230f      	movs	r3, #15
 80017f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f8:	2302      	movs	r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	2102      	movs	r1, #2
 8001810:	4618      	mov	r0, r3
 8001812:	f001 fe45 	bl	80034a0 <HAL_RCC_ClockConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800181c:	f000 f808 	bl	8001830 <Error_Handler>
  }
}
 8001820:	bf00      	nop
 8001822:	3750      	adds	r7, #80	; 0x50
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001838:	e7fe      	b.n	8001838 <Error_Handler+0x8>

0800183a <PID_Init>:
 */


#include "pid_control.h"

void PID_Init(PID_HandleTypeDef* hpid){
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
	hpid->e_prev = 0.0f;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
	hpid->e_int = 0.0f;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
	hpid->d_prev = 0.0f;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <PID_GET_SIGNAL>:

float PID_GET_SIGNAL(PID_HandleTypeDef* hpid, float yref, float v, float current_error){
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	ed87 0a02 	vstr	s0, [r7, #8]
 8001874:	edc7 0a01 	vstr	s1, [r7, #4]
 8001878:	ed87 1a00 	vstr	s2, [r7]
	float u;
	float u_sat;
	float e = yref + v* hpid->Ts;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001882:	edd7 7a01 	vldr	s15, [r7, #4]
 8001886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188a:	ed97 7a02 	vldr	s14, [r7, #8]
 800188e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001892:	edc7 7a06 	vstr	s15, [r7, #24]

	/*Integral*/
	hpid->e_int += hpid->Ki * hpid->Ts * e;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	ed93 7a06 	vldr	s14, [r3, #24]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	edd3 6a01 	vldr	s13, [r3, #4]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80018a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80018b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	edc3 7a06 	vstr	s15, [r3, #24]


	/*Derivative*/
	hpid->d_prev = (hpid->Kd * hpid->N) * (e - hpid->e_prev) + (1.0f - hpid->N * hpid->Ts) * hpid->d_prev;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80018d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80018d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	edd3 6a03 	vldr	s13, [r3, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80018ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80018fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	edc3 7a07 	vstr	s15, [r3, #28]
	hpid->e_prev = e;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	615a      	str	r2, [r3, #20]

	/*Output"*/
	u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	ed93 7a00 	vldr	s14, [r3]
 8001918:	edd7 7a06 	vldr	s15, [r7, #24]
 800191c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	edd3 7a06 	vldr	s15, [r3, #24]
 8001926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001934:	edc7 7a05 	vstr	s15, [r7, #20]

	/*Saturation*/
	if(u > hpid->LimitUpper) u_sat = hpid->LimitUpper;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	edd3 7a08 	vldr	s15, [r3, #32]
 800193e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	dd03      	ble.n	8001954 <PID_GET_SIGNAL+0xec>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e00f      	b.n	8001974 <PID_GET_SIGNAL+0x10c>
	else if(u < hpid->LimitLower) u_sat = hpid->LimitLower;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800195a:	ed97 7a05 	vldr	s14, [r7, #20]
 800195e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d503      	bpl.n	8001970 <PID_GET_SIGNAL+0x108>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e001      	b.n	8001974 <PID_GET_SIGNAL+0x10c>
	else u_sat = u;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	61fb      	str	r3, [r7, #28]

	/*Anti wind-up*/
	if(u != u_sat) hpid->e_int -= hpid->Ki * hpid->Ts * e;
 8001974:	ed97 7a05 	vldr	s14, [r7, #20]
 8001978:	edd7 7a07 	vldr	s15, [r7, #28]
 800197c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	d013      	beq.n	80019ae <PID_GET_SIGNAL+0x146>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	ed93 7a06 	vldr	s14, [r3, #24]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	edd3 7a04 	vldr	s15, [r3, #16]
 8001998:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800199c:	edd7 7a06 	vldr	s15, [r7, #24]
 80019a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	edc3 7a06 	vstr	s15, [r3, #24]

	//if(current_error<=0) return abs((u_sat+34.0f)/0.7);
	//else return -((abs(u_sat)+34.0f)/0.7);
	if(current_error>=0) return -(abs(u_sat)+34)/0.7;
 80019ae:	edd7 7a00 	vldr	s15, [r7]
 80019b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	db1c      	blt.n	80019f6 <PID_GET_SIGNAL+0x18e>
 80019bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80019c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c4:	ee17 3a90 	vmov	r3, s15
 80019c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80019cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80019d0:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd68 	bl	80004ac <__aeabi_i2d>
 80019dc:	a314      	add	r3, pc, #80	; (adr r3, 8001a30 <PID_GET_SIGNAL+0x1c8>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe fef7 	bl	80007d4 <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7fe ffd9 	bl	80009a4 <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	e015      	b.n	8001a22 <PID_GET_SIGNAL+0x1ba>
	else return (u_sat+34)/0.7;
 80019f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80019fa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001a38 <PID_GET_SIGNAL+0x1d0>
 80019fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a02:	ee17 0a90 	vmov	r0, s15
 8001a06:	f7fe fd63 	bl	80004d0 <__aeabi_f2d>
 8001a0a:	a309      	add	r3, pc, #36	; (adr r3, 8001a30 <PID_GET_SIGNAL+0x1c8>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fee0 	bl	80007d4 <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7fe ffc2 	bl	80009a4 <__aeabi_d2f>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	66666666 	.word	0x66666666
 8001a34:	3fe66666 	.word	0x3fe66666
 8001a38:	42080000 	.word	0x42080000

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_MspInit+0x44>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <HAL_MspInit+0x44>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_MspInit+0x44>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_MspInit+0x44>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <HAL_MspInit+0x44>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_MspInit+0x44>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <NMI_Handler+0x4>

08001a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 fc52 	bl	8002378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 8001adc:	2010      	movs	r0, #16
 8001ade:	f001 fa13 	bl	8002f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <TIM1_CC_IRQHandler+0x10>)
 8001aee:	f002 fcf7 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200000d8 	.word	0x200000d8

08001afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM2_IRQHandler+0x10>)
 8001b02:	f002 fced 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000124 	.word	0x20000124

08001b10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <TIM3_IRQHandler+0x10>)
 8001b16:	f002 fce3 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000170 	.word	0x20000170

08001b24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <TIM4_IRQHandler+0x10>)
 8001b2a:	f002 fcd9 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200001bc 	.word	0x200001bc

08001b38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <SystemInit+0x20>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <SystemInit+0x20>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b09a      	sub	sp, #104	; 0x68
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
 8001b8c:	615a      	str	r2, [r3, #20]
 8001b8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	222c      	movs	r2, #44	; 0x2c
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 f930 	bl	8005dfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b9c:	4b43      	ldr	r3, [pc, #268]	; (8001cac <MX_TIM1_Init+0x150>)
 8001b9e:	4a44      	ldr	r2, [pc, #272]	; (8001cb0 <MX_TIM1_Init+0x154>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001ba2:	4b42      	ldr	r3, [pc, #264]	; (8001cac <MX_TIM1_Init+0x150>)
 8001ba4:	2247      	movs	r2, #71	; 0x47
 8001ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b40      	ldr	r3, [pc, #256]	; (8001cac <MX_TIM1_Init+0x150>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001bae:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <MX_TIM1_Init+0x150>)
 8001bb0:	2263      	movs	r2, #99	; 0x63
 8001bb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb4:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <MX_TIM1_Init+0x150>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bba:	4b3c      	ldr	r3, [pc, #240]	; (8001cac <MX_TIM1_Init+0x150>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc0:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <MX_TIM1_Init+0x150>)
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bc6:	4839      	ldr	r0, [pc, #228]	; (8001cac <MX_TIM1_Init+0x150>)
 8001bc8:	f002 fa40 	bl	800404c <HAL_TIM_Base_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001bd2:	f7ff fe2d 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bda:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001be0:	4619      	mov	r1, r3
 8001be2:	4832      	ldr	r0, [pc, #200]	; (8001cac <MX_TIM1_Init+0x150>)
 8001be4:	f002 feb0 	bl	8004948 <HAL_TIM_ConfigClockSource>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001bee:	f7ff fe1f 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bf2:	482e      	ldr	r0, [pc, #184]	; (8001cac <MX_TIM1_Init+0x150>)
 8001bf4:	f002 fb19 	bl	800422a <HAL_TIM_PWM_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001bfe:	f7ff fe17 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c12:	4619      	mov	r1, r3
 8001c14:	4825      	ldr	r0, [pc, #148]	; (8001cac <MX_TIM1_Init+0x150>)
 8001c16:	f003 fb51 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001c20:	f7ff fe06 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c24:	2360      	movs	r3, #96	; 0x60
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8001c28:	2364      	movs	r3, #100	; 0x64
 8001c2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c30:	2300      	movs	r3, #0
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c44:	2200      	movs	r2, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	4818      	ldr	r0, [pc, #96]	; (8001cac <MX_TIM1_Init+0x150>)
 8001c4a:	f002 fd69 	bl	8004720 <HAL_TIM_PWM_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001c54:	f7ff fdec 	bl	8001830 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_TIM1_Init+0x150>)
 8001c8e:	f003 fba3 	bl	80053d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001c98:	f7ff fdca 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <MX_TIM1_Init+0x150>)
 8001c9e:	f000 fa1b 	bl	80020d8 <HAL_TIM_MspPostInit>

}
 8001ca2:	bf00      	nop
 8001ca4:	3768      	adds	r7, #104	; 0x68
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200000d8 	.word	0x200000d8
 8001cb0:	40010000 	.word	0x40010000

08001cb4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08e      	sub	sp, #56	; 0x38
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]
 8001ce2:	615a      	str	r2, [r3, #20]
 8001ce4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001ce8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001cf0:	2247      	movs	r2, #71	; 0x47
 8001cf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001cfc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001d00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d0e:	4823      	ldr	r0, [pc, #140]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001d10:	f002 f99c 	bl	800404c <HAL_TIM_Base_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001d1a:	f7ff fd89 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d28:	4619      	mov	r1, r3
 8001d2a:	481c      	ldr	r0, [pc, #112]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001d2c:	f002 fe0c 	bl	8004948 <HAL_TIM_ConfigClockSource>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001d36:	f7ff fd7b 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d3a:	4818      	ldr	r0, [pc, #96]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001d3c:	f002 fa75 	bl	800422a <HAL_TIM_PWM_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001d46:	f7ff fd73 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	4810      	ldr	r0, [pc, #64]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001d5a:	f003 faaf 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d64:	f7ff fd64 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d68:	2360      	movs	r3, #96	; 0x60
 8001d6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 8001d6c:	2314      	movs	r3, #20
 8001d6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d78:	463b      	mov	r3, r7
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4807      	ldr	r0, [pc, #28]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001d80:	f002 fcce 	bl	8004720 <HAL_TIM_PWM_ConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d8a:	f7ff fd51 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d8e:	4803      	ldr	r0, [pc, #12]	; (8001d9c <MX_TIM2_Init+0xe8>)
 8001d90:	f000 f9a2 	bl	80020d8 <HAL_TIM_MspPostInit>

}
 8001d94:	bf00      	nop
 8001d96:	3738      	adds	r7, #56	; 0x38
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000124 	.word	0x20000124

08001da0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da6:	f107 0310 	add.w	r3, r7, #16
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <MX_TIM3_Init+0x94>)
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <MX_TIM3_Init+0x98>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <MX_TIM3_Init+0x94>)
 8001dc6:	2247      	movs	r2, #71	; 0x47
 8001dc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <MX_TIM3_Init+0x94>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <MX_TIM3_Init+0x94>)
 8001dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <MX_TIM3_Init+0x94>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <MX_TIM3_Init+0x94>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001de4:	4813      	ldr	r0, [pc, #76]	; (8001e34 <MX_TIM3_Init+0x94>)
 8001de6:	f002 f931 	bl	800404c <HAL_TIM_Base_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001df0:	f7ff fd1e 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <MX_TIM3_Init+0x94>)
 8001e02:	f002 fda1 	bl	8004948 <HAL_TIM_ConfigClockSource>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e0c:	f7ff fd10 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_TIM3_Init+0x94>)
 8001e1e:	f003 fa4d 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e28:	f7ff fd02 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000170 	.word	0x20000170
 8001e38:	40000400 	.word	0x40000400

08001e3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <MX_TIM4_Init+0x94>)
 8001e5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <MX_TIM4_Init+0x98>)
 8001e5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <MX_TIM4_Init+0x94>)
 8001e62:	2247      	movs	r2, #71	; 0x47
 8001e64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <MX_TIM4_Init+0x94>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <MX_TIM4_Init+0x94>)
 8001e6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e74:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <MX_TIM4_Init+0x94>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <MX_TIM4_Init+0x94>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e80:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <MX_TIM4_Init+0x94>)
 8001e82:	f002 f8e3 	bl	800404c <HAL_TIM_Base_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001e8c:	f7ff fcd0 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <MX_TIM4_Init+0x94>)
 8001e9e:	f002 fd53 	bl	8004948 <HAL_TIM_ConfigClockSource>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ea8:	f7ff fcc2 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_TIM4_Init+0x94>)
 8001eba:	f003 f9ff 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001ec4:	f7ff fcb4 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200001bc 	.word	0x200001bc
 8001ed4:	40000800 	.word	0x40000800

08001ed8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_TIM5_Init+0x94>)
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <MX_TIM5_Init+0x98>)
 8001efa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <MX_TIM5_Init+0x94>)
 8001efe:	2247      	movs	r2, #71	; 0x47
 8001f00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <MX_TIM5_Init+0x94>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <MX_TIM5_Init+0x94>)
 8001f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <MX_TIM5_Init+0x94>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <MX_TIM5_Init+0x94>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f1c:	4813      	ldr	r0, [pc, #76]	; (8001f6c <MX_TIM5_Init+0x94>)
 8001f1e:	f002 f895 	bl	800404c <HAL_TIM_Base_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001f28:	f7ff fc82 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f32:	f107 0310 	add.w	r3, r7, #16
 8001f36:	4619      	mov	r1, r3
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <MX_TIM5_Init+0x94>)
 8001f3a:	f002 fd05 	bl	8004948 <HAL_TIM_ConfigClockSource>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001f44:	f7ff fc74 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_TIM5_Init+0x94>)
 8001f56:	f003 f9b1 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f60:	f7ff fc66 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000208 	.word	0x20000208
 8001f70:	40000c00 	.word	0x40000c00

08001f74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	; 0x38
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a4b      	ldr	r2, [pc, #300]	; (80020c0 <HAL_TIM_Base_MspInit+0x14c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d114      	bne.n	8001fc0 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f96:	4b4b      	ldr	r3, [pc, #300]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	4a4a      	ldr	r2, [pc, #296]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa2:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	201b      	movs	r0, #27
 8001fb4:	f000 fd93 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001fb8:	201b      	movs	r0, #27
 8001fba:	f000 fdac 	bl	8002b16 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001fbe:	e07b      	b.n	80020b8 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc8:	d131      	bne.n	800202e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fca:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a3d      	ldr	r2, [pc, #244]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a37      	ldr	r2, [pc, #220]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	61bb      	str	r3, [r7, #24]
 8001ff8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ECHOB10_Pin;
 8001ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800200c:	2301      	movs	r3, #1
 800200e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHOB10_GPIO_Port, &GPIO_InitStruct);
 8002010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002014:	4619      	mov	r1, r3
 8002016:	482c      	ldr	r0, [pc, #176]	; (80020c8 <HAL_TIM_Base_MspInit+0x154>)
 8002018:	f000 fd98 	bl	8002b4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	201c      	movs	r0, #28
 8002022:	f000 fd5c 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002026:	201c      	movs	r0, #28
 8002028:	f000 fd75 	bl	8002b16 <HAL_NVIC_EnableIRQ>
}
 800202c:	e044      	b.n	80020b8 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM3)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a26      	ldr	r2, [pc, #152]	; (80020cc <HAL_TIM_Base_MspInit+0x158>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d114      	bne.n	8002062 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 800203e:	f043 0302 	orr.w	r3, r3, #2
 8002042:	6413      	str	r3, [r2, #64]	; 0x40
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2100      	movs	r1, #0
 8002054:	201d      	movs	r0, #29
 8002056:	f000 fd42 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800205a:	201d      	movs	r0, #29
 800205c:	f000 fd5b 	bl	8002b16 <HAL_NVIC_EnableIRQ>
}
 8002060:	e02a      	b.n	80020b8 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM4)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <HAL_TIM_Base_MspInit+0x15c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d114      	bne.n	8002096 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6413      	str	r3, [r2, #64]	; 0x40
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2100      	movs	r1, #0
 8002088:	201e      	movs	r0, #30
 800208a:	f000 fd28 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800208e:	201e      	movs	r0, #30
 8002090:	f000 fd41 	bl	8002b16 <HAL_NVIC_EnableIRQ>
}
 8002094:	e010      	b.n	80020b8 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM5)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <HAL_TIM_Base_MspInit+0x160>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d10b      	bne.n	80020b8 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 80020a6:	f043 0308 	orr.w	r3, r3, #8
 80020aa:	6413      	str	r3, [r2, #64]	; 0x40
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_TIM_Base_MspInit+0x150>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3738      	adds	r7, #56	; 0x38
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40000c00 	.word	0x40000c00

080020d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a22      	ldr	r2, [pc, #136]	; (8002180 <HAL_TIM_MspPostInit+0xa8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d11d      	bne.n	8002136 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_TIM_MspPostInit+0xac>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a21      	ldr	r2, [pc, #132]	; (8002184 <HAL_TIM_MspPostInit+0xac>)
 8002100:	f043 0310 	orr.w	r3, r3, #16
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <HAL_TIM_MspPostInit+0xac>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002124:	2301      	movs	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	4816      	ldr	r0, [pc, #88]	; (8002188 <HAL_TIM_MspPostInit+0xb0>)
 8002130:	f000 fd0c 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002134:	e020      	b.n	8002178 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213e:	d11b      	bne.n	8002178 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_TIM_MspPostInit+0xac>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_TIM_MspPostInit+0xac>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_TIM_MspPostInit+0xac>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002158:	2301      	movs	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002168:	2301      	movs	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4806      	ldr	r0, [pc, #24]	; (800218c <HAL_TIM_MspPostInit+0xb4>)
 8002174:	f000 fcea 	bl	8002b4c <HAL_GPIO_Init>
}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40010000 	.word	0x40010000
 8002184:	40023800 	.word	0x40023800
 8002188:	40021000 	.word	0x40021000
 800218c:	40020000 	.word	0x40020000

08002190 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 8002196:	4a15      	ldr	r2, [pc, #84]	; (80021ec <MX_USART2_UART_Init+0x5c>)
 8002198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 800219c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021b6:	220c      	movs	r2, #12
 80021b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_USART2_UART_Init+0x58>)
 80021d4:	f003 f99c 	bl	8005510 <HAL_UART_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021de:	f7ff fb27 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000254 	.word	0x20000254
 80021ec:	40004400 	.word	0x40004400

080021f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0aa      	sub	sp, #168	; 0xa8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	2284      	movs	r2, #132	; 0x84
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f003 fdf3 	bl	8005dfc <memset>
  if(uartHandle->Instance==USART2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <HAL_UART_MspInit+0xb0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d13a      	bne.n	8002296 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002224:	2300      	movs	r3, #0
 8002226:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	4618      	mov	r0, r3
 800222e:	f001 fb1d 	bl	800386c <HAL_RCCEx_PeriphCLKConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002238:	f7ff fafa 	bl	8001830 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 8002242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002246:	6413      	str	r3, [r2, #64]	; 0x40
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6313      	str	r3, [r2, #48]	; 0x30
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_UART_MspInit+0xb4>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800226c:	230c      	movs	r3, #12
 800226e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002284:	2307      	movs	r3, #7
 8002286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <HAL_UART_MspInit+0xb8>)
 8002292:	f000 fc5b 	bl	8002b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002296:	bf00      	nop
 8002298:	37a8      	adds	r7, #168	; 0xa8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40004400 	.word	0x40004400
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020000 	.word	0x40020000

080022ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b0:	480d      	ldr	r0, [pc, #52]	; (80022e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022b2:	490e      	ldr	r1, [pc, #56]	; (80022ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b8:	e002      	b.n	80022c0 <LoopCopyDataInit>

080022ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022be:	3304      	adds	r3, #4

080022c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c4:	d3f9      	bcc.n	80022ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c8:	4c0b      	ldr	r4, [pc, #44]	; (80022f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022cc:	e001      	b.n	80022d2 <LoopFillZerobss>

080022ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d0:	3204      	adds	r2, #4

080022d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d4:	d3fb      	bcc.n	80022ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d6:	f7ff fc2f 	bl	8001b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022da:	f003 fd6b 	bl	8005db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022de:	f7ff f9db 	bl	8001698 <main>
  bx  lr    
 80022e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022f0:	08005e4c 	.word	0x08005e4c
  ldr r2, =_sbss
 80022f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022f8:	200002e0 	.word	0x200002e0

080022fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <ADC_IRQHandler>

080022fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002302:	2003      	movs	r0, #3
 8002304:	f000 fbe0 	bl	8002ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002308:	200f      	movs	r0, #15
 800230a:	f000 f805 	bl	8002318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800230e:	f7ff fb95 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_InitTick+0x54>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_InitTick+0x58>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fbfb 	bl	8002b32 <HAL_SYSTICK_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e00e      	b.n	8002364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b0f      	cmp	r3, #15
 800234a:	d80a      	bhi.n	8002362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234c:	2200      	movs	r2, #0
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f000 fbc3 	bl	8002ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002358:	4a06      	ldr	r2, [pc, #24]	; (8002374 <HAL_InitTick+0x5c>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000000 	.word	0x20000000
 8002370:	20000008 	.word	0x20000008
 8002374:	20000004 	.word	0x20000004

08002378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_IncTick+0x20>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_IncTick+0x24>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_IncTick+0x24>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000008 	.word	0x20000008
 800239c:	200002dc 	.word	0x200002dc

080023a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return uwTick;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_GetTick+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	200002dc 	.word	0x200002dc

080023b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f7ff ffee 	bl	80023a0 <HAL_GetTick>
 80023c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d005      	beq.n	80023de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_Delay+0x44>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023de:	bf00      	nop
 80023e0:	f7ff ffde 	bl	80023a0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d8f7      	bhi.n	80023e0 <HAL_Delay+0x28>
  {
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000008 	.word	0x20000008

08002400 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e031      	b.n	800247a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe ff1e 	bl	8001260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d116      	bne.n	800246c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_ADC_Init+0x84>)
 8002444:	4013      	ands	r3, r2
 8002446:	f043 0202 	orr.w	r2, r3, #2
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f970 	bl	8002734 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f023 0303 	bic.w	r3, r3, #3
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
 800246a:	e001      	b.n	8002470 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002478:	7bfb      	ldrb	r3, [r7, #15]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	ffffeefd 	.word	0xffffeefd

08002488 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1c>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e136      	b.n	8002712 <HAL_ADC_ConfigChannel+0x28a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b09      	cmp	r3, #9
 80024b2:	d93a      	bls.n	800252a <HAL_ADC_ConfigChannel+0xa2>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024bc:	d035      	beq.n	800252a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68d9      	ldr	r1, [r3, #12]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	3b1e      	subs	r3, #30
 80024d4:	2207      	movs	r2, #7
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	400a      	ands	r2, r1
 80024e2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a8d      	ldr	r2, [pc, #564]	; (8002720 <HAL_ADC_ConfigChannel+0x298>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10a      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68d9      	ldr	r1, [r3, #12]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	061a      	lsls	r2, r3, #24
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002502:	e035      	b.n	8002570 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68d9      	ldr	r1, [r3, #12]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4618      	mov	r0, r3
 8002516:	4603      	mov	r3, r0
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4403      	add	r3, r0
 800251c:	3b1e      	subs	r3, #30
 800251e:	409a      	lsls	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002528:	e022      	b.n	8002570 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6919      	ldr	r1, [r3, #16]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	2207      	movs	r2, #7
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43da      	mvns	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	400a      	ands	r2, r1
 800254c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6919      	ldr	r1, [r3, #16]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	4618      	mov	r0, r3
 8002560:	4603      	mov	r3, r0
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4403      	add	r3, r0
 8002566:	409a      	lsls	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b06      	cmp	r3, #6
 8002576:	d824      	bhi.n	80025c2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	3b05      	subs	r3, #5
 800258a:	221f      	movs	r2, #31
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43da      	mvns	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	400a      	ands	r2, r1
 8002598:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4618      	mov	r0, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	3b05      	subs	r3, #5
 80025b4:	fa00 f203 	lsl.w	r2, r0, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	635a      	str	r2, [r3, #52]	; 0x34
 80025c0:	e04c      	b.n	800265c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d824      	bhi.n	8002614 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	3b23      	subs	r3, #35	; 0x23
 80025dc:	221f      	movs	r2, #31
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	400a      	ands	r2, r1
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4618      	mov	r0, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	3b23      	subs	r3, #35	; 0x23
 8002606:	fa00 f203 	lsl.w	r2, r0, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
 8002612:	e023      	b.n	800265c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	3b41      	subs	r3, #65	; 0x41
 8002626:	221f      	movs	r2, #31
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43da      	mvns	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	400a      	ands	r2, r1
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	4618      	mov	r0, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b41      	subs	r3, #65	; 0x41
 8002650:	fa00 f203 	lsl.w	r2, r0, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a30      	ldr	r2, [pc, #192]	; (8002724 <HAL_ADC_ConfigChannel+0x29c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10a      	bne.n	800267c <HAL_ADC_ConfigChannel+0x1f4>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800266e:	d105      	bne.n	800267c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_ADC_ConfigChannel+0x2a0>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a2c      	ldr	r2, [pc, #176]	; (8002728 <HAL_ADC_ConfigChannel+0x2a0>)
 8002676:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800267a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a28      	ldr	r2, [pc, #160]	; (8002724 <HAL_ADC_ConfigChannel+0x29c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10f      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x21e>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b12      	cmp	r3, #18
 800268c:	d10b      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_ADC_ConfigChannel+0x2a0>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a25      	ldr	r2, [pc, #148]	; (8002728 <HAL_ADC_ConfigChannel+0x2a0>)
 8002694:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002698:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_ADC_ConfigChannel+0x2a0>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4a22      	ldr	r2, [pc, #136]	; (8002728 <HAL_ADC_ConfigChannel+0x2a0>)
 80026a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_ADC_ConfigChannel+0x29c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d12b      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x280>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <HAL_ADC_ConfigChannel+0x298>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d003      	beq.n	80026c2 <HAL_ADC_ConfigChannel+0x23a>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b11      	cmp	r3, #17
 80026c0:	d122      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_ADC_ConfigChannel+0x2a0>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a18      	ldr	r2, [pc, #96]	; (8002728 <HAL_ADC_ConfigChannel+0x2a0>)
 80026c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026cc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_ADC_ConfigChannel+0x2a0>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <HAL_ADC_ConfigChannel+0x2a0>)
 80026d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a10      	ldr	r2, [pc, #64]	; (8002720 <HAL_ADC_ConfigChannel+0x298>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d111      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_ADC_ConfigChannel+0x2a4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a11      	ldr	r2, [pc, #68]	; (8002730 <HAL_ADC_ConfigChannel+0x2a8>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0c9a      	lsrs	r2, r3, #18
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026fa:	e002      	b.n	8002702 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3b01      	subs	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f9      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	10000012 	.word	0x10000012
 8002724:	40012000 	.word	0x40012000
 8002728:	40012300 	.word	0x40012300
 800272c:	20000000 	.word	0x20000000
 8002730:	431bde83 	.word	0x431bde83

08002734 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800273c:	4b78      	ldr	r3, [pc, #480]	; (8002920 <ADC_Init+0x1ec>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a77      	ldr	r2, [pc, #476]	; (8002920 <ADC_Init+0x1ec>)
 8002742:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002746:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002748:	4b75      	ldr	r3, [pc, #468]	; (8002920 <ADC_Init+0x1ec>)
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4973      	ldr	r1, [pc, #460]	; (8002920 <ADC_Init+0x1ec>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	021a      	lsls	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	4a58      	ldr	r2, [pc, #352]	; (8002924 <ADC_Init+0x1f0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	e00f      	b.n	800282e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800281c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800282c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0202 	bic.w	r2, r2, #2
 800283c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	005a      	lsls	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800286a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800287a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	3b01      	subs	r3, #1
 8002888:	035a      	lsls	r2, r3, #13
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	e007      	b.n	80028a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	3b01      	subs	r3, #1
 80028c0:	051a      	lsls	r2, r3, #20
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028e6:	025a      	lsls	r2, r3, #9
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	029a      	lsls	r2, r3, #10
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40012300 	.word	0x40012300
 8002924:	0f000001 	.word	0x0f000001

08002928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <__NVIC_SetPriorityGrouping+0x40>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 8002952:	4313      	orrs	r3, r2
 8002954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002956:	4a04      	ldr	r2, [pc, #16]	; (8002968 <__NVIC_SetPriorityGrouping+0x40>)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	60d3      	str	r3, [r2, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00
 800296c:	05fa0000 	.word	0x05fa0000

08002970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <__NVIC_GetPriorityGrouping+0x18>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	f003 0307 	and.w	r3, r3, #7
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	db0b      	blt.n	80029b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	4907      	ldr	r1, [pc, #28]	; (80029c4 <__NVIC_EnableIRQ+0x38>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2001      	movs	r0, #1
 80029ae:	fa00 f202 	lsl.w	r2, r0, r2
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db0a      	blt.n	80029f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	490c      	ldr	r1, [pc, #48]	; (8002a14 <__NVIC_SetPriority+0x4c>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	0112      	lsls	r2, r2, #4
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	440b      	add	r3, r1
 80029ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f0:	e00a      	b.n	8002a08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <__NVIC_SetPriority+0x50>)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	3b04      	subs	r3, #4
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	440b      	add	r3, r1
 8002a06:	761a      	strb	r2, [r3, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000e100 	.word	0xe000e100
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f1c3 0307 	rsb	r3, r3, #7
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf28      	it	cs
 8002a3a:	2304      	movcs	r3, #4
 8002a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d902      	bls.n	8002a4c <NVIC_EncodePriority+0x30>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3b03      	subs	r3, #3
 8002a4a:	e000      	b.n	8002a4e <NVIC_EncodePriority+0x32>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	401a      	ands	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43d9      	mvns	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	4313      	orrs	r3, r2
         );
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a94:	d301      	bcc.n	8002a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00f      	b.n	8002aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <SysTick_Config+0x40>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	f7ff ff8e 	bl	80029c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <SysTick_Config+0x40>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <SysTick_Config+0x40>)
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	e000e010 	.word	0xe000e010

08002ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff29 	bl	8002928 <__NVIC_SetPriorityGrouping>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff3e 	bl	8002970 <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff8e 	bl	8002a1c <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff5d 	bl	80029c8 <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff31 	bl	800298c <__NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffa2 	bl	8002a84 <SysTick_Config>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e175      	b.n	8002e58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 8164 	bne.w	8002e52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d005      	beq.n	8002ba2 <HAL_GPIO_Init+0x56>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d130      	bne.n	8002c04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d017      	beq.n	8002c40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d123      	bne.n	8002c94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0203 	and.w	r2, r3, #3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80be 	beq.w	8002e52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	4a65      	ldr	r2, [pc, #404]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cee:	4a61      	ldr	r2, [pc, #388]	; (8002e74 <HAL_GPIO_Init+0x328>)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a58      	ldr	r2, [pc, #352]	; (8002e78 <HAL_GPIO_Init+0x32c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d037      	beq.n	8002d8a <HAL_GPIO_Init+0x23e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_GPIO_Init+0x330>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d031      	beq.n	8002d86 <HAL_GPIO_Init+0x23a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a56      	ldr	r2, [pc, #344]	; (8002e80 <HAL_GPIO_Init+0x334>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02b      	beq.n	8002d82 <HAL_GPIO_Init+0x236>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a55      	ldr	r2, [pc, #340]	; (8002e84 <HAL_GPIO_Init+0x338>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d025      	beq.n	8002d7e <HAL_GPIO_Init+0x232>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a54      	ldr	r2, [pc, #336]	; (8002e88 <HAL_GPIO_Init+0x33c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01f      	beq.n	8002d7a <HAL_GPIO_Init+0x22e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a53      	ldr	r2, [pc, #332]	; (8002e8c <HAL_GPIO_Init+0x340>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d019      	beq.n	8002d76 <HAL_GPIO_Init+0x22a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <HAL_GPIO_Init+0x344>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0x226>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a51      	ldr	r2, [pc, #324]	; (8002e94 <HAL_GPIO_Init+0x348>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00d      	beq.n	8002d6e <HAL_GPIO_Init+0x222>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a50      	ldr	r2, [pc, #320]	; (8002e98 <HAL_GPIO_Init+0x34c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x21e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4f      	ldr	r2, [pc, #316]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d62:	2309      	movs	r3, #9
 8002d64:	e012      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d66:	230a      	movs	r3, #10
 8002d68:	e010      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	e00e      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	e00c      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d72:	2306      	movs	r3, #6
 8002d74:	e00a      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d76:	2305      	movs	r3, #5
 8002d78:	e008      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e004      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e002      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	f002 0203 	and.w	r2, r2, #3
 8002d92:	0092      	lsls	r2, r2, #2
 8002d94:	4093      	lsls	r3, r2
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d9c:	4935      	ldr	r1, [pc, #212]	; (8002e74 <HAL_GPIO_Init+0x328>)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	3302      	adds	r3, #2
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dce:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd4:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df8:	4a29      	ldr	r2, [pc, #164]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e22:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3301      	adds	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	f67f ae86 	bls.w	8002b6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3724      	adds	r7, #36	; 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40013800 	.word	0x40013800
 8002e78:	40020000 	.word	0x40020000
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40020800 	.word	0x40020800
 8002e84:	40020c00 	.word	0x40020c00
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40021400 	.word	0x40021400
 8002e90:	40021800 	.word	0x40021800
 8002e94:	40021c00 	.word	0x40021c00
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40022400 	.word	0x40022400
 8002ea0:	40013c00 	.word	0x40013c00

08002ea4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
 8002ec0:	e001      	b.n	8002ec6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ef0:	e003      	b.n	8002efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	619a      	str	r2, [r3, #24]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f12:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f1e:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fb62 	bl	80015f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40013c00 	.word	0x40013c00

08002f38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40007000 	.word	0x40007000

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e291      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8087 	beq.w	800308a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f7c:	4b96      	ldr	r3, [pc, #600]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d00c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f88:	4b93      	ldr	r3, [pc, #588]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d112      	bne.n	8002fba <HAL_RCC_OscConfig+0x62>
 8002f94:	4b90      	ldr	r3, [pc, #576]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa0:	d10b      	bne.n	8002fba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa2:	4b8d      	ldr	r3, [pc, #564]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d06c      	beq.n	8003088 <HAL_RCC_OscConfig+0x130>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d168      	bne.n	8003088 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e26b      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x7a>
 8002fc4:	4b84      	ldr	r3, [pc, #528]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a83      	ldr	r2, [pc, #524]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	e02e      	b.n	8003030 <HAL_RCC_OscConfig+0xd8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x9c>
 8002fda:	4b7f      	ldr	r3, [pc, #508]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a7e      	ldr	r2, [pc, #504]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	4b7c      	ldr	r3, [pc, #496]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a7b      	ldr	r2, [pc, #492]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8002fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e01d      	b.n	8003030 <HAL_RCC_OscConfig+0xd8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0xc0>
 8002ffe:	4b76      	ldr	r3, [pc, #472]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a75      	ldr	r2, [pc, #468]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b73      	ldr	r3, [pc, #460]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a72      	ldr	r2, [pc, #456]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e00b      	b.n	8003030 <HAL_RCC_OscConfig+0xd8>
 8003018:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a6e      	ldr	r2, [pc, #440]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 800301e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b6c      	ldr	r3, [pc, #432]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a6b      	ldr	r2, [pc, #428]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 800302a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7ff f9b2 	bl	80023a0 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003040:	f7ff f9ae 	bl	80023a0 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e21f      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b61      	ldr	r3, [pc, #388]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0xe8>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7ff f99e 	bl	80023a0 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7ff f99a 	bl	80023a0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e20b      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	4b57      	ldr	r3, [pc, #348]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x110>
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d069      	beq.n	800316a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003096:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a2:	4b4d      	ldr	r3, [pc, #308]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d11c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x190>
 80030ae:	4b4a      	ldr	r3, [pc, #296]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d116      	bne.n	80030e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_RCC_OscConfig+0x17a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e1df      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d2:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	493d      	ldr	r1, [pc, #244]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	e040      	b.n	800316a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d023      	beq.n	8003138 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7ff f950 	bl	80023a0 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003104:	f7ff f94c 	bl	80023a0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e1bd      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003122:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4929      	ldr	r1, [pc, #164]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]
 8003136:	e018      	b.n	800316a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7ff f92c 	bl	80023a0 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314c:	f7ff f928 	bl	80023a0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e199      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d038      	beq.n	80031e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d019      	beq.n	80031b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003182:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7ff f909 	bl	80023a0 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003192:	f7ff f905 	bl	80023a0 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e176      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 80031a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x23a>
 80031b0:	e01a      	b.n	80031e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 80031b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b6:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <HAL_RCC_OscConfig+0x280>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7ff f8ef 	bl	80023a0 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c6:	f7ff f8eb 	bl	80023a0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d903      	bls.n	80031dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e15c      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
 80031d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	4b91      	ldr	r3, [pc, #580]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ee      	bne.n	80031c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a4 	beq.w	800333e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f6:	4b8b      	ldr	r3, [pc, #556]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10d      	bne.n	800321e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	4b88      	ldr	r3, [pc, #544]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a87      	ldr	r2, [pc, #540]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
 800320e:	4b85      	ldr	r3, [pc, #532]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321e:	4b82      	ldr	r3, [pc, #520]	; (8003428 <HAL_RCC_OscConfig+0x4d0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800322a:	4b7f      	ldr	r3, [pc, #508]	; (8003428 <HAL_RCC_OscConfig+0x4d0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7e      	ldr	r2, [pc, #504]	; (8003428 <HAL_RCC_OscConfig+0x4d0>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003236:	f7ff f8b3 	bl	80023a0 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323e:	f7ff f8af 	bl	80023a0 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b64      	cmp	r3, #100	; 0x64
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e120      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003250:	4b75      	ldr	r3, [pc, #468]	; (8003428 <HAL_RCC_OscConfig+0x4d0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x31a>
 8003264:	4b6f      	ldr	r3, [pc, #444]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a6e      	ldr	r2, [pc, #440]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
 8003270:	e02d      	b.n	80032ce <HAL_RCC_OscConfig+0x376>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x33c>
 800327a:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a69      	ldr	r2, [pc, #420]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6713      	str	r3, [r2, #112]	; 0x70
 8003286:	4b67      	ldr	r3, [pc, #412]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a66      	ldr	r2, [pc, #408]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	e01c      	b.n	80032ce <HAL_RCC_OscConfig+0x376>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d10c      	bne.n	80032b6 <HAL_RCC_OscConfig+0x35e>
 800329c:	4b61      	ldr	r3, [pc, #388]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a60      	ldr	r2, [pc, #384]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	4b5e      	ldr	r3, [pc, #376]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a5d      	ldr	r2, [pc, #372]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	e00b      	b.n	80032ce <HAL_RCC_OscConfig+0x376>
 80032b6:	4b5b      	ldr	r3, [pc, #364]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a5a      	ldr	r2, [pc, #360]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
 80032c2:	4b58      	ldr	r3, [pc, #352]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a57      	ldr	r2, [pc, #348]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d015      	beq.n	8003302 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7ff f863 	bl	80023a0 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7ff f85f 	bl	80023a0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0ce      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	4b4b      	ldr	r3, [pc, #300]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCC_OscConfig+0x386>
 8003300:	e014      	b.n	800332c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7ff f84d 	bl	80023a0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7ff f849 	bl	80023a0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0b8      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	4b40      	ldr	r3, [pc, #256]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ee      	bne.n	800330a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a3b      	ldr	r2, [pc, #236]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80a4 	beq.w	8003490 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003348:	4b36      	ldr	r3, [pc, #216]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d06b      	beq.n	800342c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d149      	bne.n	80033f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335c:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a30      	ldr	r2, [pc, #192]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7ff f81a 	bl	80023a0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7ff f816 	bl	80023a0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e087      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	4b28      	ldr	r3, [pc, #160]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	4313      	orrs	r3, r2
 80033b4:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80033b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe ffea 	bl	80023a0 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fe ffe6 	bl	80023a0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e057      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x478>
 80033ee:	e04f      	b.n	8003490 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80033f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe ffd0 	bl	80023a0 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe ffcc 	bl	80023a0 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e03d      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x4ac>
 8003422:	e035      	b.n	8003490 <HAL_RCC_OscConfig+0x538>
 8003424:	40023800 	.word	0x40023800
 8003428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_RCC_OscConfig+0x544>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d028      	beq.n	800348c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d121      	bne.n	800348c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d11a      	bne.n	800348c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800345c:	4013      	ands	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003462:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003464:	4293      	cmp	r3, r2
 8003466:	d111      	bne.n	800348c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	3b01      	subs	r3, #1
 8003476:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d107      	bne.n	800348c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800

080034a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0d0      	b.n	800365a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b8:	4b6a      	ldr	r3, [pc, #424]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d910      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b67      	ldr	r3, [pc, #412]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 020f 	bic.w	r2, r3, #15
 80034ce:	4965      	ldr	r1, [pc, #404]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b63      	ldr	r3, [pc, #396]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0b8      	b.n	800365a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003500:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a58      	ldr	r2, [pc, #352]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800350a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 800351e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003522:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003524:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	494d      	ldr	r1, [pc, #308]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d040      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d115      	bne.n	8003582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07f      	b.n	800365a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e073      	b.n	800365a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e06b      	b.n	800365a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003582:	4b39      	ldr	r3, [pc, #228]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4936      	ldr	r1, [pc, #216]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003594:	f7fe ff04 	bl	80023a0 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359c:	f7fe ff00 	bl	80023a0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e053      	b.n	800365a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 020c 	and.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1eb      	bne.n	800359c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c4:	4b27      	ldr	r3, [pc, #156]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d210      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	4922      	ldr	r1, [pc, #136]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e032      	b.n	800365a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4916      	ldr	r1, [pc, #88]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	490e      	ldr	r1, [pc, #56]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003632:	f000 f821 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	490a      	ldr	r1, [pc, #40]	; (800366c <HAL_RCC_ClockConfig+0x1cc>)
 8003644:	5ccb      	ldrb	r3, [r1, r3]
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a09      	ldr	r2, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1d0>)
 800364c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1d4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fe60 	bl	8002318 <HAL_InitTick>

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023c00 	.word	0x40023c00
 8003668:	40023800 	.word	0x40023800
 800366c:	08005e24 	.word	0x08005e24
 8003670:	20000000 	.word	0x20000000
 8003674:	20000004 	.word	0x20000004

08003678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b090      	sub	sp, #64	; 0x40
 800367e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
 8003684:	2300      	movs	r3, #0
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003688:	2300      	movs	r3, #0
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003690:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b08      	cmp	r3, #8
 800369a:	d00d      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x40>
 800369c:	2b08      	cmp	r3, #8
 800369e:	f200 80a1 	bhi.w	80037e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x34>
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036aa:	e09b      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_RCC_GetSysClockFreq+0x184>)
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036b0:	e09b      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b2:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_GetSysClockFreq+0x188>)
 80036b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036b6:	e098      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b8:	4b4f      	ldr	r3, [pc, #316]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036c2:	4b4d      	ldr	r3, [pc, #308]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d028      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ce:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	2200      	movs	r2, #0
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	627a      	str	r2, [r7, #36]	; 0x24
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036e0:	2100      	movs	r1, #0
 80036e2:	4b47      	ldr	r3, [pc, #284]	; (8003800 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e4:	fb03 f201 	mul.w	r2, r3, r1
 80036e8:	2300      	movs	r3, #0
 80036ea:	fb00 f303 	mul.w	r3, r0, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	4a43      	ldr	r2, [pc, #268]	; (8003800 <HAL_RCC_GetSysClockFreq+0x188>)
 80036f2:	fba0 1202 	umull	r1, r2, r0, r2
 80036f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036f8:	460a      	mov	r2, r1
 80036fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80036fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fe:	4413      	add	r3, r2
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003704:	2200      	movs	r2, #0
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	61fa      	str	r2, [r7, #28]
 800370a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800370e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003712:	f7fd f997 	bl	8000a44 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4613      	mov	r3, r2
 800371c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371e:	e053      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003720:	4b35      	ldr	r3, [pc, #212]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	2200      	movs	r2, #0
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	617a      	str	r2, [r7, #20]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003732:	f04f 0b00 	mov.w	fp, #0
 8003736:	4652      	mov	r2, sl
 8003738:	465b      	mov	r3, fp
 800373a:	f04f 0000 	mov.w	r0, #0
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	0159      	lsls	r1, r3, #5
 8003744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003748:	0150      	lsls	r0, r2, #5
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	ebb2 080a 	subs.w	r8, r2, sl
 8003752:	eb63 090b 	sbc.w	r9, r3, fp
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003762:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003766:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800376a:	ebb2 0408 	subs.w	r4, r2, r8
 800376e:	eb63 0509 	sbc.w	r5, r3, r9
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	00eb      	lsls	r3, r5, #3
 800377c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003780:	00e2      	lsls	r2, r4, #3
 8003782:	4614      	mov	r4, r2
 8003784:	461d      	mov	r5, r3
 8003786:	eb14 030a 	adds.w	r3, r4, sl
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	eb45 030b 	adc.w	r3, r5, fp
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379e:	4629      	mov	r1, r5
 80037a0:	028b      	lsls	r3, r1, #10
 80037a2:	4621      	mov	r1, r4
 80037a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a8:	4621      	mov	r1, r4
 80037aa:	028a      	lsls	r2, r1, #10
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	2200      	movs	r2, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	60fa      	str	r2, [r7, #12]
 80037b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037bc:	f7fd f942 	bl	8000a44 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4613      	mov	r3, r2
 80037c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	3301      	adds	r3, #1
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80037d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e2:	e002      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_GetSysClockFreq+0x184>)
 80037e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3740      	adds	r7, #64	; 0x40
 80037f0:	46bd      	mov	sp, r7
 80037f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	00f42400 	.word	0x00f42400
 8003800:	017d7840 	.word	0x017d7840

08003804 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_RCC_GetHCLKFreq+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000000 	.word	0x20000000

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff0 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	08005e34 	.word	0x08005e34

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffdc 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0b5b      	lsrs	r3, r3, #13
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	08005e34 	.word	0x08005e34

0800386c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003894:	4b69      	ldr	r3, [pc, #420]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a68      	ldr	r2, [pc, #416]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800389e:	6093      	str	r3, [r2, #8]
 80038a0:	4b66      	ldr	r3, [pc, #408]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a8:	4964      	ldr	r1, [pc, #400]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d017      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c6:	4b5d      	ldr	r3, [pc, #372]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	4959      	ldr	r1, [pc, #356]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e4:	d101      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d017      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003902:	4b4e      	ldr	r3, [pc, #312]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003908:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	494a      	ldr	r1, [pc, #296]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003920:	d101      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003922:	2301      	movs	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800392e:	2301      	movs	r3, #1
 8003930:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800393e:	2301      	movs	r3, #1
 8003940:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 808b 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003950:	4b3a      	ldr	r3, [pc, #232]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	4a39      	ldr	r2, [pc, #228]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395a:	6413      	str	r3, [r2, #64]	; 0x40
 800395c:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003968:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a34      	ldr	r2, [pc, #208]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003974:	f7fe fd14 	bl	80023a0 <HAL_GetTick>
 8003978:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397c:	f7fe fd10 	bl	80023a0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e357      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800398e:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800399a:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d035      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d02e      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b8:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039c2:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ce:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4a1a      	ldr	r2, [pc, #104]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039e0:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d114      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe fcd8 	bl	80023a0 <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7fe fcd4 	bl	80023a0 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e319      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ee      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a22:	d111      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a32:	400b      	ands	r3, r1
 8003a34:	4901      	ldr	r1, [pc, #4]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
 8003a3a:	e00b      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40007000 	.word	0x40007000
 8003a44:	0ffffcff 	.word	0x0ffffcff
 8003a48:	4baa      	ldr	r3, [pc, #680]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4aa9      	ldr	r2, [pc, #676]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a52:	6093      	str	r3, [r2, #8]
 8003a54:	4ba7      	ldr	r3, [pc, #668]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a60:	49a4      	ldr	r1, [pc, #656]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d010      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a72:	4ba0      	ldr	r3, [pc, #640]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a78:	4a9e      	ldr	r2, [pc, #632]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a82:	4b9c      	ldr	r3, [pc, #624]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	4999      	ldr	r1, [pc, #612]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa0:	4b94      	ldr	r3, [pc, #592]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aae:	4991      	ldr	r1, [pc, #580]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ac2:	4b8c      	ldr	r3, [pc, #560]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad0:	4988      	ldr	r1, [pc, #544]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae4:	4b83      	ldr	r3, [pc, #524]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af2:	4980      	ldr	r1, [pc, #512]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b06:	4b7b      	ldr	r3, [pc, #492]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4977      	ldr	r1, [pc, #476]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b28:	4b72      	ldr	r3, [pc, #456]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	496f      	ldr	r1, [pc, #444]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f023 020c 	bic.w	r2, r3, #12
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b58:	4966      	ldr	r1, [pc, #408]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b6c:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	495e      	ldr	r1, [pc, #376]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b8e:	4b59      	ldr	r3, [pc, #356]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	4955      	ldr	r1, [pc, #340]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb0:	4b50      	ldr	r3, [pc, #320]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	494d      	ldr	r1, [pc, #308]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bd2:	4b48      	ldr	r3, [pc, #288]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	4944      	ldr	r1, [pc, #272]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	493c      	ldr	r1, [pc, #240]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c16:	4b37      	ldr	r3, [pc, #220]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c24:	4933      	ldr	r1, [pc, #204]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c38:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c46:	492b      	ldr	r1, [pc, #172]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d011      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c5a:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c60:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c68:	4922      	ldr	r1, [pc, #136]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c78:	d101      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	4912      	ldr	r1, [pc, #72]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ccc:	4909      	ldr	r1, [pc, #36]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d006      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80d9 	beq.w	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ce8:	4b02      	ldr	r3, [pc, #8]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a01      	ldr	r2, [pc, #4]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cf2:	e001      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfa:	f7fe fb51 	bl	80023a0 <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d02:	f7fe fb4d 	bl	80023a0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	; 0x64
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e194      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d14:	4b6c      	ldr	r3, [pc, #432]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d021      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11d      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d34:	4b64      	ldr	r3, [pc, #400]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d42:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d48:	0e1b      	lsrs	r3, r3, #24
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	019a      	lsls	r2, r3, #6
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	061b      	lsls	r3, r3, #24
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	071b      	lsls	r3, r3, #28
 8003d68:	4957      	ldr	r1, [pc, #348]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d02e      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d9a:	d129      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d9c:	4b4a      	ldr	r3, [pc, #296]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da2:	0c1b      	lsrs	r3, r3, #16
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003daa:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db0:	0f1b      	lsrs	r3, r3, #28
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	019a      	lsls	r2, r3, #6
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	071b      	lsls	r3, r3, #28
 8003dd0:	493d      	ldr	r1, [pc, #244]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dd8:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dde:	f023 021f 	bic.w	r2, r3, #31
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	3b01      	subs	r3, #1
 8003de8:	4937      	ldr	r1, [pc, #220]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01d      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dfc:	4b32      	ldr	r3, [pc, #200]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e02:	0e1b      	lsrs	r3, r3, #24
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e0a:	4b2f      	ldr	r3, [pc, #188]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e10:	0f1b      	lsrs	r3, r3, #28
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	019a      	lsls	r2, r3, #6
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	041b      	lsls	r3, r3, #16
 8003e24:	431a      	orrs	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	071b      	lsls	r3, r3, #28
 8003e30:	4925      	ldr	r1, [pc, #148]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d011      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	019a      	lsls	r2, r3, #6
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	061b      	lsls	r3, r3, #24
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	071b      	lsls	r3, r3, #28
 8003e60:	4919      	ldr	r1, [pc, #100]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e68:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a16      	ldr	r2, [pc, #88]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e74:	f7fe fa94 	bl	80023a0 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e7c:	f7fe fa90 	bl	80023a0 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0d7      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	f040 80cd 	bne.w	800403c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a08      	ldr	r2, [pc, #32]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eae:	f7fe fa77 	bl	80023a0 <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003eb6:	f7fe fa73 	bl	80023a0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b64      	cmp	r3, #100	; 0x64
 8003ec2:	d903      	bls.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e0ba      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ec8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ecc:	4b5e      	ldr	r3, [pc, #376]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed8:	d0ed      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d02e      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d12a      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f02:	4b51      	ldr	r3, [pc, #324]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f10:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	0f1b      	lsrs	r3, r3, #28
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	019a      	lsls	r2, r3, #6
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	061b      	lsls	r3, r3, #24
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	071b      	lsls	r3, r3, #28
 8003f36:	4944      	ldr	r1, [pc, #272]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f3e:	4b42      	ldr	r3, [pc, #264]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	493d      	ldr	r1, [pc, #244]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d022      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f6c:	d11d      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	0e1b      	lsrs	r3, r3, #24
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f7c:	4b32      	ldr	r3, [pc, #200]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	0f1b      	lsrs	r3, r3, #28
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	019a      	lsls	r2, r3, #6
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	431a      	orrs	r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	071b      	lsls	r3, r3, #28
 8003fa2:	4929      	ldr	r1, [pc, #164]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d028      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fb6:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	0e1b      	lsrs	r3, r3, #24
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fc4:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	019a      	lsls	r2, r3, #6
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	071b      	lsls	r3, r3, #28
 8003fea:	4917      	ldr	r1, [pc, #92]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	4911      	ldr	r1, [pc, #68]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004014:	f7fe f9c4 	bl	80023a0 <HAL_GetTick>
 8004018:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800401a:	e008      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800401c:	f7fe f9c0 	bl	80023a0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	; 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e007      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800403a:	d1ef      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800

0800404c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e049      	b.n	80040f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fd ff7e 	bl	8001f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f000 fd58 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d001      	beq.n	8004114 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e04c      	b.n	80041ae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a26      	ldr	r2, [pc, #152]	; (80041bc <HAL_TIM_Base_Start+0xc0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d022      	beq.n	800416c <HAL_TIM_Base_Start+0x70>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412e:	d01d      	beq.n	800416c <HAL_TIM_Base_Start+0x70>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <HAL_TIM_Base_Start+0xc4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d018      	beq.n	800416c <HAL_TIM_Base_Start+0x70>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a21      	ldr	r2, [pc, #132]	; (80041c4 <HAL_TIM_Base_Start+0xc8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <HAL_TIM_Base_Start+0x70>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1f      	ldr	r2, [pc, #124]	; (80041c8 <HAL_TIM_Base_Start+0xcc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00e      	beq.n	800416c <HAL_TIM_Base_Start+0x70>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1e      	ldr	r2, [pc, #120]	; (80041cc <HAL_TIM_Base_Start+0xd0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_TIM_Base_Start+0x70>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1c      	ldr	r2, [pc, #112]	; (80041d0 <HAL_TIM_Base_Start+0xd4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_TIM_Base_Start+0x70>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_TIM_Base_Start+0xd8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d115      	bne.n	8004198 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_TIM_Base_Start+0xdc>)
 8004174:	4013      	ands	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b06      	cmp	r3, #6
 800417c:	d015      	beq.n	80041aa <HAL_TIM_Base_Start+0xae>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d011      	beq.n	80041aa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004196:	e008      	b.n	80041aa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e000      	b.n	80041ac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40010400 	.word	0x40010400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40001800 	.word	0x40001800
 80041d8:	00010007 	.word	0x00010007

080041dc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10f      	bne.n	8004214 <HAL_TIM_Base_Stop+0x38>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a1a      	ldr	r2, [r3, #32]
 80041fa:	f240 4344 	movw	r3, #1092	; 0x444
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d107      	bne.n	8004214 <HAL_TIM_Base_Stop+0x38>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e049      	b.n	80042d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f841 	bl	80042d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3304      	adds	r3, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f000 fc69 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_TIM_PWM_Start+0x24>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e03c      	b.n	800438a <HAL_TIM_PWM_Start+0x9e>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b04      	cmp	r3, #4
 8004314:	d109      	bne.n	800432a <HAL_TIM_PWM_Start+0x3e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e02f      	b.n	800438a <HAL_TIM_PWM_Start+0x9e>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d109      	bne.n	8004344 <HAL_TIM_PWM_Start+0x58>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e022      	b.n	800438a <HAL_TIM_PWM_Start+0x9e>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d109      	bne.n	800435e <HAL_TIM_PWM_Start+0x72>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	bf14      	ite	ne
 8004356:	2301      	movne	r3, #1
 8004358:	2300      	moveq	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	e015      	b.n	800438a <HAL_TIM_PWM_Start+0x9e>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b10      	cmp	r3, #16
 8004362:	d109      	bne.n	8004378 <HAL_TIM_PWM_Start+0x8c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e008      	b.n	800438a <HAL_TIM_PWM_Start+0x9e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e092      	b.n	80044b8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <HAL_TIM_PWM_Start+0xb6>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a0:	e023      	b.n	80043ea <HAL_TIM_PWM_Start+0xfe>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d104      	bne.n	80043b2 <HAL_TIM_PWM_Start+0xc6>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b0:	e01b      	b.n	80043ea <HAL_TIM_PWM_Start+0xfe>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_PWM_Start+0xd6>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c0:	e013      	b.n	80043ea <HAL_TIM_PWM_Start+0xfe>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_PWM_Start+0xe6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043d0:	e00b      	b.n	80043ea <HAL_TIM_PWM_Start+0xfe>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_PWM_Start+0xf6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e0:	e003      	b.n	80043ea <HAL_TIM_PWM_Start+0xfe>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2201      	movs	r2, #1
 80043f0:	6839      	ldr	r1, [r7, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 ff3c 	bl	8005270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	; (80044c0 <HAL_TIM_PWM_Start+0x1d4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_TIM_PWM_Start+0x120>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <HAL_TIM_PWM_Start+0x1d8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_TIM_PWM_Start+0x124>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_TIM_PWM_Start+0x126>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a25      	ldr	r2, [pc, #148]	; (80044c0 <HAL_TIM_PWM_Start+0x1d4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004438:	d01d      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a22      	ldr	r2, [pc, #136]	; (80044c8 <HAL_TIM_PWM_Start+0x1dc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a20      	ldr	r2, [pc, #128]	; (80044cc <HAL_TIM_PWM_Start+0x1e0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <HAL_TIM_PWM_Start+0x1e4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <HAL_TIM_PWM_Start+0x1d8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1b      	ldr	r2, [pc, #108]	; (80044d4 <HAL_TIM_PWM_Start+0x1e8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIM_PWM_Start+0x18a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <HAL_TIM_PWM_Start+0x1ec>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d115      	bne.n	80044a2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_TIM_PWM_Start+0x1f0>)
 800447e:	4013      	ands	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d015      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x1c8>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448e:	d011      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	e008      	b.n	80044b4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	e000      	b.n	80044b6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40010400 	.word	0x40010400
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800
 80044d0:	40000c00 	.word	0x40000c00
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40001800 	.word	0x40001800
 80044dc:	00010007 	.word	0x00010007

080044e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0202 	mvn.w	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 faee 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fae0 	bl	8004af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 faf1 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0204 	mvn.w	r2, #4
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fac4 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fab6 	bl	8004af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fac7 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0208 	mvn.w	r2, #8
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2204      	movs	r2, #4
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa9a 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa8c 	bl	8004af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fa9d 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0210 	mvn.w	r2, #16
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2208      	movs	r2, #8
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa70 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fa62 	bl	8004af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fa73 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0201 	mvn.w	r2, #1
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa3c 	bl	8004adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b80      	cmp	r3, #128	; 0x80
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 ff2c 	bl	80054e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469e:	d10e      	bne.n	80046be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b80      	cmp	r3, #128	; 0x80
 80046ac:	d107      	bne.n	80046be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 ff1f 	bl	80054fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b40      	cmp	r3, #64	; 0x40
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fa21 	bl	8004b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d10e      	bne.n	8004716 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b20      	cmp	r3, #32
 8004704:	d107      	bne.n	8004716 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0220 	mvn.w	r2, #32
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fedf 	bl	80054d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800473a:	2302      	movs	r3, #2
 800473c:	e0ff      	b.n	800493e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b14      	cmp	r3, #20
 800474a:	f200 80f0 	bhi.w	800492e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	080047a9 	.word	0x080047a9
 8004758:	0800492f 	.word	0x0800492f
 800475c:	0800492f 	.word	0x0800492f
 8004760:	0800492f 	.word	0x0800492f
 8004764:	080047e9 	.word	0x080047e9
 8004768:	0800492f 	.word	0x0800492f
 800476c:	0800492f 	.word	0x0800492f
 8004770:	0800492f 	.word	0x0800492f
 8004774:	0800482b 	.word	0x0800482b
 8004778:	0800492f 	.word	0x0800492f
 800477c:	0800492f 	.word	0x0800492f
 8004780:	0800492f 	.word	0x0800492f
 8004784:	0800486b 	.word	0x0800486b
 8004788:	0800492f 	.word	0x0800492f
 800478c:	0800492f 	.word	0x0800492f
 8004790:	0800492f 	.word	0x0800492f
 8004794:	080048ad 	.word	0x080048ad
 8004798:	0800492f 	.word	0x0800492f
 800479c:	0800492f 	.word	0x0800492f
 80047a0:	0800492f 	.word	0x0800492f
 80047a4:	080048ed 	.word	0x080048ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fa66 	bl	8004c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0208 	orr.w	r2, r2, #8
 80047c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0204 	bic.w	r2, r2, #4
 80047d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6999      	ldr	r1, [r3, #24]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	619a      	str	r2, [r3, #24]
      break;
 80047e6:	e0a5      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fab8 	bl	8004d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6999      	ldr	r1, [r3, #24]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	619a      	str	r2, [r3, #24]
      break;
 8004828:	e084      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fb0f 	bl	8004e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0208 	orr.w	r2, r2, #8
 8004844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0204 	bic.w	r2, r2, #4
 8004854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69d9      	ldr	r1, [r3, #28]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	61da      	str	r2, [r3, #28]
      break;
 8004868:	e064      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fb65 	bl	8004f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69d9      	ldr	r1, [r3, #28]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	021a      	lsls	r2, r3, #8
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	61da      	str	r2, [r3, #28]
      break;
 80048aa:	e043      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fb9c 	bl	8004ff0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0208 	orr.w	r2, r2, #8
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0204 	bic.w	r2, r2, #4
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048ea:	e023      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fbce 	bl	8005094 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004906:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004916:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	021a      	lsls	r2, r3, #8
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800492c:	e002      	b.n	8004934 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
      break;
 8004932:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800493c:	7dfb      	ldrb	r3, [r7, #23]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop

08004948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIM_ConfigClockSource+0x1c>
 8004960:	2302      	movs	r3, #2
 8004962:	e0b4      	b.n	8004ace <HAL_TIM_ConfigClockSource+0x186>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	4b56      	ldr	r3, [pc, #344]	; (8004ad8 <HAL_TIM_ConfigClockSource+0x190>)
 8004980:	4013      	ands	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499c:	d03e      	beq.n	8004a1c <HAL_TIM_ConfigClockSource+0xd4>
 800499e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a2:	f200 8087 	bhi.w	8004ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80049a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049aa:	f000 8086 	beq.w	8004aba <HAL_TIM_ConfigClockSource+0x172>
 80049ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b2:	d87f      	bhi.n	8004ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80049b4:	2b70      	cmp	r3, #112	; 0x70
 80049b6:	d01a      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0xa6>
 80049b8:	2b70      	cmp	r3, #112	; 0x70
 80049ba:	d87b      	bhi.n	8004ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80049bc:	2b60      	cmp	r3, #96	; 0x60
 80049be:	d050      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x11a>
 80049c0:	2b60      	cmp	r3, #96	; 0x60
 80049c2:	d877      	bhi.n	8004ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80049c4:	2b50      	cmp	r3, #80	; 0x50
 80049c6:	d03c      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0xfa>
 80049c8:	2b50      	cmp	r3, #80	; 0x50
 80049ca:	d873      	bhi.n	8004ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d058      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x13a>
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d86f      	bhi.n	8004ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80049d4:	2b30      	cmp	r3, #48	; 0x30
 80049d6:	d064      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80049d8:	2b30      	cmp	r3, #48	; 0x30
 80049da:	d86b      	bhi.n	8004ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d060      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d867      	bhi.n	8004ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d05c      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d05a      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80049ec:	e062      	b.n	8004ab4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6899      	ldr	r1, [r3, #8]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f000 fc17 	bl	8005230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	609a      	str	r2, [r3, #8]
      break;
 8004a1a:	e04f      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	6899      	ldr	r1, [r3, #8]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f000 fc00 	bl	8005230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a3e:	609a      	str	r2, [r3, #8]
      break;
 8004a40:	e03c      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6859      	ldr	r1, [r3, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f000 fb74 	bl	800513c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2150      	movs	r1, #80	; 0x50
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fbcd 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004a60:	e02c      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f000 fb93 	bl	800519a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2160      	movs	r1, #96	; 0x60
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fbbd 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004a80:	e01c      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f000 fb54 	bl	800513c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2140      	movs	r1, #64	; 0x40
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fbad 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004aa0:	e00c      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f000 fba4 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004ab2:	e003      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab8:	e000      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	fffeff88 	.word	0xfffeff88

08004adc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a40      	ldr	r2, [pc, #256]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3d      	ldr	r2, [pc, #244]	; (8004c58 <TIM_Base_SetConfig+0x118>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3c      	ldr	r2, [pc, #240]	; (8004c5c <TIM_Base_SetConfig+0x11c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3b      	ldr	r2, [pc, #236]	; (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d02b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d027      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	; (8004c58 <TIM_Base_SetConfig+0x118>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d023      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <TIM_Base_SetConfig+0x11c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <TIM_Base_SetConfig+0x120>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a29      	ldr	r2, [pc, #164]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d017      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a28      	ldr	r2, [pc, #160]	; (8004c68 <TIM_Base_SetConfig+0x128>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <TIM_Base_SetConfig+0x130>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a25      	ldr	r2, [pc, #148]	; (8004c74 <TIM_Base_SetConfig+0x134>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <TIM_Base_SetConfig+0x138>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a23      	ldr	r2, [pc, #140]	; (8004c7c <TIM_Base_SetConfig+0x13c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d108      	bne.n	8004c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_Base_SetConfig+0xf8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0c      	ldr	r2, [pc, #48]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d103      	bne.n	8004c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	615a      	str	r2, [r3, #20]
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40010400 	.word	0x40010400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800
 8004c74:	40001800 	.word	0x40001800
 8004c78:	40001c00 	.word	0x40001c00
 8004c7c:	40002000 	.word	0x40002000

08004c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <TIM_OC1_SetConfig+0xd8>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0302 	bic.w	r3, r3, #2
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <TIM_OC1_SetConfig+0xdc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC1_SetConfig+0x64>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <TIM_OC1_SetConfig+0xe0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d10c      	bne.n	8004cfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0308 	bic.w	r3, r3, #8
 8004cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 0304 	bic.w	r3, r3, #4
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <TIM_OC1_SetConfig+0xdc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d003      	beq.n	8004d0e <TIM_OC1_SetConfig+0x8e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <TIM_OC1_SetConfig+0xe0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d111      	bne.n	8004d32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	621a      	str	r2, [r3, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	fffeff8f 	.word	0xfffeff8f
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40010400 	.word	0x40010400

08004d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0210 	bic.w	r2, r3, #16
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	; (8004e48 <TIM_OC2_SetConfig+0xe4>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0320 	bic.w	r3, r3, #32
 8004dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <TIM_OC2_SetConfig+0xe8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC2_SetConfig+0x68>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <TIM_OC2_SetConfig+0xec>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d10d      	bne.n	8004de8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <TIM_OC2_SetConfig+0xe8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_OC2_SetConfig+0x94>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <TIM_OC2_SetConfig+0xec>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d113      	bne.n	8004e20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	feff8fff 	.word	0xfeff8fff
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40010400 	.word	0x40010400

08004e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <TIM_OC3_SetConfig+0xe0>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a22      	ldr	r2, [pc, #136]	; (8004f38 <TIM_OC3_SetConfig+0xe4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_OC3_SetConfig+0x66>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <TIM_OC3_SetConfig+0xe8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10d      	bne.n	8004ed6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <TIM_OC3_SetConfig+0xe4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_OC3_SetConfig+0x92>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <TIM_OC3_SetConfig+0xe8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d113      	bne.n	8004f0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	621a      	str	r2, [r3, #32]
}
 8004f28:	bf00      	nop
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	fffeff8f 	.word	0xfffeff8f
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40010400 	.word	0x40010400

08004f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <TIM_OC4_SetConfig+0xa4>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	031b      	lsls	r3, r3, #12
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <TIM_OC4_SetConfig+0xa8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_OC4_SetConfig+0x68>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a12      	ldr	r2, [pc, #72]	; (8004fec <TIM_OC4_SetConfig+0xac>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d109      	bne.n	8004fbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	019b      	lsls	r3, r3, #6
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	feff8fff 	.word	0xfeff8fff
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010400 	.word	0x40010400

08004ff0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <TIM_OC5_SetConfig+0x98>)
 800501c:	4013      	ands	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005030:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a12      	ldr	r2, [pc, #72]	; (800508c <TIM_OC5_SetConfig+0x9c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_OC5_SetConfig+0x5e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a11      	ldr	r2, [pc, #68]	; (8005090 <TIM_OC5_SetConfig+0xa0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d109      	bne.n	8005062 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005054:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	621a      	str	r2, [r3, #32]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	fffeff8f 	.word	0xfffeff8f
 800508c:	40010000 	.word	0x40010000
 8005090:	40010400 	.word	0x40010400

08005094 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4b1c      	ldr	r3, [pc, #112]	; (8005130 <TIM_OC6_SetConfig+0x9c>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	051b      	lsls	r3, r3, #20
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a13      	ldr	r2, [pc, #76]	; (8005134 <TIM_OC6_SetConfig+0xa0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_OC6_SetConfig+0x60>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a12      	ldr	r2, [pc, #72]	; (8005138 <TIM_OC6_SetConfig+0xa4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d109      	bne.n	8005108 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	029b      	lsls	r3, r3, #10
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	feff8fff 	.word	0xfeff8fff
 8005134:	40010000 	.word	0x40010000
 8005138:	40010400 	.word	0x40010400

0800513c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 030a 	bic.w	r3, r3, #10
 8005178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519a:	b480      	push	{r7}
 800519c:	b087      	sub	sp, #28
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0210 	bic.w	r2, r3, #16
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	f043 0307 	orr.w	r3, r3, #7
 800521c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	609a      	str	r2, [r3, #8]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800524a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	021a      	lsls	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	431a      	orrs	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	2201      	movs	r2, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1a      	ldr	r2, [r3, #32]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	43db      	mvns	r3, r3
 8005292:	401a      	ands	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e06d      	b.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a30      	ldr	r2, [pc, #192]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2f      	ldr	r2, [pc, #188]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d108      	bne.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800530e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a20      	ldr	r2, [pc, #128]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d022      	beq.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005346:	d01d      	beq.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d018      	beq.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1c      	ldr	r2, [pc, #112]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1a      	ldr	r2, [pc, #104]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00e      	beq.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d009      	beq.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a16      	ldr	r2, [pc, #88]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d10c      	bne.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800538a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	4313      	orrs	r3, r2
 8005394:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40010400 	.word	0x40010400
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40001800 	.word	0x40001800

080053d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e065      	b.n	80054c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a16      	ldr	r2, [pc, #88]	; (80054cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d115      	bne.n	80054ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	051b      	lsls	r3, r3, #20
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40010400 	.word	0x40010400

080054d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e040      	b.n	80055a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fc fe5c 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2224      	movs	r2, #36	; 0x24
 800553c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f82c 	bl	80055ac <UART_SetConfig>
 8005554:	4603      	mov	r3, r0
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e022      	b.n	80055a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa84 	bl	8005a74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800557a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800558a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fb0b 	bl	8005bb8 <UART_CheckIdleState>
 80055a2:	4603      	mov	r3, r0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4ba6      	ldr	r3, [pc, #664]	; (8005870 <UART_SetConfig+0x2c4>)
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	6979      	ldr	r1, [r7, #20]
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	430a      	orrs	r2, r1
 800561c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a94      	ldr	r2, [pc, #592]	; (8005874 <UART_SetConfig+0x2c8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d120      	bne.n	800566a <UART_SetConfig+0xbe>
 8005628:	4b93      	ldr	r3, [pc, #588]	; (8005878 <UART_SetConfig+0x2cc>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b03      	cmp	r3, #3
 8005634:	d816      	bhi.n	8005664 <UART_SetConfig+0xb8>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <UART_SetConfig+0x90>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	0800564d 	.word	0x0800564d
 8005640:	08005659 	.word	0x08005659
 8005644:	08005653 	.word	0x08005653
 8005648:	0800565f 	.word	0x0800565f
 800564c:	2301      	movs	r3, #1
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e150      	b.n	80058f4 <UART_SetConfig+0x348>
 8005652:	2302      	movs	r3, #2
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e14d      	b.n	80058f4 <UART_SetConfig+0x348>
 8005658:	2304      	movs	r3, #4
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e14a      	b.n	80058f4 <UART_SetConfig+0x348>
 800565e:	2308      	movs	r3, #8
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e147      	b.n	80058f4 <UART_SetConfig+0x348>
 8005664:	2310      	movs	r3, #16
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e144      	b.n	80058f4 <UART_SetConfig+0x348>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a83      	ldr	r2, [pc, #524]	; (800587c <UART_SetConfig+0x2d0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d132      	bne.n	80056da <UART_SetConfig+0x12e>
 8005674:	4b80      	ldr	r3, [pc, #512]	; (8005878 <UART_SetConfig+0x2cc>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b0c      	cmp	r3, #12
 8005680:	d828      	bhi.n	80056d4 <UART_SetConfig+0x128>
 8005682:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0xdc>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056bd 	.word	0x080056bd
 800568c:	080056d5 	.word	0x080056d5
 8005690:	080056d5 	.word	0x080056d5
 8005694:	080056d5 	.word	0x080056d5
 8005698:	080056c9 	.word	0x080056c9
 800569c:	080056d5 	.word	0x080056d5
 80056a0:	080056d5 	.word	0x080056d5
 80056a4:	080056d5 	.word	0x080056d5
 80056a8:	080056c3 	.word	0x080056c3
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056d5 	.word	0x080056d5
 80056b8:	080056cf 	.word	0x080056cf
 80056bc:	2300      	movs	r3, #0
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e118      	b.n	80058f4 <UART_SetConfig+0x348>
 80056c2:	2302      	movs	r3, #2
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e115      	b.n	80058f4 <UART_SetConfig+0x348>
 80056c8:	2304      	movs	r3, #4
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e112      	b.n	80058f4 <UART_SetConfig+0x348>
 80056ce:	2308      	movs	r3, #8
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e10f      	b.n	80058f4 <UART_SetConfig+0x348>
 80056d4:	2310      	movs	r3, #16
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e10c      	b.n	80058f4 <UART_SetConfig+0x348>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a68      	ldr	r2, [pc, #416]	; (8005880 <UART_SetConfig+0x2d4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d120      	bne.n	8005726 <UART_SetConfig+0x17a>
 80056e4:	4b64      	ldr	r3, [pc, #400]	; (8005878 <UART_SetConfig+0x2cc>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056ee:	2b30      	cmp	r3, #48	; 0x30
 80056f0:	d013      	beq.n	800571a <UART_SetConfig+0x16e>
 80056f2:	2b30      	cmp	r3, #48	; 0x30
 80056f4:	d814      	bhi.n	8005720 <UART_SetConfig+0x174>
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d009      	beq.n	800570e <UART_SetConfig+0x162>
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d810      	bhi.n	8005720 <UART_SetConfig+0x174>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <UART_SetConfig+0x15c>
 8005702:	2b10      	cmp	r3, #16
 8005704:	d006      	beq.n	8005714 <UART_SetConfig+0x168>
 8005706:	e00b      	b.n	8005720 <UART_SetConfig+0x174>
 8005708:	2300      	movs	r3, #0
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e0f2      	b.n	80058f4 <UART_SetConfig+0x348>
 800570e:	2302      	movs	r3, #2
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e0ef      	b.n	80058f4 <UART_SetConfig+0x348>
 8005714:	2304      	movs	r3, #4
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e0ec      	b.n	80058f4 <UART_SetConfig+0x348>
 800571a:	2308      	movs	r3, #8
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e0e9      	b.n	80058f4 <UART_SetConfig+0x348>
 8005720:	2310      	movs	r3, #16
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e0e6      	b.n	80058f4 <UART_SetConfig+0x348>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a56      	ldr	r2, [pc, #344]	; (8005884 <UART_SetConfig+0x2d8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d120      	bne.n	8005772 <UART_SetConfig+0x1c6>
 8005730:	4b51      	ldr	r3, [pc, #324]	; (8005878 <UART_SetConfig+0x2cc>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005736:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800573a:	2bc0      	cmp	r3, #192	; 0xc0
 800573c:	d013      	beq.n	8005766 <UART_SetConfig+0x1ba>
 800573e:	2bc0      	cmp	r3, #192	; 0xc0
 8005740:	d814      	bhi.n	800576c <UART_SetConfig+0x1c0>
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d009      	beq.n	800575a <UART_SetConfig+0x1ae>
 8005746:	2b80      	cmp	r3, #128	; 0x80
 8005748:	d810      	bhi.n	800576c <UART_SetConfig+0x1c0>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <UART_SetConfig+0x1a8>
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	d006      	beq.n	8005760 <UART_SetConfig+0x1b4>
 8005752:	e00b      	b.n	800576c <UART_SetConfig+0x1c0>
 8005754:	2300      	movs	r3, #0
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e0cc      	b.n	80058f4 <UART_SetConfig+0x348>
 800575a:	2302      	movs	r3, #2
 800575c:	77fb      	strb	r3, [r7, #31]
 800575e:	e0c9      	b.n	80058f4 <UART_SetConfig+0x348>
 8005760:	2304      	movs	r3, #4
 8005762:	77fb      	strb	r3, [r7, #31]
 8005764:	e0c6      	b.n	80058f4 <UART_SetConfig+0x348>
 8005766:	2308      	movs	r3, #8
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e0c3      	b.n	80058f4 <UART_SetConfig+0x348>
 800576c:	2310      	movs	r3, #16
 800576e:	77fb      	strb	r3, [r7, #31]
 8005770:	e0c0      	b.n	80058f4 <UART_SetConfig+0x348>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a44      	ldr	r2, [pc, #272]	; (8005888 <UART_SetConfig+0x2dc>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d125      	bne.n	80057c8 <UART_SetConfig+0x21c>
 800577c:	4b3e      	ldr	r3, [pc, #248]	; (8005878 <UART_SetConfig+0x2cc>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800578a:	d017      	beq.n	80057bc <UART_SetConfig+0x210>
 800578c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005790:	d817      	bhi.n	80057c2 <UART_SetConfig+0x216>
 8005792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005796:	d00b      	beq.n	80057b0 <UART_SetConfig+0x204>
 8005798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579c:	d811      	bhi.n	80057c2 <UART_SetConfig+0x216>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <UART_SetConfig+0x1fe>
 80057a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a6:	d006      	beq.n	80057b6 <UART_SetConfig+0x20a>
 80057a8:	e00b      	b.n	80057c2 <UART_SetConfig+0x216>
 80057aa:	2300      	movs	r3, #0
 80057ac:	77fb      	strb	r3, [r7, #31]
 80057ae:	e0a1      	b.n	80058f4 <UART_SetConfig+0x348>
 80057b0:	2302      	movs	r3, #2
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e09e      	b.n	80058f4 <UART_SetConfig+0x348>
 80057b6:	2304      	movs	r3, #4
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e09b      	b.n	80058f4 <UART_SetConfig+0x348>
 80057bc:	2308      	movs	r3, #8
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e098      	b.n	80058f4 <UART_SetConfig+0x348>
 80057c2:	2310      	movs	r3, #16
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e095      	b.n	80058f4 <UART_SetConfig+0x348>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a2f      	ldr	r2, [pc, #188]	; (800588c <UART_SetConfig+0x2e0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d125      	bne.n	800581e <UART_SetConfig+0x272>
 80057d2:	4b29      	ldr	r3, [pc, #164]	; (8005878 <UART_SetConfig+0x2cc>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057e0:	d017      	beq.n	8005812 <UART_SetConfig+0x266>
 80057e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057e6:	d817      	bhi.n	8005818 <UART_SetConfig+0x26c>
 80057e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ec:	d00b      	beq.n	8005806 <UART_SetConfig+0x25a>
 80057ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f2:	d811      	bhi.n	8005818 <UART_SetConfig+0x26c>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <UART_SetConfig+0x254>
 80057f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fc:	d006      	beq.n	800580c <UART_SetConfig+0x260>
 80057fe:	e00b      	b.n	8005818 <UART_SetConfig+0x26c>
 8005800:	2301      	movs	r3, #1
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e076      	b.n	80058f4 <UART_SetConfig+0x348>
 8005806:	2302      	movs	r3, #2
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e073      	b.n	80058f4 <UART_SetConfig+0x348>
 800580c:	2304      	movs	r3, #4
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e070      	b.n	80058f4 <UART_SetConfig+0x348>
 8005812:	2308      	movs	r3, #8
 8005814:	77fb      	strb	r3, [r7, #31]
 8005816:	e06d      	b.n	80058f4 <UART_SetConfig+0x348>
 8005818:	2310      	movs	r3, #16
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e06a      	b.n	80058f4 <UART_SetConfig+0x348>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1b      	ldr	r2, [pc, #108]	; (8005890 <UART_SetConfig+0x2e4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d138      	bne.n	800589a <UART_SetConfig+0x2ee>
 8005828:	4b13      	ldr	r3, [pc, #76]	; (8005878 <UART_SetConfig+0x2cc>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005832:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005836:	d017      	beq.n	8005868 <UART_SetConfig+0x2bc>
 8005838:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800583c:	d82a      	bhi.n	8005894 <UART_SetConfig+0x2e8>
 800583e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005842:	d00b      	beq.n	800585c <UART_SetConfig+0x2b0>
 8005844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005848:	d824      	bhi.n	8005894 <UART_SetConfig+0x2e8>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <UART_SetConfig+0x2aa>
 800584e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005852:	d006      	beq.n	8005862 <UART_SetConfig+0x2b6>
 8005854:	e01e      	b.n	8005894 <UART_SetConfig+0x2e8>
 8005856:	2300      	movs	r3, #0
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e04b      	b.n	80058f4 <UART_SetConfig+0x348>
 800585c:	2302      	movs	r3, #2
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e048      	b.n	80058f4 <UART_SetConfig+0x348>
 8005862:	2304      	movs	r3, #4
 8005864:	77fb      	strb	r3, [r7, #31]
 8005866:	e045      	b.n	80058f4 <UART_SetConfig+0x348>
 8005868:	2308      	movs	r3, #8
 800586a:	77fb      	strb	r3, [r7, #31]
 800586c:	e042      	b.n	80058f4 <UART_SetConfig+0x348>
 800586e:	bf00      	nop
 8005870:	efff69f3 	.word	0xefff69f3
 8005874:	40011000 	.word	0x40011000
 8005878:	40023800 	.word	0x40023800
 800587c:	40004400 	.word	0x40004400
 8005880:	40004800 	.word	0x40004800
 8005884:	40004c00 	.word	0x40004c00
 8005888:	40005000 	.word	0x40005000
 800588c:	40011400 	.word	0x40011400
 8005890:	40007800 	.word	0x40007800
 8005894:	2310      	movs	r3, #16
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e02c      	b.n	80058f4 <UART_SetConfig+0x348>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a72      	ldr	r2, [pc, #456]	; (8005a68 <UART_SetConfig+0x4bc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d125      	bne.n	80058f0 <UART_SetConfig+0x344>
 80058a4:	4b71      	ldr	r3, [pc, #452]	; (8005a6c <UART_SetConfig+0x4c0>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058b2:	d017      	beq.n	80058e4 <UART_SetConfig+0x338>
 80058b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058b8:	d817      	bhi.n	80058ea <UART_SetConfig+0x33e>
 80058ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058be:	d00b      	beq.n	80058d8 <UART_SetConfig+0x32c>
 80058c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c4:	d811      	bhi.n	80058ea <UART_SetConfig+0x33e>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <UART_SetConfig+0x326>
 80058ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058ce:	d006      	beq.n	80058de <UART_SetConfig+0x332>
 80058d0:	e00b      	b.n	80058ea <UART_SetConfig+0x33e>
 80058d2:	2300      	movs	r3, #0
 80058d4:	77fb      	strb	r3, [r7, #31]
 80058d6:	e00d      	b.n	80058f4 <UART_SetConfig+0x348>
 80058d8:	2302      	movs	r3, #2
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e00a      	b.n	80058f4 <UART_SetConfig+0x348>
 80058de:	2304      	movs	r3, #4
 80058e0:	77fb      	strb	r3, [r7, #31]
 80058e2:	e007      	b.n	80058f4 <UART_SetConfig+0x348>
 80058e4:	2308      	movs	r3, #8
 80058e6:	77fb      	strb	r3, [r7, #31]
 80058e8:	e004      	b.n	80058f4 <UART_SetConfig+0x348>
 80058ea:	2310      	movs	r3, #16
 80058ec:	77fb      	strb	r3, [r7, #31]
 80058ee:	e001      	b.n	80058f4 <UART_SetConfig+0x348>
 80058f0:	2310      	movs	r3, #16
 80058f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fc:	d15b      	bne.n	80059b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80058fe:	7ffb      	ldrb	r3, [r7, #31]
 8005900:	2b08      	cmp	r3, #8
 8005902:	d828      	bhi.n	8005956 <UART_SetConfig+0x3aa>
 8005904:	a201      	add	r2, pc, #4	; (adr r2, 800590c <UART_SetConfig+0x360>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	08005931 	.word	0x08005931
 8005910:	08005939 	.word	0x08005939
 8005914:	08005941 	.word	0x08005941
 8005918:	08005957 	.word	0x08005957
 800591c:	08005947 	.word	0x08005947
 8005920:	08005957 	.word	0x08005957
 8005924:	08005957 	.word	0x08005957
 8005928:	08005957 	.word	0x08005957
 800592c:	0800594f 	.word	0x0800594f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005930:	f7fd ff74 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 8005934:	61b8      	str	r0, [r7, #24]
        break;
 8005936:	e013      	b.n	8005960 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005938:	f7fd ff84 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 800593c:	61b8      	str	r0, [r7, #24]
        break;
 800593e:	e00f      	b.n	8005960 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005940:	4b4b      	ldr	r3, [pc, #300]	; (8005a70 <UART_SetConfig+0x4c4>)
 8005942:	61bb      	str	r3, [r7, #24]
        break;
 8005944:	e00c      	b.n	8005960 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005946:	f7fd fe97 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 800594a:	61b8      	str	r0, [r7, #24]
        break;
 800594c:	e008      	b.n	8005960 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800594e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005952:	61bb      	str	r3, [r7, #24]
        break;
 8005954:	e004      	b.n	8005960 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	77bb      	strb	r3, [r7, #30]
        break;
 800595e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d074      	beq.n	8005a50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	005a      	lsls	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	441a      	add	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b0f      	cmp	r3, #15
 8005980:	d916      	bls.n	80059b0 <UART_SetConfig+0x404>
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d212      	bcs.n	80059b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f023 030f 	bic.w	r3, r3, #15
 8005992:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	b29b      	uxth	r3, r3
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	b29a      	uxth	r2, r3
 80059a0:	89fb      	ldrh	r3, [r7, #14]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	89fa      	ldrh	r2, [r7, #14]
 80059ac:	60da      	str	r2, [r3, #12]
 80059ae:	e04f      	b.n	8005a50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	77bb      	strb	r3, [r7, #30]
 80059b4:	e04c      	b.n	8005a50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059b6:	7ffb      	ldrb	r3, [r7, #31]
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d828      	bhi.n	8005a0e <UART_SetConfig+0x462>
 80059bc:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <UART_SetConfig+0x418>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	08005a0f 	.word	0x08005a0f
 80059d4:	080059ff 	.word	0x080059ff
 80059d8:	08005a0f 	.word	0x08005a0f
 80059dc:	08005a0f 	.word	0x08005a0f
 80059e0:	08005a0f 	.word	0x08005a0f
 80059e4:	08005a07 	.word	0x08005a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fd ff18 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 80059ec:	61b8      	str	r0, [r7, #24]
        break;
 80059ee:	e013      	b.n	8005a18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f0:	f7fd ff28 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 80059f4:	61b8      	str	r0, [r7, #24]
        break;
 80059f6:	e00f      	b.n	8005a18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <UART_SetConfig+0x4c4>)
 80059fa:	61bb      	str	r3, [r7, #24]
        break;
 80059fc:	e00c      	b.n	8005a18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fe:	f7fd fe3b 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8005a02:	61b8      	str	r0, [r7, #24]
        break;
 8005a04:	e008      	b.n	8005a18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0a:	61bb      	str	r3, [r7, #24]
        break;
 8005a0c:	e004      	b.n	8005a18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	77bb      	strb	r3, [r7, #30]
        break;
 8005a16:	bf00      	nop
    }

    if (pclk != 0U)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d018      	beq.n	8005a50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	085a      	lsrs	r2, r3, #1
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	441a      	add	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b0f      	cmp	r3, #15
 8005a36:	d909      	bls.n	8005a4c <UART_SetConfig+0x4a0>
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3e:	d205      	bcs.n	8005a4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	e001      	b.n	8005a50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40007c00 	.word	0x40007c00
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	00f42400 	.word	0x00f42400

08005a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01a      	beq.n	8005b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b72:	d10a      	bne.n	8005b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	605a      	str	r2, [r3, #4]
  }
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc8:	f7fc fbea 	bl	80023a0 <HAL_GetTick>
 8005bcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d10e      	bne.n	8005bfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f81b 	bl	8005c26 <UART_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e011      	b.n	8005c1e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b09c      	sub	sp, #112	; 0x70
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c36:	e0a7      	b.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3e:	f000 80a3 	beq.w	8005d88 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c42:	f7fc fbad 	bl	80023a0 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d13f      	bne.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c78:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e6      	bne.n	8005c58 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005caa:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e5      	bne.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e068      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d050      	beq.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf4:	d148      	bne.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cfe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d20:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e6      	bne.n	8005d00 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3308      	adds	r3, #8
 8005d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	613b      	str	r3, [r7, #16]
   return(result);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d52:	623a      	str	r2, [r7, #32]
 8005d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	69f9      	ldr	r1, [r7, #28]
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e5      	bne.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e010      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69da      	ldr	r2, [r3, #28]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4013      	ands	r3, r2
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	f43f af48 	beq.w	8005c38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3770      	adds	r7, #112	; 0x70
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <__libc_init_array>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	4d0d      	ldr	r5, [pc, #52]	; (8005dec <__libc_init_array+0x38>)
 8005db8:	4c0d      	ldr	r4, [pc, #52]	; (8005df0 <__libc_init_array+0x3c>)
 8005dba:	1b64      	subs	r4, r4, r5
 8005dbc:	10a4      	asrs	r4, r4, #2
 8005dbe:	2600      	movs	r6, #0
 8005dc0:	42a6      	cmp	r6, r4
 8005dc2:	d109      	bne.n	8005dd8 <__libc_init_array+0x24>
 8005dc4:	4d0b      	ldr	r5, [pc, #44]	; (8005df4 <__libc_init_array+0x40>)
 8005dc6:	4c0c      	ldr	r4, [pc, #48]	; (8005df8 <__libc_init_array+0x44>)
 8005dc8:	f000 f820 	bl	8005e0c <_init>
 8005dcc:	1b64      	subs	r4, r4, r5
 8005dce:	10a4      	asrs	r4, r4, #2
 8005dd0:	2600      	movs	r6, #0
 8005dd2:	42a6      	cmp	r6, r4
 8005dd4:	d105      	bne.n	8005de2 <__libc_init_array+0x2e>
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ddc:	4798      	blx	r3
 8005dde:	3601      	adds	r6, #1
 8005de0:	e7ee      	b.n	8005dc0 <__libc_init_array+0xc>
 8005de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de6:	4798      	blx	r3
 8005de8:	3601      	adds	r6, #1
 8005dea:	e7f2      	b.n	8005dd2 <__libc_init_array+0x1e>
 8005dec:	08005e44 	.word	0x08005e44
 8005df0:	08005e44 	.word	0x08005e44
 8005df4:	08005e44 	.word	0x08005e44
 8005df8:	08005e48 	.word	0x08005e48

08005dfc <memset>:
 8005dfc:	4402      	add	r2, r0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d100      	bne.n	8005e06 <memset+0xa>
 8005e04:	4770      	bx	lr
 8005e06:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0a:	e7f9      	b.n	8005e00 <memset+0x4>

08005e0c <_init>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr

08005e18 <_fini>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr
