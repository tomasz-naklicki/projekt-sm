
projektsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005388  08005388  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005390  08005390  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  080053a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  080053a4  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110e3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237f  00000000  00000000  0003111f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000334a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00034218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b5a  00000000  00000000  00034e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011673  00000000  00000000  0005a9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec2e5  00000000  00000000  0006c065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015834a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003718  00000000  00000000  0015839c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005358 	.word	0x08005358

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005358 	.word	0x08005358

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08c      	sub	sp, #48	; 0x30
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 031c 	add.w	r3, r7, #28
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b3a      	ldr	r3, [pc, #232]	; (800060c <MX_GPIO_Init+0x100>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a39      	ldr	r2, [pc, #228]	; (800060c <MX_GPIO_Init+0x100>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b37      	ldr	r3, [pc, #220]	; (800060c <MX_GPIO_Init+0x100>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	61bb      	str	r3, [r7, #24]
 8000538:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	4b34      	ldr	r3, [pc, #208]	; (800060c <MX_GPIO_Init+0x100>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a33      	ldr	r2, [pc, #204]	; (800060c <MX_GPIO_Init+0x100>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b31      	ldr	r3, [pc, #196]	; (800060c <MX_GPIO_Init+0x100>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <MX_GPIO_Init+0x100>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a2d      	ldr	r2, [pc, #180]	; (800060c <MX_GPIO_Init+0x100>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b2b      	ldr	r3, [pc, #172]	; (800060c <MX_GPIO_Init+0x100>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <MX_GPIO_Init+0x100>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a27      	ldr	r2, [pc, #156]	; (800060c <MX_GPIO_Init+0x100>)
 8000570:	f043 0310 	orr.w	r3, r3, #16
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b25      	ldr	r3, [pc, #148]	; (800060c <MX_GPIO_Init+0x100>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0310 	and.w	r3, r3, #16
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <MX_GPIO_Init+0x100>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a21      	ldr	r2, [pc, #132]	; (800060c <MX_GPIO_Init+0x100>)
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_GPIO_Init+0x100>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_GPIO_Init+0x100>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a1b      	ldr	r2, [pc, #108]	; (800060c <MX_GPIO_Init+0x100>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_GPIO_Init+0x100>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3_Pin|GPIO_PIN_4_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	21c0      	movs	r1, #192	; 0xc0
 80005b6:	4816      	ldr	r0, [pc, #88]	; (8000610 <MX_GPIO_Init+0x104>)
 80005b8:	f001 fb66 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1_Pin|GPIO_PIN_2_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80005c2:	4814      	ldr	r0, [pc, #80]	; (8000614 <MX_GPIO_Init+0x108>)
 80005c4:	f001 fb60 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3_Pin|GPIO_PIN_4_Pin;
 80005c8:	23c0      	movs	r3, #192	; 0xc0
 80005ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4619      	mov	r1, r3
 80005de:	480c      	ldr	r0, [pc, #48]	; (8000610 <MX_GPIO_Init+0x104>)
 80005e0:	f001 f98e 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1_Pin|GPIO_PIN_2_Pin;
 80005e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_GPIO_Init+0x108>)
 80005fe:	f001 f97f 	bl	8001900 <HAL_GPIO_Init>

}
 8000602:	bf00      	nop
 8000604:	3730      	adds	r7, #48	; 0x30
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40020000 	.word	0x40020000
 8000614:	40020c00 	.word	0x40020c00

08000618 <hc_sr04_init>:

#define HC_SR04_US_TO_CM_CONVERTER	58
#include "hc_sr04.h"

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2104      	movs	r1, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fe4c 	bl	80032dc <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	4619      	mov	r1, r3
 800064e:	4610      	mov	r0, r2
 8000650:	f002 fce8 	bl	8003024 <HAL_TIM_PWM_Start>
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <hc_sr04_convert_us_to_cm>:

uint32_t hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <hc_sr04_convert_us_to_cm+0x20>)
 8000668:	fba2 2303 	umull	r2, r3, r2, r3
 800066c:	095b      	lsrs	r3, r3, #5
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	8d3dcb09 	.word	0x8d3dcb09

08000680 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <HAL_TIM_IC_CaptureCallback+0x38>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d10e      	bne.n	80006b0 <HAL_TIM_IC_CaptureCallback+0x30>
	{

		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000692:	2104      	movs	r1, #4
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f003 fb4d 	bl	8003d34 <HAL_TIM_ReadCapturedValue>
 800069a:	4603      	mov	r3, r0
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_TIM_IC_CaptureCallback+0x3c>)
 800069e:	6013      	str	r3, [r2, #0]
		distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_TIM_IC_CaptureCallback+0x3c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffd9 	bl	800065c <hc_sr04_convert_us_to_cm>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_TIM_IC_CaptureCallback+0x40>)
 80006ae:	60d3      	str	r3, [r2, #12]
	}
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40010000 	.word	0x40010000
 80006bc:	20000038 	.word	0x20000038
 80006c0:	20000028 	.word	0x20000028

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 ff87 	bl	80015da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f82e 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f7ff ff1c 	bl	800050c <MX_GPIO_Init>
  MX_TIM2_Init();
 80006d4:	f000 fd4e 	bl	8001174 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 fec8 	bl	800146c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006dc:	f000 fca6 	bl	800102c <MX_TIM1_Init>
  MX_TIM3_Init();
 80006e0:	f000 fdbe 	bl	8001260 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 80006e4:	2308      	movs	r3, #8
 80006e6:	4a0d      	ldr	r2, [pc, #52]	; (800071c <main+0x58>)
 80006e8:	490d      	ldr	r1, [pc, #52]	; (8000720 <main+0x5c>)
 80006ea:	480e      	ldr	r0, [pc, #56]	; (8000724 <main+0x60>)
 80006ec:	f7ff ff94 	bl	8000618 <hc_sr04_init>
  HAL_TIM_Base_Start(&htim3);
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <main+0x64>)
 80006f2:	f002 fbc5 	bl	8002e80 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  move_clockwise(256, 1000);  // 256 half revolution
 80006f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80006fe:	f000 f987 	bl	8000a10 <move_clockwise>
	  HAL_Delay(100);
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f000 ffc6 	bl	8001694 <HAL_Delay>
	  move_anticlockwise(256, 1000); // 128 quarter revolution
 8000708:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800070c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000710:	f000 f894 	bl	800083c <move_anticlockwise>
	  HAL_Delay(100);
 8000714:	2064      	movs	r0, #100	; 0x64
 8000716:	f000 ffbd 	bl	8001694 <HAL_Delay>
  {
 800071a:	e7ec      	b.n	80006f6 <main+0x32>
 800071c:	2000008c 	.word	0x2000008c
 8000720:	20000040 	.word	0x20000040
 8000724:	20000028 	.word	0x20000028
 8000728:	200000d8 	.word	0x200000d8

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	; 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f004 fe04 	bl	8005348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000750:	f001 fab4 	bl	8001cbc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <SystemClock_Config+0xc8>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a26      	ldr	r2, [pc, #152]	; (80007f4 <SystemClock_Config+0xc8>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <SystemClock_Config+0xc8>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800076c:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <SystemClock_Config+0xcc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000774:	4a20      	ldr	r2, [pc, #128]	; (80007f8 <SystemClock_Config+0xcc>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <SystemClock_Config+0xcc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800079c:	2308      	movs	r3, #8
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007a0:	2348      	movs	r3, #72	; 0x48
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fa93 	bl	8001cdc <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007bc:	f000 f81e 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fd21 	bl	8002224 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007e8:	f000 f808 	bl	80007fc <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3750      	adds	r7, #80	; 0x50
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <microDelay>:
 */

#include "step.h"

void microDelay (uint16_t delay)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <microDelay+0x30>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim3) < delay);
 800081a:	bf00      	nop
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <microDelay+0x30>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	429a      	cmp	r2, r3
 8000826:	d3f9      	bcc.n	800081c <microDelay+0x14>
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	200000d8 	.word	0x200000d8

0800083c <move_anticlockwise>:

void move_anticlockwise (int steps, uint16_t delay)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	807b      	strh	r3, [r7, #2]
  for(int i=0; i<steps; i=i+1)
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	e0d2      	b.n	80009f4 <move_anticlockwise+0x1b8>
  {
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_SET);   // IN1
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000854:	486c      	ldr	r0, [pc, #432]	; (8000a08 <move_anticlockwise+0x1cc>)
 8000856:	f001 fa17 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_RESET); // IN2
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000860:	4869      	ldr	r0, [pc, #420]	; (8000a08 <move_anticlockwise+0x1cc>)
 8000862:	f001 fa11 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET); // IN3
 8000866:	2200      	movs	r2, #0
 8000868:	2140      	movs	r1, #64	; 0x40
 800086a:	4868      	ldr	r0, [pc, #416]	; (8000a0c <move_anticlockwise+0x1d0>)
 800086c:	f001 fa0c 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_RESET); // IN4
 8000870:	2200      	movs	r2, #0
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	4865      	ldr	r0, [pc, #404]	; (8000a0c <move_anticlockwise+0x1d0>)
 8000876:	f001 fa07 	bl	8001c88 <HAL_GPIO_WritePin>
    microDelay(delay);
 800087a:	887b      	ldrh	r3, [r7, #2]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ffc3 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_SET);   // IN1
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000888:	485f      	ldr	r0, [pc, #380]	; (8000a08 <move_anticlockwise+0x1cc>)
 800088a:	f001 f9fd 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_SET);   // IN2
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000894:	485c      	ldr	r0, [pc, #368]	; (8000a08 <move_anticlockwise+0x1cc>)
 8000896:	f001 f9f7 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET); // IN3
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	485b      	ldr	r0, [pc, #364]	; (8000a0c <move_anticlockwise+0x1d0>)
 80008a0:	f001 f9f2 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_RESET); // IN4
 80008a4:	2200      	movs	r2, #0
 80008a6:	2180      	movs	r1, #128	; 0x80
 80008a8:	4858      	ldr	r0, [pc, #352]	; (8000a0c <move_anticlockwise+0x1d0>)
 80008aa:	f001 f9ed 	bl	8001c88 <HAL_GPIO_WritePin>
    microDelay(delay);
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ffa9 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_RESET); // IN1
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008bc:	4852      	ldr	r0, [pc, #328]	; (8000a08 <move_anticlockwise+0x1cc>)
 80008be:	f001 f9e3 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_SET);   // IN2
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c8:	484f      	ldr	r0, [pc, #316]	; (8000a08 <move_anticlockwise+0x1cc>)
 80008ca:	f001 f9dd 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET); // IN3
 80008ce:	2200      	movs	r2, #0
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	484e      	ldr	r0, [pc, #312]	; (8000a0c <move_anticlockwise+0x1d0>)
 80008d4:	f001 f9d8 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_RESET); // IN4
 80008d8:	2200      	movs	r2, #0
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	484b      	ldr	r0, [pc, #300]	; (8000a0c <move_anticlockwise+0x1d0>)
 80008de:	f001 f9d3 	bl	8001c88 <HAL_GPIO_WritePin>
    microDelay(delay);
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff8f 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_RESET); // IN1
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f0:	4845      	ldr	r0, [pc, #276]	; (8000a08 <move_anticlockwise+0x1cc>)
 80008f2:	f001 f9c9 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_SET);   // IN2
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fc:	4842      	ldr	r0, [pc, #264]	; (8000a08 <move_anticlockwise+0x1cc>)
 80008fe:	f001 f9c3 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_SET);   // IN3
 8000902:	2201      	movs	r2, #1
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	4841      	ldr	r0, [pc, #260]	; (8000a0c <move_anticlockwise+0x1d0>)
 8000908:	f001 f9be 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_RESET); // IN4
 800090c:	2200      	movs	r2, #0
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	483e      	ldr	r0, [pc, #248]	; (8000a0c <move_anticlockwise+0x1d0>)
 8000912:	f001 f9b9 	bl	8001c88 <HAL_GPIO_WritePin>
    microDelay(delay);
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff75 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_RESET); // IN1
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000924:	4838      	ldr	r0, [pc, #224]	; (8000a08 <move_anticlockwise+0x1cc>)
 8000926:	f001 f9af 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_RESET); // IN2
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000930:	4835      	ldr	r0, [pc, #212]	; (8000a08 <move_anticlockwise+0x1cc>)
 8000932:	f001 f9a9 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_SET);   // IN3
 8000936:	2201      	movs	r2, #1
 8000938:	2140      	movs	r1, #64	; 0x40
 800093a:	4834      	ldr	r0, [pc, #208]	; (8000a0c <move_anticlockwise+0x1d0>)
 800093c:	f001 f9a4 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_RESET); // IN4
 8000940:	2200      	movs	r2, #0
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	4831      	ldr	r0, [pc, #196]	; (8000a0c <move_anticlockwise+0x1d0>)
 8000946:	f001 f99f 	bl	8001c88 <HAL_GPIO_WritePin>
    microDelay(delay);
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5b 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_RESET); // IN1
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000958:	482b      	ldr	r0, [pc, #172]	; (8000a08 <move_anticlockwise+0x1cc>)
 800095a:	f001 f995 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_RESET); // IN2
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000964:	4828      	ldr	r0, [pc, #160]	; (8000a08 <move_anticlockwise+0x1cc>)
 8000966:	f001 f98f 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_SET);   // IN3
 800096a:	2201      	movs	r2, #1
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	4827      	ldr	r0, [pc, #156]	; (8000a0c <move_anticlockwise+0x1d0>)
 8000970:	f001 f98a 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_SET);   // IN4
 8000974:	2201      	movs	r2, #1
 8000976:	2180      	movs	r1, #128	; 0x80
 8000978:	4824      	ldr	r0, [pc, #144]	; (8000a0c <move_anticlockwise+0x1d0>)
 800097a:	f001 f985 	bl	8001c88 <HAL_GPIO_WritePin>
    microDelay(delay);
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff41 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_RESET); // IN1
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098c:	481e      	ldr	r0, [pc, #120]	; (8000a08 <move_anticlockwise+0x1cc>)
 800098e:	f001 f97b 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_RESET); // IN2
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000998:	481b      	ldr	r0, [pc, #108]	; (8000a08 <move_anticlockwise+0x1cc>)
 800099a:	f001 f975 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET); // IN3
 800099e:	2200      	movs	r2, #0
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	481a      	ldr	r0, [pc, #104]	; (8000a0c <move_anticlockwise+0x1d0>)
 80009a4:	f001 f970 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_SET);   // IN4
 80009a8:	2201      	movs	r2, #1
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	4817      	ldr	r0, [pc, #92]	; (8000a0c <move_anticlockwise+0x1d0>)
 80009ae:	f001 f96b 	bl	8001c88 <HAL_GPIO_WritePin>
    microDelay(delay);
 80009b2:	887b      	ldrh	r3, [r7, #2]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff27 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_SET);   // IN1
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <move_anticlockwise+0x1cc>)
 80009c2:	f001 f961 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_RESET); // IN2
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009cc:	480e      	ldr	r0, [pc, #56]	; (8000a08 <move_anticlockwise+0x1cc>)
 80009ce:	f001 f95b 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET); // IN3
 80009d2:	2200      	movs	r2, #0
 80009d4:	2140      	movs	r1, #64	; 0x40
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <move_anticlockwise+0x1d0>)
 80009d8:	f001 f956 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_SET);   // IN4
 80009dc:	2201      	movs	r2, #1
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	480a      	ldr	r0, [pc, #40]	; (8000a0c <move_anticlockwise+0x1d0>)
 80009e2:	f001 f951 	bl	8001c88 <HAL_GPIO_WritePin>
    microDelay(delay);
 80009e6:	887b      	ldrh	r3, [r7, #2]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff0d 	bl	8000808 <microDelay>
  for(int i=0; i<steps; i=i+1)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f6ff af28 	blt.w	800084e <move_anticlockwise+0x12>
  }
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40020000 	.word	0x40020000

08000a10 <move_clockwise>:

void move_clockwise (int steps, uint16_t delay) // CV - Clockwise
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	807b      	strh	r3, [r7, #2]
  for(int i=0; i<steps; i=i+1)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e26f      	b.n	8000f02 <move_clockwise+0x4f2>
  {
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_SET);   // IN1
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a28:	48b7      	ldr	r0, [pc, #732]	; (8000d08 <move_clockwise+0x2f8>)
 8000a2a:	f001 f92d 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_RESET); // IN2
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a34:	48b4      	ldr	r0, [pc, #720]	; (8000d08 <move_clockwise+0x2f8>)
 8000a36:	f001 f927 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET); // IN3
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	48b3      	ldr	r0, [pc, #716]	; (8000d0c <move_clockwise+0x2fc>)
 8000a40:	f001 f922 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_SET);   // IN4
 8000a44:	2201      	movs	r2, #1
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	48b0      	ldr	r0, [pc, #704]	; (8000d0c <move_clockwise+0x2fc>)
 8000a4a:	f001 f91d 	bl	8001c88 <HAL_GPIO_WritePin>
    in1 = HAL_GPIO_ReadPin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin);
 8000a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a52:	48ad      	ldr	r0, [pc, #692]	; (8000d08 <move_clockwise+0x2f8>)
 8000a54:	f001 f900 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bf14      	ite	ne
 8000a5e:	2301      	movne	r3, #1
 8000a60:	2300      	moveq	r3, #0
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4baa      	ldr	r3, [pc, #680]	; (8000d10 <move_clockwise+0x300>)
 8000a66:	701a      	strb	r2, [r3, #0]
    in2 = HAL_GPIO_ReadPin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin);
 8000a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6c:	48a6      	ldr	r0, [pc, #664]	; (8000d08 <move_clockwise+0x2f8>)
 8000a6e:	f001 f8f3 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	bf14      	ite	ne
 8000a78:	2301      	movne	r3, #1
 8000a7a:	2300      	moveq	r3, #0
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4ba5      	ldr	r3, [pc, #660]	; (8000d14 <move_clockwise+0x304>)
 8000a80:	701a      	strb	r2, [r3, #0]
    in3 = HAL_GPIO_ReadPin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin);
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	48a1      	ldr	r0, [pc, #644]	; (8000d0c <move_clockwise+0x2fc>)
 8000a86:	f001 f8e7 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	bf14      	ite	ne
 8000a90:	2301      	movne	r3, #1
 8000a92:	2300      	moveq	r3, #0
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4ba0      	ldr	r3, [pc, #640]	; (8000d18 <move_clockwise+0x308>)
 8000a98:	701a      	strb	r2, [r3, #0]
    in4 = HAL_GPIO_ReadPin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin);
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	489b      	ldr	r0, [pc, #620]	; (8000d0c <move_clockwise+0x2fc>)
 8000a9e:	f001 f8db 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bf14      	ite	ne
 8000aa8:	2301      	movne	r3, #1
 8000aaa:	2300      	moveq	r3, #0
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b9b      	ldr	r3, [pc, #620]	; (8000d1c <move_clockwise+0x30c>)
 8000ab0:	701a      	strb	r2, [r3, #0]

    microDelay(delay);
 8000ab2:	887b      	ldrh	r3, [r7, #2]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fea7 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_RESET); // IN1
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac0:	4891      	ldr	r0, [pc, #580]	; (8000d08 <move_clockwise+0x2f8>)
 8000ac2:	f001 f8e1 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_RESET); // IN2
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000acc:	488e      	ldr	r0, [pc, #568]	; (8000d08 <move_clockwise+0x2f8>)
 8000ace:	f001 f8db 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET); // IN3
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	488d      	ldr	r0, [pc, #564]	; (8000d0c <move_clockwise+0x2fc>)
 8000ad8:	f001 f8d6 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_SET);   // IN4
 8000adc:	2201      	movs	r2, #1
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	488a      	ldr	r0, [pc, #552]	; (8000d0c <move_clockwise+0x2fc>)
 8000ae2:	f001 f8d1 	bl	8001c88 <HAL_GPIO_WritePin>
    in1 = HAL_GPIO_ReadPin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin);
 8000ae6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aea:	4887      	ldr	r0, [pc, #540]	; (8000d08 <move_clockwise+0x2f8>)
 8000aec:	f001 f8b4 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bf14      	ite	ne
 8000af6:	2301      	movne	r3, #1
 8000af8:	2300      	moveq	r3, #0
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b84      	ldr	r3, [pc, #528]	; (8000d10 <move_clockwise+0x300>)
 8000afe:	701a      	strb	r2, [r3, #0]
	in2 = HAL_GPIO_ReadPin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin);
 8000b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b04:	4880      	ldr	r0, [pc, #512]	; (8000d08 <move_clockwise+0x2f8>)
 8000b06:	f001 f8a7 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b7f      	ldr	r3, [pc, #508]	; (8000d14 <move_clockwise+0x304>)
 8000b18:	701a      	strb	r2, [r3, #0]
	in3 = HAL_GPIO_ReadPin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin);
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	487b      	ldr	r0, [pc, #492]	; (8000d0c <move_clockwise+0x2fc>)
 8000b1e:	f001 f89b 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b7a      	ldr	r3, [pc, #488]	; (8000d18 <move_clockwise+0x308>)
 8000b30:	701a      	strb	r2, [r3, #0]
	in4 = HAL_GPIO_ReadPin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin);
 8000b32:	2180      	movs	r1, #128	; 0x80
 8000b34:	4875      	ldr	r0, [pc, #468]	; (8000d0c <move_clockwise+0x2fc>)
 8000b36:	f001 f88f 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	bf14      	ite	ne
 8000b40:	2301      	movne	r3, #1
 8000b42:	2300      	moveq	r3, #0
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b75      	ldr	r3, [pc, #468]	; (8000d1c <move_clockwise+0x30c>)
 8000b48:	701a      	strb	r2, [r3, #0]

    microDelay(delay);
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fe5b 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_RESET); // IN1
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b58:	486b      	ldr	r0, [pc, #428]	; (8000d08 <move_clockwise+0x2f8>)
 8000b5a:	f001 f895 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_RESET); // IN2
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b64:	4868      	ldr	r0, [pc, #416]	; (8000d08 <move_clockwise+0x2f8>)
 8000b66:	f001 f88f 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_SET);   // IN3
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	4867      	ldr	r0, [pc, #412]	; (8000d0c <move_clockwise+0x2fc>)
 8000b70:	f001 f88a 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_SET);   // IN4
 8000b74:	2201      	movs	r2, #1
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4864      	ldr	r0, [pc, #400]	; (8000d0c <move_clockwise+0x2fc>)
 8000b7a:	f001 f885 	bl	8001c88 <HAL_GPIO_WritePin>
    in1 = HAL_GPIO_ReadPin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin);
 8000b7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b82:	4861      	ldr	r0, [pc, #388]	; (8000d08 <move_clockwise+0x2f8>)
 8000b84:	f001 f868 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	bf14      	ite	ne
 8000b8e:	2301      	movne	r3, #1
 8000b90:	2300      	moveq	r3, #0
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b5e      	ldr	r3, [pc, #376]	; (8000d10 <move_clockwise+0x300>)
 8000b96:	701a      	strb	r2, [r3, #0]
	in2 = HAL_GPIO_ReadPin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin);
 8000b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9c:	485a      	ldr	r0, [pc, #360]	; (8000d08 <move_clockwise+0x2f8>)
 8000b9e:	f001 f85b 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	bf14      	ite	ne
 8000ba8:	2301      	movne	r3, #1
 8000baa:	2300      	moveq	r3, #0
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b59      	ldr	r3, [pc, #356]	; (8000d14 <move_clockwise+0x304>)
 8000bb0:	701a      	strb	r2, [r3, #0]
	in3 = HAL_GPIO_ReadPin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin);
 8000bb2:	2140      	movs	r1, #64	; 0x40
 8000bb4:	4855      	ldr	r0, [pc, #340]	; (8000d0c <move_clockwise+0x2fc>)
 8000bb6:	f001 f84f 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bf14      	ite	ne
 8000bc0:	2301      	movne	r3, #1
 8000bc2:	2300      	moveq	r3, #0
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b54      	ldr	r3, [pc, #336]	; (8000d18 <move_clockwise+0x308>)
 8000bc8:	701a      	strb	r2, [r3, #0]
	in4 = HAL_GPIO_ReadPin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin);
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	484f      	ldr	r0, [pc, #316]	; (8000d0c <move_clockwise+0x2fc>)
 8000bce:	f001 f843 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bf14      	ite	ne
 8000bd8:	2301      	movne	r3, #1
 8000bda:	2300      	moveq	r3, #0
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b4f      	ldr	r3, [pc, #316]	; (8000d1c <move_clockwise+0x30c>)
 8000be0:	701a      	strb	r2, [r3, #0]

    microDelay(delay);
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe0f 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_RESET); // IN1
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf0:	4845      	ldr	r0, [pc, #276]	; (8000d08 <move_clockwise+0x2f8>)
 8000bf2:	f001 f849 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_RESET); // IN2
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfc:	4842      	ldr	r0, [pc, #264]	; (8000d08 <move_clockwise+0x2f8>)
 8000bfe:	f001 f843 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_SET);   // IN3
 8000c02:	2201      	movs	r2, #1
 8000c04:	2140      	movs	r1, #64	; 0x40
 8000c06:	4841      	ldr	r0, [pc, #260]	; (8000d0c <move_clockwise+0x2fc>)
 8000c08:	f001 f83e 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_RESET); // IN4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	483e      	ldr	r0, [pc, #248]	; (8000d0c <move_clockwise+0x2fc>)
 8000c12:	f001 f839 	bl	8001c88 <HAL_GPIO_WritePin>
    in1 = HAL_GPIO_ReadPin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin);
 8000c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1a:	483b      	ldr	r0, [pc, #236]	; (8000d08 <move_clockwise+0x2f8>)
 8000c1c:	f001 f81c 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf14      	ite	ne
 8000c26:	2301      	movne	r3, #1
 8000c28:	2300      	moveq	r3, #0
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <move_clockwise+0x300>)
 8000c2e:	701a      	strb	r2, [r3, #0]
	in2 = HAL_GPIO_ReadPin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin);
 8000c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c34:	4834      	ldr	r0, [pc, #208]	; (8000d08 <move_clockwise+0x2f8>)
 8000c36:	f001 f80f 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bf14      	ite	ne
 8000c40:	2301      	movne	r3, #1
 8000c42:	2300      	moveq	r3, #0
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <move_clockwise+0x304>)
 8000c48:	701a      	strb	r2, [r3, #0]
	in3 = HAL_GPIO_ReadPin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin);
 8000c4a:	2140      	movs	r1, #64	; 0x40
 8000c4c:	482f      	ldr	r0, [pc, #188]	; (8000d0c <move_clockwise+0x2fc>)
 8000c4e:	f001 f803 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	bf14      	ite	ne
 8000c58:	2301      	movne	r3, #1
 8000c5a:	2300      	moveq	r3, #0
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <move_clockwise+0x308>)
 8000c60:	701a      	strb	r2, [r3, #0]
	in4 = HAL_GPIO_ReadPin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin);
 8000c62:	2180      	movs	r1, #128	; 0x80
 8000c64:	4829      	ldr	r0, [pc, #164]	; (8000d0c <move_clockwise+0x2fc>)
 8000c66:	f000 fff7 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <move_clockwise+0x30c>)
 8000c78:	701a      	strb	r2, [r3, #0]

    microDelay(delay);
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fdc3 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_RESET); // IN1
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c88:	481f      	ldr	r0, [pc, #124]	; (8000d08 <move_clockwise+0x2f8>)
 8000c8a:	f000 fffd 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_SET);   // IN2
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c94:	481c      	ldr	r0, [pc, #112]	; (8000d08 <move_clockwise+0x2f8>)
 8000c96:	f000 fff7 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_SET);   // IN3
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	481b      	ldr	r0, [pc, #108]	; (8000d0c <move_clockwise+0x2fc>)
 8000ca0:	f000 fff2 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_RESET); // IN4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	4818      	ldr	r0, [pc, #96]	; (8000d0c <move_clockwise+0x2fc>)
 8000caa:	f000 ffed 	bl	8001c88 <HAL_GPIO_WritePin>
    in1 = HAL_GPIO_ReadPin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin);
 8000cae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb2:	4815      	ldr	r0, [pc, #84]	; (8000d08 <move_clockwise+0x2f8>)
 8000cb4:	f000 ffd0 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bf14      	ite	ne
 8000cbe:	2301      	movne	r3, #1
 8000cc0:	2300      	moveq	r3, #0
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <move_clockwise+0x300>)
 8000cc6:	701a      	strb	r2, [r3, #0]
	in2 = HAL_GPIO_ReadPin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin);
 8000cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ccc:	480e      	ldr	r0, [pc, #56]	; (8000d08 <move_clockwise+0x2f8>)
 8000cce:	f000 ffc3 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf14      	ite	ne
 8000cd8:	2301      	movne	r3, #1
 8000cda:	2300      	moveq	r3, #0
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <move_clockwise+0x304>)
 8000ce0:	701a      	strb	r2, [r3, #0]
	in3 = HAL_GPIO_ReadPin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin);
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	4809      	ldr	r0, [pc, #36]	; (8000d0c <move_clockwise+0x2fc>)
 8000ce6:	f000 ffb7 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bf14      	ite	ne
 8000cf0:	2301      	movne	r3, #1
 8000cf2:	2300      	moveq	r3, #0
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <move_clockwise+0x308>)
 8000cf8:	701a      	strb	r2, [r3, #0]
	in4 = HAL_GPIO_ReadPin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin);
 8000cfa:	2180      	movs	r1, #128	; 0x80
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <move_clockwise+0x2fc>)
 8000cfe:	f000 ffab 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	e00b      	b.n	8000d20 <move_clockwise+0x310>
 8000d08:	40020c00 	.word	0x40020c00
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	2000003c 	.word	0x2000003c
 8000d14:	2000003d 	.word	0x2000003d
 8000d18:	2000003e 	.word	0x2000003e
 8000d1c:	2000003f 	.word	0x2000003f
 8000d20:	bf14      	ite	ne
 8000d22:	2301      	movne	r3, #1
 8000d24:	2300      	moveq	r3, #0
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <move_clockwise+0x508>)
 8000d2a:	701a      	strb	r2, [r3, #0]

    microDelay(delay);
 8000d2c:	887b      	ldrh	r3, [r7, #2]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fd6a 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_RESET); // IN1
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3a:	4878      	ldr	r0, [pc, #480]	; (8000f1c <move_clockwise+0x50c>)
 8000d3c:	f000 ffa4 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_SET);   // IN2
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d46:	4875      	ldr	r0, [pc, #468]	; (8000f1c <move_clockwise+0x50c>)
 8000d48:	f000 ff9e 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET); // IN3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	4873      	ldr	r0, [pc, #460]	; (8000f20 <move_clockwise+0x510>)
 8000d52:	f000 ff99 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_RESET); // IN4
 8000d56:	2200      	movs	r2, #0
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	4871      	ldr	r0, [pc, #452]	; (8000f20 <move_clockwise+0x510>)
 8000d5c:	f000 ff94 	bl	8001c88 <HAL_GPIO_WritePin>
    in1 = HAL_GPIO_ReadPin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin);
 8000d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d64:	486d      	ldr	r0, [pc, #436]	; (8000f1c <move_clockwise+0x50c>)
 8000d66:	f000 ff77 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bf14      	ite	ne
 8000d70:	2301      	movne	r3, #1
 8000d72:	2300      	moveq	r3, #0
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b6b      	ldr	r3, [pc, #428]	; (8000f24 <move_clockwise+0x514>)
 8000d78:	701a      	strb	r2, [r3, #0]
	in2 = HAL_GPIO_ReadPin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin);
 8000d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7e:	4867      	ldr	r0, [pc, #412]	; (8000f1c <move_clockwise+0x50c>)
 8000d80:	f000 ff6a 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf14      	ite	ne
 8000d8a:	2301      	movne	r3, #1
 8000d8c:	2300      	moveq	r3, #0
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b65      	ldr	r3, [pc, #404]	; (8000f28 <move_clockwise+0x518>)
 8000d92:	701a      	strb	r2, [r3, #0]
	in3 = HAL_GPIO_ReadPin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin);
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	4862      	ldr	r0, [pc, #392]	; (8000f20 <move_clockwise+0x510>)
 8000d98:	f000 ff5e 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf14      	ite	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	2300      	moveq	r3, #0
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b60      	ldr	r3, [pc, #384]	; (8000f2c <move_clockwise+0x51c>)
 8000daa:	701a      	strb	r2, [r3, #0]
	in4 = HAL_GPIO_ReadPin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin);
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	485c      	ldr	r0, [pc, #368]	; (8000f20 <move_clockwise+0x510>)
 8000db0:	f000 ff52 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	bf14      	ite	ne
 8000dba:	2301      	movne	r3, #1
 8000dbc:	2300      	moveq	r3, #0
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b55      	ldr	r3, [pc, #340]	; (8000f18 <move_clockwise+0x508>)
 8000dc2:	701a      	strb	r2, [r3, #0]

    microDelay(delay);
 8000dc4:	887b      	ldrh	r3, [r7, #2]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fd1e 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_SET);   // IN1
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd2:	4852      	ldr	r0, [pc, #328]	; (8000f1c <move_clockwise+0x50c>)
 8000dd4:	f000 ff58 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_SET);   // IN2
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dde:	484f      	ldr	r0, [pc, #316]	; (8000f1c <move_clockwise+0x50c>)
 8000de0:	f000 ff52 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET); // IN3
 8000de4:	2200      	movs	r2, #0
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	484d      	ldr	r0, [pc, #308]	; (8000f20 <move_clockwise+0x510>)
 8000dea:	f000 ff4d 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_RESET); // IN4
 8000dee:	2200      	movs	r2, #0
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	484b      	ldr	r0, [pc, #300]	; (8000f20 <move_clockwise+0x510>)
 8000df4:	f000 ff48 	bl	8001c88 <HAL_GPIO_WritePin>
    in1 = HAL_GPIO_ReadPin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin);
 8000df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfc:	4847      	ldr	r0, [pc, #284]	; (8000f1c <move_clockwise+0x50c>)
 8000dfe:	f000 ff2b 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b45      	ldr	r3, [pc, #276]	; (8000f24 <move_clockwise+0x514>)
 8000e10:	701a      	strb	r2, [r3, #0]
	in2 = HAL_GPIO_ReadPin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin);
 8000e12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e16:	4841      	ldr	r0, [pc, #260]	; (8000f1c <move_clockwise+0x50c>)
 8000e18:	f000 ff1e 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <move_clockwise+0x518>)
 8000e2a:	701a      	strb	r2, [r3, #0]
	in3 = HAL_GPIO_ReadPin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin);
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	483c      	ldr	r0, [pc, #240]	; (8000f20 <move_clockwise+0x510>)
 8000e30:	f000 ff12 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	bf14      	ite	ne
 8000e3a:	2301      	movne	r3, #1
 8000e3c:	2300      	moveq	r3, #0
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <move_clockwise+0x51c>)
 8000e42:	701a      	strb	r2, [r3, #0]
	in4 = HAL_GPIO_ReadPin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin);
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	4836      	ldr	r0, [pc, #216]	; (8000f20 <move_clockwise+0x510>)
 8000e48:	f000 ff06 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf14      	ite	ne
 8000e52:	2301      	movne	r3, #1
 8000e54:	2300      	moveq	r3, #0
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <move_clockwise+0x508>)
 8000e5a:	701a      	strb	r2, [r3, #0]

    microDelay(delay);
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fcd2 	bl	8000808 <microDelay>
    HAL_GPIO_WritePin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin, GPIO_PIN_SET);   // IN1
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6a:	482c      	ldr	r0, [pc, #176]	; (8000f1c <move_clockwise+0x50c>)
 8000e6c:	f000 ff0c 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin, GPIO_PIN_RESET); // IN2
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e76:	4829      	ldr	r0, [pc, #164]	; (8000f1c <move_clockwise+0x50c>)
 8000e78:	f000 ff06 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET); // IN3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	4827      	ldr	r0, [pc, #156]	; (8000f20 <move_clockwise+0x510>)
 8000e82:	f000 ff01 	bl	8001c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin, GPIO_PIN_RESET); // IN4
 8000e86:	2200      	movs	r2, #0
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	4825      	ldr	r0, [pc, #148]	; (8000f20 <move_clockwise+0x510>)
 8000e8c:	f000 fefc 	bl	8001c88 <HAL_GPIO_WritePin>
    in1 = HAL_GPIO_ReadPin(GPIO_PIN_1_GPIO_Port, GPIO_PIN_1_Pin);
 8000e90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e94:	4821      	ldr	r0, [pc, #132]	; (8000f1c <move_clockwise+0x50c>)
 8000e96:	f000 fedf 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <move_clockwise+0x514>)
 8000ea8:	701a      	strb	r2, [r3, #0]
	in2 = HAL_GPIO_ReadPin(GPIO_PIN_2_GPIO_Port, GPIO_PIN_2_Pin);
 8000eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eae:	481b      	ldr	r0, [pc, #108]	; (8000f1c <move_clockwise+0x50c>)
 8000eb0:	f000 fed2 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf14      	ite	ne
 8000eba:	2301      	movne	r3, #1
 8000ebc:	2300      	moveq	r3, #0
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <move_clockwise+0x518>)
 8000ec2:	701a      	strb	r2, [r3, #0]
	in3 = HAL_GPIO_ReadPin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin);
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	4816      	ldr	r0, [pc, #88]	; (8000f20 <move_clockwise+0x510>)
 8000ec8:	f000 fec6 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf14      	ite	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	2300      	moveq	r3, #0
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <move_clockwise+0x51c>)
 8000eda:	701a      	strb	r2, [r3, #0]
	in4 = HAL_GPIO_ReadPin(GPIO_PIN_4_GPIO_Port, GPIO_PIN_4_Pin);
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	4810      	ldr	r0, [pc, #64]	; (8000f20 <move_clockwise+0x510>)
 8000ee0:	f000 feba 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf14      	ite	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	2300      	moveq	r3, #0
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <move_clockwise+0x508>)
 8000ef2:	701a      	strb	r2, [r3, #0]

    microDelay(delay);
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fc86 	bl	8000808 <microDelay>
  for(int i=0; i<steps; i=i+1)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	f6ff ad8b 	blt.w	8000a22 <move_clockwise+0x12>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000003f 	.word	0x2000003f
 8000f1c:	40020c00 	.word	0x40020c00
 8000f20:	40020000 	.word	0x40020000
 8000f24:	2000003c 	.word	0x2000003c
 8000f28:	2000003d 	.word	0x2000003d
 8000f2c:	2000003e 	.word	0x2000003e

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x44>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x44>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x44>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 fb46 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM1_CC_IRQHandler+0x10>)
 8000fd2:	f002 fad3 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000040 	.word	0x20000040

08000fe0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <TIM2_IRQHandler+0x10>)
 8000fe6:	f002 fac9 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000008c 	.word	0x2000008c

08000ff4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <TIM3_IRQHandler+0x10>)
 8000ffa:	f002 fabf 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000d8 	.word	0x200000d8

08001008 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b090      	sub	sp, #64	; 0x40
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001068:	4b40      	ldr	r3, [pc, #256]	; (800116c <MX_TIM1_Init+0x140>)
 800106a:	4a41      	ldr	r2, [pc, #260]	; (8001170 <MX_TIM1_Init+0x144>)
 800106c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <MX_TIM1_Init+0x140>)
 8001070:	2247      	movs	r2, #71	; 0x47
 8001072:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b3d      	ldr	r3, [pc, #244]	; (800116c <MX_TIM1_Init+0x140>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800107a:	4b3c      	ldr	r3, [pc, #240]	; (800116c <MX_TIM1_Init+0x140>)
 800107c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001080:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <MX_TIM1_Init+0x140>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001088:	4b38      	ldr	r3, [pc, #224]	; (800116c <MX_TIM1_Init+0x140>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <MX_TIM1_Init+0x140>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001094:	4835      	ldr	r0, [pc, #212]	; (800116c <MX_TIM1_Init+0x140>)
 8001096:	f001 fe9b 	bl	8002dd0 <HAL_TIM_Base_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80010a0:	f7ff fbac 	bl	80007fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ae:	4619      	mov	r1, r3
 80010b0:	482e      	ldr	r0, [pc, #184]	; (800116c <MX_TIM1_Init+0x140>)
 80010b2:	f002 fd33 	bl	8003b1c <HAL_TIM_ConfigClockSource>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80010bc:	f7ff fb9e 	bl	80007fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80010c0:	482a      	ldr	r0, [pc, #168]	; (800116c <MX_TIM1_Init+0x140>)
 80010c2:	f002 f8a9 	bl	8003218 <HAL_TIM_IC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80010cc:	f7ff fb96 	bl	80007fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010d0:	2304      	movs	r3, #4
 80010d2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010d4:	2350      	movs	r3, #80	; 0x50
 80010d6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	4820      	ldr	r0, [pc, #128]	; (800116c <MX_TIM1_Init+0x140>)
 80010ec:	f002 fde0 	bl	8003cb0 <HAL_TIM_SlaveConfigSynchro>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80010f6:	f7ff fb81 	bl	80007fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010fe:	2301      	movs	r3, #1
 8001100:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2200      	movs	r2, #0
 8001110:	4619      	mov	r1, r3
 8001112:	4816      	ldr	r0, [pc, #88]	; (800116c <MX_TIM1_Init+0x140>)
 8001114:	f002 fb51 	bl	80037ba <HAL_TIM_IC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800111e:	f7ff fb6d 	bl	80007fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001122:	2302      	movs	r3, #2
 8001124:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001126:	2302      	movs	r3, #2
 8001128:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2204      	movs	r2, #4
 8001130:	4619      	mov	r1, r3
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <MX_TIM1_Init+0x140>)
 8001134:	f002 fb41 	bl	80037ba <HAL_TIM_IC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800113e:	f7ff fb5d 	bl	80007fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_TIM1_Init+0x140>)
 8001154:	f003 fbd6 	bl	8004904 <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800115e:	f7ff fb4d 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3740      	adds	r7, #64	; 0x40
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000040 	.word	0x20000040
 8001170:	40010000 	.word	0x40010000

08001174 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_TIM2_Init+0xe8>)
 80011a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <MX_TIM2_Init+0xe8>)
 80011b0:	2247      	movs	r2, #71	; 0x47
 80011b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <MX_TIM2_Init+0xe8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_TIM2_Init+0xe8>)
 80011bc:	f24f 4223 	movw	r2, #62499	; 0xf423
 80011c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_TIM2_Init+0xe8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <MX_TIM2_Init+0xe8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ce:	4823      	ldr	r0, [pc, #140]	; (800125c <MX_TIM2_Init+0xe8>)
 80011d0:	f001 fdfe 	bl	8002dd0 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011da:	f7ff fb0f 	bl	80007fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e8:	4619      	mov	r1, r3
 80011ea:	481c      	ldr	r0, [pc, #112]	; (800125c <MX_TIM2_Init+0xe8>)
 80011ec:	f002 fc96 	bl	8003b1c <HAL_TIM_ConfigClockSource>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011f6:	f7ff fb01 	bl	80007fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011fa:	4818      	ldr	r0, [pc, #96]	; (800125c <MX_TIM2_Init+0xe8>)
 80011fc:	f001 feb0 	bl	8002f60 <HAL_TIM_PWM_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001206:	f7ff faf9 	bl	80007fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <MX_TIM2_Init+0xe8>)
 800121a:	f003 fb73 	bl	8004904 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001224:	f7ff faea 	bl	80007fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001228:	2360      	movs	r3, #96	; 0x60
 800122a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 800122c:	230a      	movs	r3, #10
 800122e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2208      	movs	r2, #8
 800123c:	4619      	mov	r1, r3
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM2_Init+0xe8>)
 8001240:	f002 fb58 	bl	80038f4 <HAL_TIM_PWM_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800124a:	f7ff fad7 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM2_Init+0xe8>)
 8001250:	f000 f8d6 	bl	8001400 <HAL_TIM_MspPostInit>

}
 8001254:	bf00      	nop
 8001256:	3738      	adds	r7, #56	; 0x38
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000008c 	.word	0x2000008c

08001260 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_TIM3_Init+0x94>)
 8001280:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <MX_TIM3_Init+0x98>)
 8001282:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_TIM3_Init+0x94>)
 8001286:	2247      	movs	r2, #71	; 0x47
 8001288:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_TIM3_Init+0x94>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_TIM3_Init+0x94>)
 8001292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001296:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_TIM3_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_TIM3_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <MX_TIM3_Init+0x94>)
 80012a6:	f001 fd93 	bl	8002dd0 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012b0:	f7ff faa4 	bl	80007fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4619      	mov	r1, r3
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_TIM3_Init+0x94>)
 80012c2:	f002 fc2b 	bl	8003b1c <HAL_TIM_ConfigClockSource>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012cc:	f7ff fa96 	bl	80007fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_TIM3_Init+0x94>)
 80012de:	f003 fb11 	bl	8004904 <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012e8:	f7ff fa88 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200000d8 	.word	0x200000d8
 80012f8:	40000400 	.word	0x40000400

080012fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a35      	ldr	r2, [pc, #212]	; (80013f0 <HAL_TIM_Base_MspInit+0xf4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d131      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a34      	ldr	r2, [pc, #208]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a2e      	ldr	r2, [pc, #184]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 800133c:	f043 0310 	orr.w	r3, r3, #16
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 800134e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001360:	2301      	movs	r3, #1
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4823      	ldr	r0, [pc, #140]	; (80013f8 <HAL_TIM_Base_MspInit+0xfc>)
 800136c:	f000 fac8 	bl	8001900 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	201b      	movs	r0, #27
 8001376:	f000 fa8c 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800137a:	201b      	movs	r0, #27
 800137c:	f000 faa5 	bl	80018ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001380:	e032      	b.n	80013e8 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800138a:	d114      	bne.n	80013b6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	201c      	movs	r0, #28
 80013aa:	f000 fa72 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013ae:	201c      	movs	r0, #28
 80013b0:	f000 fa8b 	bl	80018ca <HAL_NVIC_EnableIRQ>
}
 80013b4:	e018      	b.n	80013e8 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_TIM_Base_MspInit+0x100>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d113      	bne.n	80013e8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_TIM_Base_MspInit+0xf8>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	201d      	movs	r0, #29
 80013de:	f000 fa58 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013e2:	201d      	movs	r0, #29
 80013e4:	f000 fa71 	bl	80018ca <HAL_NVIC_EnableIRQ>
}
 80013e8:	bf00      	nop
 80013ea:	3730      	adds	r7, #48	; 0x30
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40010000 	.word	0x40010000
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40000400 	.word	0x40000400

08001400 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001420:	d11c      	bne.n	800145c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_TIM_MspPostInit+0x64>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_TIM_MspPostInit+0x64>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_TIM_MspPostInit+0x64>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 800143a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4619      	mov	r1, r3
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <HAL_TIM_MspPostInit+0x68>)
 8001458:	f000 fa52 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40020400 	.word	0x40020400

0800146c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <MX_USART2_UART_Init+0x5c>)
 8001474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 80014b0:	f003 fad4 	bl	8004a5c <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014ba:	f7ff f99f 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000124 	.word	0x20000124
 80014c8:	40004400 	.word	0x40004400

080014cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0aa      	sub	sp, #168	; 0xa8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2284      	movs	r2, #132	; 0x84
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 ff2b 	bl	8005348 <memset>
  if(uartHandle->Instance==USART2)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a21      	ldr	r2, [pc, #132]	; (800157c <HAL_UART_MspInit+0xb0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d13a      	bne.n	8001572 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001500:	2300      	movs	r3, #0
 8001502:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4618      	mov	r0, r3
 800150a:	f001 f871 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001514:	f7ff f972 	bl	80007fc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_UART_MspInit+0xb4>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a18      	ldr	r2, [pc, #96]	; (8001580 <HAL_UART_MspInit+0xb4>)
 800151e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_UART_MspInit+0xb4>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_UART_MspInit+0xb4>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <HAL_UART_MspInit+0xb4>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6313      	str	r3, [r2, #48]	; 0x30
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_UART_MspInit+0xb4>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001548:	230c      	movs	r3, #12
 800154a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001560:	2307      	movs	r3, #7
 8001562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <HAL_UART_MspInit+0xb8>)
 800156e:	f000 f9c7 	bl	8001900 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	37a8      	adds	r7, #168	; 0xa8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40004400 	.word	0x40004400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000

08001588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800158e:	490e      	ldr	r1, [pc, #56]	; (80015c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a4:	4c0b      	ldr	r4, [pc, #44]	; (80015d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015b2:	f7ff fd29 	bl	8001008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f003 fea3 	bl	8005300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ba:	f7ff f883 	bl	80006c4 <main>
  bx  lr    
 80015be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015cc:	08005398 	.word	0x08005398
  ldr r2, =_sbss
 80015d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015d4:	200001b0 	.word	0x200001b0

080015d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC_IRQHandler>

080015da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015de:	2003      	movs	r0, #3
 80015e0:	f000 f94c 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e4:	200f      	movs	r0, #15
 80015e6:	f000 f805 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ea:	f7ff fca1 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x58>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f967 	bl	80018e6 <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f000 f92f 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_InitTick+0x5c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000000 	.word	0x20000000
 800164c:	20000008 	.word	0x20000008
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	200001ac 	.word	0x200001ac

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200001ac 	.word	0x200001ac

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <__NVIC_SetPriorityGrouping+0x40>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	4313      	orrs	r3, r2
 8001708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170a:	4a04      	ldr	r2, [pc, #16]	; (800171c <__NVIC_SetPriorityGrouping+0x40>)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60d3      	str	r3, [r2, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00
 8001720:	05fa0000 	.word	0x05fa0000

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff3e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff31 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e175      	b.n	8001c0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8164 	bne.w	8001c06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_GPIO_Init+0x56>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d130      	bne.n	80019b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80be 	beq.w	8001c06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <HAL_GPIO_Init+0x324>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a65      	ldr	r2, [pc, #404]	; (8001c24 <HAL_GPIO_Init+0x324>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_GPIO_Init+0x324>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aa2:	4a61      	ldr	r2, [pc, #388]	; (8001c28 <HAL_GPIO_Init+0x328>)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_GPIO_Init+0x32c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d037      	beq.n	8001b3e <HAL_GPIO_Init+0x23e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <HAL_GPIO_Init+0x330>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d031      	beq.n	8001b3a <HAL_GPIO_Init+0x23a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a56      	ldr	r2, [pc, #344]	; (8001c34 <HAL_GPIO_Init+0x334>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d02b      	beq.n	8001b36 <HAL_GPIO_Init+0x236>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a55      	ldr	r2, [pc, #340]	; (8001c38 <HAL_GPIO_Init+0x338>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d025      	beq.n	8001b32 <HAL_GPIO_Init+0x232>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a54      	ldr	r2, [pc, #336]	; (8001c3c <HAL_GPIO_Init+0x33c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01f      	beq.n	8001b2e <HAL_GPIO_Init+0x22e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a53      	ldr	r2, [pc, #332]	; (8001c40 <HAL_GPIO_Init+0x340>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d019      	beq.n	8001b2a <HAL_GPIO_Init+0x22a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_GPIO_Init+0x344>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_GPIO_Init+0x226>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a51      	ldr	r2, [pc, #324]	; (8001c48 <HAL_GPIO_Init+0x348>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00d      	beq.n	8001b22 <HAL_GPIO_Init+0x222>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <HAL_GPIO_Init+0x34c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d007      	beq.n	8001b1e <HAL_GPIO_Init+0x21e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4f      	ldr	r2, [pc, #316]	; (8001c50 <HAL_GPIO_Init+0x350>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d101      	bne.n	8001b1a <HAL_GPIO_Init+0x21a>
 8001b16:	2309      	movs	r3, #9
 8001b18:	e012      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	e010      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b1e:	2308      	movs	r3, #8
 8001b20:	e00e      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b22:	2307      	movs	r3, #7
 8001b24:	e00c      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b26:	2306      	movs	r3, #6
 8001b28:	e00a      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	e008      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b2e:	2304      	movs	r3, #4
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b32:	2303      	movs	r3, #3
 8001b34:	e004      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e002      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	f002 0203 	and.w	r2, r2, #3
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	4093      	lsls	r3, r2
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b50:	4935      	ldr	r1, [pc, #212]	; (8001c28 <HAL_GPIO_Init+0x328>)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b82:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bac:	4a29      	ldr	r2, [pc, #164]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b0f      	cmp	r3, #15
 8001c10:	f67f ae86 	bls.w	8001920 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020c00 	.word	0x40020c00
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40021400 	.word	0x40021400
 8001c44:	40021800 	.word	0x40021800
 8001c48:	40021c00 	.word	0x40021c00
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	40022400 	.word	0x40022400
 8001c54:	40013c00 	.word	0x40013c00

08001c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e001      	b.n	8001c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ca4:	e003      	b.n	8001cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	619a      	str	r2, [r3, #24]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40007000 	.word	0x40007000

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e291      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d00:	4b96      	ldr	r3, [pc, #600]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d00c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0c:	4b93      	ldr	r3, [pc, #588]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d112      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62>
 8001d18:	4b90      	ldr	r3, [pc, #576]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d26:	4b8d      	ldr	r3, [pc, #564]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x130>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d168      	bne.n	8001e0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e26b      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x7a>
 8001d48:	4b84      	ldr	r3, [pc, #528]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a83      	ldr	r2, [pc, #524]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0xd8>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x9c>
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7e      	ldr	r2, [pc, #504]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b7c      	ldr	r3, [pc, #496]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a7b      	ldr	r2, [pc, #492]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xd8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xc0>
 8001d82:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a75      	ldr	r2, [pc, #468]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a72      	ldr	r2, [pc, #456]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xd8>
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6e      	ldr	r2, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b6c      	ldr	r3, [pc, #432]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6b      	ldr	r2, [pc, #428]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fc5e 	bl	800167c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fc5a 	bl	800167c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e21f      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b61      	ldr	r3, [pc, #388]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe8>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fc4a 	bl	800167c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fc46 	bl	800167c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e20b      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x110>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d069      	beq.n	8001eee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b4d      	ldr	r3, [pc, #308]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x190>
 8001e32:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x17a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1df      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	493d      	ldr	r1, [pc, #244]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e040      	b.n	8001eee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff fbfc 	bl	800167c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e88:	f7ff fbf8 	bl	800167c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1bd      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4929      	ldr	r1, [pc, #164]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
 8001eba:	e018      	b.n	8001eee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ebc:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fbd8 	bl	800167c <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fbd4 	bl	800167c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e199      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d038      	beq.n	8001f6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d019      	beq.n	8001f36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f06:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fbb5 	bl	800167c <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7ff fbb1 	bl	800167c <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e176      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x23a>
 8001f34:	e01a      	b.n	8001f6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_RCC_OscConfig+0x280>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff fb9b 	bl	800167c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fb97 	bl	800167c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d903      	bls.n	8001f60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e15c      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
 8001f5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b91      	ldr	r3, [pc, #580]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80a4 	beq.w	80020c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10d      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a87      	ldr	r2, [pc, #540]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b85      	ldr	r3, [pc, #532]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa2:	4b82      	ldr	r3, [pc, #520]	; (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d118      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fae:	4b7f      	ldr	r3, [pc, #508]	; (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a7e      	ldr	r2, [pc, #504]	; (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fb5f 	bl	800167c <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc2:	f7ff fb5b 	bl	800167c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	; 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e120      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd4:	4b75      	ldr	r3, [pc, #468]	; (80021ac <HAL_RCC_OscConfig+0x4d0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x31a>
 8001fe8:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a6e      	ldr	r2, [pc, #440]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff4:	e02d      	b.n	8002052 <HAL_RCC_OscConfig+0x376>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x33c>
 8001ffe:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	4a69      	ldr	r2, [pc, #420]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	4a66      	ldr	r2, [pc, #408]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6713      	str	r3, [r2, #112]	; 0x70
 8002016:	e01c      	b.n	8002052 <HAL_RCC_OscConfig+0x376>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d10c      	bne.n	800203a <HAL_RCC_OscConfig+0x35e>
 8002020:	4b61      	ldr	r3, [pc, #388]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a60      	ldr	r2, [pc, #384]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
 800202c:	4b5e      	ldr	r3, [pc, #376]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4a5d      	ldr	r2, [pc, #372]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6713      	str	r3, [r2, #112]	; 0x70
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0x376>
 800203a:	4b5b      	ldr	r3, [pc, #364]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a5a      	ldr	r2, [pc, #360]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6713      	str	r3, [r2, #112]	; 0x70
 8002046:	4b58      	ldr	r3, [pc, #352]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	4a57      	ldr	r2, [pc, #348]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d015      	beq.n	8002086 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7ff fb0f 	bl	800167c <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff fb0b 	bl	800167c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0ce      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	4b4b      	ldr	r3, [pc, #300]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ee      	beq.n	8002062 <HAL_RCC_OscConfig+0x386>
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002086:	f7ff faf9 	bl	800167c <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7ff faf5 	bl	800167c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e0b8      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ee      	bne.n	800208e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b3c      	ldr	r3, [pc, #240]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a3b      	ldr	r2, [pc, #236]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80a4 	beq.w	8002214 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020cc:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d06b      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d149      	bne.n	8002174 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 80020e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff fac6 	bl	800167c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff fac2 	bl	800167c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e087      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	4b28      	ldr	r3, [pc, #160]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	019b      	lsls	r3, r3, #6
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	3b01      	subs	r3, #1
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	4313      	orrs	r3, r2
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 800213a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800213e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff fa96 	bl	800167c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff fa92 	bl	800167c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e057      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x478>
 8002172:	e04f      	b.n	8002214 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 800217a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff fa7c 	bl	800167c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff fa78 	bl	800167c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e03d      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x4ac>
 80021a6:	e035      	b.n	8002214 <HAL_RCC_OscConfig+0x538>
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCC_OscConfig+0x544>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d028      	beq.n	8002210 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d121      	bne.n	8002210 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d11a      	bne.n	8002210 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021e0:	4013      	ands	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d111      	bne.n	8002210 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	3b01      	subs	r3, #1
 80021fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0d0      	b.n	80023de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d910      	bls.n	800226c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 020f 	bic.w	r2, r3, #15
 8002252:	4965      	ldr	r1, [pc, #404]	; (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0b8      	b.n	80023de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a58      	ldr	r2, [pc, #352]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 800228a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800228e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80022a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	494d      	ldr	r1, [pc, #308]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d040      	beq.n	8002348 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d115      	bne.n	8002306 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07f      	b.n	80023de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e073      	b.n	80023de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e06b      	b.n	80023de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b39      	ldr	r3, [pc, #228]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4936      	ldr	r1, [pc, #216]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002318:	f7ff f9b0 	bl	800167c <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7ff f9ac 	bl	800167c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e053      	b.n	80023de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d210      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 020f 	bic.w	r2, r3, #15
 800235e:	4922      	ldr	r1, [pc, #136]	; (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e032      	b.n	80023de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4916      	ldr	r1, [pc, #88]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	490e      	ldr	r1, [pc, #56]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b6:	f000 f821 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023ba:	4602      	mov	r2, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_ClockConfig+0x1c8>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	490a      	ldr	r1, [pc, #40]	; (80023f0 <HAL_RCC_ClockConfig+0x1cc>)
 80023c8:	5ccb      	ldrb	r3, [r1, r3]
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1d0>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x1d4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f90c 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023c00 	.word	0x40023c00
 80023ec:	40023800 	.word	0x40023800
 80023f0:	08005370 	.word	0x08005370
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002400:	b090      	sub	sp, #64	; 0x40
 8002402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
 8002408:	2300      	movs	r3, #0
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800240c:	2300      	movs	r3, #0
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002414:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCC_GetSysClockFreq+0x180>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d00d      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x40>
 8002420:	2b08      	cmp	r3, #8
 8002422:	f200 80a1 	bhi.w	8002568 <HAL_RCC_GetSysClockFreq+0x16c>
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x34>
 800242a:	2b04      	cmp	r3, #4
 800242c:	d003      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0x3a>
 800242e:	e09b      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_GetSysClockFreq+0x184>)
 8002432:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002434:	e09b      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002436:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_GetSysClockFreq+0x188>)
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800243a:	e098      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800243c:	4b4f      	ldr	r3, [pc, #316]	; (800257c <HAL_RCC_GetSysClockFreq+0x180>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002446:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_RCC_GetSysClockFreq+0x180>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d028      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002452:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCC_GetSysClockFreq+0x180>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	2200      	movs	r2, #0
 800245a:	623b      	str	r3, [r7, #32]
 800245c:	627a      	str	r2, [r7, #36]	; 0x24
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002464:	2100      	movs	r1, #0
 8002466:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_RCC_GetSysClockFreq+0x188>)
 8002468:	fb03 f201 	mul.w	r2, r3, r1
 800246c:	2300      	movs	r3, #0
 800246e:	fb00 f303 	mul.w	r3, r0, r3
 8002472:	4413      	add	r3, r2
 8002474:	4a43      	ldr	r2, [pc, #268]	; (8002584 <HAL_RCC_GetSysClockFreq+0x188>)
 8002476:	fba0 1202 	umull	r1, r2, r0, r2
 800247a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800247c:	460a      	mov	r2, r1
 800247e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002482:	4413      	add	r3, r2
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002488:	2200      	movs	r2, #0
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	61fa      	str	r2, [r7, #28]
 800248e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002492:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002496:	f7fd feb7 	bl	8000208 <__aeabi_uldivmod>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4613      	mov	r3, r2
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a2:	e053      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a4:	4b35      	ldr	r3, [pc, #212]	; (800257c <HAL_RCC_GetSysClockFreq+0x180>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	2200      	movs	r2, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	617a      	str	r2, [r7, #20]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024b6:	f04f 0b00 	mov.w	fp, #0
 80024ba:	4652      	mov	r2, sl
 80024bc:	465b      	mov	r3, fp
 80024be:	f04f 0000 	mov.w	r0, #0
 80024c2:	f04f 0100 	mov.w	r1, #0
 80024c6:	0159      	lsls	r1, r3, #5
 80024c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024cc:	0150      	lsls	r0, r2, #5
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	ebb2 080a 	subs.w	r8, r2, sl
 80024d6:	eb63 090b 	sbc.w	r9, r3, fp
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024ee:	ebb2 0408 	subs.w	r4, r2, r8
 80024f2:	eb63 0509 	sbc.w	r5, r3, r9
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	00eb      	lsls	r3, r5, #3
 8002500:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002504:	00e2      	lsls	r2, r4, #3
 8002506:	4614      	mov	r4, r2
 8002508:	461d      	mov	r5, r3
 800250a:	eb14 030a 	adds.w	r3, r4, sl
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	eb45 030b 	adc.w	r3, r5, fp
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002522:	4629      	mov	r1, r5
 8002524:	028b      	lsls	r3, r1, #10
 8002526:	4621      	mov	r1, r4
 8002528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800252c:	4621      	mov	r1, r4
 800252e:	028a      	lsls	r2, r1, #10
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002536:	2200      	movs	r2, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	60fa      	str	r2, [r7, #12]
 800253c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002540:	f7fd fe62 	bl	8000208 <__aeabi_uldivmod>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4613      	mov	r3, r2
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_GetSysClockFreq+0x180>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	3301      	adds	r3, #1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800255c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002566:	e002      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_RCC_GetSysClockFreq+0x184>)
 800256a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800256c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002570:	4618      	mov	r0, r3
 8002572:	3740      	adds	r7, #64	; 0x40
 8002574:	46bd      	mov	sp, r7
 8002576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	00f42400 	.word	0x00f42400
 8002584:	017d7840 	.word	0x017d7840

08002588 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_RCC_GetHCLKFreq+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a4:	f7ff fff0 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0a9b      	lsrs	r3, r3, #10
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4903      	ldr	r1, [pc, #12]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	08005380 	.word	0x08005380

080025c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025cc:	f7ff ffdc 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0b5b      	lsrs	r3, r3, #13
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4903      	ldr	r1, [pc, #12]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08005380 	.word	0x08005380

080025f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002618:	4b69      	ldr	r3, [pc, #420]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a68      	ldr	r2, [pc, #416]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002622:	6093      	str	r3, [r2, #8]
 8002624:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	4964      	ldr	r1, [pc, #400]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800263a:	2301      	movs	r3, #1
 800263c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d017      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800264a:	4b5d      	ldr	r3, [pc, #372]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	4959      	ldr	r1, [pc, #356]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002668:	d101      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800266a:	2301      	movs	r3, #1
 800266c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d017      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002686:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	494a      	ldr	r1, [pc, #296]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 808b 	beq.w	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d4:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	4a39      	ldr	r2, [pc, #228]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026de:	6413      	str	r3, [r2, #64]	; 0x40
 80026e0:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026ec:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a34      	ldr	r2, [pc, #208]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f8:	f7fe ffc0 	bl	800167c <HAL_GetTick>
 80026fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002700:	f7fe ffbc 	bl	800167c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e357      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002712:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800271e:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002726:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d035      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d02e      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002744:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	4a1d      	ldr	r2, [pc, #116]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002750:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800275e:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d114      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe ff84 	bl	800167c <HAL_GetTick>
 8002774:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002776:	e00a      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe ff80 	bl	800167c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e319      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ee      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027a6:	d111      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027b6:	400b      	ands	r3, r1
 80027b8:	4901      	ldr	r1, [pc, #4]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
 80027be:	e00b      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40007000 	.word	0x40007000
 80027c8:	0ffffcff 	.word	0x0ffffcff
 80027cc:	4baa      	ldr	r3, [pc, #680]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4aa9      	ldr	r2, [pc, #676]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027d6:	6093      	str	r3, [r2, #8]
 80027d8:	4ba7      	ldr	r3, [pc, #668]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e4:	49a4      	ldr	r1, [pc, #656]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027f6:	4ba0      	ldr	r3, [pc, #640]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027fc:	4a9e      	ldr	r2, [pc, #632]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002802:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002806:	4b9c      	ldr	r3, [pc, #624]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002808:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002810:	4999      	ldr	r1, [pc, #612]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002824:	4b94      	ldr	r3, [pc, #592]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002832:	4991      	ldr	r1, [pc, #580]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002846:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002854:	4988      	ldr	r1, [pc, #544]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002868:	4b83      	ldr	r3, [pc, #524]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002876:	4980      	ldr	r1, [pc, #512]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800288a:	4b7b      	ldr	r3, [pc, #492]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4977      	ldr	r1, [pc, #476]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ac:	4b72      	ldr	r3, [pc, #456]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	496f      	ldr	r1, [pc, #444]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ce:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	f023 020c 	bic.w	r2, r3, #12
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028dc:	4966      	ldr	r1, [pc, #408]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028f0:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	495e      	ldr	r1, [pc, #376]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002912:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002918:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002920:	4955      	ldr	r1, [pc, #340]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002934:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	494d      	ldr	r1, [pc, #308]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002956:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	4944      	ldr	r1, [pc, #272]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002978:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	493c      	ldr	r1, [pc, #240]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800299a:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a8:	4933      	ldr	r1, [pc, #204]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029bc:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ca:	492b      	ldr	r1, [pc, #172]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d011      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ec:	4922      	ldr	r1, [pc, #136]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029fc:	d101      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2c:	4912      	ldr	r1, [pc, #72]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a50:	4909      	ldr	r1, [pc, #36]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d006      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80d9 	beq.w	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a01      	ldr	r2, [pc, #4]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a76:	e001      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fdfd 	bl	800167c <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a86:	f7fe fdf9 	bl	800167c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b64      	cmp	r3, #100	; 0x64
 8002a92:	d901      	bls.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e194      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a98:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d021      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11d      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ab8:	4b64      	ldr	r3, [pc, #400]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abe:	0c1b      	lsrs	r3, r3, #16
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ac6:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002acc:	0e1b      	lsrs	r3, r3, #24
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	019a      	lsls	r2, r3, #6
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	061b      	lsls	r3, r3, #24
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	071b      	lsls	r3, r3, #28
 8002aec:	4957      	ldr	r1, [pc, #348]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d004      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d02e      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1e:	d129      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b20:	4b4a      	ldr	r3, [pc, #296]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b2e:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b34:	0f1b      	lsrs	r3, r3, #28
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	019a      	lsls	r2, r3, #6
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	041b      	lsls	r3, r3, #16
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	071b      	lsls	r3, r3, #28
 8002b54:	493d      	ldr	r1, [pc, #244]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b62:	f023 021f 	bic.w	r2, r3, #31
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	4937      	ldr	r1, [pc, #220]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01d      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b80:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b86:	0e1b      	lsrs	r3, r3, #24
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b8e:	4b2f      	ldr	r3, [pc, #188]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b94:	0f1b      	lsrs	r3, r3, #28
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	019a      	lsls	r2, r3, #6
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	071b      	lsls	r3, r3, #28
 8002bb4:	4925      	ldr	r1, [pc, #148]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d011      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	019a      	lsls	r2, r3, #6
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	071b      	lsls	r3, r3, #28
 8002be4:	4919      	ldr	r1, [pc, #100]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bec:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fd40 	bl	800167c <HAL_GetTick>
 8002bfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c00:	f7fe fd3c 	bl	800167c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	; 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e0d7      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 80cd 	bne.w	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c32:	f7fe fd23 	bl	800167c <HAL_GetTick>
 8002c36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c3a:	f7fe fd1f 	bl	800167c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b64      	cmp	r3, #100	; 0x64
 8002c46:	d903      	bls.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0ba      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c50:	4b5e      	ldr	r3, [pc, #376]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c5c:	d0ed      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02e      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d12a      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c86:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c94:	4b4d      	ldr	r3, [pc, #308]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	0f1b      	lsrs	r3, r3, #28
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	019a      	lsls	r2, r3, #6
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	041b      	lsls	r3, r3, #16
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	061b      	lsls	r3, r3, #24
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	071b      	lsls	r3, r3, #28
 8002cba:	4944      	ldr	r1, [pc, #272]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cc2:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	493d      	ldr	r1, [pc, #244]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d022      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf0:	d11d      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	0e1b      	lsrs	r3, r3, #24
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	0f1b      	lsrs	r3, r3, #28
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	019a      	lsls	r2, r3, #6
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	071b      	lsls	r3, r3, #28
 8002d26:	4929      	ldr	r1, [pc, #164]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d028      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d40:	0e1b      	lsrs	r3, r3, #24
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	019a      	lsls	r2, r3, #6
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	041b      	lsls	r3, r3, #16
 8002d60:	431a      	orrs	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	071b      	lsls	r3, r3, #28
 8002d6e:	4917      	ldr	r1, [pc, #92]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	4911      	ldr	r1, [pc, #68]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0e      	ldr	r2, [pc, #56]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d98:	f7fe fc70 	bl	800167c <HAL_GetTick>
 8002d9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002da0:	f7fe fc6c 	bl	800167c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e007      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dbe:	d1ef      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e049      	b.n	8002e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fa80 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f000 fffc 	bl	8003e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d001      	beq.n	8002e98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e04c      	b.n	8002f32 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <HAL_TIM_Base_Start+0xc0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d022      	beq.n	8002ef0 <HAL_TIM_Base_Start+0x70>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d01d      	beq.n	8002ef0 <HAL_TIM_Base_Start+0x70>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_TIM_Base_Start+0xc4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_TIM_Base_Start+0x70>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <HAL_TIM_Base_Start+0xc8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_TIM_Base_Start+0x70>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <HAL_TIM_Base_Start+0xcc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_TIM_Base_Start+0x70>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_TIM_Base_Start+0xd0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIM_Base_Start+0x70>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <HAL_TIM_Base_Start+0xd4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIM_Base_Start+0x70>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <HAL_TIM_Base_Start+0xd8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d115      	bne.n	8002f1c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_TIM_Base_Start+0xdc>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d015      	beq.n	8002f2e <HAL_TIM_Base_Start+0xae>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f08:	d011      	beq.n	8002f2e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1a:	e008      	b.n	8002f2e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e000      	b.n	8002f30 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40000800 	.word	0x40000800
 8002f4c:	40000c00 	.word	0x40000c00
 8002f50:	40010400 	.word	0x40010400
 8002f54:	40014000 	.word	0x40014000
 8002f58:	40001800 	.word	0x40001800
 8002f5c:	00010007 	.word	0x00010007

08002f60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e049      	b.n	8003006 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f841 	bl	800300e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f000 ff34 	bl	8003e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_TIM_PWM_Start+0x24>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e03c      	b.n	80030c2 <HAL_TIM_PWM_Start+0x9e>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b04      	cmp	r3, #4
 800304c:	d109      	bne.n	8003062 <HAL_TIM_PWM_Start+0x3e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	bf14      	ite	ne
 800305a:	2301      	movne	r3, #1
 800305c:	2300      	moveq	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e02f      	b.n	80030c2 <HAL_TIM_PWM_Start+0x9e>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d109      	bne.n	800307c <HAL_TIM_PWM_Start+0x58>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e022      	b.n	80030c2 <HAL_TIM_PWM_Start+0x9e>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d109      	bne.n	8003096 <HAL_TIM_PWM_Start+0x72>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	e015      	b.n	80030c2 <HAL_TIM_PWM_Start+0x9e>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b10      	cmp	r3, #16
 800309a:	d109      	bne.n	80030b0 <HAL_TIM_PWM_Start+0x8c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e008      	b.n	80030c2 <HAL_TIM_PWM_Start+0x9e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e092      	b.n	80031f0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <HAL_TIM_PWM_Start+0xb6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d8:	e023      	b.n	8003122 <HAL_TIM_PWM_Start+0xfe>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d104      	bne.n	80030ea <HAL_TIM_PWM_Start+0xc6>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e8:	e01b      	b.n	8003122 <HAL_TIM_PWM_Start+0xfe>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d104      	bne.n	80030fa <HAL_TIM_PWM_Start+0xd6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f8:	e013      	b.n	8003122 <HAL_TIM_PWM_Start+0xfe>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b0c      	cmp	r3, #12
 80030fe:	d104      	bne.n	800310a <HAL_TIM_PWM_Start+0xe6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003108:	e00b      	b.n	8003122 <HAL_TIM_PWM_Start+0xfe>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b10      	cmp	r3, #16
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Start+0xf6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003118:	e003      	b.n	8003122 <HAL_TIM_PWM_Start+0xfe>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	6839      	ldr	r1, [r7, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f001 fbc4 	bl	80048b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a30      	ldr	r2, [pc, #192]	; (80031f8 <HAL_TIM_PWM_Start+0x1d4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_PWM_Start+0x120>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <HAL_TIM_PWM_Start+0x1d8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <HAL_TIM_PWM_Start+0x124>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_TIM_PWM_Start+0x126>
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <HAL_TIM_PWM_Start+0x1d4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <HAL_TIM_PWM_Start+0x18a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003170:	d01d      	beq.n	80031ae <HAL_TIM_PWM_Start+0x18a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_TIM_PWM_Start+0x1dc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d018      	beq.n	80031ae <HAL_TIM_PWM_Start+0x18a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a20      	ldr	r2, [pc, #128]	; (8003204 <HAL_TIM_PWM_Start+0x1e0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_TIM_PWM_Start+0x18a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <HAL_TIM_PWM_Start+0x1e4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <HAL_TIM_PWM_Start+0x18a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a19      	ldr	r2, [pc, #100]	; (80031fc <HAL_TIM_PWM_Start+0x1d8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_TIM_PWM_Start+0x18a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1b      	ldr	r2, [pc, #108]	; (800320c <HAL_TIM_PWM_Start+0x1e8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_TIM_PWM_Start+0x18a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a19      	ldr	r2, [pc, #100]	; (8003210 <HAL_TIM_PWM_Start+0x1ec>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d115      	bne.n	80031da <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	4b17      	ldr	r3, [pc, #92]	; (8003214 <HAL_TIM_PWM_Start+0x1f0>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b06      	cmp	r3, #6
 80031be:	d015      	beq.n	80031ec <HAL_TIM_PWM_Start+0x1c8>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c6:	d011      	beq.n	80031ec <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d8:	e008      	b.n	80031ec <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e000      	b.n	80031ee <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40010000 	.word	0x40010000
 80031fc:	40010400 	.word	0x40010400
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40014000 	.word	0x40014000
 8003210:	40001800 	.word	0x40001800
 8003214:	00010007 	.word	0x00010007

08003218 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e049      	b.n	80032be <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f841 	bl	80032c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3304      	adds	r3, #4
 8003254:	4619      	mov	r1, r3
 8003256:	4610      	mov	r0, r2
 8003258:	f000 fdd8 	bl	8003e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_IC_Start_IT+0x1e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	e023      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x66>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d104      	bne.n	800330a <HAL_TIM_IC_Start_IT+0x2e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e01b      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x66>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d104      	bne.n	800331a <HAL_TIM_IC_Start_IT+0x3e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003316:	b2db      	uxtb	r3, r3
 8003318:	e013      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x66>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b0c      	cmp	r3, #12
 800331e:	d104      	bne.n	800332a <HAL_TIM_IC_Start_IT+0x4e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e00b      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x66>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b10      	cmp	r3, #16
 800332e:	d104      	bne.n	800333a <HAL_TIM_IC_Start_IT+0x5e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e003      	b.n	8003342 <HAL_TIM_IC_Start_IT+0x66>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003340:	b2db      	uxtb	r3, r3
 8003342:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_TIM_IC_Start_IT+0x78>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e013      	b.n	800337c <HAL_TIM_IC_Start_IT+0xa0>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d104      	bne.n	8003364 <HAL_TIM_IC_Start_IT+0x88>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e00b      	b.n	800337c <HAL_TIM_IC_Start_IT+0xa0>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d104      	bne.n	8003374 <HAL_TIM_IC_Start_IT+0x98>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e003      	b.n	800337c <HAL_TIM_IC_Start_IT+0xa0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800337a:	b2db      	uxtb	r3, r3
 800337c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800337e:	7bbb      	ldrb	r3, [r7, #14]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d102      	bne.n	800338a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003384:	7b7b      	ldrb	r3, [r7, #13]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d001      	beq.n	800338e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e0e2      	b.n	8003554 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <HAL_TIM_IC_Start_IT+0xc2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800339c:	e023      	b.n	80033e6 <HAL_TIM_IC_Start_IT+0x10a>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_IC_Start_IT+0xd2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ac:	e01b      	b.n	80033e6 <HAL_TIM_IC_Start_IT+0x10a>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d104      	bne.n	80033be <HAL_TIM_IC_Start_IT+0xe2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033bc:	e013      	b.n	80033e6 <HAL_TIM_IC_Start_IT+0x10a>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d104      	bne.n	80033ce <HAL_TIM_IC_Start_IT+0xf2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033cc:	e00b      	b.n	80033e6 <HAL_TIM_IC_Start_IT+0x10a>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d104      	bne.n	80033de <HAL_TIM_IC_Start_IT+0x102>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033dc:	e003      	b.n	80033e6 <HAL_TIM_IC_Start_IT+0x10a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d104      	bne.n	80033f6 <HAL_TIM_IC_Start_IT+0x11a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f4:	e013      	b.n	800341e <HAL_TIM_IC_Start_IT+0x142>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d104      	bne.n	8003406 <HAL_TIM_IC_Start_IT+0x12a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003404:	e00b      	b.n	800341e <HAL_TIM_IC_Start_IT+0x142>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d104      	bne.n	8003416 <HAL_TIM_IC_Start_IT+0x13a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003414:	e003      	b.n	800341e <HAL_TIM_IC_Start_IT+0x142>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b0c      	cmp	r3, #12
 8003422:	d841      	bhi.n	80034a8 <HAL_TIM_IC_Start_IT+0x1cc>
 8003424:	a201      	add	r2, pc, #4	; (adr r2, 800342c <HAL_TIM_IC_Start_IT+0x150>)
 8003426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342a:	bf00      	nop
 800342c:	08003461 	.word	0x08003461
 8003430:	080034a9 	.word	0x080034a9
 8003434:	080034a9 	.word	0x080034a9
 8003438:	080034a9 	.word	0x080034a9
 800343c:	08003473 	.word	0x08003473
 8003440:	080034a9 	.word	0x080034a9
 8003444:	080034a9 	.word	0x080034a9
 8003448:	080034a9 	.word	0x080034a9
 800344c:	08003485 	.word	0x08003485
 8003450:	080034a9 	.word	0x080034a9
 8003454:	080034a9 	.word	0x080034a9
 8003458:	080034a9 	.word	0x080034a9
 800345c:	08003497 	.word	0x08003497
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0202 	orr.w	r2, r2, #2
 800346e:	60da      	str	r2, [r3, #12]
      break;
 8003470:	e01d      	b.n	80034ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0204 	orr.w	r2, r2, #4
 8003480:	60da      	str	r2, [r3, #12]
      break;
 8003482:	e014      	b.n	80034ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0208 	orr.w	r2, r2, #8
 8003492:	60da      	str	r2, [r3, #12]
      break;
 8003494:	e00b      	b.n	80034ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0210 	orr.w	r2, r2, #16
 80034a4:	60da      	str	r2, [r3, #12]
      break;
 80034a6:	e002      	b.n	80034ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
      break;
 80034ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d14e      	bne.n	8003552 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2201      	movs	r2, #1
 80034ba:	6839      	ldr	r1, [r7, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 f9fb 	bl	80048b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a25      	ldr	r2, [pc, #148]	; (800355c <HAL_TIM_IC_Start_IT+0x280>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d022      	beq.n	8003512 <HAL_TIM_IC_Start_IT+0x236>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d01d      	beq.n	8003512 <HAL_TIM_IC_Start_IT+0x236>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a21      	ldr	r2, [pc, #132]	; (8003560 <HAL_TIM_IC_Start_IT+0x284>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d018      	beq.n	8003512 <HAL_TIM_IC_Start_IT+0x236>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <HAL_TIM_IC_Start_IT+0x288>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_TIM_IC_Start_IT+0x236>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1e      	ldr	r2, [pc, #120]	; (8003568 <HAL_TIM_IC_Start_IT+0x28c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <HAL_TIM_IC_Start_IT+0x236>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1c      	ldr	r2, [pc, #112]	; (800356c <HAL_TIM_IC_Start_IT+0x290>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_TIM_IC_Start_IT+0x236>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <HAL_TIM_IC_Start_IT+0x294>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_TIM_IC_Start_IT+0x236>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <HAL_TIM_IC_Start_IT+0x298>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d115      	bne.n	800353e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <HAL_TIM_IC_Start_IT+0x29c>)
 800351a:	4013      	ands	r3, r2
 800351c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b06      	cmp	r3, #6
 8003522:	d015      	beq.n	8003550 <HAL_TIM_IC_Start_IT+0x274>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352a:	d011      	beq.n	8003550 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353c:	e008      	b.n	8003550 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e000      	b.n	8003552 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003552:	7bfb      	ldrb	r3, [r7, #15]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40010000 	.word	0x40010000
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40010400 	.word	0x40010400
 8003570:	40014000 	.word	0x40014000
 8003574:	40001800 	.word	0x40001800
 8003578:	00010007 	.word	0x00010007

0800357c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d122      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	d11b      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0202 	mvn.w	r2, #2
 80035a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd f85e 	bl	8000680 <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fc02 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fc09 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d122      	bne.n	800362c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0204 	mvn.w	r2, #4
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd f834 	bl	8000680 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fbd8 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fbdf 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b08      	cmp	r3, #8
 8003638:	d122      	bne.n	8003680 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b08      	cmp	r3, #8
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0208 	mvn.w	r2, #8
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2204      	movs	r2, #4
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd f80a 	bl	8000680 <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fbae 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fbb5 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b10      	cmp	r3, #16
 800368c:	d122      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b10      	cmp	r3, #16
 800369a:	d11b      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0210 	mvn.w	r2, #16
 80036a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2208      	movs	r2, #8
 80036aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fc ffe0 	bl	8000680 <HAL_TIM_IC_CaptureCallback>
 80036c0:	e005      	b.n	80036ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fb84 	bl	8003dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fb8b 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d10e      	bne.n	8003700 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d107      	bne.n	8003700 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0201 	mvn.w	r2, #1
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fb5e 	bl	8003dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d10e      	bne.n	800372c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b80      	cmp	r3, #128	; 0x80
 800371a:	d107      	bne.n	800372c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f001 f984 	bl	8004a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373a:	d10e      	bne.n	800375a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d107      	bne.n	800375a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f001 f977 	bl	8004a48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d10e      	bne.n	8003786 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	d107      	bne.n	8003786 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800377e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fb39 	bl	8003df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b20      	cmp	r3, #32
 8003792:	d10e      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d107      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f06f 0220 	mvn.w	r2, #32
 80037aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f001 f937 	bl	8004a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e088      	b.n	80038ea <HAL_TIM_IC_ConfigChannel+0x130>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d11b      	bne.n	800381e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6819      	ldr	r1, [r3, #0]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f000 fe9b 	bl	8004530 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699a      	ldr	r2, [r3, #24]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020c 	bic.w	r2, r2, #12
 8003808:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6999      	ldr	r1, [r3, #24]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	619a      	str	r2, [r3, #24]
 800381c:	e060      	b.n	80038e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d11c      	bne.n	800385e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f000 ff1f 	bl	8004676 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003846:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6999      	ldr	r1, [r3, #24]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	021a      	lsls	r2, r3, #8
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	619a      	str	r2, [r3, #24]
 800385c:	e040      	b.n	80038e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d11b      	bne.n	800389c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	6819      	ldr	r1, [r3, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f000 ff6c 	bl	8004750 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 020c 	bic.w	r2, r2, #12
 8003886:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69d9      	ldr	r1, [r3, #28]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	61da      	str	r2, [r3, #28]
 800389a:	e021      	b.n	80038e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d11c      	bne.n	80038dc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f000 ff89 	bl	80047c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80038c4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69d9      	ldr	r1, [r3, #28]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	021a      	lsls	r2, r3, #8
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	61da      	str	r2, [r3, #28]
 80038da:	e001      	b.n	80038e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800390e:	2302      	movs	r3, #2
 8003910:	e0ff      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b14      	cmp	r3, #20
 800391e:	f200 80f0 	bhi.w	8003b02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003922:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	0800397d 	.word	0x0800397d
 800392c:	08003b03 	.word	0x08003b03
 8003930:	08003b03 	.word	0x08003b03
 8003934:	08003b03 	.word	0x08003b03
 8003938:	080039bd 	.word	0x080039bd
 800393c:	08003b03 	.word	0x08003b03
 8003940:	08003b03 	.word	0x08003b03
 8003944:	08003b03 	.word	0x08003b03
 8003948:	080039ff 	.word	0x080039ff
 800394c:	08003b03 	.word	0x08003b03
 8003950:	08003b03 	.word	0x08003b03
 8003954:	08003b03 	.word	0x08003b03
 8003958:	08003a3f 	.word	0x08003a3f
 800395c:	08003b03 	.word	0x08003b03
 8003960:	08003b03 	.word	0x08003b03
 8003964:	08003b03 	.word	0x08003b03
 8003968:	08003a81 	.word	0x08003a81
 800396c:	08003b03 	.word	0x08003b03
 8003970:	08003b03 	.word	0x08003b03
 8003974:	08003b03 	.word	0x08003b03
 8003978:	08003ac1 	.word	0x08003ac1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fae2 	bl	8003f4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6999      	ldr	r1, [r3, #24]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	619a      	str	r2, [r3, #24]
      break;
 80039ba:	e0a5      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fb34 	bl	8004030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	619a      	str	r2, [r3, #24]
      break;
 80039fc:	e084      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fb8b 	bl	8004120 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0208 	orr.w	r2, r2, #8
 8003a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0204 	bic.w	r2, r2, #4
 8003a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69d9      	ldr	r1, [r3, #28]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	61da      	str	r2, [r3, #28]
      break;
 8003a3c:	e064      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fbe1 	bl	800420c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69d9      	ldr	r1, [r3, #28]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	021a      	lsls	r2, r3, #8
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	61da      	str	r2, [r3, #28]
      break;
 8003a7e:	e043      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fc18 	bl	80042bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0208 	orr.w	r2, r2, #8
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003abe:	e023      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fc4a 	bl	8004360 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b00:	e002      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
      break;
 8003b06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop

08003b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_TIM_ConfigClockSource+0x1c>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0b4      	b.n	8003ca2 <HAL_TIM_ConfigClockSource+0x186>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4b56      	ldr	r3, [pc, #344]	; (8003cac <HAL_TIM_ConfigClockSource+0x190>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b70:	d03e      	beq.n	8003bf0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b76:	f200 8087 	bhi.w	8003c88 <HAL_TIM_ConfigClockSource+0x16c>
 8003b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7e:	f000 8086 	beq.w	8003c8e <HAL_TIM_ConfigClockSource+0x172>
 8003b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b86:	d87f      	bhi.n	8003c88 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b70      	cmp	r3, #112	; 0x70
 8003b8a:	d01a      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0xa6>
 8003b8c:	2b70      	cmp	r3, #112	; 0x70
 8003b8e:	d87b      	bhi.n	8003c88 <HAL_TIM_ConfigClockSource+0x16c>
 8003b90:	2b60      	cmp	r3, #96	; 0x60
 8003b92:	d050      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0x11a>
 8003b94:	2b60      	cmp	r3, #96	; 0x60
 8003b96:	d877      	bhi.n	8003c88 <HAL_TIM_ConfigClockSource+0x16c>
 8003b98:	2b50      	cmp	r3, #80	; 0x50
 8003b9a:	d03c      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0xfa>
 8003b9c:	2b50      	cmp	r3, #80	; 0x50
 8003b9e:	d873      	bhi.n	8003c88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba0:	2b40      	cmp	r3, #64	; 0x40
 8003ba2:	d058      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x13a>
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d86f      	bhi.n	8003c88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba8:	2b30      	cmp	r3, #48	; 0x30
 8003baa:	d064      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x15a>
 8003bac:	2b30      	cmp	r3, #48	; 0x30
 8003bae:	d86b      	bhi.n	8003c88 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d060      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x15a>
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d867      	bhi.n	8003c88 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d05c      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x15a>
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d05a      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x15a>
 8003bc0:	e062      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6899      	ldr	r1, [r3, #8]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f000 fe51 	bl	8004878 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003be4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	609a      	str	r2, [r3, #8]
      break;
 8003bee:	e04f      	b.n	8003c90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6899      	ldr	r1, [r3, #8]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f000 fe3a 	bl	8004878 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c12:	609a      	str	r2, [r3, #8]
      break;
 8003c14:	e03c      	b.n	8003c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6859      	ldr	r1, [r3, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f000 fcf8 	bl	8004618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2150      	movs	r1, #80	; 0x50
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fe07 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 8003c34:	e02c      	b.n	8003c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6859      	ldr	r1, [r3, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f000 fd54 	bl	80046f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2160      	movs	r1, #96	; 0x60
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fdf7 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 8003c54:	e01c      	b.n	8003c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f000 fcd8 	bl	8004618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2140      	movs	r1, #64	; 0x40
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fde7 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 8003c74:	e00c      	b.n	8003c90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4610      	mov	r0, r2
 8003c82:	f000 fdde 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 8003c86:	e003      	b.n	8003c90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c8c:	e000      	b.n	8003c90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	fffeff88 	.word	0xfffeff88

08003cb0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e031      	b.n	8003d2c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fb94 	bl	8004408 <TIM_SlaveTimer_SetConfig>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e018      	b.n	8003d2c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d08:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d18:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	d831      	bhi.n	8003dac <HAL_TIM_ReadCapturedValue+0x78>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08003dad 	.word	0x08003dad
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003dad 	.word	0x08003dad
 8003d60:	08003d8f 	.word	0x08003d8f
 8003d64:	08003dad 	.word	0x08003dad
 8003d68:	08003dad 	.word	0x08003dad
 8003d6c:	08003dad 	.word	0x08003dad
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003dad 	.word	0x08003dad
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003dad 	.word	0x08003dad
 8003d80:	08003da3 	.word	0x08003da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	60fb      	str	r3, [r7, #12]

      break;
 8003d8c:	e00f      	b.n	8003dae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	60fb      	str	r3, [r7, #12]

      break;
 8003d96:	e00a      	b.n	8003dae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	60fb      	str	r3, [r7, #12]

      break;
 8003da0:	e005      	b.n	8003dae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	60fb      	str	r3, [r7, #12]

      break;
 8003daa:	e000      	b.n	8003dae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003dac:	bf00      	nop
  }

  return tmpreg;
 8003dae:	68fb      	ldr	r3, [r7, #12]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a40      	ldr	r2, [pc, #256]	; (8003f20 <TIM_Base_SetConfig+0x114>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d013      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2a:	d00f      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3d      	ldr	r2, [pc, #244]	; (8003f24 <TIM_Base_SetConfig+0x118>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00b      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a3c      	ldr	r2, [pc, #240]	; (8003f28 <TIM_Base_SetConfig+0x11c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3b      	ldr	r2, [pc, #236]	; (8003f2c <TIM_Base_SetConfig+0x120>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3a      	ldr	r2, [pc, #232]	; (8003f30 <TIM_Base_SetConfig+0x124>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d108      	bne.n	8003e5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <TIM_Base_SetConfig+0x114>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d02b      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d027      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2c      	ldr	r2, [pc, #176]	; (8003f24 <TIM_Base_SetConfig+0x118>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d023      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <TIM_Base_SetConfig+0x11c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01f      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <TIM_Base_SetConfig+0x120>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01b      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a29      	ldr	r2, [pc, #164]	; (8003f30 <TIM_Base_SetConfig+0x124>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d017      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a28      	ldr	r2, [pc, #160]	; (8003f34 <TIM_Base_SetConfig+0x128>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a27      	ldr	r2, [pc, #156]	; (8003f38 <TIM_Base_SetConfig+0x12c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00f      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a26      	ldr	r2, [pc, #152]	; (8003f3c <TIM_Base_SetConfig+0x130>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <TIM_Base_SetConfig+0x134>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <TIM_Base_SetConfig+0x138>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <TIM_Base_SetConfig+0x13c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d108      	bne.n	8003ed0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <TIM_Base_SetConfig+0x114>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_Base_SetConfig+0xf8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <TIM_Base_SetConfig+0x124>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d103      	bne.n	8003f0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	615a      	str	r2, [r3, #20]
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40010400 	.word	0x40010400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800
 8003f40:	40001800 	.word	0x40001800
 8003f44:	40001c00 	.word	0x40001c00
 8003f48:	40002000 	.word	0x40002000

08003f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0201 	bic.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <TIM_OC1_SetConfig+0xd8>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0303 	bic.w	r3, r3, #3
 8003f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 0302 	bic.w	r3, r3, #2
 8003f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a21      	ldr	r2, [pc, #132]	; (8004028 <TIM_OC1_SetConfig+0xdc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_OC1_SetConfig+0x64>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a20      	ldr	r2, [pc, #128]	; (800402c <TIM_OC1_SetConfig+0xe0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d10c      	bne.n	8003fca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f023 0308 	bic.w	r3, r3, #8
 8003fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 0304 	bic.w	r3, r3, #4
 8003fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a16      	ldr	r2, [pc, #88]	; (8004028 <TIM_OC1_SetConfig+0xdc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_OC1_SetConfig+0x8e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a15      	ldr	r2, [pc, #84]	; (800402c <TIM_OC1_SetConfig+0xe0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d111      	bne.n	8003ffe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	621a      	str	r2, [r3, #32]
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	fffeff8f 	.word	0xfffeff8f
 8004028:	40010000 	.word	0x40010000
 800402c:	40010400 	.word	0x40010400

08004030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0210 	bic.w	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4b2e      	ldr	r3, [pc, #184]	; (8004114 <TIM_OC2_SetConfig+0xe4>)
 800405c:	4013      	ands	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0320 	bic.w	r3, r3, #32
 800407a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a23      	ldr	r2, [pc, #140]	; (8004118 <TIM_OC2_SetConfig+0xe8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC2_SetConfig+0x68>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a22      	ldr	r2, [pc, #136]	; (800411c <TIM_OC2_SetConfig+0xec>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d10d      	bne.n	80040b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a18      	ldr	r2, [pc, #96]	; (8004118 <TIM_OC2_SetConfig+0xe8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_OC2_SetConfig+0x94>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a17      	ldr	r2, [pc, #92]	; (800411c <TIM_OC2_SetConfig+0xec>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d113      	bne.n	80040ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	feff8fff 	.word	0xfeff8fff
 8004118:	40010000 	.word	0x40010000
 800411c:	40010400 	.word	0x40010400

08004120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4b2d      	ldr	r3, [pc, #180]	; (8004200 <TIM_OC3_SetConfig+0xe0>)
 800414c:	4013      	ands	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <TIM_OC3_SetConfig+0xe4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_OC3_SetConfig+0x66>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a21      	ldr	r2, [pc, #132]	; (8004208 <TIM_OC3_SetConfig+0xe8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d10d      	bne.n	80041a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800418c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a17      	ldr	r2, [pc, #92]	; (8004204 <TIM_OC3_SetConfig+0xe4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_OC3_SetConfig+0x92>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a16      	ldr	r2, [pc, #88]	; (8004208 <TIM_OC3_SetConfig+0xe8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d113      	bne.n	80041da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	621a      	str	r2, [r3, #32]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	fffeff8f 	.word	0xfffeff8f
 8004204:	40010000 	.word	0x40010000
 8004208:	40010400 	.word	0x40010400

0800420c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <TIM_OC4_SetConfig+0xa4>)
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	031b      	lsls	r3, r3, #12
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <TIM_OC4_SetConfig+0xa8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_OC4_SetConfig+0x68>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <TIM_OC4_SetConfig+0xac>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d109      	bne.n	8004288 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	019b      	lsls	r3, r3, #6
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	feff8fff 	.word	0xfeff8fff
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40010400 	.word	0x40010400

080042bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <TIM_OC5_SetConfig+0x98>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	041b      	lsls	r3, r3, #16
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a12      	ldr	r2, [pc, #72]	; (8004358 <TIM_OC5_SetConfig+0x9c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_OC5_SetConfig+0x5e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <TIM_OC5_SetConfig+0xa0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d109      	bne.n	800432e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004320:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	621a      	str	r2, [r3, #32]
}
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	fffeff8f 	.word	0xfffeff8f
 8004358:	40010000 	.word	0x40010000
 800435c:	40010400 	.word	0x40010400

08004360 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <TIM_OC6_SetConfig+0x9c>)
 800438c:	4013      	ands	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	051b      	lsls	r3, r3, #20
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a13      	ldr	r2, [pc, #76]	; (8004400 <TIM_OC6_SetConfig+0xa0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_OC6_SetConfig+0x60>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <TIM_OC6_SetConfig+0xa4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d109      	bne.n	80043d4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	029b      	lsls	r3, r3, #10
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	feff8fff 	.word	0xfeff8fff
 8004400:	40010000 	.word	0x40010000
 8004404:	40010400 	.word	0x40010400

08004408 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004424:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4b3e      	ldr	r3, [pc, #248]	; (800452c <TIM_SlaveTimer_SetConfig+0x124>)
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b70      	cmp	r3, #112	; 0x70
 8004450:	d01a      	beq.n	8004488 <TIM_SlaveTimer_SetConfig+0x80>
 8004452:	2b70      	cmp	r3, #112	; 0x70
 8004454:	d860      	bhi.n	8004518 <TIM_SlaveTimer_SetConfig+0x110>
 8004456:	2b60      	cmp	r3, #96	; 0x60
 8004458:	d054      	beq.n	8004504 <TIM_SlaveTimer_SetConfig+0xfc>
 800445a:	2b60      	cmp	r3, #96	; 0x60
 800445c:	d85c      	bhi.n	8004518 <TIM_SlaveTimer_SetConfig+0x110>
 800445e:	2b50      	cmp	r3, #80	; 0x50
 8004460:	d046      	beq.n	80044f0 <TIM_SlaveTimer_SetConfig+0xe8>
 8004462:	2b50      	cmp	r3, #80	; 0x50
 8004464:	d858      	bhi.n	8004518 <TIM_SlaveTimer_SetConfig+0x110>
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d019      	beq.n	800449e <TIM_SlaveTimer_SetConfig+0x96>
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d854      	bhi.n	8004518 <TIM_SlaveTimer_SetConfig+0x110>
 800446e:	2b30      	cmp	r3, #48	; 0x30
 8004470:	d055      	beq.n	800451e <TIM_SlaveTimer_SetConfig+0x116>
 8004472:	2b30      	cmp	r3, #48	; 0x30
 8004474:	d850      	bhi.n	8004518 <TIM_SlaveTimer_SetConfig+0x110>
 8004476:	2b20      	cmp	r3, #32
 8004478:	d051      	beq.n	800451e <TIM_SlaveTimer_SetConfig+0x116>
 800447a:	2b20      	cmp	r3, #32
 800447c:	d84c      	bhi.n	8004518 <TIM_SlaveTimer_SetConfig+0x110>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d04d      	beq.n	800451e <TIM_SlaveTimer_SetConfig+0x116>
 8004482:	2b10      	cmp	r3, #16
 8004484:	d04b      	beq.n	800451e <TIM_SlaveTimer_SetConfig+0x116>
 8004486:	e047      	b.n	8004518 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68d9      	ldr	r1, [r3, #12]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f000 f9ee 	bl	8004878 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800449c:	e040      	b.n	8004520 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d101      	bne.n	80044aa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e03b      	b.n	8004522 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6a1a      	ldr	r2, [r3, #32]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	621a      	str	r2, [r3, #32]
      break;
 80044ee:	e017      	b.n	8004520 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6899      	ldr	r1, [r3, #8]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	461a      	mov	r2, r3
 80044fe:	f000 f88b 	bl	8004618 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004502:	e00d      	b.n	8004520 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6899      	ldr	r1, [r3, #8]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	461a      	mov	r2, r3
 8004512:	f000 f8ed 	bl	80046f0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004516:	e003      	b.n	8004520 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	75fb      	strb	r3, [r7, #23]
      break;
 800451c:	e000      	b.n	8004520 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800451e:	bf00      	nop
  }

  return status;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	fffefff8 	.word	0xfffefff8

08004530 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0201 	bic.w	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a28      	ldr	r2, [pc, #160]	; (80045fc <TIM_TI1_SetConfig+0xcc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d01b      	beq.n	8004596 <TIM_TI1_SetConfig+0x66>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004564:	d017      	beq.n	8004596 <TIM_TI1_SetConfig+0x66>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a25      	ldr	r2, [pc, #148]	; (8004600 <TIM_TI1_SetConfig+0xd0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <TIM_TI1_SetConfig+0x66>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a24      	ldr	r2, [pc, #144]	; (8004604 <TIM_TI1_SetConfig+0xd4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00f      	beq.n	8004596 <TIM_TI1_SetConfig+0x66>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a23      	ldr	r2, [pc, #140]	; (8004608 <TIM_TI1_SetConfig+0xd8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00b      	beq.n	8004596 <TIM_TI1_SetConfig+0x66>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a22      	ldr	r2, [pc, #136]	; (800460c <TIM_TI1_SetConfig+0xdc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <TIM_TI1_SetConfig+0x66>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a21      	ldr	r2, [pc, #132]	; (8004610 <TIM_TI1_SetConfig+0xe0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_TI1_SetConfig+0x66>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a20      	ldr	r2, [pc, #128]	; (8004614 <TIM_TI1_SetConfig+0xe4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d101      	bne.n	800459a <TIM_TI1_SetConfig+0x6a>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <TIM_TI1_SetConfig+0x6c>
 800459a:	2300      	movs	r3, #0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e003      	b.n	80045ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f023 030a 	bic.w	r3, r3, #10
 80045d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 030a 	and.w	r3, r3, #10
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40010000 	.word	0x40010000
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800
 8004608:	40000c00 	.word	0x40000c00
 800460c:	40010400 	.word	0x40010400
 8004610:	40014000 	.word	0x40014000
 8004614:	40001800 	.word	0x40001800

08004618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 030a 	bic.w	r3, r3, #10
 8004654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004676:	b480      	push	{r7}
 8004678:	b087      	sub	sp, #28
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f023 0210 	bic.w	r2, r3, #16
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	031b      	lsls	r3, r3, #12
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	621a      	str	r2, [r3, #32]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f023 0210 	bic.w	r2, r3, #16
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800471a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	031b      	lsls	r3, r3, #12
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800472c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 0303 	bic.w	r3, r3, #3
 800477c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800478c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	b2db      	uxtb	r3, r3
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80047a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004806:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	031b      	lsls	r3, r3, #12
 800480c:	b29b      	uxth	r3, r3
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800481a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	031b      	lsls	r3, r3, #12
 8004820:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	f043 0307 	orr.w	r3, r3, #7
 8004864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	609a      	str	r2, [r3, #8]
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	021a      	lsls	r2, r3, #8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	431a      	orrs	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4313      	orrs	r3, r2
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	609a      	str	r2, [r3, #8]
}
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2201      	movs	r2, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	43db      	mvns	r3, r3
 80048da:	401a      	ands	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004918:	2302      	movs	r3, #2
 800491a:	e06d      	b.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a30      	ldr	r2, [pc, #192]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2f      	ldr	r2, [pc, #188]	; (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d108      	bne.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004956:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004968:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d022      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498e:	d01d      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d018      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d009      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a15      	ldr	r2, [pc, #84]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10c      	bne.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40010400 	.word	0x40010400
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40001800 	.word	0x40001800

08004a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e040      	b.n	8004af0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc fd24 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2224      	movs	r2, #36	; 0x24
 8004a88:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f82c 	bl	8004af8 <UART_SetConfig>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e022      	b.n	8004af0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa84 	bl	8004fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fb0b 	bl	8005104 <UART_CheckIdleState>
 8004aee:	4603      	mov	r3, r0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4ba6      	ldr	r3, [pc, #664]	; (8004dbc <UART_SetConfig+0x2c4>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	6979      	ldr	r1, [r7, #20]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a94      	ldr	r2, [pc, #592]	; (8004dc0 <UART_SetConfig+0x2c8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d120      	bne.n	8004bb6 <UART_SetConfig+0xbe>
 8004b74:	4b93      	ldr	r3, [pc, #588]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d816      	bhi.n	8004bb0 <UART_SetConfig+0xb8>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <UART_SetConfig+0x90>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004ba5 	.word	0x08004ba5
 8004b90:	08004b9f 	.word	0x08004b9f
 8004b94:	08004bab 	.word	0x08004bab
 8004b98:	2301      	movs	r3, #1
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e150      	b.n	8004e40 <UART_SetConfig+0x348>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e14d      	b.n	8004e40 <UART_SetConfig+0x348>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e14a      	b.n	8004e40 <UART_SetConfig+0x348>
 8004baa:	2308      	movs	r3, #8
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e147      	b.n	8004e40 <UART_SetConfig+0x348>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e144      	b.n	8004e40 <UART_SetConfig+0x348>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a83      	ldr	r2, [pc, #524]	; (8004dc8 <UART_SetConfig+0x2d0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d132      	bne.n	8004c26 <UART_SetConfig+0x12e>
 8004bc0:	4b80      	ldr	r3, [pc, #512]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d828      	bhi.n	8004c20 <UART_SetConfig+0x128>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <UART_SetConfig+0xdc>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004c21 	.word	0x08004c21
 8004bdc:	08004c21 	.word	0x08004c21
 8004be0:	08004c21 	.word	0x08004c21
 8004be4:	08004c15 	.word	0x08004c15
 8004be8:	08004c21 	.word	0x08004c21
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004c21 	.word	0x08004c21
 8004bf4:	08004c0f 	.word	0x08004c0f
 8004bf8:	08004c21 	.word	0x08004c21
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c21 	.word	0x08004c21
 8004c04:	08004c1b 	.word	0x08004c1b
 8004c08:	2300      	movs	r3, #0
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e118      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e115      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c14:	2304      	movs	r3, #4
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e112      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e10f      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c20:	2310      	movs	r3, #16
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e10c      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a68      	ldr	r2, [pc, #416]	; (8004dcc <UART_SetConfig+0x2d4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d120      	bne.n	8004c72 <UART_SetConfig+0x17a>
 8004c30:	4b64      	ldr	r3, [pc, #400]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c3a:	2b30      	cmp	r3, #48	; 0x30
 8004c3c:	d013      	beq.n	8004c66 <UART_SetConfig+0x16e>
 8004c3e:	2b30      	cmp	r3, #48	; 0x30
 8004c40:	d814      	bhi.n	8004c6c <UART_SetConfig+0x174>
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d009      	beq.n	8004c5a <UART_SetConfig+0x162>
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d810      	bhi.n	8004c6c <UART_SetConfig+0x174>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <UART_SetConfig+0x15c>
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d006      	beq.n	8004c60 <UART_SetConfig+0x168>
 8004c52:	e00b      	b.n	8004c6c <UART_SetConfig+0x174>
 8004c54:	2300      	movs	r3, #0
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e0f2      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e0ef      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c60:	2304      	movs	r3, #4
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e0ec      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c66:	2308      	movs	r3, #8
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e0e9      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e0e6      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a56      	ldr	r2, [pc, #344]	; (8004dd0 <UART_SetConfig+0x2d8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d120      	bne.n	8004cbe <UART_SetConfig+0x1c6>
 8004c7c:	4b51      	ldr	r3, [pc, #324]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c86:	2bc0      	cmp	r3, #192	; 0xc0
 8004c88:	d013      	beq.n	8004cb2 <UART_SetConfig+0x1ba>
 8004c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c8c:	d814      	bhi.n	8004cb8 <UART_SetConfig+0x1c0>
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d009      	beq.n	8004ca6 <UART_SetConfig+0x1ae>
 8004c92:	2b80      	cmp	r3, #128	; 0x80
 8004c94:	d810      	bhi.n	8004cb8 <UART_SetConfig+0x1c0>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <UART_SetConfig+0x1a8>
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d006      	beq.n	8004cac <UART_SetConfig+0x1b4>
 8004c9e:	e00b      	b.n	8004cb8 <UART_SetConfig+0x1c0>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e0cc      	b.n	8004e40 <UART_SetConfig+0x348>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e0c9      	b.n	8004e40 <UART_SetConfig+0x348>
 8004cac:	2304      	movs	r3, #4
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e0c6      	b.n	8004e40 <UART_SetConfig+0x348>
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e0c3      	b.n	8004e40 <UART_SetConfig+0x348>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e0c0      	b.n	8004e40 <UART_SetConfig+0x348>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a44      	ldr	r2, [pc, #272]	; (8004dd4 <UART_SetConfig+0x2dc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d125      	bne.n	8004d14 <UART_SetConfig+0x21c>
 8004cc8:	4b3e      	ldr	r3, [pc, #248]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd6:	d017      	beq.n	8004d08 <UART_SetConfig+0x210>
 8004cd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cdc:	d817      	bhi.n	8004d0e <UART_SetConfig+0x216>
 8004cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce2:	d00b      	beq.n	8004cfc <UART_SetConfig+0x204>
 8004ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce8:	d811      	bhi.n	8004d0e <UART_SetConfig+0x216>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <UART_SetConfig+0x1fe>
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf2:	d006      	beq.n	8004d02 <UART_SetConfig+0x20a>
 8004cf4:	e00b      	b.n	8004d0e <UART_SetConfig+0x216>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e0a1      	b.n	8004e40 <UART_SetConfig+0x348>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e09e      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d02:	2304      	movs	r3, #4
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	e09b      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e098      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d0e:	2310      	movs	r3, #16
 8004d10:	77fb      	strb	r3, [r7, #31]
 8004d12:	e095      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2f      	ldr	r2, [pc, #188]	; (8004dd8 <UART_SetConfig+0x2e0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d125      	bne.n	8004d6a <UART_SetConfig+0x272>
 8004d1e:	4b29      	ldr	r3, [pc, #164]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d2c:	d017      	beq.n	8004d5e <UART_SetConfig+0x266>
 8004d2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d32:	d817      	bhi.n	8004d64 <UART_SetConfig+0x26c>
 8004d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d38:	d00b      	beq.n	8004d52 <UART_SetConfig+0x25a>
 8004d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3e:	d811      	bhi.n	8004d64 <UART_SetConfig+0x26c>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <UART_SetConfig+0x254>
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d48:	d006      	beq.n	8004d58 <UART_SetConfig+0x260>
 8004d4a:	e00b      	b.n	8004d64 <UART_SetConfig+0x26c>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e076      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d52:	2302      	movs	r3, #2
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e073      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e070      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d5e:	2308      	movs	r3, #8
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e06d      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d64:	2310      	movs	r3, #16
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e06a      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <UART_SetConfig+0x2e4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d138      	bne.n	8004de6 <UART_SetConfig+0x2ee>
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d82:	d017      	beq.n	8004db4 <UART_SetConfig+0x2bc>
 8004d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d88:	d82a      	bhi.n	8004de0 <UART_SetConfig+0x2e8>
 8004d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8e:	d00b      	beq.n	8004da8 <UART_SetConfig+0x2b0>
 8004d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d94:	d824      	bhi.n	8004de0 <UART_SetConfig+0x2e8>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <UART_SetConfig+0x2aa>
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9e:	d006      	beq.n	8004dae <UART_SetConfig+0x2b6>
 8004da0:	e01e      	b.n	8004de0 <UART_SetConfig+0x2e8>
 8004da2:	2300      	movs	r3, #0
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e04b      	b.n	8004e40 <UART_SetConfig+0x348>
 8004da8:	2302      	movs	r3, #2
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e048      	b.n	8004e40 <UART_SetConfig+0x348>
 8004dae:	2304      	movs	r3, #4
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e045      	b.n	8004e40 <UART_SetConfig+0x348>
 8004db4:	2308      	movs	r3, #8
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e042      	b.n	8004e40 <UART_SetConfig+0x348>
 8004dba:	bf00      	nop
 8004dbc:	efff69f3 	.word	0xefff69f3
 8004dc0:	40011000 	.word	0x40011000
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40004400 	.word	0x40004400
 8004dcc:	40004800 	.word	0x40004800
 8004dd0:	40004c00 	.word	0x40004c00
 8004dd4:	40005000 	.word	0x40005000
 8004dd8:	40011400 	.word	0x40011400
 8004ddc:	40007800 	.word	0x40007800
 8004de0:	2310      	movs	r3, #16
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e02c      	b.n	8004e40 <UART_SetConfig+0x348>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a72      	ldr	r2, [pc, #456]	; (8004fb4 <UART_SetConfig+0x4bc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d125      	bne.n	8004e3c <UART_SetConfig+0x344>
 8004df0:	4b71      	ldr	r3, [pc, #452]	; (8004fb8 <UART_SetConfig+0x4c0>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004dfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dfe:	d017      	beq.n	8004e30 <UART_SetConfig+0x338>
 8004e00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e04:	d817      	bhi.n	8004e36 <UART_SetConfig+0x33e>
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0a:	d00b      	beq.n	8004e24 <UART_SetConfig+0x32c>
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e10:	d811      	bhi.n	8004e36 <UART_SetConfig+0x33e>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <UART_SetConfig+0x326>
 8004e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e1a:	d006      	beq.n	8004e2a <UART_SetConfig+0x332>
 8004e1c:	e00b      	b.n	8004e36 <UART_SetConfig+0x33e>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	77fb      	strb	r3, [r7, #31]
 8004e22:	e00d      	b.n	8004e40 <UART_SetConfig+0x348>
 8004e24:	2302      	movs	r3, #2
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e00a      	b.n	8004e40 <UART_SetConfig+0x348>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	77fb      	strb	r3, [r7, #31]
 8004e2e:	e007      	b.n	8004e40 <UART_SetConfig+0x348>
 8004e30:	2308      	movs	r3, #8
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e004      	b.n	8004e40 <UART_SetConfig+0x348>
 8004e36:	2310      	movs	r3, #16
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e001      	b.n	8004e40 <UART_SetConfig+0x348>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e48:	d15b      	bne.n	8004f02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e4a:	7ffb      	ldrb	r3, [r7, #31]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d828      	bhi.n	8004ea2 <UART_SetConfig+0x3aa>
 8004e50:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0x360>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e85 	.word	0x08004e85
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	08004ea3 	.word	0x08004ea3
 8004e68:	08004e93 	.word	0x08004e93
 8004e6c:	08004ea3 	.word	0x08004ea3
 8004e70:	08004ea3 	.word	0x08004ea3
 8004e74:	08004ea3 	.word	0x08004ea3
 8004e78:	08004e9b 	.word	0x08004e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e7c:	f7fd fb90 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8004e80:	61b8      	str	r0, [r7, #24]
        break;
 8004e82:	e013      	b.n	8004eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e84:	f7fd fba0 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8004e88:	61b8      	str	r0, [r7, #24]
        break;
 8004e8a:	e00f      	b.n	8004eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e8c:	4b4b      	ldr	r3, [pc, #300]	; (8004fbc <UART_SetConfig+0x4c4>)
 8004e8e:	61bb      	str	r3, [r7, #24]
        break;
 8004e90:	e00c      	b.n	8004eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e92:	f7fd fab3 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8004e96:	61b8      	str	r0, [r7, #24]
        break;
 8004e98:	e008      	b.n	8004eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ea0:	e004      	b.n	8004eac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8004eaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d074      	beq.n	8004f9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	005a      	lsls	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	441a      	add	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b0f      	cmp	r3, #15
 8004ecc:	d916      	bls.n	8004efc <UART_SetConfig+0x404>
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d212      	bcs.n	8004efc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f023 030f 	bic.w	r3, r3, #15
 8004ede:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	89fb      	ldrh	r3, [r7, #14]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	89fa      	ldrh	r2, [r7, #14]
 8004ef8:	60da      	str	r2, [r3, #12]
 8004efa:	e04f      	b.n	8004f9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	77bb      	strb	r3, [r7, #30]
 8004f00:	e04c      	b.n	8004f9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f02:	7ffb      	ldrb	r3, [r7, #31]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d828      	bhi.n	8004f5a <UART_SetConfig+0x462>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0x418>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f3d 	.word	0x08004f3d
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	08004f5b 	.word	0x08004f5b
 8004f20:	08004f4b 	.word	0x08004f4b
 8004f24:	08004f5b 	.word	0x08004f5b
 8004f28:	08004f5b 	.word	0x08004f5b
 8004f2c:	08004f5b 	.word	0x08004f5b
 8004f30:	08004f53 	.word	0x08004f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7fd fb34 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8004f38:	61b8      	str	r0, [r7, #24]
        break;
 8004f3a:	e013      	b.n	8004f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f3c:	f7fd fb44 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8004f40:	61b8      	str	r0, [r7, #24]
        break;
 8004f42:	e00f      	b.n	8004f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <UART_SetConfig+0x4c4>)
 8004f46:	61bb      	str	r3, [r7, #24]
        break;
 8004f48:	e00c      	b.n	8004f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4a:	f7fd fa57 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8004f4e:	61b8      	str	r0, [r7, #24]
        break;
 8004f50:	e008      	b.n	8004f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f56:	61bb      	str	r3, [r7, #24]
        break;
 8004f58:	e004      	b.n	8004f64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	77bb      	strb	r3, [r7, #30]
        break;
 8004f62:	bf00      	nop
    }

    if (pclk != 0U)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d018      	beq.n	8004f9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	085a      	lsrs	r2, r3, #1
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	441a      	add	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b0f      	cmp	r3, #15
 8004f82:	d909      	bls.n	8004f98 <UART_SetConfig+0x4a0>
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8a:	d205      	bcs.n	8004f98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	e001      	b.n	8004f9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40007c00 	.word	0x40007c00
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	00f42400 	.word	0x00f42400

08004fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01a      	beq.n	80050d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050be:	d10a      	bne.n	80050d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]
  }
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005114:	f7fc fab2 	bl	800167c <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d10e      	bne.n	8005146 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f81b 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e011      	b.n	800516a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b09c      	sub	sp, #112	; 0x70
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005182:	e0a7      	b.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	f000 80a3 	beq.w	80052d4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518e:	f7fc fa75 	bl	800167c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800519e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d13f      	bne.n	8005224 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051b8:	667b      	str	r3, [r7, #100]	; 0x64
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e6      	bne.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3308      	adds	r3, #8
 80051dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	663b      	str	r3, [r7, #96]	; 0x60
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80051f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e068      	b.n	80052f6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d050      	beq.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005240:	d148      	bne.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800524a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005260:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526a:	637b      	str	r3, [r7, #52]	; 0x34
 800526c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	613b      	str	r3, [r7, #16]
   return(result);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	66bb      	str	r3, [r7, #104]	; 0x68
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800529e:	623a      	str	r2, [r7, #32]
 80052a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	69f9      	ldr	r1, [r7, #28]
 80052a4:	6a3a      	ldr	r2, [r7, #32]
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e5      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e010      	b.n	80052f6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69da      	ldr	r2, [r3, #28]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4013      	ands	r3, r2
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	bf0c      	ite	eq
 80052e4:	2301      	moveq	r3, #1
 80052e6:	2300      	movne	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	f43f af48 	beq.w	8005184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3770      	adds	r7, #112	; 0x70
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <__libc_init_array>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4d0d      	ldr	r5, [pc, #52]	; (8005338 <__libc_init_array+0x38>)
 8005304:	4c0d      	ldr	r4, [pc, #52]	; (800533c <__libc_init_array+0x3c>)
 8005306:	1b64      	subs	r4, r4, r5
 8005308:	10a4      	asrs	r4, r4, #2
 800530a:	2600      	movs	r6, #0
 800530c:	42a6      	cmp	r6, r4
 800530e:	d109      	bne.n	8005324 <__libc_init_array+0x24>
 8005310:	4d0b      	ldr	r5, [pc, #44]	; (8005340 <__libc_init_array+0x40>)
 8005312:	4c0c      	ldr	r4, [pc, #48]	; (8005344 <__libc_init_array+0x44>)
 8005314:	f000 f820 	bl	8005358 <_init>
 8005318:	1b64      	subs	r4, r4, r5
 800531a:	10a4      	asrs	r4, r4, #2
 800531c:	2600      	movs	r6, #0
 800531e:	42a6      	cmp	r6, r4
 8005320:	d105      	bne.n	800532e <__libc_init_array+0x2e>
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	f855 3b04 	ldr.w	r3, [r5], #4
 8005328:	4798      	blx	r3
 800532a:	3601      	adds	r6, #1
 800532c:	e7ee      	b.n	800530c <__libc_init_array+0xc>
 800532e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005332:	4798      	blx	r3
 8005334:	3601      	adds	r6, #1
 8005336:	e7f2      	b.n	800531e <__libc_init_array+0x1e>
 8005338:	08005390 	.word	0x08005390
 800533c:	08005390 	.word	0x08005390
 8005340:	08005390 	.word	0x08005390
 8005344:	08005394 	.word	0x08005394

08005348 <memset>:
 8005348:	4402      	add	r2, r0
 800534a:	4603      	mov	r3, r0
 800534c:	4293      	cmp	r3, r2
 800534e:	d100      	bne.n	8005352 <memset+0xa>
 8005350:	4770      	bx	lr
 8005352:	f803 1b01 	strb.w	r1, [r3], #1
 8005356:	e7f9      	b.n	800534c <memset+0x4>

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
