
projektsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae30  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800b000  0800b000  0001b000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4d4  0800b4d4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4d4  0800b4d4  0001b4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4dc  0800b4dc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4dc  0800b4dc  0001b4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4e0  0800b4e0  0001b4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b4e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001e4  0800b6c8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800b6c8  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014583  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd1  00000000  00000000  00034797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00037368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00038388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c62  00000000  00000000  00039280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156da  00000000  00000000  00061ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8a91  00000000  00000000  000775bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017004d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005778  00000000  00000000  001700a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800afe8 	.word	0x0800afe8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800afe8 	.word	0x0800afe8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <Motor_INIT>:
 *  Created on: Feb 8, 2023
 *      Author: tomas
 */
#include "DC_Motor.h"

void Motor_INIT(struct Motor* motor, TIM_HandleTypeDef* TIMER, uint32_t PWM_CHANNEL, GPIO_TypeDef* DIR1_PORT, GPIO_TypeDef* DIR2_PORT, uint16_t DIR1_PIN, uint16_t DIR2_PIN){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	motor->DUTY = 0.0f;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
	motor->TIMER = TIMER;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	601a      	str	r2, [r3, #0]
	motor->PWM_CHANNEL = PWM_CHANNEL;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	605a      	str	r2, [r3, #4]
	motor->DIR1_PORT = DIR1_PORT;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	609a      	str	r2, [r3, #8]
	motor->DIR2_PORT = DIR2_PORT;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	60da      	str	r2, [r3, #12]
	motor->DIR1_PIN = DIR1_PIN;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	8bba      	ldrh	r2, [r7, #28]
 800106a:	821a      	strh	r2, [r3, #16]
	motor->DIR2_PIN = DIR2_PIN;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8c3a      	ldrh	r2, [r7, #32]
 8001070:	825a      	strh	r2, [r3, #18]

	Motor_STOP(motor);
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 f804 	bl	8001080 <Motor_STOP>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <Motor_STOP>:
		Motor_STOP(motor);
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
	}
}

void Motor_STOP(struct Motor* motor){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 0);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6898      	ldr	r0, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	8a1b      	ldrh	r3, [r3, #16]
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	f001 ff7c 	bl	8002f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 0);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68d8      	ldr	r0, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	8a5b      	ldrh	r3, [r3, #18]
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	f001 ff74 	bl	8002f90 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d105      	bne.n	80010bc <Motor_STOP+0x3c>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010ba:	e02c      	b.n	8001116 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d105      	bne.n	80010d0 <Motor_STOP+0x50>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010ce:	e022      	b.n	8001116 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d105      	bne.n	80010e4 <Motor_STOP+0x64>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80010e2:	e018      	b.n	8001116 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b0c      	cmp	r3, #12
 80010ea:	d105      	bne.n	80010f8 <Motor_STOP+0x78>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010f6:	e00e      	b.n	8001116 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b10      	cmp	r3, #16
 80010fe:	d105      	bne.n	800110c <Motor_STOP+0x8c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	6593      	str	r3, [r2, #88]	; 0x58
}
 800110a:	e004      	b.n	8001116 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2300      	movs	r3, #0
 8001114:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <MX_ADC1_Init+0x9c>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_ADC1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_ADC1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_ADC1_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <MX_ADC1_Init+0xa0>)
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_ADC1_Init+0x98>)
 800116c:	2201      	movs	r2, #1
 800116e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_ADC1_Init+0x98>)
 800117a:	2201      	movs	r2, #1
 800117c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <MX_ADC1_Init+0x98>)
 8001180:	f001 f90a 	bl	8002398 <HAL_ADC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800118a:	f000 fb45 	bl	8001818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800118e:	2301      	movs	r3, #1
 8001190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001192:	2301      	movs	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_ADC1_Init+0x98>)
 80011a0:	f001 f93e 	bl	8002420 <HAL_ADC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011aa:	f000 fb35 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000200 	.word	0x20000200
 80011bc:	40012000 	.word	0x40012000
 80011c0:	0f000001 	.word	0x0f000001

080011c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a15      	ldr	r2, [pc, #84]	; (8001238 <HAL_ADC_MspInit+0x74>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d123      	bne.n	800122e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_ADC_MspInit+0x78>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <HAL_ADC_MspInit+0x78>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_ADC_MspInit+0x78>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_ADC_MspInit+0x78>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_ADC_MspInit+0x78>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_ADC_MspInit+0x78>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001216:	2302      	movs	r3, #2
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121a:	2303      	movs	r3, #3
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_ADC_MspInit+0x7c>)
 800122a:	f001 fced 	bl	8002c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40012000 	.word	0x40012000
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <control_INIT>:
 *      Author: tomas
 */

#include "control.h"

void control_INIT(struct Controller* controller, float MAX_SIGNAL, float MIN_SIGNAL, float MAX_ERROR, float MIN_ERROR){
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6178      	str	r0, [r7, #20]
 800124c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001250:	edc7 0a03 	vstr	s1, [r7, #12]
 8001254:	ed87 1a02 	vstr	s2, [r7, #8]
 8001258:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->MAX_SIGNAL = MAX_SIGNAL;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	601a      	str	r2, [r3, #0]
	controller->MIN_SIGNAL = MIN_SIGNAL;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	605a      	str	r2, [r3, #4]
	controller->MAX_ERROR = MAX_ERROR;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	609a      	str	r2, [r3, #8]
	controller->MIN_ERROR = MIN_ERROR;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	60da      	str	r2, [r3, #12]
	controller->prev_error = 0;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
	controller->prev_distance = 0;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
	controller->current_velocity = 0;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
	controller->start = 0;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2200      	movs	r2, #0
 8001290:	771a      	strb	r2, [r3, #28]


}
 8001292:	bf00      	nop
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <control_GET_SIGNAL>:

float control_GET_SIGNAL(struct Controller* controller, float y, float y_ref){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012ac:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = y_ref - y;
 80012b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012bc:	edc7 7a05 	vstr	s15, [r7, #20]
	float duty = error/5.0 * 100;
 80012c0:	6978      	ldr	r0, [r7, #20]
 80012c2:	f7ff f961 	bl	8000588 <__aeabi_f2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4b61      	ldr	r3, [pc, #388]	; (8001450 <control_GET_SIGNAL+0x1b0>)
 80012cc:	f7ff fade 	bl	800088c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b5d      	ldr	r3, [pc, #372]	; (8001454 <control_GET_SIGNAL+0x1b4>)
 80012de:	f7ff f9ab 	bl	8000638 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc9d 	bl	8000c28 <__aeabi_d2f>
 80012ee:	4603      	mov	r3, r0
 80012f0:	613b      	str	r3, [r7, #16]
	if(abs(error) <= controller->MIN_ERROR){
 80012f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fa:	ee17 3a90 	vmov	r3, s15
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bfb8      	it	lt
 8001302:	425b      	neglt	r3, r3
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d805      	bhi.n	8001328 <control_GET_SIGNAL+0x88>
		controller->start = 0;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	771a      	strb	r2, [r3, #28]
		return 0;
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	e08b      	b.n	8001440 <control_GET_SIGNAL+0x1a0>
	}
	else if(abs(error) > controller->MAX_ERROR && error>0) {
 8001328:	edd7 7a05 	vldr	s15, [r7, #20]
 800132c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001330:	ee17 3a90 	vmov	r3, s15
 8001334:	2b00      	cmp	r3, #0
 8001336:	bfb8      	it	lt
 8001338:	425b      	neglt	r3, r3
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	edd3 7a02 	vldr	s15, [r3, #8]
 8001348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	dd0b      	ble.n	800136a <control_GET_SIGNAL+0xca>
 8001352:	edd7 7a05 	vldr	s15, [r7, #20]
 8001356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	dd04      	ble.n	800136a <control_GET_SIGNAL+0xca>
		controller->start = 1;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	771a      	strb	r2, [r3, #28]
		return -100.0f;
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <control_GET_SIGNAL+0x1b8>)
 8001368:	e06a      	b.n	8001440 <control_GET_SIGNAL+0x1a0>
	}
	else if(abs(error) > controller->MAX_ERROR && error<0){
 800136a:	edd7 7a05 	vldr	s15, [r7, #20]
 800136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	2b00      	cmp	r3, #0
 8001378:	bfb8      	it	lt
 800137a:	425b      	neglt	r3, r3
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	edd3 7a02 	vldr	s15, [r3, #8]
 800138a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	dd0b      	ble.n	80013ac <control_GET_SIGNAL+0x10c>
 8001394:	edd7 7a05 	vldr	s15, [r7, #20]
 8001398:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d504      	bpl.n	80013ac <control_GET_SIGNAL+0x10c>
		controller->start = 1;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2201      	movs	r2, #1
 80013a6:	771a      	strb	r2, [r3, #28]
		return 100.0f;
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <control_GET_SIGNAL+0x1bc>)
 80013aa:	e049      	b.n	8001440 <control_GET_SIGNAL+0x1a0>
	}

	else if(controller->start == 1){
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	7f1b      	ldrb	r3, [r3, #28]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d033      	beq.n	800141c <control_GET_SIGNAL+0x17c>
		if(abs(duty) <= 86 && error<0) return 86.0f;
 80013b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013bc:	ee17 3a90 	vmov	r3, s15
 80013c0:	f113 0f56 	cmn.w	r3, #86	; 0x56
 80013c4:	db10      	blt.n	80013e8 <control_GET_SIGNAL+0x148>
 80013c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	2b56      	cmp	r3, #86	; 0x56
 80013d4:	dc08      	bgt.n	80013e8 <control_GET_SIGNAL+0x148>
 80013d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	d501      	bpl.n	80013e8 <control_GET_SIGNAL+0x148>
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <control_GET_SIGNAL+0x1c0>)
 80013e6:	e02b      	b.n	8001440 <control_GET_SIGNAL+0x1a0>
		else if(abs(duty) <= 86 && error>0) return -86.0f;
 80013e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f0:	ee17 3a90 	vmov	r3, s15
 80013f4:	f113 0f56 	cmn.w	r3, #86	; 0x56
 80013f8:	db21      	blt.n	800143e <control_GET_SIGNAL+0x19e>
 80013fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80013fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001402:	ee17 3a90 	vmov	r3, s15
 8001406:	2b56      	cmp	r3, #86	; 0x56
 8001408:	dc19      	bgt.n	800143e <control_GET_SIGNAL+0x19e>
 800140a:	edd7 7a05 	vldr	s15, [r7, #20]
 800140e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001416:	dd12      	ble.n	800143e <control_GET_SIGNAL+0x19e>
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <control_GET_SIGNAL+0x1c4>)
 800141a:	e011      	b.n	8001440 <control_GET_SIGNAL+0x1a0>
	}
	else{
		if(error>0){
 800141c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd04      	ble.n	8001434 <control_GET_SIGNAL+0x194>
			controller->start = 1;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2201      	movs	r2, #1
 800142e:	771a      	strb	r2, [r3, #28]
			return	 -100.0f;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <control_GET_SIGNAL+0x1b8>)
 8001432:	e005      	b.n	8001440 <control_GET_SIGNAL+0x1a0>
		}
		else{
			controller->start = 1;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2201      	movs	r2, #1
 8001438:	771a      	strb	r2, [r3, #28]
			return 100.0f;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <control_GET_SIGNAL+0x1bc>)
 800143c:	e000      	b.n	8001440 <control_GET_SIGNAL+0x1a0>
		}
	}
	return duty;
 800143e:	693b      	ldr	r3, [r7, #16]
}
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40140000 	.word	0x40140000
 8001454:	40590000 	.word	0x40590000
 8001458:	c2c80000 	.word	0xc2c80000
 800145c:	42c80000 	.word	0x42c80000
 8001460:	42ac0000 	.word	0x42ac0000
 8001464:	c2ac0000 	.word	0xc2ac0000

08001468 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	4b4e      	ldr	r3, [pc, #312]	; (80015b8 <MX_GPIO_Init+0x150>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a4d      	ldr	r2, [pc, #308]	; (80015b8 <MX_GPIO_Init+0x150>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <MX_GPIO_Init+0x150>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001496:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <MX_GPIO_Init+0x150>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a47      	ldr	r2, [pc, #284]	; (80015b8 <MX_GPIO_Init+0x150>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a41      	ldr	r2, [pc, #260]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a3b      	ldr	r2, [pc, #236]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014de:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a35      	ldr	r2, [pc, #212]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014e4:	f043 0310 	orr.w	r3, r3, #16
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f6:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <MX_GPIO_Init+0x150>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <MX_GPIO_Init+0x150>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3_Pin|GPIO_PIN_4_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	21c0      	movs	r1, #192	; 0xc0
 8001512:	482a      	ldr	r0, [pc, #168]	; (80015bc <MX_GPIO_Init+0x154>)
 8001514:	f001 fd3c 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2106      	movs	r1, #6
 800151c:	4828      	ldr	r0, [pc, #160]	; (80015c0 <MX_GPIO_Init+0x158>)
 800151e:	f001 fd37 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1_Pin|GPIO_PIN_2_Pin, GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001528:	4826      	ldr	r0, [pc, #152]	; (80015c4 <MX_GPIO_Init+0x15c>)
 800152a:	f001 fd31 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 800152e:	2310      	movs	r3, #16
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001532:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	481e      	ldr	r0, [pc, #120]	; (80015bc <MX_GPIO_Init+0x154>)
 8001544:	f001 fb60 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3_Pin|GPIO_PIN_4_Pin;
 8001548:	23c0      	movs	r3, #192	; 0xc0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4817      	ldr	r0, [pc, #92]	; (80015bc <MX_GPIO_Init+0x154>)
 8001560:	f001 fb52 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin;
 8001564:	2306      	movs	r3, #6
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4811      	ldr	r0, [pc, #68]	; (80015c0 <MX_GPIO_Init+0x158>)
 800157c:	f001 fb44 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1_Pin|GPIO_PIN_2_Pin;
 8001580:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	480a      	ldr	r0, [pc, #40]	; (80015c4 <MX_GPIO_Init+0x15c>)
 800159a:	f001 fb35 	bl	8002c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	200a      	movs	r0, #10
 80015a4:	f001 fa67 	bl	8002a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015a8:	200a      	movs	r0, #10
 80015aa:	f001 fa80 	bl	8002aae <HAL_NVIC_EnableIRQ>

}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	; 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == ECHO_Pin){
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d13b      	bne.n	8001650 <HAL_GPIO_EXTI_Callback+0x88>
		_Bool state = HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin);
 80015d8:	2110      	movs	r1, #16
 80015da:	481f      	ldr	r0, [pc, #124]	; (8001658 <HAL_GPIO_EXTI_Callback+0x90>)
 80015dc:	f001 fcc0 	bl	8002f60 <HAL_GPIO_ReadPin>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf14      	ite	ne
 80015e6:	2301      	movne	r3, #1
 80015e8:	2300      	moveq	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
		if(state == 1){
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_EXTI_Callback+0x3a>
			__HAL_TIM_SET_COUNTER(&htim5, 0);
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_GPIO_EXTI_Callback+0x94>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim5);
 80015fa:	4818      	ldr	r0, [pc, #96]	; (800165c <HAL_GPIO_EXTI_Callback+0x94>)
 80015fc:	f002 fddc 	bl	80041b8 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Stop(&htim5);
			x = __HAL_TIM_GET_COUNTER(&htim5);
			if(x/58.0f < 1000) value = x/58.0f;
		}
	}
}
 8001600:	e026      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_TIM_Base_Stop(&htim5);
 8001602:	4816      	ldr	r0, [pc, #88]	; (800165c <HAL_GPIO_EXTI_Callback+0x94>)
 8001604:	f002 fe48 	bl	8004298 <HAL_TIM_Base_Stop>
			x = __HAL_TIM_GET_COUNTER(&htim5);
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_GPIO_EXTI_Callback+0x94>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_GPIO_EXTI_Callback+0x98>)
 8001610:	6013      	str	r3, [r2, #0]
			if(x/58.0f < 1000) value = x/58.0f;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_GPIO_EXTI_Callback+0x98>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800161e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001664 <HAL_GPIO_EXTI_Callback+0x9c>
 8001622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001626:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001668 <HAL_GPIO_EXTI_Callback+0xa0>
 800162a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d400      	bmi.n	8001636 <HAL_GPIO_EXTI_Callback+0x6e>
}
 8001634:	e00c      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x88>
			if(x/58.0f < 1000) value = x/58.0f;
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_GPIO_EXTI_Callback+0x98>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001642:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001664 <HAL_GPIO_EXTI_Callback+0x9c>
 8001646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_GPIO_EXTI_Callback+0xa4>)
 800164c:	edc3 7a00 	vstr	s15, [r3]
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40020000 	.word	0x40020000
 800165c:	200003c0 	.word	0x200003c0
 8001660:	20000284 	.word	0x20000284
 8001664:	42680000 	.word	0x42680000
 8001668:	447a0000 	.word	0x447a0000
 800166c:	20000248 	.word	0x20000248

08001670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001676:	f000 fe0e 	bl	8002296 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167a:	f000 f865 	bl	8001748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167e:	f7ff fef3 	bl	8001468 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001682:	f000 fadb 	bl	8001c3c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001686:	f000 fd47 	bl	8002118 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800168a:	f000 fa2b 	bl	8001ae4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800168e:	f000 fb4b 	bl	8001d28 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001692:	f000 fbe5 	bl	8001e60 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001696:	f7ff fd43 	bl	8001120 <MX_ADC1_Init>
  MX_TIM4_Init();
 800169a:	f000 fb93 	bl	8001dc4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800169e:	2100      	movs	r1, #0
 80016a0:	481d      	ldr	r0, [pc, #116]	; (8001718 <main+0xa8>)
 80016a2:	f002 fe81 	bl	80043a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016a6:	2100      	movs	r1, #0
 80016a8:	481c      	ldr	r0, [pc, #112]	; (800171c <main+0xac>)
 80016aa:	f002 fe7d 	bl	80043a8 <HAL_TIM_PWM_Start>

 // HAL_UART_Receive_IT(&huart2, (uint8_t*)buffer, strlen(buffer));

  Motor_INIT(&motor, &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR2_GPIO_Port, DIR1_Pin, DIR2_Pin);
 80016ae:	2304      	movs	r3, #4
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	2302      	movs	r3, #2
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <main+0xb0>)
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <main+0xb0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	4917      	ldr	r1, [pc, #92]	; (800171c <main+0xac>)
 80016c0:	4818      	ldr	r0, [pc, #96]	; (8001724 <main+0xb4>)
 80016c2:	f7ff fcb9 	bl	8001038 <Motor_INIT>
  control_INIT(&controller, 100.0f, 60.0f, 5.0f, 0.5f);
 80016c6:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80016ca:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80016ce:	eddf 0a16 	vldr	s1, [pc, #88]	; 8001728 <main+0xb8>
 80016d2:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800172c <main+0xbc>
 80016d6:	4816      	ldr	r0, [pc, #88]	; (8001730 <main+0xc0>)
 80016d8:	f7ff fdb4 	bl	8001244 <control_INIT>
  const unsigned char* msg = U"21.37";
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <main+0xc4>)
 80016de:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lmao = control_GET_SIGNAL(&controller, value, y_ref);
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <main+0xc8>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <main+0xcc>)
 80016e8:	ed93 7a00 	vldr	s14, [r3]
 80016ec:	eef0 0a47 	vmov.f32	s1, s14
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	480e      	ldr	r0, [pc, #56]	; (8001730 <main+0xc0>)
 80016f6:	f7ff fdd3 	bl	80012a0 <control_GET_SIGNAL>
 80016fa:	eef0 7a40 	vmov.f32	s15, s0
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <main+0xd0>)
 8001700:	edc3 7a00 	vstr	s15, [r3]

	  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 10);
 8001704:	230a      	movs	r3, #10
 8001706:	2204      	movs	r2, #4
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <main+0xd4>)
 800170c:	f003 ffac 	bl	8005668 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001710:	2064      	movs	r0, #100	; 0x64
 8001712:	f000 fe1d 	bl	8002350 <HAL_Delay>
	  lmao = control_GET_SIGNAL(&controller, value, y_ref);
 8001716:	e7e3      	b.n	80016e0 <main+0x70>
 8001718:	200002dc 	.word	0x200002dc
 800171c:	20000290 	.word	0x20000290
 8001720:	40020400 	.word	0x40020400
 8001724:	2000024c 	.word	0x2000024c
 8001728:	42700000 	.word	0x42700000
 800172c:	42c80000 	.word	0x42c80000
 8001730:	20000264 	.word	0x20000264
 8001734:	0800b000 	.word	0x0800b000
 8001738:	20000248 	.word	0x20000248
 800173c:	20000000 	.word	0x20000000
 8001740:	20000288 	.word	0x20000288
 8001744:	2000040c 	.word	0x2000040c

08001748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	; 0x50
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	2230      	movs	r2, #48	; 0x30
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f004 ffce 	bl	80066f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800176c:	f001 fc42 	bl	8002ff4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <SystemClock_Config+0xc8>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	4a26      	ldr	r2, [pc, #152]	; (8001810 <SystemClock_Config+0xc8>)
 8001776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177a:	6413      	str	r3, [r2, #64]	; 0x40
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <SystemClock_Config+0xc8>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <SystemClock_Config+0xcc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <SystemClock_Config+0xcc>)
 8001792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <SystemClock_Config+0xcc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a4:	2302      	movs	r3, #2
 80017a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a8:	2301      	movs	r3, #1
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ac:	2310      	movs	r3, #16
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b0:	2302      	movs	r3, #2
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b4:	2300      	movs	r3, #0
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017b8:	2308      	movs	r3, #8
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017bc:	2348      	movs	r3, #72	; 0x48
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017c4:	2302      	movs	r3, #2
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c8:	f107 0320 	add.w	r3, r7, #32
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 fc21 	bl	8003014 <HAL_RCC_OscConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017d8:	f000 f81e 	bl	8001818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	230f      	movs	r3, #15
 80017de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e0:	2302      	movs	r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	2102      	movs	r1, #2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 feaf 	bl	800355c <HAL_RCC_ClockConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001804:	f000 f808 	bl	8001818 <Error_Handler>
  }
}
 8001808:	bf00      	nop
 800180a:	3750      	adds	r7, #80	; 0x50
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	40007000 	.word	0x40007000

08001818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001820:	e7fe      	b.n	8001820 <Error_Handler+0x8>
	...

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_MspInit+0x44>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_MspInit+0x44>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_MspInit+0x44>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_MspInit+0x44>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_MspInit+0x44>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_MspInit+0x44>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 fd2a 	bl	8002310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 80018c4:	2010      	movs	r0, #16
 80018c6:	f001 fb7d 	bl	8002fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <TIM1_CC_IRQHandler+0x10>)
 80018d6:	f002 fe61 	bl	800459c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000290 	.word	0x20000290

080018e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <TIM2_IRQHandler+0x10>)
 80018ea:	f002 fe57 	bl	800459c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002dc 	.word	0x200002dc

080018f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <TIM3_IRQHandler+0x10>)
 80018fe:	f002 fe4d 	bl	800459c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000328 	.word	0x20000328

0800190c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <TIM4_IRQHandler+0x10>)
 8001912:	f002 fe43 	bl	800459c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000374 	.word	0x20000374

08001920 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <USART2_IRQHandler+0x10>)
 8001926:	f003 ff23 	bl	8005770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000040c 	.word	0x2000040c

08001934 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
	return 1;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_kill>:

int _kill(int pid, int sig)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800194e:	f004 fea9 	bl	80066a4 <__errno>
 8001952:	4603      	mov	r3, r0
 8001954:	2216      	movs	r2, #22
 8001956:	601a      	str	r2, [r3, #0]
	return -1;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_exit>:

void _exit (int status)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ffe7 	bl	8001944 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001976:	e7fe      	b.n	8001976 <_exit+0x12>

08001978 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e00a      	b.n	80019a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800198a:	f3af 8000 	nop.w
 800198e:	4601      	mov	r1, r0
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	b2ca      	uxtb	r2, r1
 8001998:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf0      	blt.n	800198a <_read+0x12>
	}

return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e009      	b.n	80019d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	60ba      	str	r2, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf1      	blt.n	80019c4 <_write+0x12>
	}
	return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_close>:

int _close(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
	return -1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a12:	605a      	str	r2, [r3, #4]
	return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_isatty>:

int _isatty(int file)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
	return 1;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
	return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <_sbrk+0x5c>)
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <_sbrk+0x60>)
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <_sbrk+0x64>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <_sbrk+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d207      	bcs.n	8001a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a84:	f004 fe0e 	bl	80066a4 <__errno>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	e009      	b.n	8001aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <_sbrk+0x64>)
 8001aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20050000 	.word	0x20050000
 8001ab4:	00000400 	.word	0x00000400
 8001ab8:	2000028c 	.word	0x2000028c
 8001abc:	200004a8 	.word	0x200004a8

08001ac0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <SystemInit+0x20>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aca:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <SystemInit+0x20>)
 8001acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09a      	sub	sp, #104	; 0x68
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	222c      	movs	r2, #44	; 0x2c
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fdea 	bl	80066f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b24:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b26:	4a44      	ldr	r2, [pc, #272]	; (8001c38 <MX_TIM1_Init+0x154>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b2c:	2247      	movs	r2, #71	; 0x47
 8001b2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001b36:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b38:	2263      	movs	r2, #99	; 0x63
 8001b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3c:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b42:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b4e:	4839      	ldr	r0, [pc, #228]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b50:	f002 fada 	bl	8004108 <HAL_TIM_Base_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b5a:	f7ff fe5d 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b62:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4832      	ldr	r0, [pc, #200]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b6c:	f002 ff4a 	bl	8004a04 <HAL_TIM_ConfigClockSource>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b76:	f7ff fe4f 	bl	8001818 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b7a:	482e      	ldr	r0, [pc, #184]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b7c:	f002 fbb3 	bl	80042e6 <HAL_TIM_PWM_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b86:	f7ff fe47 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4825      	ldr	r0, [pc, #148]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001b9e:	f003 fbeb 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001ba8:	f7ff fe36 	bl	8001818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bac:	2360      	movs	r3, #96	; 0x60
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8001bb0:	2364      	movs	r3, #100	; 0x64
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4818      	ldr	r0, [pc, #96]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001bd2:	f002 fe03 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001bdc:	f7ff fe1c 	bl	8001818 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001c16:	f003 fc3d 	bl	8005494 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001c20:	f7ff fdfa 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c24:	4803      	ldr	r0, [pc, #12]	; (8001c34 <MX_TIM1_Init+0x150>)
 8001c26:	f000 fa1b 	bl	8002060 <HAL_TIM_MspPostInit>

}
 8001c2a:	bf00      	nop
 8001c2c:	3768      	adds	r7, #104	; 0x68
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000290 	.word	0x20000290
 8001c38:	40010000 	.word	0x40010000

08001c3c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08e      	sub	sp, #56	; 0x38
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c78:	2247      	movs	r2, #71	; 0x47
 8001c7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c84:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c96:	4823      	ldr	r0, [pc, #140]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001c98:	f002 fa36 	bl	8004108 <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ca2:	f7ff fdb9 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	481c      	ldr	r0, [pc, #112]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001cb4:	f002 fea6 	bl	8004a04 <HAL_TIM_ConfigClockSource>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001cbe:	f7ff fdab 	bl	8001818 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cc2:	4818      	ldr	r0, [pc, #96]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001cc4:	f002 fb0f 	bl	80042e6 <HAL_TIM_PWM_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001cce:	f7ff fda3 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4810      	ldr	r0, [pc, #64]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001ce2:	f003 fb49 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cec:	f7ff fd94 	bl	8001818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf0:	2360      	movs	r3, #96	; 0x60
 8001cf2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 8001cf4:	2314      	movs	r3, #20
 8001cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d00:	463b      	mov	r3, r7
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001d08:	f002 fd68 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d12:	f7ff fd81 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d16:	4803      	ldr	r0, [pc, #12]	; (8001d24 <MX_TIM2_Init+0xe8>)
 8001d18:	f000 f9a2 	bl	8002060 <HAL_TIM_MspPostInit>

}
 8001d1c:	bf00      	nop
 8001d1e:	3738      	adds	r7, #56	; 0x38
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200002dc 	.word	0x200002dc

08001d28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <MX_TIM3_Init+0x94>)
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <MX_TIM3_Init+0x98>)
 8001d4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <MX_TIM3_Init+0x94>)
 8001d4e:	2247      	movs	r2, #71	; 0x47
 8001d50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <MX_TIM3_Init+0x94>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_TIM3_Init+0x94>)
 8001d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <MX_TIM3_Init+0x94>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <MX_TIM3_Init+0x94>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d6c:	4813      	ldr	r0, [pc, #76]	; (8001dbc <MX_TIM3_Init+0x94>)
 8001d6e:	f002 f9cb 	bl	8004108 <HAL_TIM_Base_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d78:	f7ff fd4e 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d82:	f107 0310 	add.w	r3, r7, #16
 8001d86:	4619      	mov	r1, r3
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <MX_TIM3_Init+0x94>)
 8001d8a:	f002 fe3b 	bl	8004a04 <HAL_TIM_ConfigClockSource>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001d94:	f7ff fd40 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_TIM3_Init+0x94>)
 8001da6:	f003 fae7 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001db0:	f7ff fd32 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000328 	.word	0x20000328
 8001dc0:	40000400 	.word	0x40000400

08001dc4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <MX_TIM4_Init+0x94>)
 8001de4:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <MX_TIM4_Init+0x98>)
 8001de6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <MX_TIM4_Init+0x94>)
 8001dea:	2247      	movs	r2, #71	; 0x47
 8001dec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <MX_TIM4_Init+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <MX_TIM4_Init+0x94>)
 8001df6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <MX_TIM4_Init+0x94>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <MX_TIM4_Init+0x94>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e08:	4813      	ldr	r0, [pc, #76]	; (8001e58 <MX_TIM4_Init+0x94>)
 8001e0a:	f002 f97d 	bl	8004108 <HAL_TIM_Base_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001e14:	f7ff fd00 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	4619      	mov	r1, r3
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <MX_TIM4_Init+0x94>)
 8001e26:	f002 fded 	bl	8004a04 <HAL_TIM_ConfigClockSource>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001e30:	f7ff fcf2 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_TIM4_Init+0x94>)
 8001e42:	f003 fa99 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e4c:	f7ff fce4 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000374 	.word	0x20000374
 8001e5c:	40000800 	.word	0x40000800

08001e60 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <MX_TIM5_Init+0x94>)
 8001e80:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <MX_TIM5_Init+0x98>)
 8001e82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <MX_TIM5_Init+0x94>)
 8001e86:	2247      	movs	r2, #71	; 0x47
 8001e88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <MX_TIM5_Init+0x94>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <MX_TIM5_Init+0x94>)
 8001e92:	f04f 32ff 	mov.w	r2, #4294967295
 8001e96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <MX_TIM5_Init+0x94>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <MX_TIM5_Init+0x94>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ea4:	4813      	ldr	r0, [pc, #76]	; (8001ef4 <MX_TIM5_Init+0x94>)
 8001ea6:	f002 f92f 	bl	8004108 <HAL_TIM_Base_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001eb0:	f7ff fcb2 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <MX_TIM5_Init+0x94>)
 8001ec2:	f002 fd9f 	bl	8004a04 <HAL_TIM_ConfigClockSource>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ecc:	f7ff fca4 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	4619      	mov	r1, r3
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MX_TIM5_Init+0x94>)
 8001ede:	f003 fa4b 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001ee8:	f7ff fc96 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200003c0 	.word	0x200003c0
 8001ef8:	40000c00 	.word	0x40000c00

08001efc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08e      	sub	sp, #56	; 0x38
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_TIM_Base_MspInit+0x14c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d114      	bne.n	8001f48 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f1e:	4b4b      	ldr	r3, [pc, #300]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b48      	ldr	r3, [pc, #288]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	623b      	str	r3, [r7, #32]
 8001f34:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	201b      	movs	r0, #27
 8001f3c:	f000 fd9b 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f40:	201b      	movs	r0, #27
 8001f42:	f000 fdb4 	bl	8002aae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001f46:	e07b      	b.n	8002040 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f50:	d131      	bne.n	8001fb6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a3d      	ldr	r2, [pc, #244]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a37      	ldr	r2, [pc, #220]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ECHOB10_Pin;
 8001f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f94:	2301      	movs	r3, #1
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHOB10_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	482c      	ldr	r0, [pc, #176]	; (8002050 <HAL_TIM_Base_MspInit+0x154>)
 8001fa0:	f000 fe32 	bl	8002c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	201c      	movs	r0, #28
 8001faa:	f000 fd64 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fae:	201c      	movs	r0, #28
 8001fb0:	f000 fd7d 	bl	8002aae <HAL_NVIC_EnableIRQ>
}
 8001fb4:	e044      	b.n	8002040 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM3)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a26      	ldr	r2, [pc, #152]	; (8002054 <HAL_TIM_Base_MspInit+0x158>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d114      	bne.n	8001fea <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001fc6:	f043 0302 	orr.w	r3, r3, #2
 8001fca:	6413      	str	r3, [r2, #64]	; 0x40
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	201d      	movs	r0, #29
 8001fde:	f000 fd4a 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fe2:	201d      	movs	r0, #29
 8001fe4:	f000 fd63 	bl	8002aae <HAL_NVIC_EnableIRQ>
}
 8001fe8:	e02a      	b.n	8002040 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM4)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_TIM_Base_MspInit+0x15c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d114      	bne.n	800201e <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	201e      	movs	r0, #30
 8002012:	f000 fd30 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002016:	201e      	movs	r0, #30
 8002018:	f000 fd49 	bl	8002aae <HAL_NVIC_EnableIRQ>
}
 800201c:	e010      	b.n	8002040 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM5)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a0e      	ldr	r2, [pc, #56]	; (800205c <HAL_TIM_Base_MspInit+0x160>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d10b      	bne.n	8002040 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 800202e:	f043 0308 	orr.w	r3, r3, #8
 8002032:	6413      	str	r3, [r2, #64]	; 0x40
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_TIM_Base_MspInit+0x150>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	bf00      	nop
 8002042:	3738      	adds	r7, #56	; 0x38
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40010000 	.word	0x40010000
 800204c:	40023800 	.word	0x40023800
 8002050:	40020400 	.word	0x40020400
 8002054:	40000400 	.word	0x40000400
 8002058:	40000800 	.word	0x40000800
 800205c:	40000c00 	.word	0x40000c00

08002060 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a22      	ldr	r2, [pc, #136]	; (8002108 <HAL_TIM_MspPostInit+0xa8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d11d      	bne.n	80020be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <HAL_TIM_MspPostInit+0xac>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a21      	ldr	r2, [pc, #132]	; (800210c <HAL_TIM_MspPostInit+0xac>)
 8002088:	f043 0310 	orr.w	r3, r3, #16
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <HAL_TIM_MspPostInit+0xac>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800209a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4816      	ldr	r0, [pc, #88]	; (8002110 <HAL_TIM_MspPostInit+0xb0>)
 80020b8:	f000 fda6 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020bc:	e020      	b.n	8002100 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c6:	d11b      	bne.n	8002100 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_TIM_MspPostInit+0xac>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_TIM_MspPostInit+0xac>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6313      	str	r3, [r2, #48]	; 0x30
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_TIM_MspPostInit+0xac>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020e0:	2301      	movs	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020f0:	2301      	movs	r3, #1
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	4806      	ldr	r0, [pc, #24]	; (8002114 <HAL_TIM_MspPostInit+0xb4>)
 80020fc:	f000 fd84 	bl	8002c08 <HAL_GPIO_Init>
}
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40010000 	.word	0x40010000
 800210c:	40023800 	.word	0x40023800
 8002110:	40021000 	.word	0x40021000
 8002114:	40020000 	.word	0x40020000

08002118 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <MX_USART2_UART_Init+0x5c>)
 8002120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800215c:	f003 fa36 	bl	80055cc <HAL_UART_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002166:	f7ff fb57 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	2000040c 	.word	0x2000040c
 8002174:	40004400 	.word	0x40004400

08002178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0aa      	sub	sp, #168	; 0xa8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	2284      	movs	r2, #132	; 0x84
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f004 faad 	bl	80066f8 <memset>
  if(uartHandle->Instance==USART2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_UART_MspInit+0xc0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d142      	bne.n	800222e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 fbb7 	bl	8003928 <HAL_RCCEx_PeriphCLKConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021c0:	f7ff fb2a 	bl	8001818 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	4a1c      	ldr	r2, [pc, #112]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ce:	6413      	str	r3, [r2, #64]	; 0x40
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a16      	ldr	r2, [pc, #88]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_UART_MspInit+0xc4>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021f4:	230c      	movs	r3, #12
 80021f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800220c:	2307      	movs	r3, #7
 800220e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002216:	4619      	mov	r1, r3
 8002218:	4809      	ldr	r0, [pc, #36]	; (8002240 <HAL_UART_MspInit+0xc8>)
 800221a:	f000 fcf5 	bl	8002c08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2026      	movs	r0, #38	; 0x26
 8002224:	f000 fc27 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002228:	2026      	movs	r0, #38	; 0x26
 800222a:	f000 fc40 	bl	8002aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800222e:	bf00      	nop
 8002230:	37a8      	adds	r7, #168	; 0xa8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40004400 	.word	0x40004400
 800223c:	40023800 	.word	0x40023800
 8002240:	40020000 	.word	0x40020000

08002244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800227c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800224a:	490e      	ldr	r1, [pc, #56]	; (8002284 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002250:	e002      	b.n	8002258 <LoopCopyDataInit>

08002252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002256:	3304      	adds	r3, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800225c:	d3f9      	bcc.n	8002252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002260:	4c0b      	ldr	r4, [pc, #44]	; (8002290 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002264:	e001      	b.n	800226a <LoopFillZerobss>

08002266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002268:	3204      	adds	r2, #4

0800226a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800226c:	d3fb      	bcc.n	8002266 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800226e:	f7ff fc27 	bl	8001ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002272:	f004 fa1d 	bl	80066b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002276:	f7ff f9fb 	bl	8001670 <main>
  bx  lr    
 800227a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800227c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002284:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002288:	0800b4e4 	.word	0x0800b4e4
  ldr r2, =_sbss
 800228c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002290:	200004a8 	.word	0x200004a8

08002294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC_IRQHandler>

08002296 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229a:	2003      	movs	r0, #3
 800229c:	f000 fbe0 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a0:	200f      	movs	r0, #15
 80022a2:	f000 f805 	bl	80022b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a6:	f7ff fabd 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_InitTick+0x54>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_InitTick+0x58>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fbfb 	bl	8002aca <HAL_SYSTICK_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e00e      	b.n	80022fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d80a      	bhi.n	80022fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 fbc3 	bl	8002a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f0:	4a06      	ldr	r2, [pc, #24]	; (800230c <HAL_InitTick+0x5c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000004 	.word	0x20000004
 8002308:	2000000c 	.word	0x2000000c
 800230c:	20000008 	.word	0x20000008

08002310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000000c 	.word	0x2000000c
 8002334:	20000494 	.word	0x20000494

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000494 	.word	0x20000494

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff ffee 	bl	8002338 <HAL_GetTick>
 800235c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002376:	bf00      	nop
 8002378:	f7ff ffde 	bl	8002338 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000000c 	.word	0x2000000c

08002398 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e031      	b.n	8002412 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe ff04 	bl	80011c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_ADC_Init+0x84>)
 80023dc:	4013      	ands	r3, r2
 80023de:	f043 0202 	orr.w	r2, r3, #2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f970 	bl	80026cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f023 0303 	bic.w	r3, r3, #3
 80023fa:	f043 0201 	orr.w	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
 8002402:	e001      	b.n	8002408 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	ffffeefd 	.word	0xffffeefd

08002420 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1c>
 8002438:	2302      	movs	r3, #2
 800243a:	e136      	b.n	80026aa <HAL_ADC_ConfigChannel+0x28a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b09      	cmp	r3, #9
 800244a:	d93a      	bls.n	80024c2 <HAL_ADC_ConfigChannel+0xa2>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002454:	d035      	beq.n	80024c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68d9      	ldr	r1, [r3, #12]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	3b1e      	subs	r3, #30
 800246c:	2207      	movs	r2, #7
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	400a      	ands	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a8d      	ldr	r2, [pc, #564]	; (80026b8 <HAL_ADC_ConfigChannel+0x298>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10a      	bne.n	800249c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68d9      	ldr	r1, [r3, #12]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	061a      	lsls	r2, r3, #24
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800249a:	e035      	b.n	8002508 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68d9      	ldr	r1, [r3, #12]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4403      	add	r3, r0
 80024b4:	3b1e      	subs	r3, #30
 80024b6:	409a      	lsls	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c0:	e022      	b.n	8002508 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6919      	ldr	r1, [r3, #16]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	2207      	movs	r2, #7
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43da      	mvns	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	400a      	ands	r2, r1
 80024e4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6919      	ldr	r1, [r3, #16]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	4603      	mov	r3, r0
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4403      	add	r3, r0
 80024fe:	409a      	lsls	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d824      	bhi.n	800255a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b05      	subs	r3, #5
 8002522:	221f      	movs	r2, #31
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43da      	mvns	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	400a      	ands	r2, r1
 8002530:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	4618      	mov	r0, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	3b05      	subs	r3, #5
 800254c:	fa00 f203 	lsl.w	r2, r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	635a      	str	r2, [r3, #52]	; 0x34
 8002558:	e04c      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d824      	bhi.n	80025ac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b23      	subs	r3, #35	; 0x23
 8002574:	221f      	movs	r2, #31
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	400a      	ands	r2, r1
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	4618      	mov	r0, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b23      	subs	r3, #35	; 0x23
 800259e:	fa00 f203 	lsl.w	r2, r0, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
 80025aa:	e023      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	3b41      	subs	r3, #65	; 0x41
 80025be:	221f      	movs	r2, #31
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43da      	mvns	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	400a      	ands	r2, r1
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	3b41      	subs	r3, #65	; 0x41
 80025e8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a30      	ldr	r2, [pc, #192]	; (80026bc <HAL_ADC_ConfigChannel+0x29c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d10a      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1f4>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002606:	d105      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a2c      	ldr	r2, [pc, #176]	; (80026c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800260e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002612:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_ADC_ConfigChannel+0x29c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10f      	bne.n	800263e <HAL_ADC_ConfigChannel+0x21e>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b12      	cmp	r3, #18
 8002624:	d10b      	bne.n	800263e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800262c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002630:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002632:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800263c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <HAL_ADC_ConfigChannel+0x29c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d12b      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x280>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1a      	ldr	r2, [pc, #104]	; (80026b8 <HAL_ADC_ConfigChannel+0x298>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d003      	beq.n	800265a <HAL_ADC_ConfigChannel+0x23a>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b11      	cmp	r3, #17
 8002658:	d122      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800265a:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002660:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002664:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800266c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002670:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a10      	ldr	r2, [pc, #64]	; (80026b8 <HAL_ADC_ConfigChannel+0x298>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d111      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_ADC_ConfigChannel+0x2a4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0c9a      	lsrs	r2, r3, #18
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002692:	e002      	b.n	800269a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3b01      	subs	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f9      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	10000012 	.word	0x10000012
 80026bc:	40012000 	.word	0x40012000
 80026c0:	40012300 	.word	0x40012300
 80026c4:	20000004 	.word	0x20000004
 80026c8:	431bde83 	.word	0x431bde83

080026cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80026d4:	4b78      	ldr	r3, [pc, #480]	; (80028b8 <ADC_Init+0x1ec>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a77      	ldr	r2, [pc, #476]	; (80028b8 <ADC_Init+0x1ec>)
 80026da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026de:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026e0:	4b75      	ldr	r3, [pc, #468]	; (80028b8 <ADC_Init+0x1ec>)
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4973      	ldr	r1, [pc, #460]	; (80028b8 <ADC_Init+0x1ec>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6899      	ldr	r1, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	4a58      	ldr	r2, [pc, #352]	; (80028bc <ADC_Init+0x1f0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d022      	beq.n	80027a6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800276e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6899      	ldr	r1, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e00f      	b.n	80027c6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0202 	bic.w	r2, r2, #2
 80027d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6899      	ldr	r1, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	005a      	lsls	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002802:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002812:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	3b01      	subs	r3, #1
 8002820:	035a      	lsls	r2, r3, #13
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	e007      	b.n	800283c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	3b01      	subs	r3, #1
 8002858:	051a      	lsls	r2, r3, #20
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800287e:	025a      	lsls	r2, r3, #9
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6899      	ldr	r1, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	029a      	lsls	r2, r3, #10
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40012300 	.word	0x40012300
 80028bc:	0f000001 	.word	0x0f000001

080028c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <__NVIC_SetPriorityGrouping+0x40>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028dc:	4013      	ands	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__NVIC_SetPriorityGrouping+0x40>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00
 8002904:	05fa0000 	.word	0x05fa0000

08002908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <__NVIC_GetPriorityGrouping+0x18>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	f003 0307 	and.w	r3, r3, #7
}
 8002916:	4618      	mov	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	2b00      	cmp	r3, #0
 8002934:	db0b      	blt.n	800294e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <__NVIC_EnableIRQ+0x38>)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	2001      	movs	r0, #1
 8002946:	fa00 f202 	lsl.w	r2, r0, r2
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000e100 	.word	0xe000e100

08002960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	6039      	str	r1, [r7, #0]
 800296a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	2b00      	cmp	r3, #0
 8002972:	db0a      	blt.n	800298a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	490c      	ldr	r1, [pc, #48]	; (80029ac <__NVIC_SetPriority+0x4c>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	440b      	add	r3, r1
 8002984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002988:	e00a      	b.n	80029a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <__NVIC_SetPriority+0x50>)
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3b04      	subs	r3, #4
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	440b      	add	r3, r1
 800299e:	761a      	strb	r2, [r3, #24]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000e100 	.word	0xe000e100
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f1c3 0307 	rsb	r3, r3, #7
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	bf28      	it	cs
 80029d2:	2304      	movcs	r3, #4
 80029d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3304      	adds	r3, #4
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d902      	bls.n	80029e4 <NVIC_EncodePriority+0x30>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3b03      	subs	r3, #3
 80029e2:	e000      	b.n	80029e6 <NVIC_EncodePriority+0x32>
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	401a      	ands	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43d9      	mvns	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	4313      	orrs	r3, r2
         );
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f7ff ff8e 	bl	8002960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff29 	bl	80028c0 <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff3e 	bl	8002908 <__NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff8e 	bl	80029b4 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5d 	bl	8002960 <__NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff31 	bl	8002924 <__NVIC_EnableIRQ>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffa2 	bl	8002a1c <SysTick_Config>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff fc22 	bl	8002338 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d008      	beq.n	8002b14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e052      	b.n	8002bba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0216 	bic.w	r2, r2, #22
 8002b22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d103      	bne.n	8002b44 <HAL_DMA_Abort+0x62>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0208 	bic.w	r2, r2, #8
 8002b52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b64:	e013      	b.n	8002b8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b66:	f7ff fbe7 	bl	8002338 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d90c      	bls.n	8002b8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e015      	b.n	8002bba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e4      	bne.n	8002b66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	223f      	movs	r2, #63	; 0x3f
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d004      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e00c      	b.n	8002bfa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2205      	movs	r2, #5
 8002be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e175      	b.n	8002f14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	f040 8164 	bne.w	8002f0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d005      	beq.n	8002c5e <HAL_GPIO_Init+0x56>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d130      	bne.n	8002cc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c94:	2201      	movs	r2, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 0201 	and.w	r2, r3, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d017      	beq.n	8002cfc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d123      	bne.n	8002d50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	08da      	lsrs	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3208      	adds	r2, #8
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	08da      	lsrs	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3208      	adds	r2, #8
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0203 	and.w	r2, r3, #3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80be 	beq.w	8002f0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_GPIO_Init+0x324>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a65      	ldr	r2, [pc, #404]	; (8002f2c <HAL_GPIO_Init+0x324>)
 8002d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_GPIO_Init+0x324>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002daa:	4a61      	ldr	r2, [pc, #388]	; (8002f30 <HAL_GPIO_Init+0x328>)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3302      	adds	r3, #2
 8002db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a58      	ldr	r2, [pc, #352]	; (8002f34 <HAL_GPIO_Init+0x32c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d037      	beq.n	8002e46 <HAL_GPIO_Init+0x23e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a57      	ldr	r2, [pc, #348]	; (8002f38 <HAL_GPIO_Init+0x330>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_GPIO_Init+0x23a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a56      	ldr	r2, [pc, #344]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_GPIO_Init+0x236>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a55      	ldr	r2, [pc, #340]	; (8002f40 <HAL_GPIO_Init+0x338>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d025      	beq.n	8002e3a <HAL_GPIO_Init+0x232>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a54      	ldr	r2, [pc, #336]	; (8002f44 <HAL_GPIO_Init+0x33c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <HAL_GPIO_Init+0x22e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a53      	ldr	r2, [pc, #332]	; (8002f48 <HAL_GPIO_Init+0x340>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x22a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a52      	ldr	r2, [pc, #328]	; (8002f4c <HAL_GPIO_Init+0x344>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x226>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a51      	ldr	r2, [pc, #324]	; (8002f50 <HAL_GPIO_Init+0x348>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x222>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a50      	ldr	r2, [pc, #320]	; (8002f54 <HAL_GPIO_Init+0x34c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x21e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4f      	ldr	r2, [pc, #316]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x21a>
 8002e1e:	2309      	movs	r3, #9
 8002e20:	e012      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e22:	230a      	movs	r3, #10
 8002e24:	e010      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e26:	2308      	movs	r3, #8
 8002e28:	e00e      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	e00c      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e00a      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e32:	2305      	movs	r3, #5
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e58:	4935      	ldr	r1, [pc, #212]	; (8002f30 <HAL_GPIO_Init+0x328>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8a:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e90:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb4:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f ae86 	bls.w	8002c28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40021400 	.word	0x40021400
 8002f4c:	40021800 	.word	0x40021800
 8002f50:	40021c00 	.word	0x40021c00
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40022400 	.word	0x40022400
 8002f5c:	40013c00 	.word	0x40013c00

08002f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	e001      	b.n	8002f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa0:	787b      	ldrb	r3, [r7, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fac:	e003      	b.n	8002fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	041a      	lsls	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	619a      	str	r2, [r3, #24]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fda:	4a05      	ldr	r2, [pc, #20]	; (8002ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe faf0 	bl	80015c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40013c00 	.word	0x40013c00

08002ff4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40007000 	.word	0x40007000

08003014 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800301c:	2300      	movs	r3, #0
 800301e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e291      	b.n	800354e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8087 	beq.w	8003146 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003038:	4b96      	ldr	r3, [pc, #600]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b04      	cmp	r3, #4
 8003042:	d00c      	beq.n	800305e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003044:	4b93      	ldr	r3, [pc, #588]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b08      	cmp	r3, #8
 800304e:	d112      	bne.n	8003076 <HAL_RCC_OscConfig+0x62>
 8003050:	4b90      	ldr	r3, [pc, #576]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305c:	d10b      	bne.n	8003076 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305e:	4b8d      	ldr	r3, [pc, #564]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d06c      	beq.n	8003144 <HAL_RCC_OscConfig+0x130>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d168      	bne.n	8003144 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e26b      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x7a>
 8003080:	4b84      	ldr	r3, [pc, #528]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a83      	ldr	r2, [pc, #524]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	e02e      	b.n	80030ec <HAL_RCC_OscConfig+0xd8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x9c>
 8003096:	4b7f      	ldr	r3, [pc, #508]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a7e      	ldr	r2, [pc, #504]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 800309c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b7c      	ldr	r3, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a7b      	ldr	r2, [pc, #492]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80030a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e01d      	b.n	80030ec <HAL_RCC_OscConfig+0xd8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0xc0>
 80030ba:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a75      	ldr	r2, [pc, #468]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80030c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	4b73      	ldr	r3, [pc, #460]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a72      	ldr	r2, [pc, #456]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e00b      	b.n	80030ec <HAL_RCC_OscConfig+0xd8>
 80030d4:	4b6f      	ldr	r3, [pc, #444]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a6e      	ldr	r2, [pc, #440]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80030da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	4b6c      	ldr	r3, [pc, #432]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a6b      	ldr	r2, [pc, #428]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80030e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d013      	beq.n	800311c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7ff f920 	bl	8002338 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030fc:	f7ff f91c 	bl	8002338 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	; 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e21f      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	4b61      	ldr	r3, [pc, #388]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0xe8>
 800311a:	e014      	b.n	8003146 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7ff f90c 	bl	8002338 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003124:	f7ff f908 	bl	8002338 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	; 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e20b      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x110>
 8003142:	e000      	b.n	8003146 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d069      	beq.n	8003226 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003152:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315e:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b08      	cmp	r3, #8
 8003168:	d11c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x190>
 800316a:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d116      	bne.n	80031a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_RCC_OscConfig+0x17a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d001      	beq.n	800318e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e1df      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	493d      	ldr	r1, [pc, #244]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	e040      	b.n	8003226 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d023      	beq.n	80031f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ac:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a38      	ldr	r2, [pc, #224]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7ff f8be 	bl	8002338 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c0:	f7ff f8ba 	bl	8002338 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e1bd      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b30      	ldr	r3, [pc, #192]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031de:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4929      	ldr	r1, [pc, #164]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
 80031f2:	e018      	b.n	8003226 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7ff f89a 	bl	8002338 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003208:	f7ff f896 	bl	8002338 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e199      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d038      	beq.n	80032a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d019      	beq.n	800326e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 800323c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323e:	4a15      	ldr	r2, [pc, #84]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7ff f877 	bl	8002338 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324e:	f7ff f873 	bl	8002338 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e176      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x23a>
 800326c:	e01a      	b.n	80032a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003272:	4a08      	ldr	r2, [pc, #32]	; (8003294 <HAL_RCC_OscConfig+0x280>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7ff f85d 	bl	8002338 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003282:	f7ff f859 	bl	8002338 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d903      	bls.n	8003298 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e15c      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
 8003294:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	4b91      	ldr	r3, [pc, #580]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 800329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1ee      	bne.n	8003282 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80a4 	beq.w	80033fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b2:	4b8b      	ldr	r3, [pc, #556]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10d      	bne.n	80032da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a87      	ldr	r2, [pc, #540]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b85      	ldr	r3, [pc, #532]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032da:	4b82      	ldr	r3, [pc, #520]	; (80034e4 <HAL_RCC_OscConfig+0x4d0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d118      	bne.n	8003318 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032e6:	4b7f      	ldr	r3, [pc, #508]	; (80034e4 <HAL_RCC_OscConfig+0x4d0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7e      	ldr	r2, [pc, #504]	; (80034e4 <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f2:	f7ff f821 	bl	8002338 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fa:	f7ff f81d 	bl	8002338 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b64      	cmp	r3, #100	; 0x64
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e120      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330c:	4b75      	ldr	r3, [pc, #468]	; (80034e4 <HAL_RCC_OscConfig+0x4d0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d106      	bne.n	800332e <HAL_RCC_OscConfig+0x31a>
 8003320:	4b6f      	ldr	r3, [pc, #444]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a6e      	ldr	r2, [pc, #440]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
 800332c:	e02d      	b.n	800338a <HAL_RCC_OscConfig+0x376>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0x33c>
 8003336:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4a69      	ldr	r2, [pc, #420]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	6713      	str	r3, [r2, #112]	; 0x70
 8003342:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a66      	ldr	r2, [pc, #408]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
 800334e:	e01c      	b.n	800338a <HAL_RCC_OscConfig+0x376>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b05      	cmp	r3, #5
 8003356:	d10c      	bne.n	8003372 <HAL_RCC_OscConfig+0x35e>
 8003358:	4b61      	ldr	r3, [pc, #388]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a60      	ldr	r2, [pc, #384]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
 8003364:	4b5e      	ldr	r3, [pc, #376]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a5d      	ldr	r2, [pc, #372]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	e00b      	b.n	800338a <HAL_RCC_OscConfig+0x376>
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a5a      	ldr	r2, [pc, #360]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
 800337e:	4b58      	ldr	r3, [pc, #352]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a57      	ldr	r2, [pc, #348]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d015      	beq.n	80033be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe ffd1 	bl	8002338 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe ffcd 	bl	8002338 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0ce      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ee      	beq.n	800339a <HAL_RCC_OscConfig+0x386>
 80033bc:	e014      	b.n	80033e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033be:	f7fe ffbb 	bl	8002338 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe ffb7 	bl	8002338 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e0b8      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	4b40      	ldr	r3, [pc, #256]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ee      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4b3c      	ldr	r3, [pc, #240]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a3b      	ldr	r2, [pc, #236]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80a4 	beq.w	800354c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003404:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d06b      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d149      	bne.n	80034ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003418:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a30      	ldr	r2, [pc, #192]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 800341e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe ff88 	bl	8002338 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe ff84 	bl	8002338 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e087      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69da      	ldr	r2, [r3, #28]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	019b      	lsls	r3, r3, #6
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	3b01      	subs	r3, #1
 8003464:	041b      	lsls	r3, r3, #16
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	4313      	orrs	r3, r2
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003476:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fe ff58 	bl	8002338 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe ff54 	bl	8002338 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e057      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349e:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x478>
 80034aa:	e04f      	b.n	800354c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80034b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe ff3e 	bl	8002338 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fe ff3a 	bl	8002338 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e03d      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4ac>
 80034de:	e035      	b.n	800354c <HAL_RCC_OscConfig+0x538>
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x544>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d028      	beq.n	8003548 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d121      	bne.n	8003548 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d11a      	bne.n	8003548 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003518:	4013      	ands	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800351e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003520:	4293      	cmp	r3, r2
 8003522:	d111      	bne.n	8003548 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	3b01      	subs	r3, #1
 8003532:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d107      	bne.n	8003548 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800

0800355c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0d0      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003574:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d910      	bls.n	80035a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b67      	ldr	r3, [pc, #412]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 020f 	bic.w	r2, r3, #15
 800358a:	4965      	ldr	r1, [pc, #404]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b63      	ldr	r3, [pc, #396]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0b8      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d020      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035bc:	4b59      	ldr	r3, [pc, #356]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a58      	ldr	r2, [pc, #352]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d4:	4b53      	ldr	r3, [pc, #332]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a52      	ldr	r2, [pc, #328]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e0:	4b50      	ldr	r3, [pc, #320]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	494d      	ldr	r1, [pc, #308]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d040      	beq.n	8003680 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d115      	bne.n	800363e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e07f      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	4b41      	ldr	r3, [pc, #260]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e073      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362e:	4b3d      	ldr	r3, [pc, #244]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e06b      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4b39      	ldr	r3, [pc, #228]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 0203 	bic.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4936      	ldr	r1, [pc, #216]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003650:	f7fe fe72 	bl	8002338 <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	e00a      	b.n	800366e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fe fe6e 	bl	8002338 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e053      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 020c 	and.w	r2, r3, #12
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	429a      	cmp	r2, r3
 800367e:	d1eb      	bne.n	8003658 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003680:	4b27      	ldr	r3, [pc, #156]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d210      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 020f 	bic.w	r2, r3, #15
 8003696:	4922      	ldr	r1, [pc, #136]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e032      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4916      	ldr	r1, [pc, #88]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	490e      	ldr	r1, [pc, #56]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ee:	f000 f821 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	490a      	ldr	r1, [pc, #40]	; (8003728 <HAL_RCC_ClockConfig+0x1cc>)
 8003700:	5ccb      	ldrb	r3, [r1, r3]
 8003702:	fa22 f303 	lsr.w	r3, r2, r3
 8003706:	4a09      	ldr	r2, [pc, #36]	; (800372c <HAL_RCC_ClockConfig+0x1d0>)
 8003708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_RCC_ClockConfig+0x1d4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fdce 	bl	80022b0 <HAL_InitTick>

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023c00 	.word	0x40023c00
 8003724:	40023800 	.word	0x40023800
 8003728:	0800b018 	.word	0x0800b018
 800372c:	20000004 	.word	0x20000004
 8003730:	20000008 	.word	0x20000008

08003734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003738:	b090      	sub	sp, #64	; 0x40
 800373a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
 8003740:	2300      	movs	r3, #0
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003744:	2300      	movs	r3, #0
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800374c:	4b59      	ldr	r3, [pc, #356]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b08      	cmp	r3, #8
 8003756:	d00d      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x40>
 8003758:	2b08      	cmp	r3, #8
 800375a:	f200 80a1 	bhi.w	80038a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x34>
 8003762:	2b04      	cmp	r3, #4
 8003764:	d003      	beq.n	800376e <HAL_RCC_GetSysClockFreq+0x3a>
 8003766:	e09b      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003768:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800376c:	e09b      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800376e:	4b53      	ldr	r3, [pc, #332]	; (80038bc <HAL_RCC_GetSysClockFreq+0x188>)
 8003770:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003772:	e098      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003774:	4b4f      	ldr	r3, [pc, #316]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800377c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800377e:	4b4d      	ldr	r3, [pc, #308]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d028      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378a:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	099b      	lsrs	r3, r3, #6
 8003790:	2200      	movs	r2, #0
 8003792:	623b      	str	r3, [r7, #32]
 8003794:	627a      	str	r2, [r7, #36]	; 0x24
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800379c:	2100      	movs	r1, #0
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <HAL_RCC_GetSysClockFreq+0x188>)
 80037a0:	fb03 f201 	mul.w	r2, r3, r1
 80037a4:	2300      	movs	r3, #0
 80037a6:	fb00 f303 	mul.w	r3, r0, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	4a43      	ldr	r2, [pc, #268]	; (80038bc <HAL_RCC_GetSysClockFreq+0x188>)
 80037ae:	fba0 1202 	umull	r1, r2, r0, r2
 80037b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037b4:	460a      	mov	r2, r1
 80037b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80037b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ba:	4413      	add	r3, r2
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c0:	2200      	movs	r2, #0
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	61fa      	str	r2, [r7, #28]
 80037c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037ce:	f7fd fa7b 	bl	8000cc8 <__aeabi_uldivmod>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4613      	mov	r3, r2
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037da:	e053      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037dc:	4b35      	ldr	r3, [pc, #212]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	2200      	movs	r2, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	617a      	str	r2, [r7, #20]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037ee:	f04f 0b00 	mov.w	fp, #0
 80037f2:	4652      	mov	r2, sl
 80037f4:	465b      	mov	r3, fp
 80037f6:	f04f 0000 	mov.w	r0, #0
 80037fa:	f04f 0100 	mov.w	r1, #0
 80037fe:	0159      	lsls	r1, r3, #5
 8003800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003804:	0150      	lsls	r0, r2, #5
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	ebb2 080a 	subs.w	r8, r2, sl
 800380e:	eb63 090b 	sbc.w	r9, r3, fp
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800381e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003822:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003826:	ebb2 0408 	subs.w	r4, r2, r8
 800382a:	eb63 0509 	sbc.w	r5, r3, r9
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	00eb      	lsls	r3, r5, #3
 8003838:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383c:	00e2      	lsls	r2, r4, #3
 800383e:	4614      	mov	r4, r2
 8003840:	461d      	mov	r5, r3
 8003842:	eb14 030a 	adds.w	r3, r4, sl
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	eb45 030b 	adc.w	r3, r5, fp
 800384c:	607b      	str	r3, [r7, #4]
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800385a:	4629      	mov	r1, r5
 800385c:	028b      	lsls	r3, r1, #10
 800385e:	4621      	mov	r1, r4
 8003860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003864:	4621      	mov	r1, r4
 8003866:	028a      	lsls	r2, r1, #10
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386e:	2200      	movs	r2, #0
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	60fa      	str	r2, [r7, #12]
 8003874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003878:	f7fd fa26 	bl	8000cc8 <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4613      	mov	r3, r2
 8003882:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	3301      	adds	r3, #1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800389e:	e002      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80038a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3740      	adds	r7, #64	; 0x40
 80038ac:	46bd      	mov	sp, r7
 80038ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800
 80038b8:	00f42400 	.word	0x00f42400
 80038bc:	017d7840 	.word	0x017d7840

080038c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000004 	.word	0x20000004

080038d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038dc:	f7ff fff0 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0a9b      	lsrs	r3, r3, #10
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4903      	ldr	r1, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	0800b028 	.word	0x0800b028

08003900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003904:	f7ff ffdc 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0b5b      	lsrs	r3, r3, #13
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	0800b028 	.word	0x0800b028

08003928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003950:	4b69      	ldr	r3, [pc, #420]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a68      	ldr	r2, [pc, #416]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003956:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800395a:	6093      	str	r3, [r2, #8]
 800395c:	4b66      	ldr	r3, [pc, #408]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003964:	4964      	ldr	r1, [pc, #400]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003972:	2301      	movs	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d017      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003982:	4b5d      	ldr	r3, [pc, #372]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	4959      	ldr	r1, [pc, #356]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a0:	d101      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039ae:	2301      	movs	r3, #1
 80039b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d017      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039be:	4b4e      	ldr	r3, [pc, #312]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	494a      	ldr	r1, [pc, #296]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039dc:	d101      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039de:	2301      	movs	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039ea:	2301      	movs	r3, #1
 80039ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 808b 	beq.w	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	4a39      	ldr	r2, [pc, #228]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6413      	str	r3, [r2, #64]	; 0x40
 8003a18:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a24:	4b35      	ldr	r3, [pc, #212]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a34      	ldr	r2, [pc, #208]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fe fc82 	bl	8002338 <HAL_GetTick>
 8003a34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a38:	f7fe fc7e 	bl	8002338 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e357      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a4a:	4b2c      	ldr	r3, [pc, #176]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a56:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d035      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d02e      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a74:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a1a      	ldr	r2, [pc, #104]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a96:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a9c:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d114      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fc46 	bl	8002338 <HAL_GetTick>
 8003aac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fe fc42 	bl	8002338 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e319      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0ee      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ade:	d111      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aee:	400b      	ands	r3, r1
 8003af0:	4901      	ldr	r1, [pc, #4]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
 8003af6:	e00b      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40007000 	.word	0x40007000
 8003b00:	0ffffcff 	.word	0x0ffffcff
 8003b04:	4baa      	ldr	r3, [pc, #680]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4aa9      	ldr	r2, [pc, #676]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b0e:	6093      	str	r3, [r2, #8]
 8003b10:	4ba7      	ldr	r3, [pc, #668]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	49a4      	ldr	r1, [pc, #656]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b2e:	4ba0      	ldr	r3, [pc, #640]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b34:	4a9e      	ldr	r2, [pc, #632]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b3e:	4b9c      	ldr	r3, [pc, #624]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	4999      	ldr	r1, [pc, #612]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b5c:	4b94      	ldr	r3, [pc, #592]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b6a:	4991      	ldr	r1, [pc, #580]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b7e:	4b8c      	ldr	r3, [pc, #560]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8c:	4988      	ldr	r1, [pc, #544]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba0:	4b83      	ldr	r3, [pc, #524]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bae:	4980      	ldr	r1, [pc, #512]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bc2:	4b7b      	ldr	r3, [pc, #492]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	4977      	ldr	r1, [pc, #476]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be4:	4b72      	ldr	r3, [pc, #456]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f023 0203 	bic.w	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	496f      	ldr	r1, [pc, #444]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c06:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f023 020c 	bic.w	r2, r3, #12
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c14:	4966      	ldr	r1, [pc, #408]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	495e      	ldr	r1, [pc, #376]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c4a:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c58:	4955      	ldr	r1, [pc, #340]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	494d      	ldr	r1, [pc, #308]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c8e:	4b48      	ldr	r3, [pc, #288]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	4944      	ldr	r1, [pc, #272]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003cb0:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	493c      	ldr	r1, [pc, #240]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cd2:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	4933      	ldr	r1, [pc, #204]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cf4:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d02:	492b      	ldr	r1, [pc, #172]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d011      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d16:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d24:	4922      	ldr	r1, [pc, #136]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d34:	d101      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d46:	2301      	movs	r3, #1
 8003d48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d56:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d64:	4912      	ldr	r1, [pc, #72]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00b      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d88:	4909      	ldr	r1, [pc, #36]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d006      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80d9 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003da4:	4b02      	ldr	r3, [pc, #8]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a01      	ldr	r2, [pc, #4]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003daa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dae:	e001      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003db0:	40023800 	.word	0x40023800
 8003db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db6:	f7fe fabf 	bl	8002338 <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dbe:	f7fe fabb 	bl	8002338 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b64      	cmp	r3, #100	; 0x64
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e194      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dd0:	4b6c      	ldr	r3, [pc, #432]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d021      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11d      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003df0:	4b64      	ldr	r3, [pc, #400]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df6:	0c1b      	lsrs	r3, r3, #16
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dfe:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e04:	0e1b      	lsrs	r3, r3, #24
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	019a      	lsls	r2, r3, #6
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	061b      	lsls	r3, r3, #24
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	071b      	lsls	r3, r3, #28
 8003e24:	4957      	ldr	r1, [pc, #348]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d004      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d02e      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e56:	d129      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e58:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5e:	0c1b      	lsrs	r3, r3, #16
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e66:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6c:	0f1b      	lsrs	r3, r3, #28
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	019a      	lsls	r2, r3, #6
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	071b      	lsls	r3, r3, #28
 8003e8c:	493d      	ldr	r1, [pc, #244]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e94:	4b3b      	ldr	r3, [pc, #236]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9a:	f023 021f 	bic.w	r2, r3, #31
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	4937      	ldr	r1, [pc, #220]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebe:	0e1b      	lsrs	r3, r3, #24
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ec6:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ecc:	0f1b      	lsrs	r3, r3, #28
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	019a      	lsls	r2, r3, #6
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	071b      	lsls	r3, r3, #28
 8003eec:	4925      	ldr	r1, [pc, #148]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d011      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	019a      	lsls	r2, r3, #6
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	061b      	lsls	r3, r3, #24
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	071b      	lsls	r3, r3, #28
 8003f1c:	4919      	ldr	r1, [pc, #100]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f24:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f30:	f7fe fa02 	bl	8002338 <HAL_GetTick>
 8003f34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f38:	f7fe f9fe 	bl	8002338 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e0d7      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f4a:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	f040 80cd 	bne.w	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6a:	f7fe f9e5 	bl	8002338 <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f72:	f7fe f9e1 	bl	8002338 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b64      	cmp	r3, #100	; 0x64
 8003f7e:	d903      	bls.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e0ba      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f88:	4b5e      	ldr	r3, [pc, #376]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f94:	d0ed      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02e      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d12a      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fbe:	4b51      	ldr	r3, [pc, #324]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fcc:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	0f1b      	lsrs	r3, r3, #28
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	019a      	lsls	r2, r3, #6
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	061b      	lsls	r3, r3, #24
 8003fec:	431a      	orrs	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	4944      	ldr	r1, [pc, #272]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ffa:	4b42      	ldr	r3, [pc, #264]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004000:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	3b01      	subs	r3, #1
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	493d      	ldr	r1, [pc, #244]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d022      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004024:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004028:	d11d      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800402a:	4b36      	ldr	r3, [pc, #216]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	0e1b      	lsrs	r3, r3, #24
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004038:	4b32      	ldr	r3, [pc, #200]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	0f1b      	lsrs	r3, r3, #28
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	019a      	lsls	r2, r3, #6
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	431a      	orrs	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	061b      	lsls	r3, r3, #24
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	071b      	lsls	r3, r3, #28
 800405e:	4929      	ldr	r1, [pc, #164]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d028      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	0e1b      	lsrs	r3, r3, #24
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	019a      	lsls	r2, r3, #6
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	431a      	orrs	r2, r3
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	071b      	lsls	r3, r3, #28
 80040a6:	4917      	ldr	r1, [pc, #92]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040ae:	4b15      	ldr	r3, [pc, #84]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	4911      	ldr	r1, [pc, #68]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0e      	ldr	r2, [pc, #56]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d0:	f7fe f932 	bl	8002338 <HAL_GetTick>
 80040d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040d8:	f7fe f92e 	bl	8002338 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e007      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040f6:	d1ef      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800

08004108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e049      	b.n	80041ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd fee4 	bl	8001efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f000 fd58 	bl	8004bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d001      	beq.n	80041d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e04c      	b.n	800426a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a26      	ldr	r2, [pc, #152]	; (8004278 <HAL_TIM_Base_Start+0xc0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d022      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d01d      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a22      	ldr	r2, [pc, #136]	; (800427c <HAL_TIM_Base_Start+0xc4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d018      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a21      	ldr	r2, [pc, #132]	; (8004280 <HAL_TIM_Base_Start+0xc8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <HAL_TIM_Base_Start+0xcc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <HAL_TIM_Base_Start+0xd0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1c      	ldr	r2, [pc, #112]	; (800428c <HAL_TIM_Base_Start+0xd4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1b      	ldr	r2, [pc, #108]	; (8004290 <HAL_TIM_Base_Start+0xd8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d115      	bne.n	8004254 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_TIM_Base_Start+0xdc>)
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b06      	cmp	r3, #6
 8004238:	d015      	beq.n	8004266 <HAL_TIM_Base_Start+0xae>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d011      	beq.n	8004266 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004252:	e008      	b.n	8004266 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e000      	b.n	8004268 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40010400 	.word	0x40010400
 800428c:	40014000 	.word	0x40014000
 8004290:	40001800 	.word	0x40001800
 8004294:	00010007 	.word	0x00010007

08004298 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6a1a      	ldr	r2, [r3, #32]
 80042a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10f      	bne.n	80042d0 <HAL_TIM_Base_Stop+0x38>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	f240 4344 	movw	r3, #1092	; 0x444
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d107      	bne.n	80042d0 <HAL_TIM_Base_Stop+0x38>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e049      	b.n	800438c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f841 	bl	8004394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f000 fc69 	bl	8004bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_TIM_PWM_Start+0x24>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e03c      	b.n	8004446 <HAL_TIM_PWM_Start+0x9e>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d109      	bne.n	80043e6 <HAL_TIM_PWM_Start+0x3e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b01      	cmp	r3, #1
 80043dc:	bf14      	ite	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	2300      	moveq	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	e02f      	b.n	8004446 <HAL_TIM_PWM_Start+0x9e>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d109      	bne.n	8004400 <HAL_TIM_PWM_Start+0x58>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e022      	b.n	8004446 <HAL_TIM_PWM_Start+0x9e>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d109      	bne.n	800441a <HAL_TIM_PWM_Start+0x72>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	bf14      	ite	ne
 8004412:	2301      	movne	r3, #1
 8004414:	2300      	moveq	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	e015      	b.n	8004446 <HAL_TIM_PWM_Start+0x9e>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b10      	cmp	r3, #16
 800441e:	d109      	bne.n	8004434 <HAL_TIM_PWM_Start+0x8c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e008      	b.n	8004446 <HAL_TIM_PWM_Start+0x9e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e092      	b.n	8004574 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_TIM_PWM_Start+0xb6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	e023      	b.n	80044a6 <HAL_TIM_PWM_Start+0xfe>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b04      	cmp	r3, #4
 8004462:	d104      	bne.n	800446e <HAL_TIM_PWM_Start+0xc6>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800446c:	e01b      	b.n	80044a6 <HAL_TIM_PWM_Start+0xfe>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d104      	bne.n	800447e <HAL_TIM_PWM_Start+0xd6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800447c:	e013      	b.n	80044a6 <HAL_TIM_PWM_Start+0xfe>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b0c      	cmp	r3, #12
 8004482:	d104      	bne.n	800448e <HAL_TIM_PWM_Start+0xe6>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800448c:	e00b      	b.n	80044a6 <HAL_TIM_PWM_Start+0xfe>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b10      	cmp	r3, #16
 8004492:	d104      	bne.n	800449e <HAL_TIM_PWM_Start+0xf6>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449c:	e003      	b.n	80044a6 <HAL_TIM_PWM_Start+0xfe>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2201      	movs	r2, #1
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 ff3c 	bl	800532c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a30      	ldr	r2, [pc, #192]	; (800457c <HAL_TIM_PWM_Start+0x1d4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIM_PWM_Start+0x120>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <HAL_TIM_PWM_Start+0x1d8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d101      	bne.n	80044cc <HAL_TIM_PWM_Start+0x124>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_TIM_PWM_Start+0x126>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a25      	ldr	r2, [pc, #148]	; (800457c <HAL_TIM_PWM_Start+0x1d4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d022      	beq.n	8004532 <HAL_TIM_PWM_Start+0x18a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f4:	d01d      	beq.n	8004532 <HAL_TIM_PWM_Start+0x18a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a22      	ldr	r2, [pc, #136]	; (8004584 <HAL_TIM_PWM_Start+0x1dc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d018      	beq.n	8004532 <HAL_TIM_PWM_Start+0x18a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a20      	ldr	r2, [pc, #128]	; (8004588 <HAL_TIM_PWM_Start+0x1e0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_TIM_PWM_Start+0x18a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1f      	ldr	r2, [pc, #124]	; (800458c <HAL_TIM_PWM_Start+0x1e4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_TIM_PWM_Start+0x18a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a19      	ldr	r2, [pc, #100]	; (8004580 <HAL_TIM_PWM_Start+0x1d8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_TIM_PWM_Start+0x18a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <HAL_TIM_PWM_Start+0x1e8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_TIM_PWM_Start+0x18a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a19      	ldr	r2, [pc, #100]	; (8004594 <HAL_TIM_PWM_Start+0x1ec>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d115      	bne.n	800455e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	4b17      	ldr	r3, [pc, #92]	; (8004598 <HAL_TIM_PWM_Start+0x1f0>)
 800453a:	4013      	ands	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b06      	cmp	r3, #6
 8004542:	d015      	beq.n	8004570 <HAL_TIM_PWM_Start+0x1c8>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454a:	d011      	beq.n	8004570 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455c:	e008      	b.n	8004570 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	e000      	b.n	8004572 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004570:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40010000 	.word	0x40010000
 8004580:	40010400 	.word	0x40010400
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40014000 	.word	0x40014000
 8004594:	40001800 	.word	0x40001800
 8004598:	00010007 	.word	0x00010007

0800459c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d122      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d11b      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0202 	mvn.w	r2, #2
 80045c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 faee 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 80045e4:	e005      	b.n	80045f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fae0 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 faf1 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b04      	cmp	r3, #4
 8004604:	d122      	bne.n	800464c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b04      	cmp	r3, #4
 8004612:	d11b      	bne.n	800464c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0204 	mvn.w	r2, #4
 800461c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2202      	movs	r2, #2
 8004622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fac4 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 8004638:	e005      	b.n	8004646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fab6 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fac7 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b08      	cmp	r3, #8
 8004658:	d122      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b08      	cmp	r3, #8
 8004666:	d11b      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0208 	mvn.w	r2, #8
 8004670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2204      	movs	r2, #4
 8004676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fa9a 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa8c 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa9d 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0210 	mvn.w	r2, #16
 80046c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2208      	movs	r2, #8
 80046ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fa70 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa62 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fa73 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d10e      	bne.n	8004720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d107      	bne.n	8004720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0201 	mvn.w	r2, #1
 8004718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fa3c 	bl	8004b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d10e      	bne.n	800474c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004738:	2b80      	cmp	r3, #128	; 0x80
 800473a:	d107      	bne.n	800474c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 ff2c 	bl	80055a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475a:	d10e      	bne.n	800477a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004766:	2b80      	cmp	r3, #128	; 0x80
 8004768:	d107      	bne.n	800477a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 ff1f 	bl	80055b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d10e      	bne.n	80047a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d107      	bne.n	80047a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800479e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fa21 	bl	8004be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d10e      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d107      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f06f 0220 	mvn.w	r2, #32
 80047ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fedf 	bl	8005590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e0ff      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b14      	cmp	r3, #20
 8004806:	f200 80f0 	bhi.w	80049ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800480a:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004810:	08004865 	.word	0x08004865
 8004814:	080049eb 	.word	0x080049eb
 8004818:	080049eb 	.word	0x080049eb
 800481c:	080049eb 	.word	0x080049eb
 8004820:	080048a5 	.word	0x080048a5
 8004824:	080049eb 	.word	0x080049eb
 8004828:	080049eb 	.word	0x080049eb
 800482c:	080049eb 	.word	0x080049eb
 8004830:	080048e7 	.word	0x080048e7
 8004834:	080049eb 	.word	0x080049eb
 8004838:	080049eb 	.word	0x080049eb
 800483c:	080049eb 	.word	0x080049eb
 8004840:	08004927 	.word	0x08004927
 8004844:	080049eb 	.word	0x080049eb
 8004848:	080049eb 	.word	0x080049eb
 800484c:	080049eb 	.word	0x080049eb
 8004850:	08004969 	.word	0x08004969
 8004854:	080049eb 	.word	0x080049eb
 8004858:	080049eb 	.word	0x080049eb
 800485c:	080049eb 	.word	0x080049eb
 8004860:	080049a9 	.word	0x080049a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fa66 	bl	8004d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0208 	orr.w	r2, r2, #8
 800487e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0204 	bic.w	r2, r2, #4
 800488e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	619a      	str	r2, [r3, #24]
      break;
 80048a2:	e0a5      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fab8 	bl	8004e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6999      	ldr	r1, [r3, #24]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	619a      	str	r2, [r3, #24]
      break;
 80048e4:	e084      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fb0f 	bl	8004f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0208 	orr.w	r2, r2, #8
 8004900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0204 	bic.w	r2, r2, #4
 8004910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69d9      	ldr	r1, [r3, #28]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	61da      	str	r2, [r3, #28]
      break;
 8004924:	e064      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fb65 	bl	8004ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69d9      	ldr	r1, [r3, #28]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	021a      	lsls	r2, r3, #8
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	61da      	str	r2, [r3, #28]
      break;
 8004966:	e043      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fb9c 	bl	80050ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0204 	bic.w	r2, r2, #4
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049a6:	e023      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fbce 	bl	8005150 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049e8:	e002      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75fb      	strb	r3, [r7, #23]
      break;
 80049ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop

08004a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e0b4      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x186>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	4b56      	ldr	r3, [pc, #344]	; (8004b94 <HAL_TIM_ConfigClockSource+0x190>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a58:	d03e      	beq.n	8004ad8 <HAL_TIM_ConfigClockSource+0xd4>
 8004a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5e:	f200 8087 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a66:	f000 8086 	beq.w	8004b76 <HAL_TIM_ConfigClockSource+0x172>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	d87f      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b70      	cmp	r3, #112	; 0x70
 8004a72:	d01a      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0xa6>
 8004a74:	2b70      	cmp	r3, #112	; 0x70
 8004a76:	d87b      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b60      	cmp	r3, #96	; 0x60
 8004a7a:	d050      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x11a>
 8004a7c:	2b60      	cmp	r3, #96	; 0x60
 8004a7e:	d877      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b50      	cmp	r3, #80	; 0x50
 8004a82:	d03c      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0xfa>
 8004a84:	2b50      	cmp	r3, #80	; 0x50
 8004a86:	d873      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d058      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x13a>
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d86f      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b30      	cmp	r3, #48	; 0x30
 8004a92:	d064      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004a94:	2b30      	cmp	r3, #48	; 0x30
 8004a96:	d86b      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d060      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d867      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d05c      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d05a      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004aa8:	e062      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6899      	ldr	r1, [r3, #8]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f000 fc17 	bl	80052ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	609a      	str	r2, [r3, #8]
      break;
 8004ad6:	e04f      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6899      	ldr	r1, [r3, #8]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f000 fc00 	bl	80052ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004afa:	609a      	str	r2, [r3, #8]
      break;
 8004afc:	e03c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6859      	ldr	r1, [r3, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f000 fb74 	bl	80051f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2150      	movs	r1, #80	; 0x50
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fbcd 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8004b1c:	e02c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6859      	ldr	r1, [r3, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f000 fb93 	bl	8005256 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2160      	movs	r1, #96	; 0x60
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fbbd 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8004b3c:	e01c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f000 fb54 	bl	80051f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2140      	movs	r1, #64	; 0x40
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fbad 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8004b5c:	e00c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f000 fba4 	bl	80052b6 <TIM_ITRx_SetConfig>
      break;
 8004b6e:	e003      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
      break;
 8004b74:	e000      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	fffeff88 	.word	0xfffeff88

08004b98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a40      	ldr	r2, [pc, #256]	; (8004d10 <TIM_Base_SetConfig+0x114>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1a:	d00f      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3d      	ldr	r2, [pc, #244]	; (8004d14 <TIM_Base_SetConfig+0x118>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00b      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3c      	ldr	r2, [pc, #240]	; (8004d18 <TIM_Base_SetConfig+0x11c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a3b      	ldr	r2, [pc, #236]	; (8004d1c <TIM_Base_SetConfig+0x120>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a3a      	ldr	r2, [pc, #232]	; (8004d20 <TIM_Base_SetConfig+0x124>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d108      	bne.n	8004c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2f      	ldr	r2, [pc, #188]	; (8004d10 <TIM_Base_SetConfig+0x114>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d02b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5c:	d027      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2c      	ldr	r2, [pc, #176]	; (8004d14 <TIM_Base_SetConfig+0x118>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d023      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <TIM_Base_SetConfig+0x11c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01f      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <TIM_Base_SetConfig+0x120>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a29      	ldr	r2, [pc, #164]	; (8004d20 <TIM_Base_SetConfig+0x124>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d017      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a28      	ldr	r2, [pc, #160]	; (8004d24 <TIM_Base_SetConfig+0x128>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <TIM_Base_SetConfig+0x12c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00f      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <TIM_Base_SetConfig+0x130>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a25      	ldr	r2, [pc, #148]	; (8004d30 <TIM_Base_SetConfig+0x134>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a24      	ldr	r2, [pc, #144]	; (8004d34 <TIM_Base_SetConfig+0x138>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <TIM_Base_SetConfig+0x13c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d108      	bne.n	8004cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <TIM_Base_SetConfig+0x114>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_Base_SetConfig+0xf8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <TIM_Base_SetConfig+0x124>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d103      	bne.n	8004cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	615a      	str	r2, [r3, #20]
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40010400 	.word	0x40010400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40014400 	.word	0x40014400
 8004d2c:	40014800 	.word	0x40014800
 8004d30:	40001800 	.word	0x40001800
 8004d34:	40001c00 	.word	0x40001c00
 8004d38:	40002000 	.word	0x40002000

08004d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <TIM_OC1_SetConfig+0xd8>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f023 0302 	bic.w	r3, r3, #2
 8004d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <TIM_OC1_SetConfig+0xdc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_OC1_SetConfig+0x64>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <TIM_OC1_SetConfig+0xe0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10c      	bne.n	8004dba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f023 0308 	bic.w	r3, r3, #8
 8004da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f023 0304 	bic.w	r3, r3, #4
 8004db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <TIM_OC1_SetConfig+0xdc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC1_SetConfig+0x8e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <TIM_OC1_SetConfig+0xe0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d111      	bne.n	8004dee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	fffeff8f 	.word	0xfffeff8f
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400

08004e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f023 0210 	bic.w	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4b2e      	ldr	r3, [pc, #184]	; (8004f04 <TIM_OC2_SetConfig+0xe4>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 0320 	bic.w	r3, r3, #32
 8004e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a23      	ldr	r2, [pc, #140]	; (8004f08 <TIM_OC2_SetConfig+0xe8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_OC2_SetConfig+0x68>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <TIM_OC2_SetConfig+0xec>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d10d      	bne.n	8004ea4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <TIM_OC2_SetConfig+0xe8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_OC2_SetConfig+0x94>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <TIM_OC2_SetConfig+0xec>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d113      	bne.n	8004edc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	feff8fff 	.word	0xfeff8fff
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40010400 	.word	0x40010400

08004f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ff0 <TIM_OC3_SetConfig+0xe0>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a22      	ldr	r2, [pc, #136]	; (8004ff4 <TIM_OC3_SetConfig+0xe4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_OC3_SetConfig+0x66>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a21      	ldr	r2, [pc, #132]	; (8004ff8 <TIM_OC3_SetConfig+0xe8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10d      	bne.n	8004f92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a17      	ldr	r2, [pc, #92]	; (8004ff4 <TIM_OC3_SetConfig+0xe4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_OC3_SetConfig+0x92>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <TIM_OC3_SetConfig+0xe8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d113      	bne.n	8004fca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	fffeff8f 	.word	0xfffeff8f
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40010400 	.word	0x40010400

08004ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <TIM_OC4_SetConfig+0xa4>)
 8005028:	4013      	ands	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	031b      	lsls	r3, r3, #12
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <TIM_OC4_SetConfig+0xa8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_OC4_SetConfig+0x68>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <TIM_OC4_SetConfig+0xac>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d109      	bne.n	8005078 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	feff8fff 	.word	0xfeff8fff
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40010400 	.word	0x40010400

080050ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4b1b      	ldr	r3, [pc, #108]	; (8005144 <TIM_OC5_SetConfig+0x98>)
 80050d8:	4013      	ands	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a12      	ldr	r2, [pc, #72]	; (8005148 <TIM_OC5_SetConfig+0x9c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_OC5_SetConfig+0x5e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a11      	ldr	r2, [pc, #68]	; (800514c <TIM_OC5_SetConfig+0xa0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d109      	bne.n	800511e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005110:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	fffeff8f 	.word	0xfffeff8f
 8005148:	40010000 	.word	0x40010000
 800514c:	40010400 	.word	0x40010400

08005150 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <TIM_OC6_SetConfig+0x9c>)
 800517c:	4013      	ands	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	051b      	lsls	r3, r3, #20
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <TIM_OC6_SetConfig+0xa0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_OC6_SetConfig+0x60>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <TIM_OC6_SetConfig+0xa4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d109      	bne.n	80051c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	029b      	lsls	r3, r3, #10
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	feff8fff 	.word	0xfeff8fff
 80051f0:	40010000 	.word	0x40010000
 80051f4:	40010400 	.word	0x40010400

080051f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f023 0201 	bic.w	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f023 030a 	bic.w	r3, r3, #10
 8005234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005256:	b480      	push	{r7}
 8005258:	b087      	sub	sp, #28
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0210 	bic.w	r2, r3, #16
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	031b      	lsls	r3, r3, #12
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f043 0307 	orr.w	r3, r3, #7
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	021a      	lsls	r2, r3, #8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	431a      	orrs	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	2201      	movs	r2, #1
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1a      	ldr	r2, [r3, #32]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	43db      	mvns	r3, r3
 800534e:	401a      	ands	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	fa01 f303 	lsl.w	r3, r1, r3
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800538c:	2302      	movs	r3, #2
 800538e:	e06d      	b.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a30      	ldr	r2, [pc, #192]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2f      	ldr	r2, [pc, #188]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d108      	bne.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a20      	ldr	r2, [pc, #128]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d022      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005402:	d01d      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1c      	ldr	r2, [pc, #112]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a15      	ldr	r2, [pc, #84]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a16      	ldr	r2, [pc, #88]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a15      	ldr	r2, [pc, #84]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10c      	bne.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005446:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	4313      	orrs	r3, r2
 8005450:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	40010000 	.word	0x40010000
 800547c:	40010400 	.word	0x40010400
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40014000 	.word	0x40014000
 8005490:	40001800 	.word	0x40001800

08005494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e065      	b.n	800557c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a16      	ldr	r2, [pc, #88]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a14      	ldr	r2, [pc, #80]	; (800558c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d115      	bne.n	800556a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	051b      	lsls	r3, r3, #20
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40010000 	.word	0x40010000
 800558c:	40010400 	.word	0x40010400

08005590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e040      	b.n	8005660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fc fdc2 	bl	8002178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2224      	movs	r2, #36	; 0x24
 80055f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fba2 	bl	8005d54 <UART_SetConfig>
 8005610:	4603      	mov	r3, r0
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e022      	b.n	8005660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fdfa 	bl	800621c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fe81 	bl	8006360 <UART_CheckIdleState>
 800565e:	4603      	mov	r3, r0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567c:	2b20      	cmp	r3, #32
 800567e:	d171      	bne.n	8005764 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <HAL_UART_Transmit+0x24>
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e06a      	b.n	8005766 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2221      	movs	r2, #33	; 0x21
 800569c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800569e:	f7fc fe4b 	bl	8002338 <HAL_GetTick>
 80056a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056bc:	d108      	bne.n	80056d0 <HAL_UART_Transmit+0x68>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d104      	bne.n	80056d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	e003      	b.n	80056d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056d8:	e02c      	b.n	8005734 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2200      	movs	r2, #0
 80056e2:	2180      	movs	r1, #128	; 0x80
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fe72 	bl	80063ce <UART_WaitOnFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e038      	b.n	8005766 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10b      	bne.n	8005712 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005708:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	3302      	adds	r3, #2
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	e007      	b.n	8005722 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	781a      	ldrb	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	3301      	adds	r3, #1
 8005720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1cc      	bne.n	80056da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2200      	movs	r2, #0
 8005748:	2140      	movs	r1, #64	; 0x40
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fe3f 	bl	80063ce <UART_WaitOnFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e005      	b.n	8005766 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	e000      	b.n	8005766 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005764:	2302      	movs	r3, #2
  }
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b0ba      	sub	sp, #232	; 0xe8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005796:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800579a:	f640 030f 	movw	r3, #2063	; 0x80f
 800579e:	4013      	ands	r3, r2
 80057a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d115      	bne.n	80057d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00f      	beq.n	80057d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8297 	beq.w	8005cfc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	4798      	blx	r3
      }
      return;
 80057d6:	e291      	b.n	8005cfc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8117 	beq.w	8005a10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80057e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80057ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80057f2:	4b85      	ldr	r3, [pc, #532]	; (8005a08 <HAL_UART_IRQHandler+0x298>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 810a 	beq.w	8005a10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d011      	beq.n	800582c <HAL_UART_IRQHandler+0xbc>
 8005808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2201      	movs	r2, #1
 800581a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d011      	beq.n	800585c <HAL_UART_IRQHandler+0xec>
 8005838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2202      	movs	r2, #2
 800584a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005852:	f043 0204 	orr.w	r2, r3, #4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800585c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d011      	beq.n	800588c <HAL_UART_IRQHandler+0x11c>
 8005868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2204      	movs	r2, #4
 800587a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005882:	f043 0202 	orr.w	r2, r3, #2
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800588c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b00      	cmp	r3, #0
 8005896:	d017      	beq.n	80058c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d105      	bne.n	80058b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2208      	movs	r2, #8
 80058b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058be:	f043 0208 	orr.w	r2, r3, #8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d012      	beq.n	80058fa <HAL_UART_IRQHandler+0x18a>
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00c      	beq.n	80058fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f0:	f043 0220 	orr.w	r2, r3, #32
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 81fd 	beq.w	8005d00 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00d      	beq.n	800592e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d005      	beq.n	8005952 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800594a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800594e:	2b00      	cmp	r3, #0
 8005950:	d04f      	beq.n	80059f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fe01 	bl	800655a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005962:	2b40      	cmp	r3, #64	; 0x40
 8005964:	d141      	bne.n	80059ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800597c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3308      	adds	r3, #8
 800598e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005992:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800599e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1d9      	bne.n	8005966 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d013      	beq.n	80059e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059be:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <HAL_UART_IRQHandler+0x29c>)
 80059c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fd f8fb 	bl	8002bc2 <HAL_DMA_Abort_IT>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d017      	beq.n	8005a02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	e00f      	b.n	8005a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9a0 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	e00b      	b.n	8005a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f99c 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f0:	e007      	b.n	8005a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f998 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005a00:	e17e      	b.n	8005d00 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a02:	bf00      	nop
    return;
 8005a04:	e17c      	b.n	8005d00 <HAL_UART_IRQHandler+0x590>
 8005a06:	bf00      	nop
 8005a08:	04000120 	.word	0x04000120
 8005a0c:	08006623 	.word	0x08006623

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	f040 814c 	bne.w	8005cb2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 8145 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 813e 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2210      	movs	r2, #16
 8005a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	f040 80b6 	bne.w	8005bba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 8150 	beq.w	8005d04 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	f080 8148 	bcs.w	8005d04 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a88:	f000 8086 	beq.w	8005b98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ab6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005aba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1da      	bne.n	8005a8c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3308      	adds	r3, #8
 8005adc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ae8:	f023 0301 	bic.w	r3, r3, #1
 8005aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005afa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005afe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e1      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e3      	bne.n	8005b12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b68:	f023 0310 	bic.w	r3, r3, #16
 8005b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e4      	bne.n	8005b58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fc ffa5 	bl	8002ae2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f8c2 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bb8:	e0a4      	b.n	8005d04 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 8096 	beq.w	8005d08 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8091 	beq.w	8005d08 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c08:	647b      	str	r3, [r7, #68]	; 0x44
 8005c0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e4      	bne.n	8005be6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3308      	adds	r3, #8
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f023 0301 	bic.w	r3, r3, #1
 8005c32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c40:	633a      	str	r2, [r7, #48]	; 0x30
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e3      	bne.n	8005c1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f023 0310 	bic.w	r3, r3, #16
 8005c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	69b9      	ldr	r1, [r7, #24]
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	617b      	str	r3, [r7, #20]
   return(result);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e4      	bne.n	8005c68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f846 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cb0:	e02a      	b.n	8005d08 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00e      	beq.n	8005cdc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d008      	beq.n	8005cdc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01c      	beq.n	8005d0c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
    }
    return;
 8005cda:	e017      	b.n	8005d0c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d012      	beq.n	8005d0e <HAL_UART_IRQHandler+0x59e>
 8005ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00c      	beq.n	8005d0e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fcaa 	bl	800664e <UART_EndTransmit_IT>
    return;
 8005cfa:	e008      	b.n	8005d0e <HAL_UART_IRQHandler+0x59e>
      return;
 8005cfc:	bf00      	nop
 8005cfe:	e006      	b.n	8005d0e <HAL_UART_IRQHandler+0x59e>
    return;
 8005d00:	bf00      	nop
 8005d02:	e004      	b.n	8005d0e <HAL_UART_IRQHandler+0x59e>
      return;
 8005d04:	bf00      	nop
 8005d06:	e002      	b.n	8005d0e <HAL_UART_IRQHandler+0x59e>
      return;
 8005d08:	bf00      	nop
 8005d0a:	e000      	b.n	8005d0e <HAL_UART_IRQHandler+0x59e>
    return;
 8005d0c:	bf00      	nop
  }

}
 8005d0e:	37e8      	adds	r7, #232	; 0xe8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4ba6      	ldr	r3, [pc, #664]	; (8006018 <UART_SetConfig+0x2c4>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6812      	ldr	r2, [r2, #0]
 8005d86:	6979      	ldr	r1, [r7, #20]
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a94      	ldr	r2, [pc, #592]	; (800601c <UART_SetConfig+0x2c8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d120      	bne.n	8005e12 <UART_SetConfig+0xbe>
 8005dd0:	4b93      	ldr	r3, [pc, #588]	; (8006020 <UART_SetConfig+0x2cc>)
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d816      	bhi.n	8005e0c <UART_SetConfig+0xb8>
 8005dde:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <UART_SetConfig+0x90>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005df5 	.word	0x08005df5
 8005de8:	08005e01 	.word	0x08005e01
 8005dec:	08005dfb 	.word	0x08005dfb
 8005df0:	08005e07 	.word	0x08005e07
 8005df4:	2301      	movs	r3, #1
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e150      	b.n	800609c <UART_SetConfig+0x348>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	77fb      	strb	r3, [r7, #31]
 8005dfe:	e14d      	b.n	800609c <UART_SetConfig+0x348>
 8005e00:	2304      	movs	r3, #4
 8005e02:	77fb      	strb	r3, [r7, #31]
 8005e04:	e14a      	b.n	800609c <UART_SetConfig+0x348>
 8005e06:	2308      	movs	r3, #8
 8005e08:	77fb      	strb	r3, [r7, #31]
 8005e0a:	e147      	b.n	800609c <UART_SetConfig+0x348>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e144      	b.n	800609c <UART_SetConfig+0x348>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a83      	ldr	r2, [pc, #524]	; (8006024 <UART_SetConfig+0x2d0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d132      	bne.n	8005e82 <UART_SetConfig+0x12e>
 8005e1c:	4b80      	ldr	r3, [pc, #512]	; (8006020 <UART_SetConfig+0x2cc>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b0c      	cmp	r3, #12
 8005e28:	d828      	bhi.n	8005e7c <UART_SetConfig+0x128>
 8005e2a:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <UART_SetConfig+0xdc>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e65 	.word	0x08005e65
 8005e34:	08005e7d 	.word	0x08005e7d
 8005e38:	08005e7d 	.word	0x08005e7d
 8005e3c:	08005e7d 	.word	0x08005e7d
 8005e40:	08005e71 	.word	0x08005e71
 8005e44:	08005e7d 	.word	0x08005e7d
 8005e48:	08005e7d 	.word	0x08005e7d
 8005e4c:	08005e7d 	.word	0x08005e7d
 8005e50:	08005e6b 	.word	0x08005e6b
 8005e54:	08005e7d 	.word	0x08005e7d
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e7d 	.word	0x08005e7d
 8005e60:	08005e77 	.word	0x08005e77
 8005e64:	2300      	movs	r3, #0
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e118      	b.n	800609c <UART_SetConfig+0x348>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e115      	b.n	800609c <UART_SetConfig+0x348>
 8005e70:	2304      	movs	r3, #4
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e112      	b.n	800609c <UART_SetConfig+0x348>
 8005e76:	2308      	movs	r3, #8
 8005e78:	77fb      	strb	r3, [r7, #31]
 8005e7a:	e10f      	b.n	800609c <UART_SetConfig+0x348>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e10c      	b.n	800609c <UART_SetConfig+0x348>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a68      	ldr	r2, [pc, #416]	; (8006028 <UART_SetConfig+0x2d4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d120      	bne.n	8005ece <UART_SetConfig+0x17a>
 8005e8c:	4b64      	ldr	r3, [pc, #400]	; (8006020 <UART_SetConfig+0x2cc>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e96:	2b30      	cmp	r3, #48	; 0x30
 8005e98:	d013      	beq.n	8005ec2 <UART_SetConfig+0x16e>
 8005e9a:	2b30      	cmp	r3, #48	; 0x30
 8005e9c:	d814      	bhi.n	8005ec8 <UART_SetConfig+0x174>
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d009      	beq.n	8005eb6 <UART_SetConfig+0x162>
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d810      	bhi.n	8005ec8 <UART_SetConfig+0x174>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <UART_SetConfig+0x15c>
 8005eaa:	2b10      	cmp	r3, #16
 8005eac:	d006      	beq.n	8005ebc <UART_SetConfig+0x168>
 8005eae:	e00b      	b.n	8005ec8 <UART_SetConfig+0x174>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e0f2      	b.n	800609c <UART_SetConfig+0x348>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e0ef      	b.n	800609c <UART_SetConfig+0x348>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e0ec      	b.n	800609c <UART_SetConfig+0x348>
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	77fb      	strb	r3, [r7, #31]
 8005ec6:	e0e9      	b.n	800609c <UART_SetConfig+0x348>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e0e6      	b.n	800609c <UART_SetConfig+0x348>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a56      	ldr	r2, [pc, #344]	; (800602c <UART_SetConfig+0x2d8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d120      	bne.n	8005f1a <UART_SetConfig+0x1c6>
 8005ed8:	4b51      	ldr	r3, [pc, #324]	; (8006020 <UART_SetConfig+0x2cc>)
 8005eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ede:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ee4:	d013      	beq.n	8005f0e <UART_SetConfig+0x1ba>
 8005ee6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ee8:	d814      	bhi.n	8005f14 <UART_SetConfig+0x1c0>
 8005eea:	2b80      	cmp	r3, #128	; 0x80
 8005eec:	d009      	beq.n	8005f02 <UART_SetConfig+0x1ae>
 8005eee:	2b80      	cmp	r3, #128	; 0x80
 8005ef0:	d810      	bhi.n	8005f14 <UART_SetConfig+0x1c0>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <UART_SetConfig+0x1a8>
 8005ef6:	2b40      	cmp	r3, #64	; 0x40
 8005ef8:	d006      	beq.n	8005f08 <UART_SetConfig+0x1b4>
 8005efa:	e00b      	b.n	8005f14 <UART_SetConfig+0x1c0>
 8005efc:	2300      	movs	r3, #0
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e0cc      	b.n	800609c <UART_SetConfig+0x348>
 8005f02:	2302      	movs	r3, #2
 8005f04:	77fb      	strb	r3, [r7, #31]
 8005f06:	e0c9      	b.n	800609c <UART_SetConfig+0x348>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e0c6      	b.n	800609c <UART_SetConfig+0x348>
 8005f0e:	2308      	movs	r3, #8
 8005f10:	77fb      	strb	r3, [r7, #31]
 8005f12:	e0c3      	b.n	800609c <UART_SetConfig+0x348>
 8005f14:	2310      	movs	r3, #16
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e0c0      	b.n	800609c <UART_SetConfig+0x348>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a44      	ldr	r2, [pc, #272]	; (8006030 <UART_SetConfig+0x2dc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d125      	bne.n	8005f70 <UART_SetConfig+0x21c>
 8005f24:	4b3e      	ldr	r3, [pc, #248]	; (8006020 <UART_SetConfig+0x2cc>)
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f32:	d017      	beq.n	8005f64 <UART_SetConfig+0x210>
 8005f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f38:	d817      	bhi.n	8005f6a <UART_SetConfig+0x216>
 8005f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f3e:	d00b      	beq.n	8005f58 <UART_SetConfig+0x204>
 8005f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f44:	d811      	bhi.n	8005f6a <UART_SetConfig+0x216>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <UART_SetConfig+0x1fe>
 8005f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4e:	d006      	beq.n	8005f5e <UART_SetConfig+0x20a>
 8005f50:	e00b      	b.n	8005f6a <UART_SetConfig+0x216>
 8005f52:	2300      	movs	r3, #0
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e0a1      	b.n	800609c <UART_SetConfig+0x348>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e09e      	b.n	800609c <UART_SetConfig+0x348>
 8005f5e:	2304      	movs	r3, #4
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e09b      	b.n	800609c <UART_SetConfig+0x348>
 8005f64:	2308      	movs	r3, #8
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	e098      	b.n	800609c <UART_SetConfig+0x348>
 8005f6a:	2310      	movs	r3, #16
 8005f6c:	77fb      	strb	r3, [r7, #31]
 8005f6e:	e095      	b.n	800609c <UART_SetConfig+0x348>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a2f      	ldr	r2, [pc, #188]	; (8006034 <UART_SetConfig+0x2e0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d125      	bne.n	8005fc6 <UART_SetConfig+0x272>
 8005f7a:	4b29      	ldr	r3, [pc, #164]	; (8006020 <UART_SetConfig+0x2cc>)
 8005f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f88:	d017      	beq.n	8005fba <UART_SetConfig+0x266>
 8005f8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f8e:	d817      	bhi.n	8005fc0 <UART_SetConfig+0x26c>
 8005f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f94:	d00b      	beq.n	8005fae <UART_SetConfig+0x25a>
 8005f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f9a:	d811      	bhi.n	8005fc0 <UART_SetConfig+0x26c>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <UART_SetConfig+0x254>
 8005fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa4:	d006      	beq.n	8005fb4 <UART_SetConfig+0x260>
 8005fa6:	e00b      	b.n	8005fc0 <UART_SetConfig+0x26c>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e076      	b.n	800609c <UART_SetConfig+0x348>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	77fb      	strb	r3, [r7, #31]
 8005fb2:	e073      	b.n	800609c <UART_SetConfig+0x348>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e070      	b.n	800609c <UART_SetConfig+0x348>
 8005fba:	2308      	movs	r3, #8
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e06d      	b.n	800609c <UART_SetConfig+0x348>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e06a      	b.n	800609c <UART_SetConfig+0x348>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <UART_SetConfig+0x2e4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d138      	bne.n	8006042 <UART_SetConfig+0x2ee>
 8005fd0:	4b13      	ldr	r3, [pc, #76]	; (8006020 <UART_SetConfig+0x2cc>)
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fde:	d017      	beq.n	8006010 <UART_SetConfig+0x2bc>
 8005fe0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fe4:	d82a      	bhi.n	800603c <UART_SetConfig+0x2e8>
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fea:	d00b      	beq.n	8006004 <UART_SetConfig+0x2b0>
 8005fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff0:	d824      	bhi.n	800603c <UART_SetConfig+0x2e8>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <UART_SetConfig+0x2aa>
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffa:	d006      	beq.n	800600a <UART_SetConfig+0x2b6>
 8005ffc:	e01e      	b.n	800603c <UART_SetConfig+0x2e8>
 8005ffe:	2300      	movs	r3, #0
 8006000:	77fb      	strb	r3, [r7, #31]
 8006002:	e04b      	b.n	800609c <UART_SetConfig+0x348>
 8006004:	2302      	movs	r3, #2
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e048      	b.n	800609c <UART_SetConfig+0x348>
 800600a:	2304      	movs	r3, #4
 800600c:	77fb      	strb	r3, [r7, #31]
 800600e:	e045      	b.n	800609c <UART_SetConfig+0x348>
 8006010:	2308      	movs	r3, #8
 8006012:	77fb      	strb	r3, [r7, #31]
 8006014:	e042      	b.n	800609c <UART_SetConfig+0x348>
 8006016:	bf00      	nop
 8006018:	efff69f3 	.word	0xefff69f3
 800601c:	40011000 	.word	0x40011000
 8006020:	40023800 	.word	0x40023800
 8006024:	40004400 	.word	0x40004400
 8006028:	40004800 	.word	0x40004800
 800602c:	40004c00 	.word	0x40004c00
 8006030:	40005000 	.word	0x40005000
 8006034:	40011400 	.word	0x40011400
 8006038:	40007800 	.word	0x40007800
 800603c:	2310      	movs	r3, #16
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e02c      	b.n	800609c <UART_SetConfig+0x348>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a72      	ldr	r2, [pc, #456]	; (8006210 <UART_SetConfig+0x4bc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d125      	bne.n	8006098 <UART_SetConfig+0x344>
 800604c:	4b71      	ldr	r3, [pc, #452]	; (8006214 <UART_SetConfig+0x4c0>)
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006052:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006056:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800605a:	d017      	beq.n	800608c <UART_SetConfig+0x338>
 800605c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006060:	d817      	bhi.n	8006092 <UART_SetConfig+0x33e>
 8006062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006066:	d00b      	beq.n	8006080 <UART_SetConfig+0x32c>
 8006068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800606c:	d811      	bhi.n	8006092 <UART_SetConfig+0x33e>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <UART_SetConfig+0x326>
 8006072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006076:	d006      	beq.n	8006086 <UART_SetConfig+0x332>
 8006078:	e00b      	b.n	8006092 <UART_SetConfig+0x33e>
 800607a:	2300      	movs	r3, #0
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e00d      	b.n	800609c <UART_SetConfig+0x348>
 8006080:	2302      	movs	r3, #2
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e00a      	b.n	800609c <UART_SetConfig+0x348>
 8006086:	2304      	movs	r3, #4
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e007      	b.n	800609c <UART_SetConfig+0x348>
 800608c:	2308      	movs	r3, #8
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e004      	b.n	800609c <UART_SetConfig+0x348>
 8006092:	2310      	movs	r3, #16
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e001      	b.n	800609c <UART_SetConfig+0x348>
 8006098:	2310      	movs	r3, #16
 800609a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a4:	d15b      	bne.n	800615e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80060a6:	7ffb      	ldrb	r3, [r7, #31]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d828      	bhi.n	80060fe <UART_SetConfig+0x3aa>
 80060ac:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <UART_SetConfig+0x360>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	080060d9 	.word	0x080060d9
 80060b8:	080060e1 	.word	0x080060e1
 80060bc:	080060e9 	.word	0x080060e9
 80060c0:	080060ff 	.word	0x080060ff
 80060c4:	080060ef 	.word	0x080060ef
 80060c8:	080060ff 	.word	0x080060ff
 80060cc:	080060ff 	.word	0x080060ff
 80060d0:	080060ff 	.word	0x080060ff
 80060d4:	080060f7 	.word	0x080060f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d8:	f7fd fbfe 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 80060dc:	61b8      	str	r0, [r7, #24]
        break;
 80060de:	e013      	b.n	8006108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e0:	f7fd fc0e 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 80060e4:	61b8      	str	r0, [r7, #24]
        break;
 80060e6:	e00f      	b.n	8006108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e8:	4b4b      	ldr	r3, [pc, #300]	; (8006218 <UART_SetConfig+0x4c4>)
 80060ea:	61bb      	str	r3, [r7, #24]
        break;
 80060ec:	e00c      	b.n	8006108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ee:	f7fd fb21 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80060f2:	61b8      	str	r0, [r7, #24]
        break;
 80060f4:	e008      	b.n	8006108 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fa:	61bb      	str	r3, [r7, #24]
        break;
 80060fc:	e004      	b.n	8006108 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	77bb      	strb	r3, [r7, #30]
        break;
 8006106:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d074      	beq.n	80061f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	005a      	lsls	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	085b      	lsrs	r3, r3, #1
 8006118:	441a      	add	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006122:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b0f      	cmp	r3, #15
 8006128:	d916      	bls.n	8006158 <UART_SetConfig+0x404>
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006130:	d212      	bcs.n	8006158 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f023 030f 	bic.w	r3, r3, #15
 800613a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	085b      	lsrs	r3, r3, #1
 8006140:	b29b      	uxth	r3, r3
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	b29a      	uxth	r2, r3
 8006148:	89fb      	ldrh	r3, [r7, #14]
 800614a:	4313      	orrs	r3, r2
 800614c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	89fa      	ldrh	r2, [r7, #14]
 8006154:	60da      	str	r2, [r3, #12]
 8006156:	e04f      	b.n	80061f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	77bb      	strb	r3, [r7, #30]
 800615c:	e04c      	b.n	80061f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800615e:	7ffb      	ldrb	r3, [r7, #31]
 8006160:	2b08      	cmp	r3, #8
 8006162:	d828      	bhi.n	80061b6 <UART_SetConfig+0x462>
 8006164:	a201      	add	r2, pc, #4	; (adr r2, 800616c <UART_SetConfig+0x418>)
 8006166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616a:	bf00      	nop
 800616c:	08006191 	.word	0x08006191
 8006170:	08006199 	.word	0x08006199
 8006174:	080061a1 	.word	0x080061a1
 8006178:	080061b7 	.word	0x080061b7
 800617c:	080061a7 	.word	0x080061a7
 8006180:	080061b7 	.word	0x080061b7
 8006184:	080061b7 	.word	0x080061b7
 8006188:	080061b7 	.word	0x080061b7
 800618c:	080061af 	.word	0x080061af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006190:	f7fd fba2 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8006194:	61b8      	str	r0, [r7, #24]
        break;
 8006196:	e013      	b.n	80061c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006198:	f7fd fbb2 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 800619c:	61b8      	str	r0, [r7, #24]
        break;
 800619e:	e00f      	b.n	80061c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a0:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <UART_SetConfig+0x4c4>)
 80061a2:	61bb      	str	r3, [r7, #24]
        break;
 80061a4:	e00c      	b.n	80061c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061a6:	f7fd fac5 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80061aa:	61b8      	str	r0, [r7, #24]
        break;
 80061ac:	e008      	b.n	80061c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b2:	61bb      	str	r3, [r7, #24]
        break;
 80061b4:	e004      	b.n	80061c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	77bb      	strb	r3, [r7, #30]
        break;
 80061be:	bf00      	nop
    }

    if (pclk != 0U)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d018      	beq.n	80061f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	085a      	lsrs	r2, r3, #1
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	441a      	add	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b0f      	cmp	r3, #15
 80061de:	d909      	bls.n	80061f4 <UART_SetConfig+0x4a0>
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e6:	d205      	bcs.n	80061f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	60da      	str	r2, [r3, #12]
 80061f2:	e001      	b.n	80061f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006204:	7fbb      	ldrb	r3, [r7, #30]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3720      	adds	r7, #32
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	40007c00 	.word	0x40007c00
 8006214:	40023800 	.word	0x40023800
 8006218:	00f42400 	.word	0x00f42400

0800621c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01a      	beq.n	8006332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631a:	d10a      	bne.n	8006332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	605a      	str	r2, [r3, #4]
  }
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006370:	f7fb ffe2 	bl	8002338 <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b08      	cmp	r3, #8
 8006382:	d10e      	bne.n	80063a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f81b 	bl	80063ce <UART_WaitOnFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e011      	b.n	80063c6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b09c      	sub	sp, #112	; 0x70
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	603b      	str	r3, [r7, #0]
 80063da:	4613      	mov	r3, r2
 80063dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063de:	e0a7      	b.n	8006530 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	f000 80a3 	beq.w	8006530 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ea:	f7fb ffa5 	bl	8002338 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d302      	bcc.n	8006400 <UART_WaitOnFlagUntilTimeout+0x32>
 80063fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d13f      	bne.n	8006480 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800640e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006414:	667b      	str	r3, [r7, #100]	; 0x64
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800641e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006420:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800642c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e6      	bne.n	8006400 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3308      	adds	r3, #8
 8006438:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	663b      	str	r3, [r7, #96]	; 0x60
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3308      	adds	r3, #8
 8006450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006452:	64ba      	str	r2, [r7, #72]	; 0x48
 8006454:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e5      	bne.n	8006432 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e068      	b.n	8006552 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d050      	beq.n	8006530 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649c:	d148      	bne.n	8006530 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c6:	637b      	str	r3, [r7, #52]	; 0x34
 80064c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e6      	bne.n	80064a8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064fa:	623a      	str	r2, [r7, #32]
 80064fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	69f9      	ldr	r1, [r7, #28]
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	61bb      	str	r3, [r7, #24]
   return(result);
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e5      	bne.n	80064da <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2220      	movs	r2, #32
 8006512:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e010      	b.n	8006552 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69da      	ldr	r2, [r3, #28]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4013      	ands	r3, r2
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	429a      	cmp	r2, r3
 800653e:	bf0c      	ite	eq
 8006540:	2301      	moveq	r3, #1
 8006542:	2300      	movne	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	429a      	cmp	r2, r3
 800654c:	f43f af48 	beq.w	80063e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3770      	adds	r7, #112	; 0x70
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800655a:	b480      	push	{r7}
 800655c:	b095      	sub	sp, #84	; 0x54
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656a:	e853 3f00 	ldrex	r3, [r3]
 800656e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006580:	643b      	str	r3, [r7, #64]	; 0x40
 8006582:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e6      	bne.n	8006562 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3308      	adds	r3, #8
 800659a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	f023 0301 	bic.w	r3, r3, #1
 80065aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3308      	adds	r3, #8
 80065b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e5      	bne.n	8006594 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d118      	bne.n	8006602 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f023 0310 	bic.w	r3, r3, #16
 80065e4:	647b      	str	r3, [r7, #68]	; 0x44
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6979      	ldr	r1, [r7, #20]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	613b      	str	r3, [r7, #16]
   return(result);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e6      	bne.n	80065d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006616:	bf00      	nop
 8006618:	3754      	adds	r7, #84	; 0x54
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7ff fb71 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b088      	sub	sp, #32
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	60bb      	str	r3, [r7, #8]
   return(result);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6979      	ldr	r1, [r7, #20]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	613b      	str	r3, [r7, #16]
   return(result);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e6      	bne.n	8006656 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff fb3d 	bl	8005d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669a:	bf00      	nop
 800669c:	3720      	adds	r7, #32
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <__errno>:
 80066a4:	4b01      	ldr	r3, [pc, #4]	; (80066ac <__errno+0x8>)
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	20000010 	.word	0x20000010

080066b0 <__libc_init_array>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	4d0d      	ldr	r5, [pc, #52]	; (80066e8 <__libc_init_array+0x38>)
 80066b4:	4c0d      	ldr	r4, [pc, #52]	; (80066ec <__libc_init_array+0x3c>)
 80066b6:	1b64      	subs	r4, r4, r5
 80066b8:	10a4      	asrs	r4, r4, #2
 80066ba:	2600      	movs	r6, #0
 80066bc:	42a6      	cmp	r6, r4
 80066be:	d109      	bne.n	80066d4 <__libc_init_array+0x24>
 80066c0:	4d0b      	ldr	r5, [pc, #44]	; (80066f0 <__libc_init_array+0x40>)
 80066c2:	4c0c      	ldr	r4, [pc, #48]	; (80066f4 <__libc_init_array+0x44>)
 80066c4:	f004 fc90 	bl	800afe8 <_init>
 80066c8:	1b64      	subs	r4, r4, r5
 80066ca:	10a4      	asrs	r4, r4, #2
 80066cc:	2600      	movs	r6, #0
 80066ce:	42a6      	cmp	r6, r4
 80066d0:	d105      	bne.n	80066de <__libc_init_array+0x2e>
 80066d2:	bd70      	pop	{r4, r5, r6, pc}
 80066d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d8:	4798      	blx	r3
 80066da:	3601      	adds	r6, #1
 80066dc:	e7ee      	b.n	80066bc <__libc_init_array+0xc>
 80066de:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e2:	4798      	blx	r3
 80066e4:	3601      	adds	r6, #1
 80066e6:	e7f2      	b.n	80066ce <__libc_init_array+0x1e>
 80066e8:	0800b4dc 	.word	0x0800b4dc
 80066ec:	0800b4dc 	.word	0x0800b4dc
 80066f0:	0800b4dc 	.word	0x0800b4dc
 80066f4:	0800b4e0 	.word	0x0800b4e0

080066f8 <memset>:
 80066f8:	4402      	add	r2, r0
 80066fa:	4603      	mov	r3, r0
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d100      	bne.n	8006702 <memset+0xa>
 8006700:	4770      	bx	lr
 8006702:	f803 1b01 	strb.w	r1, [r3], #1
 8006706:	e7f9      	b.n	80066fc <memset+0x4>

08006708 <__cvt>:
 8006708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	ec55 4b10 	vmov	r4, r5, d0
 8006710:	2d00      	cmp	r5, #0
 8006712:	460e      	mov	r6, r1
 8006714:	4619      	mov	r1, r3
 8006716:	462b      	mov	r3, r5
 8006718:	bfbb      	ittet	lt
 800671a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800671e:	461d      	movlt	r5, r3
 8006720:	2300      	movge	r3, #0
 8006722:	232d      	movlt	r3, #45	; 0x2d
 8006724:	700b      	strb	r3, [r1, #0]
 8006726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006728:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800672c:	4691      	mov	r9, r2
 800672e:	f023 0820 	bic.w	r8, r3, #32
 8006732:	bfbc      	itt	lt
 8006734:	4622      	movlt	r2, r4
 8006736:	4614      	movlt	r4, r2
 8006738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800673c:	d005      	beq.n	800674a <__cvt+0x42>
 800673e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006742:	d100      	bne.n	8006746 <__cvt+0x3e>
 8006744:	3601      	adds	r6, #1
 8006746:	2102      	movs	r1, #2
 8006748:	e000      	b.n	800674c <__cvt+0x44>
 800674a:	2103      	movs	r1, #3
 800674c:	ab03      	add	r3, sp, #12
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	ab02      	add	r3, sp, #8
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	ec45 4b10 	vmov	d0, r4, r5
 8006758:	4653      	mov	r3, sl
 800675a:	4632      	mov	r2, r6
 800675c:	f001 fdac 	bl	80082b8 <_dtoa_r>
 8006760:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006764:	4607      	mov	r7, r0
 8006766:	d102      	bne.n	800676e <__cvt+0x66>
 8006768:	f019 0f01 	tst.w	r9, #1
 800676c:	d022      	beq.n	80067b4 <__cvt+0xac>
 800676e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006772:	eb07 0906 	add.w	r9, r7, r6
 8006776:	d110      	bne.n	800679a <__cvt+0x92>
 8006778:	783b      	ldrb	r3, [r7, #0]
 800677a:	2b30      	cmp	r3, #48	; 0x30
 800677c:	d10a      	bne.n	8006794 <__cvt+0x8c>
 800677e:	2200      	movs	r2, #0
 8006780:	2300      	movs	r3, #0
 8006782:	4620      	mov	r0, r4
 8006784:	4629      	mov	r1, r5
 8006786:	f7fa f9bf 	bl	8000b08 <__aeabi_dcmpeq>
 800678a:	b918      	cbnz	r0, 8006794 <__cvt+0x8c>
 800678c:	f1c6 0601 	rsb	r6, r6, #1
 8006790:	f8ca 6000 	str.w	r6, [sl]
 8006794:	f8da 3000 	ldr.w	r3, [sl]
 8006798:	4499      	add	r9, r3
 800679a:	2200      	movs	r2, #0
 800679c:	2300      	movs	r3, #0
 800679e:	4620      	mov	r0, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7fa f9b1 	bl	8000b08 <__aeabi_dcmpeq>
 80067a6:	b108      	cbz	r0, 80067ac <__cvt+0xa4>
 80067a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80067ac:	2230      	movs	r2, #48	; 0x30
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	454b      	cmp	r3, r9
 80067b2:	d307      	bcc.n	80067c4 <__cvt+0xbc>
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067b8:	1bdb      	subs	r3, r3, r7
 80067ba:	4638      	mov	r0, r7
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	b004      	add	sp, #16
 80067c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c4:	1c59      	adds	r1, r3, #1
 80067c6:	9103      	str	r1, [sp, #12]
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	e7f0      	b.n	80067ae <__cvt+0xa6>

080067cc <__exponent>:
 80067cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ce:	4603      	mov	r3, r0
 80067d0:	2900      	cmp	r1, #0
 80067d2:	bfb8      	it	lt
 80067d4:	4249      	neglt	r1, r1
 80067d6:	f803 2b02 	strb.w	r2, [r3], #2
 80067da:	bfb4      	ite	lt
 80067dc:	222d      	movlt	r2, #45	; 0x2d
 80067de:	222b      	movge	r2, #43	; 0x2b
 80067e0:	2909      	cmp	r1, #9
 80067e2:	7042      	strb	r2, [r0, #1]
 80067e4:	dd2a      	ble.n	800683c <__exponent+0x70>
 80067e6:	f10d 0407 	add.w	r4, sp, #7
 80067ea:	46a4      	mov	ip, r4
 80067ec:	270a      	movs	r7, #10
 80067ee:	46a6      	mov	lr, r4
 80067f0:	460a      	mov	r2, r1
 80067f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80067f6:	fb07 1516 	mls	r5, r7, r6, r1
 80067fa:	3530      	adds	r5, #48	; 0x30
 80067fc:	2a63      	cmp	r2, #99	; 0x63
 80067fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8006802:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006806:	4631      	mov	r1, r6
 8006808:	dcf1      	bgt.n	80067ee <__exponent+0x22>
 800680a:	3130      	adds	r1, #48	; 0x30
 800680c:	f1ae 0502 	sub.w	r5, lr, #2
 8006810:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006814:	1c44      	adds	r4, r0, #1
 8006816:	4629      	mov	r1, r5
 8006818:	4561      	cmp	r1, ip
 800681a:	d30a      	bcc.n	8006832 <__exponent+0x66>
 800681c:	f10d 0209 	add.w	r2, sp, #9
 8006820:	eba2 020e 	sub.w	r2, r2, lr
 8006824:	4565      	cmp	r5, ip
 8006826:	bf88      	it	hi
 8006828:	2200      	movhi	r2, #0
 800682a:	4413      	add	r3, r2
 800682c:	1a18      	subs	r0, r3, r0
 800682e:	b003      	add	sp, #12
 8006830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006836:	f804 2f01 	strb.w	r2, [r4, #1]!
 800683a:	e7ed      	b.n	8006818 <__exponent+0x4c>
 800683c:	2330      	movs	r3, #48	; 0x30
 800683e:	3130      	adds	r1, #48	; 0x30
 8006840:	7083      	strb	r3, [r0, #2]
 8006842:	70c1      	strb	r1, [r0, #3]
 8006844:	1d03      	adds	r3, r0, #4
 8006846:	e7f1      	b.n	800682c <__exponent+0x60>

08006848 <_printf_float>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	ed2d 8b02 	vpush	{d8}
 8006850:	b08d      	sub	sp, #52	; 0x34
 8006852:	460c      	mov	r4, r1
 8006854:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006858:	4616      	mov	r6, r2
 800685a:	461f      	mov	r7, r3
 800685c:	4605      	mov	r5, r0
 800685e:	f002 fe89 	bl	8009574 <_localeconv_r>
 8006862:	f8d0 a000 	ldr.w	sl, [r0]
 8006866:	4650      	mov	r0, sl
 8006868:	f7f9 fcd2 	bl	8000210 <strlen>
 800686c:	2300      	movs	r3, #0
 800686e:	930a      	str	r3, [sp, #40]	; 0x28
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	9305      	str	r3, [sp, #20]
 8006874:	f8d8 3000 	ldr.w	r3, [r8]
 8006878:	f894 b018 	ldrb.w	fp, [r4, #24]
 800687c:	3307      	adds	r3, #7
 800687e:	f023 0307 	bic.w	r3, r3, #7
 8006882:	f103 0208 	add.w	r2, r3, #8
 8006886:	f8c8 2000 	str.w	r2, [r8]
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006892:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006896:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800689a:	9307      	str	r3, [sp, #28]
 800689c:	f8cd 8018 	str.w	r8, [sp, #24]
 80068a0:	ee08 0a10 	vmov	s16, r0
 80068a4:	4b9f      	ldr	r3, [pc, #636]	; (8006b24 <_printf_float+0x2dc>)
 80068a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068aa:	f04f 32ff 	mov.w	r2, #4294967295
 80068ae:	f7fa f95d 	bl	8000b6c <__aeabi_dcmpun>
 80068b2:	bb88      	cbnz	r0, 8006918 <_printf_float+0xd0>
 80068b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068b8:	4b9a      	ldr	r3, [pc, #616]	; (8006b24 <_printf_float+0x2dc>)
 80068ba:	f04f 32ff 	mov.w	r2, #4294967295
 80068be:	f7fa f937 	bl	8000b30 <__aeabi_dcmple>
 80068c2:	bb48      	cbnz	r0, 8006918 <_printf_float+0xd0>
 80068c4:	2200      	movs	r2, #0
 80068c6:	2300      	movs	r3, #0
 80068c8:	4640      	mov	r0, r8
 80068ca:	4649      	mov	r1, r9
 80068cc:	f7fa f926 	bl	8000b1c <__aeabi_dcmplt>
 80068d0:	b110      	cbz	r0, 80068d8 <_printf_float+0x90>
 80068d2:	232d      	movs	r3, #45	; 0x2d
 80068d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d8:	4b93      	ldr	r3, [pc, #588]	; (8006b28 <_printf_float+0x2e0>)
 80068da:	4894      	ldr	r0, [pc, #592]	; (8006b2c <_printf_float+0x2e4>)
 80068dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068e0:	bf94      	ite	ls
 80068e2:	4698      	movls	r8, r3
 80068e4:	4680      	movhi	r8, r0
 80068e6:	2303      	movs	r3, #3
 80068e8:	6123      	str	r3, [r4, #16]
 80068ea:	9b05      	ldr	r3, [sp, #20]
 80068ec:	f023 0204 	bic.w	r2, r3, #4
 80068f0:	6022      	str	r2, [r4, #0]
 80068f2:	f04f 0900 	mov.w	r9, #0
 80068f6:	9700      	str	r7, [sp, #0]
 80068f8:	4633      	mov	r3, r6
 80068fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80068fc:	4621      	mov	r1, r4
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 f9d8 	bl	8006cb4 <_printf_common>
 8006904:	3001      	adds	r0, #1
 8006906:	f040 8090 	bne.w	8006a2a <_printf_float+0x1e2>
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	b00d      	add	sp, #52	; 0x34
 8006910:	ecbd 8b02 	vpop	{d8}
 8006914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	4640      	mov	r0, r8
 800691e:	4649      	mov	r1, r9
 8006920:	f7fa f924 	bl	8000b6c <__aeabi_dcmpun>
 8006924:	b140      	cbz	r0, 8006938 <_printf_float+0xf0>
 8006926:	464b      	mov	r3, r9
 8006928:	2b00      	cmp	r3, #0
 800692a:	bfbc      	itt	lt
 800692c:	232d      	movlt	r3, #45	; 0x2d
 800692e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006932:	487f      	ldr	r0, [pc, #508]	; (8006b30 <_printf_float+0x2e8>)
 8006934:	4b7f      	ldr	r3, [pc, #508]	; (8006b34 <_printf_float+0x2ec>)
 8006936:	e7d1      	b.n	80068dc <_printf_float+0x94>
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800693e:	9206      	str	r2, [sp, #24]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	d13f      	bne.n	80069c4 <_printf_float+0x17c>
 8006944:	2306      	movs	r3, #6
 8006946:	6063      	str	r3, [r4, #4]
 8006948:	9b05      	ldr	r3, [sp, #20]
 800694a:	6861      	ldr	r1, [r4, #4]
 800694c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006950:	2300      	movs	r3, #0
 8006952:	9303      	str	r3, [sp, #12]
 8006954:	ab0a      	add	r3, sp, #40	; 0x28
 8006956:	e9cd b301 	strd	fp, r3, [sp, #4]
 800695a:	ab09      	add	r3, sp, #36	; 0x24
 800695c:	ec49 8b10 	vmov	d0, r8, r9
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	6022      	str	r2, [r4, #0]
 8006964:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006968:	4628      	mov	r0, r5
 800696a:	f7ff fecd 	bl	8006708 <__cvt>
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006972:	2b47      	cmp	r3, #71	; 0x47
 8006974:	4680      	mov	r8, r0
 8006976:	d108      	bne.n	800698a <_printf_float+0x142>
 8006978:	1cc8      	adds	r0, r1, #3
 800697a:	db02      	blt.n	8006982 <_printf_float+0x13a>
 800697c:	6863      	ldr	r3, [r4, #4]
 800697e:	4299      	cmp	r1, r3
 8006980:	dd41      	ble.n	8006a06 <_printf_float+0x1be>
 8006982:	f1ab 0b02 	sub.w	fp, fp, #2
 8006986:	fa5f fb8b 	uxtb.w	fp, fp
 800698a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800698e:	d820      	bhi.n	80069d2 <_printf_float+0x18a>
 8006990:	3901      	subs	r1, #1
 8006992:	465a      	mov	r2, fp
 8006994:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006998:	9109      	str	r1, [sp, #36]	; 0x24
 800699a:	f7ff ff17 	bl	80067cc <__exponent>
 800699e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069a0:	1813      	adds	r3, r2, r0
 80069a2:	2a01      	cmp	r2, #1
 80069a4:	4681      	mov	r9, r0
 80069a6:	6123      	str	r3, [r4, #16]
 80069a8:	dc02      	bgt.n	80069b0 <_printf_float+0x168>
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	07d2      	lsls	r2, r2, #31
 80069ae:	d501      	bpl.n	80069b4 <_printf_float+0x16c>
 80069b0:	3301      	adds	r3, #1
 80069b2:	6123      	str	r3, [r4, #16]
 80069b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d09c      	beq.n	80068f6 <_printf_float+0xae>
 80069bc:	232d      	movs	r3, #45	; 0x2d
 80069be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c2:	e798      	b.n	80068f6 <_printf_float+0xae>
 80069c4:	9a06      	ldr	r2, [sp, #24]
 80069c6:	2a47      	cmp	r2, #71	; 0x47
 80069c8:	d1be      	bne.n	8006948 <_printf_float+0x100>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1bc      	bne.n	8006948 <_printf_float+0x100>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e7b9      	b.n	8006946 <_printf_float+0xfe>
 80069d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069d6:	d118      	bne.n	8006a0a <_printf_float+0x1c2>
 80069d8:	2900      	cmp	r1, #0
 80069da:	6863      	ldr	r3, [r4, #4]
 80069dc:	dd0b      	ble.n	80069f6 <_printf_float+0x1ae>
 80069de:	6121      	str	r1, [r4, #16]
 80069e0:	b913      	cbnz	r3, 80069e8 <_printf_float+0x1a0>
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	07d0      	lsls	r0, r2, #31
 80069e6:	d502      	bpl.n	80069ee <_printf_float+0x1a6>
 80069e8:	3301      	adds	r3, #1
 80069ea:	440b      	add	r3, r1
 80069ec:	6123      	str	r3, [r4, #16]
 80069ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80069f0:	f04f 0900 	mov.w	r9, #0
 80069f4:	e7de      	b.n	80069b4 <_printf_float+0x16c>
 80069f6:	b913      	cbnz	r3, 80069fe <_printf_float+0x1b6>
 80069f8:	6822      	ldr	r2, [r4, #0]
 80069fa:	07d2      	lsls	r2, r2, #31
 80069fc:	d501      	bpl.n	8006a02 <_printf_float+0x1ba>
 80069fe:	3302      	adds	r3, #2
 8006a00:	e7f4      	b.n	80069ec <_printf_float+0x1a4>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e7f2      	b.n	80069ec <_printf_float+0x1a4>
 8006a06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0c:	4299      	cmp	r1, r3
 8006a0e:	db05      	blt.n	8006a1c <_printf_float+0x1d4>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	6121      	str	r1, [r4, #16]
 8006a14:	07d8      	lsls	r0, r3, #31
 8006a16:	d5ea      	bpl.n	80069ee <_printf_float+0x1a6>
 8006a18:	1c4b      	adds	r3, r1, #1
 8006a1a:	e7e7      	b.n	80069ec <_printf_float+0x1a4>
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	bfd4      	ite	le
 8006a20:	f1c1 0202 	rsble	r2, r1, #2
 8006a24:	2201      	movgt	r2, #1
 8006a26:	4413      	add	r3, r2
 8006a28:	e7e0      	b.n	80069ec <_printf_float+0x1a4>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	055a      	lsls	r2, r3, #21
 8006a2e:	d407      	bmi.n	8006a40 <_printf_float+0x1f8>
 8006a30:	6923      	ldr	r3, [r4, #16]
 8006a32:	4642      	mov	r2, r8
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d12c      	bne.n	8006a98 <_printf_float+0x250>
 8006a3e:	e764      	b.n	800690a <_printf_float+0xc2>
 8006a40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a44:	f240 80e0 	bls.w	8006c08 <_printf_float+0x3c0>
 8006a48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f7fa f85a 	bl	8000b08 <__aeabi_dcmpeq>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d034      	beq.n	8006ac2 <_printf_float+0x27a>
 8006a58:	4a37      	ldr	r2, [pc, #220]	; (8006b38 <_printf_float+0x2f0>)
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4628      	mov	r0, r5
 8006a60:	47b8      	blx	r7
 8006a62:	3001      	adds	r0, #1
 8006a64:	f43f af51 	beq.w	800690a <_printf_float+0xc2>
 8006a68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	db02      	blt.n	8006a76 <_printf_float+0x22e>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	07d8      	lsls	r0, r3, #31
 8006a74:	d510      	bpl.n	8006a98 <_printf_float+0x250>
 8006a76:	ee18 3a10 	vmov	r3, s16
 8006a7a:	4652      	mov	r2, sl
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	f43f af41 	beq.w	800690a <_printf_float+0xc2>
 8006a88:	f04f 0800 	mov.w	r8, #0
 8006a8c:	f104 091a 	add.w	r9, r4, #26
 8006a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a92:	3b01      	subs	r3, #1
 8006a94:	4543      	cmp	r3, r8
 8006a96:	dc09      	bgt.n	8006aac <_printf_float+0x264>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	079b      	lsls	r3, r3, #30
 8006a9c:	f100 8105 	bmi.w	8006caa <_printf_float+0x462>
 8006aa0:	68e0      	ldr	r0, [r4, #12]
 8006aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aa4:	4298      	cmp	r0, r3
 8006aa6:	bfb8      	it	lt
 8006aa8:	4618      	movlt	r0, r3
 8006aaa:	e730      	b.n	800690e <_printf_float+0xc6>
 8006aac:	2301      	movs	r3, #1
 8006aae:	464a      	mov	r2, r9
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f af27 	beq.w	800690a <_printf_float+0xc2>
 8006abc:	f108 0801 	add.w	r8, r8, #1
 8006ac0:	e7e6      	b.n	8006a90 <_printf_float+0x248>
 8006ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	dc39      	bgt.n	8006b3c <_printf_float+0x2f4>
 8006ac8:	4a1b      	ldr	r2, [pc, #108]	; (8006b38 <_printf_float+0x2f0>)
 8006aca:	2301      	movs	r3, #1
 8006acc:	4631      	mov	r1, r6
 8006ace:	4628      	mov	r0, r5
 8006ad0:	47b8      	blx	r7
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	f43f af19 	beq.w	800690a <_printf_float+0xc2>
 8006ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006adc:	4313      	orrs	r3, r2
 8006ade:	d102      	bne.n	8006ae6 <_printf_float+0x29e>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	07d9      	lsls	r1, r3, #31
 8006ae4:	d5d8      	bpl.n	8006a98 <_printf_float+0x250>
 8006ae6:	ee18 3a10 	vmov	r3, s16
 8006aea:	4652      	mov	r2, sl
 8006aec:	4631      	mov	r1, r6
 8006aee:	4628      	mov	r0, r5
 8006af0:	47b8      	blx	r7
 8006af2:	3001      	adds	r0, #1
 8006af4:	f43f af09 	beq.w	800690a <_printf_float+0xc2>
 8006af8:	f04f 0900 	mov.w	r9, #0
 8006afc:	f104 0a1a 	add.w	sl, r4, #26
 8006b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b02:	425b      	negs	r3, r3
 8006b04:	454b      	cmp	r3, r9
 8006b06:	dc01      	bgt.n	8006b0c <_printf_float+0x2c4>
 8006b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0a:	e792      	b.n	8006a32 <_printf_float+0x1ea>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	4652      	mov	r2, sl
 8006b10:	4631      	mov	r1, r6
 8006b12:	4628      	mov	r0, r5
 8006b14:	47b8      	blx	r7
 8006b16:	3001      	adds	r0, #1
 8006b18:	f43f aef7 	beq.w	800690a <_printf_float+0xc2>
 8006b1c:	f109 0901 	add.w	r9, r9, #1
 8006b20:	e7ee      	b.n	8006b00 <_printf_float+0x2b8>
 8006b22:	bf00      	nop
 8006b24:	7fefffff 	.word	0x7fefffff
 8006b28:	0800b034 	.word	0x0800b034
 8006b2c:	0800b038 	.word	0x0800b038
 8006b30:	0800b040 	.word	0x0800b040
 8006b34:	0800b03c 	.word	0x0800b03c
 8006b38:	0800b044 	.word	0x0800b044
 8006b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b40:	429a      	cmp	r2, r3
 8006b42:	bfa8      	it	ge
 8006b44:	461a      	movge	r2, r3
 8006b46:	2a00      	cmp	r2, #0
 8006b48:	4691      	mov	r9, r2
 8006b4a:	dc37      	bgt.n	8006bbc <_printf_float+0x374>
 8006b4c:	f04f 0b00 	mov.w	fp, #0
 8006b50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b54:	f104 021a 	add.w	r2, r4, #26
 8006b58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b5a:	9305      	str	r3, [sp, #20]
 8006b5c:	eba3 0309 	sub.w	r3, r3, r9
 8006b60:	455b      	cmp	r3, fp
 8006b62:	dc33      	bgt.n	8006bcc <_printf_float+0x384>
 8006b64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	db3b      	blt.n	8006be4 <_printf_float+0x39c>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	07da      	lsls	r2, r3, #31
 8006b70:	d438      	bmi.n	8006be4 <_printf_float+0x39c>
 8006b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b74:	9a05      	ldr	r2, [sp, #20]
 8006b76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b78:	1a9a      	subs	r2, r3, r2
 8006b7a:	eba3 0901 	sub.w	r9, r3, r1
 8006b7e:	4591      	cmp	r9, r2
 8006b80:	bfa8      	it	ge
 8006b82:	4691      	movge	r9, r2
 8006b84:	f1b9 0f00 	cmp.w	r9, #0
 8006b88:	dc35      	bgt.n	8006bf6 <_printf_float+0x3ae>
 8006b8a:	f04f 0800 	mov.w	r8, #0
 8006b8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b92:	f104 0a1a 	add.w	sl, r4, #26
 8006b96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	eba3 0309 	sub.w	r3, r3, r9
 8006ba0:	4543      	cmp	r3, r8
 8006ba2:	f77f af79 	ble.w	8006a98 <_printf_float+0x250>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4652      	mov	r2, sl
 8006baa:	4631      	mov	r1, r6
 8006bac:	4628      	mov	r0, r5
 8006bae:	47b8      	blx	r7
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	f43f aeaa 	beq.w	800690a <_printf_float+0xc2>
 8006bb6:	f108 0801 	add.w	r8, r8, #1
 8006bba:	e7ec      	b.n	8006b96 <_printf_float+0x34e>
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	47b8      	blx	r7
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d1c0      	bne.n	8006b4c <_printf_float+0x304>
 8006bca:	e69e      	b.n	800690a <_printf_float+0xc2>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	9205      	str	r2, [sp, #20]
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	f43f ae97 	beq.w	800690a <_printf_float+0xc2>
 8006bdc:	9a05      	ldr	r2, [sp, #20]
 8006bde:	f10b 0b01 	add.w	fp, fp, #1
 8006be2:	e7b9      	b.n	8006b58 <_printf_float+0x310>
 8006be4:	ee18 3a10 	vmov	r3, s16
 8006be8:	4652      	mov	r2, sl
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d1be      	bne.n	8006b72 <_printf_float+0x32a>
 8006bf4:	e689      	b.n	800690a <_printf_float+0xc2>
 8006bf6:	9a05      	ldr	r2, [sp, #20]
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	4442      	add	r2, r8
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4628      	mov	r0, r5
 8006c00:	47b8      	blx	r7
 8006c02:	3001      	adds	r0, #1
 8006c04:	d1c1      	bne.n	8006b8a <_printf_float+0x342>
 8006c06:	e680      	b.n	800690a <_printf_float+0xc2>
 8006c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c0a:	2a01      	cmp	r2, #1
 8006c0c:	dc01      	bgt.n	8006c12 <_printf_float+0x3ca>
 8006c0e:	07db      	lsls	r3, r3, #31
 8006c10:	d538      	bpl.n	8006c84 <_printf_float+0x43c>
 8006c12:	2301      	movs	r3, #1
 8006c14:	4642      	mov	r2, r8
 8006c16:	4631      	mov	r1, r6
 8006c18:	4628      	mov	r0, r5
 8006c1a:	47b8      	blx	r7
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	f43f ae74 	beq.w	800690a <_printf_float+0xc2>
 8006c22:	ee18 3a10 	vmov	r3, s16
 8006c26:	4652      	mov	r2, sl
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b8      	blx	r7
 8006c2e:	3001      	adds	r0, #1
 8006c30:	f43f ae6b 	beq.w	800690a <_printf_float+0xc2>
 8006c34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f7f9 ff64 	bl	8000b08 <__aeabi_dcmpeq>
 8006c40:	b9d8      	cbnz	r0, 8006c7a <_printf_float+0x432>
 8006c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c44:	f108 0201 	add.w	r2, r8, #1
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	d10e      	bne.n	8006c72 <_printf_float+0x42a>
 8006c54:	e659      	b.n	800690a <_printf_float+0xc2>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4652      	mov	r2, sl
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	f43f ae52 	beq.w	800690a <_printf_float+0xc2>
 8006c66:	f108 0801 	add.w	r8, r8, #1
 8006c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	4543      	cmp	r3, r8
 8006c70:	dcf1      	bgt.n	8006c56 <_printf_float+0x40e>
 8006c72:	464b      	mov	r3, r9
 8006c74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c78:	e6dc      	b.n	8006a34 <_printf_float+0x1ec>
 8006c7a:	f04f 0800 	mov.w	r8, #0
 8006c7e:	f104 0a1a 	add.w	sl, r4, #26
 8006c82:	e7f2      	b.n	8006c6a <_printf_float+0x422>
 8006c84:	2301      	movs	r3, #1
 8006c86:	4642      	mov	r2, r8
 8006c88:	e7df      	b.n	8006c4a <_printf_float+0x402>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	464a      	mov	r2, r9
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b8      	blx	r7
 8006c94:	3001      	adds	r0, #1
 8006c96:	f43f ae38 	beq.w	800690a <_printf_float+0xc2>
 8006c9a:	f108 0801 	add.w	r8, r8, #1
 8006c9e:	68e3      	ldr	r3, [r4, #12]
 8006ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ca2:	1a5b      	subs	r3, r3, r1
 8006ca4:	4543      	cmp	r3, r8
 8006ca6:	dcf0      	bgt.n	8006c8a <_printf_float+0x442>
 8006ca8:	e6fa      	b.n	8006aa0 <_printf_float+0x258>
 8006caa:	f04f 0800 	mov.w	r8, #0
 8006cae:	f104 0919 	add.w	r9, r4, #25
 8006cb2:	e7f4      	b.n	8006c9e <_printf_float+0x456>

08006cb4 <_printf_common>:
 8006cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb8:	4616      	mov	r6, r2
 8006cba:	4699      	mov	r9, r3
 8006cbc:	688a      	ldr	r2, [r1, #8]
 8006cbe:	690b      	ldr	r3, [r1, #16]
 8006cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	bfb8      	it	lt
 8006cc8:	4613      	movlt	r3, r2
 8006cca:	6033      	str	r3, [r6, #0]
 8006ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	b10a      	cbz	r2, 8006cda <_printf_common+0x26>
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	0699      	lsls	r1, r3, #26
 8006cde:	bf42      	ittt	mi
 8006ce0:	6833      	ldrmi	r3, [r6, #0]
 8006ce2:	3302      	addmi	r3, #2
 8006ce4:	6033      	strmi	r3, [r6, #0]
 8006ce6:	6825      	ldr	r5, [r4, #0]
 8006ce8:	f015 0506 	ands.w	r5, r5, #6
 8006cec:	d106      	bne.n	8006cfc <_printf_common+0x48>
 8006cee:	f104 0a19 	add.w	sl, r4, #25
 8006cf2:	68e3      	ldr	r3, [r4, #12]
 8006cf4:	6832      	ldr	r2, [r6, #0]
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	42ab      	cmp	r3, r5
 8006cfa:	dc26      	bgt.n	8006d4a <_printf_common+0x96>
 8006cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d00:	1e13      	subs	r3, r2, #0
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	bf18      	it	ne
 8006d06:	2301      	movne	r3, #1
 8006d08:	0692      	lsls	r2, r2, #26
 8006d0a:	d42b      	bmi.n	8006d64 <_printf_common+0xb0>
 8006d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d10:	4649      	mov	r1, r9
 8006d12:	4638      	mov	r0, r7
 8006d14:	47c0      	blx	r8
 8006d16:	3001      	adds	r0, #1
 8006d18:	d01e      	beq.n	8006d58 <_printf_common+0xa4>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	68e5      	ldr	r5, [r4, #12]
 8006d1e:	6832      	ldr	r2, [r6, #0]
 8006d20:	f003 0306 	and.w	r3, r3, #6
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	bf08      	it	eq
 8006d28:	1aad      	subeq	r5, r5, r2
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	bf0c      	ite	eq
 8006d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d34:	2500      	movne	r5, #0
 8006d36:	4293      	cmp	r3, r2
 8006d38:	bfc4      	itt	gt
 8006d3a:	1a9b      	subgt	r3, r3, r2
 8006d3c:	18ed      	addgt	r5, r5, r3
 8006d3e:	2600      	movs	r6, #0
 8006d40:	341a      	adds	r4, #26
 8006d42:	42b5      	cmp	r5, r6
 8006d44:	d11a      	bne.n	8006d7c <_printf_common+0xc8>
 8006d46:	2000      	movs	r0, #0
 8006d48:	e008      	b.n	8006d5c <_printf_common+0xa8>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4652      	mov	r2, sl
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4638      	mov	r0, r7
 8006d52:	47c0      	blx	r8
 8006d54:	3001      	adds	r0, #1
 8006d56:	d103      	bne.n	8006d60 <_printf_common+0xac>
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d60:	3501      	adds	r5, #1
 8006d62:	e7c6      	b.n	8006cf2 <_printf_common+0x3e>
 8006d64:	18e1      	adds	r1, r4, r3
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	2030      	movs	r0, #48	; 0x30
 8006d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d6e:	4422      	add	r2, r4
 8006d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d78:	3302      	adds	r3, #2
 8006d7a:	e7c7      	b.n	8006d0c <_printf_common+0x58>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	4622      	mov	r2, r4
 8006d80:	4649      	mov	r1, r9
 8006d82:	4638      	mov	r0, r7
 8006d84:	47c0      	blx	r8
 8006d86:	3001      	adds	r0, #1
 8006d88:	d0e6      	beq.n	8006d58 <_printf_common+0xa4>
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	e7d9      	b.n	8006d42 <_printf_common+0x8e>
	...

08006d90 <_printf_i>:
 8006d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	7e0f      	ldrb	r7, [r1, #24]
 8006d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d98:	2f78      	cmp	r7, #120	; 0x78
 8006d9a:	4691      	mov	r9, r2
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	460c      	mov	r4, r1
 8006da0:	469a      	mov	sl, r3
 8006da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006da6:	d807      	bhi.n	8006db8 <_printf_i+0x28>
 8006da8:	2f62      	cmp	r7, #98	; 0x62
 8006daa:	d80a      	bhi.n	8006dc2 <_printf_i+0x32>
 8006dac:	2f00      	cmp	r7, #0
 8006dae:	f000 80d8 	beq.w	8006f62 <_printf_i+0x1d2>
 8006db2:	2f58      	cmp	r7, #88	; 0x58
 8006db4:	f000 80a3 	beq.w	8006efe <_printf_i+0x16e>
 8006db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dc0:	e03a      	b.n	8006e38 <_printf_i+0xa8>
 8006dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dc6:	2b15      	cmp	r3, #21
 8006dc8:	d8f6      	bhi.n	8006db8 <_printf_i+0x28>
 8006dca:	a101      	add	r1, pc, #4	; (adr r1, 8006dd0 <_printf_i+0x40>)
 8006dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dd0:	08006e29 	.word	0x08006e29
 8006dd4:	08006e3d 	.word	0x08006e3d
 8006dd8:	08006db9 	.word	0x08006db9
 8006ddc:	08006db9 	.word	0x08006db9
 8006de0:	08006db9 	.word	0x08006db9
 8006de4:	08006db9 	.word	0x08006db9
 8006de8:	08006e3d 	.word	0x08006e3d
 8006dec:	08006db9 	.word	0x08006db9
 8006df0:	08006db9 	.word	0x08006db9
 8006df4:	08006db9 	.word	0x08006db9
 8006df8:	08006db9 	.word	0x08006db9
 8006dfc:	08006f49 	.word	0x08006f49
 8006e00:	08006e6d 	.word	0x08006e6d
 8006e04:	08006f2b 	.word	0x08006f2b
 8006e08:	08006db9 	.word	0x08006db9
 8006e0c:	08006db9 	.word	0x08006db9
 8006e10:	08006f6b 	.word	0x08006f6b
 8006e14:	08006db9 	.word	0x08006db9
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006db9 	.word	0x08006db9
 8006e20:	08006db9 	.word	0x08006db9
 8006e24:	08006f33 	.word	0x08006f33
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	1d1a      	adds	r2, r3, #4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	602a      	str	r2, [r5, #0]
 8006e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0a3      	b.n	8006f84 <_printf_i+0x1f4>
 8006e3c:	6820      	ldr	r0, [r4, #0]
 8006e3e:	6829      	ldr	r1, [r5, #0]
 8006e40:	0606      	lsls	r6, r0, #24
 8006e42:	f101 0304 	add.w	r3, r1, #4
 8006e46:	d50a      	bpl.n	8006e5e <_printf_i+0xce>
 8006e48:	680e      	ldr	r6, [r1, #0]
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	2e00      	cmp	r6, #0
 8006e4e:	da03      	bge.n	8006e58 <_printf_i+0xc8>
 8006e50:	232d      	movs	r3, #45	; 0x2d
 8006e52:	4276      	negs	r6, r6
 8006e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e58:	485e      	ldr	r0, [pc, #376]	; (8006fd4 <_printf_i+0x244>)
 8006e5a:	230a      	movs	r3, #10
 8006e5c:	e019      	b.n	8006e92 <_printf_i+0x102>
 8006e5e:	680e      	ldr	r6, [r1, #0]
 8006e60:	602b      	str	r3, [r5, #0]
 8006e62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e66:	bf18      	it	ne
 8006e68:	b236      	sxthne	r6, r6
 8006e6a:	e7ef      	b.n	8006e4c <_printf_i+0xbc>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	6820      	ldr	r0, [r4, #0]
 8006e70:	1d19      	adds	r1, r3, #4
 8006e72:	6029      	str	r1, [r5, #0]
 8006e74:	0601      	lsls	r1, r0, #24
 8006e76:	d501      	bpl.n	8006e7c <_printf_i+0xec>
 8006e78:	681e      	ldr	r6, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <_printf_i+0xf2>
 8006e7c:	0646      	lsls	r6, r0, #25
 8006e7e:	d5fb      	bpl.n	8006e78 <_printf_i+0xe8>
 8006e80:	881e      	ldrh	r6, [r3, #0]
 8006e82:	4854      	ldr	r0, [pc, #336]	; (8006fd4 <_printf_i+0x244>)
 8006e84:	2f6f      	cmp	r7, #111	; 0x6f
 8006e86:	bf0c      	ite	eq
 8006e88:	2308      	moveq	r3, #8
 8006e8a:	230a      	movne	r3, #10
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e92:	6865      	ldr	r5, [r4, #4]
 8006e94:	60a5      	str	r5, [r4, #8]
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	bfa2      	ittt	ge
 8006e9a:	6821      	ldrge	r1, [r4, #0]
 8006e9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ea0:	6021      	strge	r1, [r4, #0]
 8006ea2:	b90e      	cbnz	r6, 8006ea8 <_printf_i+0x118>
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	d04d      	beq.n	8006f44 <_printf_i+0x1b4>
 8006ea8:	4615      	mov	r5, r2
 8006eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eae:	fb03 6711 	mls	r7, r3, r1, r6
 8006eb2:	5dc7      	ldrb	r7, [r0, r7]
 8006eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006eb8:	4637      	mov	r7, r6
 8006eba:	42bb      	cmp	r3, r7
 8006ebc:	460e      	mov	r6, r1
 8006ebe:	d9f4      	bls.n	8006eaa <_printf_i+0x11a>
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d10b      	bne.n	8006edc <_printf_i+0x14c>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07de      	lsls	r6, r3, #31
 8006ec8:	d508      	bpl.n	8006edc <_printf_i+0x14c>
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	bfde      	ittt	le
 8006ed2:	2330      	movle	r3, #48	; 0x30
 8006ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006edc:	1b52      	subs	r2, r2, r5
 8006ede:	6122      	str	r2, [r4, #16]
 8006ee0:	f8cd a000 	str.w	sl, [sp]
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	aa03      	add	r2, sp, #12
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7ff fee2 	bl	8006cb4 <_printf_common>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d14c      	bne.n	8006f8e <_printf_i+0x1fe>
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	b004      	add	sp, #16
 8006efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efe:	4835      	ldr	r0, [pc, #212]	; (8006fd4 <_printf_i+0x244>)
 8006f00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f04:	6829      	ldr	r1, [r5, #0]
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f0c:	6029      	str	r1, [r5, #0]
 8006f0e:	061d      	lsls	r5, r3, #24
 8006f10:	d514      	bpl.n	8006f3c <_printf_i+0x1ac>
 8006f12:	07df      	lsls	r7, r3, #31
 8006f14:	bf44      	itt	mi
 8006f16:	f043 0320 	orrmi.w	r3, r3, #32
 8006f1a:	6023      	strmi	r3, [r4, #0]
 8006f1c:	b91e      	cbnz	r6, 8006f26 <_printf_i+0x196>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	f023 0320 	bic.w	r3, r3, #32
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	2310      	movs	r3, #16
 8006f28:	e7b0      	b.n	8006e8c <_printf_i+0xfc>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	f043 0320 	orr.w	r3, r3, #32
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	2378      	movs	r3, #120	; 0x78
 8006f34:	4828      	ldr	r0, [pc, #160]	; (8006fd8 <_printf_i+0x248>)
 8006f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f3a:	e7e3      	b.n	8006f04 <_printf_i+0x174>
 8006f3c:	0659      	lsls	r1, r3, #25
 8006f3e:	bf48      	it	mi
 8006f40:	b2b6      	uxthmi	r6, r6
 8006f42:	e7e6      	b.n	8006f12 <_printf_i+0x182>
 8006f44:	4615      	mov	r5, r2
 8006f46:	e7bb      	b.n	8006ec0 <_printf_i+0x130>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	6826      	ldr	r6, [r4, #0]
 8006f4c:	6961      	ldr	r1, [r4, #20]
 8006f4e:	1d18      	adds	r0, r3, #4
 8006f50:	6028      	str	r0, [r5, #0]
 8006f52:	0635      	lsls	r5, r6, #24
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	d501      	bpl.n	8006f5c <_printf_i+0x1cc>
 8006f58:	6019      	str	r1, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <_printf_i+0x1d2>
 8006f5c:	0670      	lsls	r0, r6, #25
 8006f5e:	d5fb      	bpl.n	8006f58 <_printf_i+0x1c8>
 8006f60:	8019      	strh	r1, [r3, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	4615      	mov	r5, r2
 8006f68:	e7ba      	b.n	8006ee0 <_printf_i+0x150>
 8006f6a:	682b      	ldr	r3, [r5, #0]
 8006f6c:	1d1a      	adds	r2, r3, #4
 8006f6e:	602a      	str	r2, [r5, #0]
 8006f70:	681d      	ldr	r5, [r3, #0]
 8006f72:	6862      	ldr	r2, [r4, #4]
 8006f74:	2100      	movs	r1, #0
 8006f76:	4628      	mov	r0, r5
 8006f78:	f7f9 f952 	bl	8000220 <memchr>
 8006f7c:	b108      	cbz	r0, 8006f82 <_printf_i+0x1f2>
 8006f7e:	1b40      	subs	r0, r0, r5
 8006f80:	6060      	str	r0, [r4, #4]
 8006f82:	6863      	ldr	r3, [r4, #4]
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	2300      	movs	r3, #0
 8006f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8c:	e7a8      	b.n	8006ee0 <_printf_i+0x150>
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	462a      	mov	r2, r5
 8006f92:	4649      	mov	r1, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	47d0      	blx	sl
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d0ab      	beq.n	8006ef4 <_printf_i+0x164>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	079b      	lsls	r3, r3, #30
 8006fa0:	d413      	bmi.n	8006fca <_printf_i+0x23a>
 8006fa2:	68e0      	ldr	r0, [r4, #12]
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	4298      	cmp	r0, r3
 8006fa8:	bfb8      	it	lt
 8006faa:	4618      	movlt	r0, r3
 8006fac:	e7a4      	b.n	8006ef8 <_printf_i+0x168>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4632      	mov	r2, r6
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	47d0      	blx	sl
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d09b      	beq.n	8006ef4 <_printf_i+0x164>
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	9903      	ldr	r1, [sp, #12]
 8006fc2:	1a5b      	subs	r3, r3, r1
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dcf2      	bgt.n	8006fae <_printf_i+0x21e>
 8006fc8:	e7eb      	b.n	8006fa2 <_printf_i+0x212>
 8006fca:	2500      	movs	r5, #0
 8006fcc:	f104 0619 	add.w	r6, r4, #25
 8006fd0:	e7f5      	b.n	8006fbe <_printf_i+0x22e>
 8006fd2:	bf00      	nop
 8006fd4:	0800b046 	.word	0x0800b046
 8006fd8:	0800b057 	.word	0x0800b057

08006fdc <_scanf_float>:
 8006fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe0:	b087      	sub	sp, #28
 8006fe2:	4617      	mov	r7, r2
 8006fe4:	9303      	str	r3, [sp, #12]
 8006fe6:	688b      	ldr	r3, [r1, #8]
 8006fe8:	1e5a      	subs	r2, r3, #1
 8006fea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006fee:	bf83      	ittte	hi
 8006ff0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ff4:	195b      	addhi	r3, r3, r5
 8006ff6:	9302      	strhi	r3, [sp, #8]
 8006ff8:	2300      	movls	r3, #0
 8006ffa:	bf86      	itte	hi
 8006ffc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007000:	608b      	strhi	r3, [r1, #8]
 8007002:	9302      	strls	r3, [sp, #8]
 8007004:	680b      	ldr	r3, [r1, #0]
 8007006:	468b      	mov	fp, r1
 8007008:	2500      	movs	r5, #0
 800700a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800700e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007012:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007016:	4680      	mov	r8, r0
 8007018:	460c      	mov	r4, r1
 800701a:	465e      	mov	r6, fp
 800701c:	46aa      	mov	sl, r5
 800701e:	46a9      	mov	r9, r5
 8007020:	9501      	str	r5, [sp, #4]
 8007022:	68a2      	ldr	r2, [r4, #8]
 8007024:	b152      	cbz	r2, 800703c <_scanf_float+0x60>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b4e      	cmp	r3, #78	; 0x4e
 800702c:	d864      	bhi.n	80070f8 <_scanf_float+0x11c>
 800702e:	2b40      	cmp	r3, #64	; 0x40
 8007030:	d83c      	bhi.n	80070ac <_scanf_float+0xd0>
 8007032:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007036:	b2c8      	uxtb	r0, r1
 8007038:	280e      	cmp	r0, #14
 800703a:	d93a      	bls.n	80070b2 <_scanf_float+0xd6>
 800703c:	f1b9 0f00 	cmp.w	r9, #0
 8007040:	d003      	beq.n	800704a <_scanf_float+0x6e>
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800704e:	f1ba 0f01 	cmp.w	sl, #1
 8007052:	f200 8113 	bhi.w	800727c <_scanf_float+0x2a0>
 8007056:	455e      	cmp	r6, fp
 8007058:	f200 8105 	bhi.w	8007266 <_scanf_float+0x28a>
 800705c:	2501      	movs	r5, #1
 800705e:	4628      	mov	r0, r5
 8007060:	b007      	add	sp, #28
 8007062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007066:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800706a:	2a0d      	cmp	r2, #13
 800706c:	d8e6      	bhi.n	800703c <_scanf_float+0x60>
 800706e:	a101      	add	r1, pc, #4	; (adr r1, 8007074 <_scanf_float+0x98>)
 8007070:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007074:	080071b3 	.word	0x080071b3
 8007078:	0800703d 	.word	0x0800703d
 800707c:	0800703d 	.word	0x0800703d
 8007080:	0800703d 	.word	0x0800703d
 8007084:	08007213 	.word	0x08007213
 8007088:	080071eb 	.word	0x080071eb
 800708c:	0800703d 	.word	0x0800703d
 8007090:	0800703d 	.word	0x0800703d
 8007094:	080071c1 	.word	0x080071c1
 8007098:	0800703d 	.word	0x0800703d
 800709c:	0800703d 	.word	0x0800703d
 80070a0:	0800703d 	.word	0x0800703d
 80070a4:	0800703d 	.word	0x0800703d
 80070a8:	08007179 	.word	0x08007179
 80070ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80070b0:	e7db      	b.n	800706a <_scanf_float+0x8e>
 80070b2:	290e      	cmp	r1, #14
 80070b4:	d8c2      	bhi.n	800703c <_scanf_float+0x60>
 80070b6:	a001      	add	r0, pc, #4	; (adr r0, 80070bc <_scanf_float+0xe0>)
 80070b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070bc:	0800716b 	.word	0x0800716b
 80070c0:	0800703d 	.word	0x0800703d
 80070c4:	0800716b 	.word	0x0800716b
 80070c8:	080071ff 	.word	0x080071ff
 80070cc:	0800703d 	.word	0x0800703d
 80070d0:	08007119 	.word	0x08007119
 80070d4:	08007155 	.word	0x08007155
 80070d8:	08007155 	.word	0x08007155
 80070dc:	08007155 	.word	0x08007155
 80070e0:	08007155 	.word	0x08007155
 80070e4:	08007155 	.word	0x08007155
 80070e8:	08007155 	.word	0x08007155
 80070ec:	08007155 	.word	0x08007155
 80070f0:	08007155 	.word	0x08007155
 80070f4:	08007155 	.word	0x08007155
 80070f8:	2b6e      	cmp	r3, #110	; 0x6e
 80070fa:	d809      	bhi.n	8007110 <_scanf_float+0x134>
 80070fc:	2b60      	cmp	r3, #96	; 0x60
 80070fe:	d8b2      	bhi.n	8007066 <_scanf_float+0x8a>
 8007100:	2b54      	cmp	r3, #84	; 0x54
 8007102:	d077      	beq.n	80071f4 <_scanf_float+0x218>
 8007104:	2b59      	cmp	r3, #89	; 0x59
 8007106:	d199      	bne.n	800703c <_scanf_float+0x60>
 8007108:	2d07      	cmp	r5, #7
 800710a:	d197      	bne.n	800703c <_scanf_float+0x60>
 800710c:	2508      	movs	r5, #8
 800710e:	e029      	b.n	8007164 <_scanf_float+0x188>
 8007110:	2b74      	cmp	r3, #116	; 0x74
 8007112:	d06f      	beq.n	80071f4 <_scanf_float+0x218>
 8007114:	2b79      	cmp	r3, #121	; 0x79
 8007116:	e7f6      	b.n	8007106 <_scanf_float+0x12a>
 8007118:	6821      	ldr	r1, [r4, #0]
 800711a:	05c8      	lsls	r0, r1, #23
 800711c:	d51a      	bpl.n	8007154 <_scanf_float+0x178>
 800711e:	9b02      	ldr	r3, [sp, #8]
 8007120:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007124:	6021      	str	r1, [r4, #0]
 8007126:	f109 0901 	add.w	r9, r9, #1
 800712a:	b11b      	cbz	r3, 8007134 <_scanf_float+0x158>
 800712c:	3b01      	subs	r3, #1
 800712e:	3201      	adds	r2, #1
 8007130:	9302      	str	r3, [sp, #8]
 8007132:	60a2      	str	r2, [r4, #8]
 8007134:	68a3      	ldr	r3, [r4, #8]
 8007136:	3b01      	subs	r3, #1
 8007138:	60a3      	str	r3, [r4, #8]
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	3301      	adds	r3, #1
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3b01      	subs	r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	f340 8084 	ble.w	8007254 <_scanf_float+0x278>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	3301      	adds	r3, #1
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	e766      	b.n	8007022 <_scanf_float+0x46>
 8007154:	eb1a 0f05 	cmn.w	sl, r5
 8007158:	f47f af70 	bne.w	800703c <_scanf_float+0x60>
 800715c:	6822      	ldr	r2, [r4, #0]
 800715e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007162:	6022      	str	r2, [r4, #0]
 8007164:	f806 3b01 	strb.w	r3, [r6], #1
 8007168:	e7e4      	b.n	8007134 <_scanf_float+0x158>
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	0610      	lsls	r0, r2, #24
 800716e:	f57f af65 	bpl.w	800703c <_scanf_float+0x60>
 8007172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007176:	e7f4      	b.n	8007162 <_scanf_float+0x186>
 8007178:	f1ba 0f00 	cmp.w	sl, #0
 800717c:	d10e      	bne.n	800719c <_scanf_float+0x1c0>
 800717e:	f1b9 0f00 	cmp.w	r9, #0
 8007182:	d10e      	bne.n	80071a2 <_scanf_float+0x1c6>
 8007184:	6822      	ldr	r2, [r4, #0]
 8007186:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800718a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800718e:	d108      	bne.n	80071a2 <_scanf_float+0x1c6>
 8007190:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007194:	6022      	str	r2, [r4, #0]
 8007196:	f04f 0a01 	mov.w	sl, #1
 800719a:	e7e3      	b.n	8007164 <_scanf_float+0x188>
 800719c:	f1ba 0f02 	cmp.w	sl, #2
 80071a0:	d055      	beq.n	800724e <_scanf_float+0x272>
 80071a2:	2d01      	cmp	r5, #1
 80071a4:	d002      	beq.n	80071ac <_scanf_float+0x1d0>
 80071a6:	2d04      	cmp	r5, #4
 80071a8:	f47f af48 	bne.w	800703c <_scanf_float+0x60>
 80071ac:	3501      	adds	r5, #1
 80071ae:	b2ed      	uxtb	r5, r5
 80071b0:	e7d8      	b.n	8007164 <_scanf_float+0x188>
 80071b2:	f1ba 0f01 	cmp.w	sl, #1
 80071b6:	f47f af41 	bne.w	800703c <_scanf_float+0x60>
 80071ba:	f04f 0a02 	mov.w	sl, #2
 80071be:	e7d1      	b.n	8007164 <_scanf_float+0x188>
 80071c0:	b97d      	cbnz	r5, 80071e2 <_scanf_float+0x206>
 80071c2:	f1b9 0f00 	cmp.w	r9, #0
 80071c6:	f47f af3c 	bne.w	8007042 <_scanf_float+0x66>
 80071ca:	6822      	ldr	r2, [r4, #0]
 80071cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071d4:	f47f af39 	bne.w	800704a <_scanf_float+0x6e>
 80071d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071dc:	6022      	str	r2, [r4, #0]
 80071de:	2501      	movs	r5, #1
 80071e0:	e7c0      	b.n	8007164 <_scanf_float+0x188>
 80071e2:	2d03      	cmp	r5, #3
 80071e4:	d0e2      	beq.n	80071ac <_scanf_float+0x1d0>
 80071e6:	2d05      	cmp	r5, #5
 80071e8:	e7de      	b.n	80071a8 <_scanf_float+0x1cc>
 80071ea:	2d02      	cmp	r5, #2
 80071ec:	f47f af26 	bne.w	800703c <_scanf_float+0x60>
 80071f0:	2503      	movs	r5, #3
 80071f2:	e7b7      	b.n	8007164 <_scanf_float+0x188>
 80071f4:	2d06      	cmp	r5, #6
 80071f6:	f47f af21 	bne.w	800703c <_scanf_float+0x60>
 80071fa:	2507      	movs	r5, #7
 80071fc:	e7b2      	b.n	8007164 <_scanf_float+0x188>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	0591      	lsls	r1, r2, #22
 8007202:	f57f af1b 	bpl.w	800703c <_scanf_float+0x60>
 8007206:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800720a:	6022      	str	r2, [r4, #0]
 800720c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007210:	e7a8      	b.n	8007164 <_scanf_float+0x188>
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007218:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800721c:	d006      	beq.n	800722c <_scanf_float+0x250>
 800721e:	0550      	lsls	r0, r2, #21
 8007220:	f57f af0c 	bpl.w	800703c <_scanf_float+0x60>
 8007224:	f1b9 0f00 	cmp.w	r9, #0
 8007228:	f43f af0f 	beq.w	800704a <_scanf_float+0x6e>
 800722c:	0591      	lsls	r1, r2, #22
 800722e:	bf58      	it	pl
 8007230:	9901      	ldrpl	r1, [sp, #4]
 8007232:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007236:	bf58      	it	pl
 8007238:	eba9 0101 	subpl.w	r1, r9, r1
 800723c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007240:	bf58      	it	pl
 8007242:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007246:	6022      	str	r2, [r4, #0]
 8007248:	f04f 0900 	mov.w	r9, #0
 800724c:	e78a      	b.n	8007164 <_scanf_float+0x188>
 800724e:	f04f 0a03 	mov.w	sl, #3
 8007252:	e787      	b.n	8007164 <_scanf_float+0x188>
 8007254:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007258:	4639      	mov	r1, r7
 800725a:	4640      	mov	r0, r8
 800725c:	4798      	blx	r3
 800725e:	2800      	cmp	r0, #0
 8007260:	f43f aedf 	beq.w	8007022 <_scanf_float+0x46>
 8007264:	e6ea      	b.n	800703c <_scanf_float+0x60>
 8007266:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800726a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800726e:	463a      	mov	r2, r7
 8007270:	4640      	mov	r0, r8
 8007272:	4798      	blx	r3
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	3b01      	subs	r3, #1
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	e6ec      	b.n	8007056 <_scanf_float+0x7a>
 800727c:	1e6b      	subs	r3, r5, #1
 800727e:	2b06      	cmp	r3, #6
 8007280:	d825      	bhi.n	80072ce <_scanf_float+0x2f2>
 8007282:	2d02      	cmp	r5, #2
 8007284:	d836      	bhi.n	80072f4 <_scanf_float+0x318>
 8007286:	455e      	cmp	r6, fp
 8007288:	f67f aee8 	bls.w	800705c <_scanf_float+0x80>
 800728c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007290:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007294:	463a      	mov	r2, r7
 8007296:	4640      	mov	r0, r8
 8007298:	4798      	blx	r3
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	3b01      	subs	r3, #1
 800729e:	6123      	str	r3, [r4, #16]
 80072a0:	e7f1      	b.n	8007286 <_scanf_float+0x2aa>
 80072a2:	9802      	ldr	r0, [sp, #8]
 80072a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80072ac:	9002      	str	r0, [sp, #8]
 80072ae:	463a      	mov	r2, r7
 80072b0:	4640      	mov	r0, r8
 80072b2:	4798      	blx	r3
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	6123      	str	r3, [r4, #16]
 80072ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072be:	fa5f fa8a 	uxtb.w	sl, sl
 80072c2:	f1ba 0f02 	cmp.w	sl, #2
 80072c6:	d1ec      	bne.n	80072a2 <_scanf_float+0x2c6>
 80072c8:	3d03      	subs	r5, #3
 80072ca:	b2ed      	uxtb	r5, r5
 80072cc:	1b76      	subs	r6, r6, r5
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	05da      	lsls	r2, r3, #23
 80072d2:	d52f      	bpl.n	8007334 <_scanf_float+0x358>
 80072d4:	055b      	lsls	r3, r3, #21
 80072d6:	d510      	bpl.n	80072fa <_scanf_float+0x31e>
 80072d8:	455e      	cmp	r6, fp
 80072da:	f67f aebf 	bls.w	800705c <_scanf_float+0x80>
 80072de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072e6:	463a      	mov	r2, r7
 80072e8:	4640      	mov	r0, r8
 80072ea:	4798      	blx	r3
 80072ec:	6923      	ldr	r3, [r4, #16]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	6123      	str	r3, [r4, #16]
 80072f2:	e7f1      	b.n	80072d8 <_scanf_float+0x2fc>
 80072f4:	46aa      	mov	sl, r5
 80072f6:	9602      	str	r6, [sp, #8]
 80072f8:	e7df      	b.n	80072ba <_scanf_float+0x2de>
 80072fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	2965      	cmp	r1, #101	; 0x65
 8007302:	f103 33ff 	add.w	r3, r3, #4294967295
 8007306:	f106 35ff 	add.w	r5, r6, #4294967295
 800730a:	6123      	str	r3, [r4, #16]
 800730c:	d00c      	beq.n	8007328 <_scanf_float+0x34c>
 800730e:	2945      	cmp	r1, #69	; 0x45
 8007310:	d00a      	beq.n	8007328 <_scanf_float+0x34c>
 8007312:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007316:	463a      	mov	r2, r7
 8007318:	4640      	mov	r0, r8
 800731a:	4798      	blx	r3
 800731c:	6923      	ldr	r3, [r4, #16]
 800731e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007322:	3b01      	subs	r3, #1
 8007324:	1eb5      	subs	r5, r6, #2
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800732c:	463a      	mov	r2, r7
 800732e:	4640      	mov	r0, r8
 8007330:	4798      	blx	r3
 8007332:	462e      	mov	r6, r5
 8007334:	6825      	ldr	r5, [r4, #0]
 8007336:	f015 0510 	ands.w	r5, r5, #16
 800733a:	d159      	bne.n	80073f0 <_scanf_float+0x414>
 800733c:	7035      	strb	r5, [r6, #0]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007348:	d11b      	bne.n	8007382 <_scanf_float+0x3a6>
 800734a:	9b01      	ldr	r3, [sp, #4]
 800734c:	454b      	cmp	r3, r9
 800734e:	eba3 0209 	sub.w	r2, r3, r9
 8007352:	d123      	bne.n	800739c <_scanf_float+0x3c0>
 8007354:	2200      	movs	r2, #0
 8007356:	4659      	mov	r1, fp
 8007358:	4640      	mov	r0, r8
 800735a:	f000 fe97 	bl	800808c <_strtod_r>
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	f012 0f02 	tst.w	r2, #2
 8007366:	ec57 6b10 	vmov	r6, r7, d0
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	d021      	beq.n	80073b2 <_scanf_float+0x3d6>
 800736e:	9903      	ldr	r1, [sp, #12]
 8007370:	1d1a      	adds	r2, r3, #4
 8007372:	600a      	str	r2, [r1, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	e9c3 6700 	strd	r6, r7, [r3]
 800737a:	68e3      	ldr	r3, [r4, #12]
 800737c:	3301      	adds	r3, #1
 800737e:	60e3      	str	r3, [r4, #12]
 8007380:	e66d      	b.n	800705e <_scanf_float+0x82>
 8007382:	9b04      	ldr	r3, [sp, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0e5      	beq.n	8007354 <_scanf_float+0x378>
 8007388:	9905      	ldr	r1, [sp, #20]
 800738a:	230a      	movs	r3, #10
 800738c:	462a      	mov	r2, r5
 800738e:	3101      	adds	r1, #1
 8007390:	4640      	mov	r0, r8
 8007392:	f000 ff03 	bl	800819c <_strtol_r>
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	9e05      	ldr	r6, [sp, #20]
 800739a:	1ac2      	subs	r2, r0, r3
 800739c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80073a0:	429e      	cmp	r6, r3
 80073a2:	bf28      	it	cs
 80073a4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80073a8:	4912      	ldr	r1, [pc, #72]	; (80073f4 <_scanf_float+0x418>)
 80073aa:	4630      	mov	r0, r6
 80073ac:	f000 f82c 	bl	8007408 <siprintf>
 80073b0:	e7d0      	b.n	8007354 <_scanf_float+0x378>
 80073b2:	9903      	ldr	r1, [sp, #12]
 80073b4:	f012 0f04 	tst.w	r2, #4
 80073b8:	f103 0204 	add.w	r2, r3, #4
 80073bc:	600a      	str	r2, [r1, #0]
 80073be:	d1d9      	bne.n	8007374 <_scanf_float+0x398>
 80073c0:	f8d3 8000 	ldr.w	r8, [r3]
 80073c4:	ee10 2a10 	vmov	r2, s0
 80073c8:	ee10 0a10 	vmov	r0, s0
 80073cc:	463b      	mov	r3, r7
 80073ce:	4639      	mov	r1, r7
 80073d0:	f7f9 fbcc 	bl	8000b6c <__aeabi_dcmpun>
 80073d4:	b128      	cbz	r0, 80073e2 <_scanf_float+0x406>
 80073d6:	4808      	ldr	r0, [pc, #32]	; (80073f8 <_scanf_float+0x41c>)
 80073d8:	f000 f810 	bl	80073fc <nanf>
 80073dc:	ed88 0a00 	vstr	s0, [r8]
 80073e0:	e7cb      	b.n	800737a <_scanf_float+0x39e>
 80073e2:	4630      	mov	r0, r6
 80073e4:	4639      	mov	r1, r7
 80073e6:	f7f9 fc1f 	bl	8000c28 <__aeabi_d2f>
 80073ea:	f8c8 0000 	str.w	r0, [r8]
 80073ee:	e7c4      	b.n	800737a <_scanf_float+0x39e>
 80073f0:	2500      	movs	r5, #0
 80073f2:	e634      	b.n	800705e <_scanf_float+0x82>
 80073f4:	0800b068 	.word	0x0800b068
 80073f8:	0800b470 	.word	0x0800b470

080073fc <nanf>:
 80073fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007404 <nanf+0x8>
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	7fc00000 	.word	0x7fc00000

08007408 <siprintf>:
 8007408:	b40e      	push	{r1, r2, r3}
 800740a:	b500      	push	{lr}
 800740c:	b09c      	sub	sp, #112	; 0x70
 800740e:	ab1d      	add	r3, sp, #116	; 0x74
 8007410:	9002      	str	r0, [sp, #8]
 8007412:	9006      	str	r0, [sp, #24]
 8007414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007418:	4809      	ldr	r0, [pc, #36]	; (8007440 <siprintf+0x38>)
 800741a:	9107      	str	r1, [sp, #28]
 800741c:	9104      	str	r1, [sp, #16]
 800741e:	4909      	ldr	r1, [pc, #36]	; (8007444 <siprintf+0x3c>)
 8007420:	f853 2b04 	ldr.w	r2, [r3], #4
 8007424:	9105      	str	r1, [sp, #20]
 8007426:	6800      	ldr	r0, [r0, #0]
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	a902      	add	r1, sp, #8
 800742c:	f002 fee2 	bl	800a1f4 <_svfiprintf_r>
 8007430:	9b02      	ldr	r3, [sp, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	b01c      	add	sp, #112	; 0x70
 8007438:	f85d eb04 	ldr.w	lr, [sp], #4
 800743c:	b003      	add	sp, #12
 800743e:	4770      	bx	lr
 8007440:	20000010 	.word	0x20000010
 8007444:	ffff0208 	.word	0xffff0208

08007448 <sulp>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	4604      	mov	r4, r0
 800744c:	460d      	mov	r5, r1
 800744e:	ec45 4b10 	vmov	d0, r4, r5
 8007452:	4616      	mov	r6, r2
 8007454:	f002 fc2c 	bl	8009cb0 <__ulp>
 8007458:	ec51 0b10 	vmov	r0, r1, d0
 800745c:	b17e      	cbz	r6, 800747e <sulp+0x36>
 800745e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007462:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007466:	2b00      	cmp	r3, #0
 8007468:	dd09      	ble.n	800747e <sulp+0x36>
 800746a:	051b      	lsls	r3, r3, #20
 800746c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007470:	2400      	movs	r4, #0
 8007472:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007476:	4622      	mov	r2, r4
 8007478:	462b      	mov	r3, r5
 800747a:	f7f9 f8dd 	bl	8000638 <__aeabi_dmul>
 800747e:	bd70      	pop	{r4, r5, r6, pc}

08007480 <_strtod_l>:
 8007480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	ed2d 8b02 	vpush	{d8}
 8007488:	b09d      	sub	sp, #116	; 0x74
 800748a:	461f      	mov	r7, r3
 800748c:	2300      	movs	r3, #0
 800748e:	9318      	str	r3, [sp, #96]	; 0x60
 8007490:	4ba2      	ldr	r3, [pc, #648]	; (800771c <_strtod_l+0x29c>)
 8007492:	9213      	str	r2, [sp, #76]	; 0x4c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	9305      	str	r3, [sp, #20]
 8007498:	4604      	mov	r4, r0
 800749a:	4618      	mov	r0, r3
 800749c:	4688      	mov	r8, r1
 800749e:	f7f8 feb7 	bl	8000210 <strlen>
 80074a2:	f04f 0a00 	mov.w	sl, #0
 80074a6:	4605      	mov	r5, r0
 80074a8:	f04f 0b00 	mov.w	fp, #0
 80074ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80074b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b2:	781a      	ldrb	r2, [r3, #0]
 80074b4:	2a2b      	cmp	r2, #43	; 0x2b
 80074b6:	d04e      	beq.n	8007556 <_strtod_l+0xd6>
 80074b8:	d83b      	bhi.n	8007532 <_strtod_l+0xb2>
 80074ba:	2a0d      	cmp	r2, #13
 80074bc:	d834      	bhi.n	8007528 <_strtod_l+0xa8>
 80074be:	2a08      	cmp	r2, #8
 80074c0:	d834      	bhi.n	800752c <_strtod_l+0xac>
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d03e      	beq.n	8007544 <_strtod_l+0xc4>
 80074c6:	2300      	movs	r3, #0
 80074c8:	930a      	str	r3, [sp, #40]	; 0x28
 80074ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80074cc:	7833      	ldrb	r3, [r6, #0]
 80074ce:	2b30      	cmp	r3, #48	; 0x30
 80074d0:	f040 80b0 	bne.w	8007634 <_strtod_l+0x1b4>
 80074d4:	7873      	ldrb	r3, [r6, #1]
 80074d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074da:	2b58      	cmp	r3, #88	; 0x58
 80074dc:	d168      	bne.n	80075b0 <_strtod_l+0x130>
 80074de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	ab18      	add	r3, sp, #96	; 0x60
 80074e4:	9702      	str	r7, [sp, #8]
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	4a8d      	ldr	r2, [pc, #564]	; (8007720 <_strtod_l+0x2a0>)
 80074ea:	ab19      	add	r3, sp, #100	; 0x64
 80074ec:	a917      	add	r1, sp, #92	; 0x5c
 80074ee:	4620      	mov	r0, r4
 80074f0:	f001 fd38 	bl	8008f64 <__gethex>
 80074f4:	f010 0707 	ands.w	r7, r0, #7
 80074f8:	4605      	mov	r5, r0
 80074fa:	d005      	beq.n	8007508 <_strtod_l+0x88>
 80074fc:	2f06      	cmp	r7, #6
 80074fe:	d12c      	bne.n	800755a <_strtod_l+0xda>
 8007500:	3601      	adds	r6, #1
 8007502:	2300      	movs	r3, #0
 8007504:	9617      	str	r6, [sp, #92]	; 0x5c
 8007506:	930a      	str	r3, [sp, #40]	; 0x28
 8007508:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 8590 	bne.w	8008030 <_strtod_l+0xbb0>
 8007510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007512:	b1eb      	cbz	r3, 8007550 <_strtod_l+0xd0>
 8007514:	4652      	mov	r2, sl
 8007516:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800751a:	ec43 2b10 	vmov	d0, r2, r3
 800751e:	b01d      	add	sp, #116	; 0x74
 8007520:	ecbd 8b02 	vpop	{d8}
 8007524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007528:	2a20      	cmp	r2, #32
 800752a:	d1cc      	bne.n	80074c6 <_strtod_l+0x46>
 800752c:	3301      	adds	r3, #1
 800752e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007530:	e7be      	b.n	80074b0 <_strtod_l+0x30>
 8007532:	2a2d      	cmp	r2, #45	; 0x2d
 8007534:	d1c7      	bne.n	80074c6 <_strtod_l+0x46>
 8007536:	2201      	movs	r2, #1
 8007538:	920a      	str	r2, [sp, #40]	; 0x28
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	9217      	str	r2, [sp, #92]	; 0x5c
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1c2      	bne.n	80074ca <_strtod_l+0x4a>
 8007544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007546:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800754a:	2b00      	cmp	r3, #0
 800754c:	f040 856e 	bne.w	800802c <_strtod_l+0xbac>
 8007550:	4652      	mov	r2, sl
 8007552:	465b      	mov	r3, fp
 8007554:	e7e1      	b.n	800751a <_strtod_l+0x9a>
 8007556:	2200      	movs	r2, #0
 8007558:	e7ee      	b.n	8007538 <_strtod_l+0xb8>
 800755a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800755c:	b13a      	cbz	r2, 800756e <_strtod_l+0xee>
 800755e:	2135      	movs	r1, #53	; 0x35
 8007560:	a81a      	add	r0, sp, #104	; 0x68
 8007562:	f002 fcb0 	bl	8009ec6 <__copybits>
 8007566:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007568:	4620      	mov	r0, r4
 800756a:	f002 f86f 	bl	800964c <_Bfree>
 800756e:	3f01      	subs	r7, #1
 8007570:	2f04      	cmp	r7, #4
 8007572:	d806      	bhi.n	8007582 <_strtod_l+0x102>
 8007574:	e8df f007 	tbb	[pc, r7]
 8007578:	1714030a 	.word	0x1714030a
 800757c:	0a          	.byte	0x0a
 800757d:	00          	.byte	0x00
 800757e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007582:	0728      	lsls	r0, r5, #28
 8007584:	d5c0      	bpl.n	8007508 <_strtod_l+0x88>
 8007586:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800758a:	e7bd      	b.n	8007508 <_strtod_l+0x88>
 800758c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007590:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007592:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007596:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800759a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800759e:	e7f0      	b.n	8007582 <_strtod_l+0x102>
 80075a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007724 <_strtod_l+0x2a4>
 80075a4:	e7ed      	b.n	8007582 <_strtod_l+0x102>
 80075a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80075aa:	f04f 3aff 	mov.w	sl, #4294967295
 80075ae:	e7e8      	b.n	8007582 <_strtod_l+0x102>
 80075b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d0f9      	beq.n	80075b0 <_strtod_l+0x130>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0a3      	beq.n	8007508 <_strtod_l+0x88>
 80075c0:	2301      	movs	r3, #1
 80075c2:	f04f 0900 	mov.w	r9, #0
 80075c6:	9304      	str	r3, [sp, #16]
 80075c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075ca:	9308      	str	r3, [sp, #32]
 80075cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80075d0:	464f      	mov	r7, r9
 80075d2:	220a      	movs	r2, #10
 80075d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80075d6:	7806      	ldrb	r6, [r0, #0]
 80075d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80075dc:	b2d9      	uxtb	r1, r3
 80075de:	2909      	cmp	r1, #9
 80075e0:	d92a      	bls.n	8007638 <_strtod_l+0x1b8>
 80075e2:	9905      	ldr	r1, [sp, #20]
 80075e4:	462a      	mov	r2, r5
 80075e6:	f002 ff1f 	bl	800a428 <strncmp>
 80075ea:	b398      	cbz	r0, 8007654 <_strtod_l+0x1d4>
 80075ec:	2000      	movs	r0, #0
 80075ee:	4632      	mov	r2, r6
 80075f0:	463d      	mov	r5, r7
 80075f2:	9005      	str	r0, [sp, #20]
 80075f4:	4603      	mov	r3, r0
 80075f6:	2a65      	cmp	r2, #101	; 0x65
 80075f8:	d001      	beq.n	80075fe <_strtod_l+0x17e>
 80075fa:	2a45      	cmp	r2, #69	; 0x45
 80075fc:	d118      	bne.n	8007630 <_strtod_l+0x1b0>
 80075fe:	b91d      	cbnz	r5, 8007608 <_strtod_l+0x188>
 8007600:	9a04      	ldr	r2, [sp, #16]
 8007602:	4302      	orrs	r2, r0
 8007604:	d09e      	beq.n	8007544 <_strtod_l+0xc4>
 8007606:	2500      	movs	r5, #0
 8007608:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800760c:	f108 0201 	add.w	r2, r8, #1
 8007610:	9217      	str	r2, [sp, #92]	; 0x5c
 8007612:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007616:	2a2b      	cmp	r2, #43	; 0x2b
 8007618:	d075      	beq.n	8007706 <_strtod_l+0x286>
 800761a:	2a2d      	cmp	r2, #45	; 0x2d
 800761c:	d07b      	beq.n	8007716 <_strtod_l+0x296>
 800761e:	f04f 0c00 	mov.w	ip, #0
 8007622:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007626:	2909      	cmp	r1, #9
 8007628:	f240 8082 	bls.w	8007730 <_strtod_l+0x2b0>
 800762c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007630:	2600      	movs	r6, #0
 8007632:	e09d      	b.n	8007770 <_strtod_l+0x2f0>
 8007634:	2300      	movs	r3, #0
 8007636:	e7c4      	b.n	80075c2 <_strtod_l+0x142>
 8007638:	2f08      	cmp	r7, #8
 800763a:	bfd8      	it	le
 800763c:	9907      	ldrle	r1, [sp, #28]
 800763e:	f100 0001 	add.w	r0, r0, #1
 8007642:	bfda      	itte	le
 8007644:	fb02 3301 	mlale	r3, r2, r1, r3
 8007648:	9307      	strle	r3, [sp, #28]
 800764a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800764e:	3701      	adds	r7, #1
 8007650:	9017      	str	r0, [sp, #92]	; 0x5c
 8007652:	e7bf      	b.n	80075d4 <_strtod_l+0x154>
 8007654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007656:	195a      	adds	r2, r3, r5
 8007658:	9217      	str	r2, [sp, #92]	; 0x5c
 800765a:	5d5a      	ldrb	r2, [r3, r5]
 800765c:	2f00      	cmp	r7, #0
 800765e:	d037      	beq.n	80076d0 <_strtod_l+0x250>
 8007660:	9005      	str	r0, [sp, #20]
 8007662:	463d      	mov	r5, r7
 8007664:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007668:	2b09      	cmp	r3, #9
 800766a:	d912      	bls.n	8007692 <_strtod_l+0x212>
 800766c:	2301      	movs	r3, #1
 800766e:	e7c2      	b.n	80075f6 <_strtod_l+0x176>
 8007670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	9217      	str	r2, [sp, #92]	; 0x5c
 8007676:	785a      	ldrb	r2, [r3, #1]
 8007678:	3001      	adds	r0, #1
 800767a:	2a30      	cmp	r2, #48	; 0x30
 800767c:	d0f8      	beq.n	8007670 <_strtod_l+0x1f0>
 800767e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007682:	2b08      	cmp	r3, #8
 8007684:	f200 84d9 	bhi.w	800803a <_strtod_l+0xbba>
 8007688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800768a:	9005      	str	r0, [sp, #20]
 800768c:	2000      	movs	r0, #0
 800768e:	9308      	str	r3, [sp, #32]
 8007690:	4605      	mov	r5, r0
 8007692:	3a30      	subs	r2, #48	; 0x30
 8007694:	f100 0301 	add.w	r3, r0, #1
 8007698:	d014      	beq.n	80076c4 <_strtod_l+0x244>
 800769a:	9905      	ldr	r1, [sp, #20]
 800769c:	4419      	add	r1, r3
 800769e:	9105      	str	r1, [sp, #20]
 80076a0:	462b      	mov	r3, r5
 80076a2:	eb00 0e05 	add.w	lr, r0, r5
 80076a6:	210a      	movs	r1, #10
 80076a8:	4573      	cmp	r3, lr
 80076aa:	d113      	bne.n	80076d4 <_strtod_l+0x254>
 80076ac:	182b      	adds	r3, r5, r0
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	f105 0501 	add.w	r5, r5, #1
 80076b4:	4405      	add	r5, r0
 80076b6:	dc1c      	bgt.n	80076f2 <_strtod_l+0x272>
 80076b8:	9907      	ldr	r1, [sp, #28]
 80076ba:	230a      	movs	r3, #10
 80076bc:	fb03 2301 	mla	r3, r3, r1, r2
 80076c0:	9307      	str	r3, [sp, #28]
 80076c2:	2300      	movs	r3, #0
 80076c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076c6:	1c51      	adds	r1, r2, #1
 80076c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80076ca:	7852      	ldrb	r2, [r2, #1]
 80076cc:	4618      	mov	r0, r3
 80076ce:	e7c9      	b.n	8007664 <_strtod_l+0x1e4>
 80076d0:	4638      	mov	r0, r7
 80076d2:	e7d2      	b.n	800767a <_strtod_l+0x1fa>
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	dc04      	bgt.n	80076e2 <_strtod_l+0x262>
 80076d8:	9e07      	ldr	r6, [sp, #28]
 80076da:	434e      	muls	r6, r1
 80076dc:	9607      	str	r6, [sp, #28]
 80076de:	3301      	adds	r3, #1
 80076e0:	e7e2      	b.n	80076a8 <_strtod_l+0x228>
 80076e2:	f103 0c01 	add.w	ip, r3, #1
 80076e6:	f1bc 0f10 	cmp.w	ip, #16
 80076ea:	bfd8      	it	le
 80076ec:	fb01 f909 	mulle.w	r9, r1, r9
 80076f0:	e7f5      	b.n	80076de <_strtod_l+0x25e>
 80076f2:	2d10      	cmp	r5, #16
 80076f4:	bfdc      	itt	le
 80076f6:	230a      	movle	r3, #10
 80076f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80076fc:	e7e1      	b.n	80076c2 <_strtod_l+0x242>
 80076fe:	2300      	movs	r3, #0
 8007700:	9305      	str	r3, [sp, #20]
 8007702:	2301      	movs	r3, #1
 8007704:	e77c      	b.n	8007600 <_strtod_l+0x180>
 8007706:	f04f 0c00 	mov.w	ip, #0
 800770a:	f108 0202 	add.w	r2, r8, #2
 800770e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007710:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007714:	e785      	b.n	8007622 <_strtod_l+0x1a2>
 8007716:	f04f 0c01 	mov.w	ip, #1
 800771a:	e7f6      	b.n	800770a <_strtod_l+0x28a>
 800771c:	0800b2b8 	.word	0x0800b2b8
 8007720:	0800b070 	.word	0x0800b070
 8007724:	7ff00000 	.word	0x7ff00000
 8007728:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800772a:	1c51      	adds	r1, r2, #1
 800772c:	9117      	str	r1, [sp, #92]	; 0x5c
 800772e:	7852      	ldrb	r2, [r2, #1]
 8007730:	2a30      	cmp	r2, #48	; 0x30
 8007732:	d0f9      	beq.n	8007728 <_strtod_l+0x2a8>
 8007734:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007738:	2908      	cmp	r1, #8
 800773a:	f63f af79 	bhi.w	8007630 <_strtod_l+0x1b0>
 800773e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007742:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007744:	9206      	str	r2, [sp, #24]
 8007746:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007748:	1c51      	adds	r1, r2, #1
 800774a:	9117      	str	r1, [sp, #92]	; 0x5c
 800774c:	7852      	ldrb	r2, [r2, #1]
 800774e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007752:	2e09      	cmp	r6, #9
 8007754:	d937      	bls.n	80077c6 <_strtod_l+0x346>
 8007756:	9e06      	ldr	r6, [sp, #24]
 8007758:	1b89      	subs	r1, r1, r6
 800775a:	2908      	cmp	r1, #8
 800775c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007760:	dc02      	bgt.n	8007768 <_strtod_l+0x2e8>
 8007762:	4576      	cmp	r6, lr
 8007764:	bfa8      	it	ge
 8007766:	4676      	movge	r6, lr
 8007768:	f1bc 0f00 	cmp.w	ip, #0
 800776c:	d000      	beq.n	8007770 <_strtod_l+0x2f0>
 800776e:	4276      	negs	r6, r6
 8007770:	2d00      	cmp	r5, #0
 8007772:	d14d      	bne.n	8007810 <_strtod_l+0x390>
 8007774:	9904      	ldr	r1, [sp, #16]
 8007776:	4301      	orrs	r1, r0
 8007778:	f47f aec6 	bne.w	8007508 <_strtod_l+0x88>
 800777c:	2b00      	cmp	r3, #0
 800777e:	f47f aee1 	bne.w	8007544 <_strtod_l+0xc4>
 8007782:	2a69      	cmp	r2, #105	; 0x69
 8007784:	d027      	beq.n	80077d6 <_strtod_l+0x356>
 8007786:	dc24      	bgt.n	80077d2 <_strtod_l+0x352>
 8007788:	2a49      	cmp	r2, #73	; 0x49
 800778a:	d024      	beq.n	80077d6 <_strtod_l+0x356>
 800778c:	2a4e      	cmp	r2, #78	; 0x4e
 800778e:	f47f aed9 	bne.w	8007544 <_strtod_l+0xc4>
 8007792:	499f      	ldr	r1, [pc, #636]	; (8007a10 <_strtod_l+0x590>)
 8007794:	a817      	add	r0, sp, #92	; 0x5c
 8007796:	f001 fe3d 	bl	8009414 <__match>
 800779a:	2800      	cmp	r0, #0
 800779c:	f43f aed2 	beq.w	8007544 <_strtod_l+0xc4>
 80077a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b28      	cmp	r3, #40	; 0x28
 80077a6:	d12d      	bne.n	8007804 <_strtod_l+0x384>
 80077a8:	499a      	ldr	r1, [pc, #616]	; (8007a14 <_strtod_l+0x594>)
 80077aa:	aa1a      	add	r2, sp, #104	; 0x68
 80077ac:	a817      	add	r0, sp, #92	; 0x5c
 80077ae:	f001 fe45 	bl	800943c <__hexnan>
 80077b2:	2805      	cmp	r0, #5
 80077b4:	d126      	bne.n	8007804 <_strtod_l+0x384>
 80077b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80077bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80077c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80077c4:	e6a0      	b.n	8007508 <_strtod_l+0x88>
 80077c6:	210a      	movs	r1, #10
 80077c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80077cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80077d0:	e7b9      	b.n	8007746 <_strtod_l+0x2c6>
 80077d2:	2a6e      	cmp	r2, #110	; 0x6e
 80077d4:	e7db      	b.n	800778e <_strtod_l+0x30e>
 80077d6:	4990      	ldr	r1, [pc, #576]	; (8007a18 <_strtod_l+0x598>)
 80077d8:	a817      	add	r0, sp, #92	; 0x5c
 80077da:	f001 fe1b 	bl	8009414 <__match>
 80077de:	2800      	cmp	r0, #0
 80077e0:	f43f aeb0 	beq.w	8007544 <_strtod_l+0xc4>
 80077e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077e6:	498d      	ldr	r1, [pc, #564]	; (8007a1c <_strtod_l+0x59c>)
 80077e8:	3b01      	subs	r3, #1
 80077ea:	a817      	add	r0, sp, #92	; 0x5c
 80077ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80077ee:	f001 fe11 	bl	8009414 <__match>
 80077f2:	b910      	cbnz	r0, 80077fa <_strtod_l+0x37a>
 80077f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077f6:	3301      	adds	r3, #1
 80077f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80077fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007a2c <_strtod_l+0x5ac>
 80077fe:	f04f 0a00 	mov.w	sl, #0
 8007802:	e681      	b.n	8007508 <_strtod_l+0x88>
 8007804:	4886      	ldr	r0, [pc, #536]	; (8007a20 <_strtod_l+0x5a0>)
 8007806:	f002 fdf7 	bl	800a3f8 <nan>
 800780a:	ec5b ab10 	vmov	sl, fp, d0
 800780e:	e67b      	b.n	8007508 <_strtod_l+0x88>
 8007810:	9b05      	ldr	r3, [sp, #20]
 8007812:	9807      	ldr	r0, [sp, #28]
 8007814:	1af3      	subs	r3, r6, r3
 8007816:	2f00      	cmp	r7, #0
 8007818:	bf08      	it	eq
 800781a:	462f      	moveq	r7, r5
 800781c:	2d10      	cmp	r5, #16
 800781e:	9306      	str	r3, [sp, #24]
 8007820:	46a8      	mov	r8, r5
 8007822:	bfa8      	it	ge
 8007824:	f04f 0810 	movge.w	r8, #16
 8007828:	f7f8 fe8c 	bl	8000544 <__aeabi_ui2d>
 800782c:	2d09      	cmp	r5, #9
 800782e:	4682      	mov	sl, r0
 8007830:	468b      	mov	fp, r1
 8007832:	dd13      	ble.n	800785c <_strtod_l+0x3dc>
 8007834:	4b7b      	ldr	r3, [pc, #492]	; (8007a24 <_strtod_l+0x5a4>)
 8007836:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800783a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800783e:	f7f8 fefb 	bl	8000638 <__aeabi_dmul>
 8007842:	4682      	mov	sl, r0
 8007844:	4648      	mov	r0, r9
 8007846:	468b      	mov	fp, r1
 8007848:	f7f8 fe7c 	bl	8000544 <__aeabi_ui2d>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4650      	mov	r0, sl
 8007852:	4659      	mov	r1, fp
 8007854:	f7f8 fd3a 	bl	80002cc <__adddf3>
 8007858:	4682      	mov	sl, r0
 800785a:	468b      	mov	fp, r1
 800785c:	2d0f      	cmp	r5, #15
 800785e:	dc38      	bgt.n	80078d2 <_strtod_l+0x452>
 8007860:	9b06      	ldr	r3, [sp, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f43f ae50 	beq.w	8007508 <_strtod_l+0x88>
 8007868:	dd24      	ble.n	80078b4 <_strtod_l+0x434>
 800786a:	2b16      	cmp	r3, #22
 800786c:	dc0b      	bgt.n	8007886 <_strtod_l+0x406>
 800786e:	496d      	ldr	r1, [pc, #436]	; (8007a24 <_strtod_l+0x5a4>)
 8007870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007878:	4652      	mov	r2, sl
 800787a:	465b      	mov	r3, fp
 800787c:	f7f8 fedc 	bl	8000638 <__aeabi_dmul>
 8007880:	4682      	mov	sl, r0
 8007882:	468b      	mov	fp, r1
 8007884:	e640      	b.n	8007508 <_strtod_l+0x88>
 8007886:	9a06      	ldr	r2, [sp, #24]
 8007888:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800788c:	4293      	cmp	r3, r2
 800788e:	db20      	blt.n	80078d2 <_strtod_l+0x452>
 8007890:	4c64      	ldr	r4, [pc, #400]	; (8007a24 <_strtod_l+0x5a4>)
 8007892:	f1c5 050f 	rsb	r5, r5, #15
 8007896:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800789a:	4652      	mov	r2, sl
 800789c:	465b      	mov	r3, fp
 800789e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078a2:	f7f8 fec9 	bl	8000638 <__aeabi_dmul>
 80078a6:	9b06      	ldr	r3, [sp, #24]
 80078a8:	1b5d      	subs	r5, r3, r5
 80078aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80078ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078b2:	e7e3      	b.n	800787c <_strtod_l+0x3fc>
 80078b4:	9b06      	ldr	r3, [sp, #24]
 80078b6:	3316      	adds	r3, #22
 80078b8:	db0b      	blt.n	80078d2 <_strtod_l+0x452>
 80078ba:	9b05      	ldr	r3, [sp, #20]
 80078bc:	1b9e      	subs	r6, r3, r6
 80078be:	4b59      	ldr	r3, [pc, #356]	; (8007a24 <_strtod_l+0x5a4>)
 80078c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80078c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078c8:	4650      	mov	r0, sl
 80078ca:	4659      	mov	r1, fp
 80078cc:	f7f8 ffde 	bl	800088c <__aeabi_ddiv>
 80078d0:	e7d6      	b.n	8007880 <_strtod_l+0x400>
 80078d2:	9b06      	ldr	r3, [sp, #24]
 80078d4:	eba5 0808 	sub.w	r8, r5, r8
 80078d8:	4498      	add	r8, r3
 80078da:	f1b8 0f00 	cmp.w	r8, #0
 80078de:	dd74      	ble.n	80079ca <_strtod_l+0x54a>
 80078e0:	f018 030f 	ands.w	r3, r8, #15
 80078e4:	d00a      	beq.n	80078fc <_strtod_l+0x47c>
 80078e6:	494f      	ldr	r1, [pc, #316]	; (8007a24 <_strtod_l+0x5a4>)
 80078e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078ec:	4652      	mov	r2, sl
 80078ee:	465b      	mov	r3, fp
 80078f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f4:	f7f8 fea0 	bl	8000638 <__aeabi_dmul>
 80078f8:	4682      	mov	sl, r0
 80078fa:	468b      	mov	fp, r1
 80078fc:	f038 080f 	bics.w	r8, r8, #15
 8007900:	d04f      	beq.n	80079a2 <_strtod_l+0x522>
 8007902:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007906:	dd22      	ble.n	800794e <_strtod_l+0x4ce>
 8007908:	2500      	movs	r5, #0
 800790a:	462e      	mov	r6, r5
 800790c:	9507      	str	r5, [sp, #28]
 800790e:	9505      	str	r5, [sp, #20]
 8007910:	2322      	movs	r3, #34	; 0x22
 8007912:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007a2c <_strtod_l+0x5ac>
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	f04f 0a00 	mov.w	sl, #0
 800791c:	9b07      	ldr	r3, [sp, #28]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f43f adf2 	beq.w	8007508 <_strtod_l+0x88>
 8007924:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007926:	4620      	mov	r0, r4
 8007928:	f001 fe90 	bl	800964c <_Bfree>
 800792c:	9905      	ldr	r1, [sp, #20]
 800792e:	4620      	mov	r0, r4
 8007930:	f001 fe8c 	bl	800964c <_Bfree>
 8007934:	4631      	mov	r1, r6
 8007936:	4620      	mov	r0, r4
 8007938:	f001 fe88 	bl	800964c <_Bfree>
 800793c:	9907      	ldr	r1, [sp, #28]
 800793e:	4620      	mov	r0, r4
 8007940:	f001 fe84 	bl	800964c <_Bfree>
 8007944:	4629      	mov	r1, r5
 8007946:	4620      	mov	r0, r4
 8007948:	f001 fe80 	bl	800964c <_Bfree>
 800794c:	e5dc      	b.n	8007508 <_strtod_l+0x88>
 800794e:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <_strtod_l+0x5a8>)
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	2300      	movs	r3, #0
 8007954:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007958:	4650      	mov	r0, sl
 800795a:	4659      	mov	r1, fp
 800795c:	4699      	mov	r9, r3
 800795e:	f1b8 0f01 	cmp.w	r8, #1
 8007962:	dc21      	bgt.n	80079a8 <_strtod_l+0x528>
 8007964:	b10b      	cbz	r3, 800796a <_strtod_l+0x4ea>
 8007966:	4682      	mov	sl, r0
 8007968:	468b      	mov	fp, r1
 800796a:	4b2f      	ldr	r3, [pc, #188]	; (8007a28 <_strtod_l+0x5a8>)
 800796c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007970:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007974:	4652      	mov	r2, sl
 8007976:	465b      	mov	r3, fp
 8007978:	e9d9 0100 	ldrd	r0, r1, [r9]
 800797c:	f7f8 fe5c 	bl	8000638 <__aeabi_dmul>
 8007980:	4b2a      	ldr	r3, [pc, #168]	; (8007a2c <_strtod_l+0x5ac>)
 8007982:	460a      	mov	r2, r1
 8007984:	400b      	ands	r3, r1
 8007986:	492a      	ldr	r1, [pc, #168]	; (8007a30 <_strtod_l+0x5b0>)
 8007988:	428b      	cmp	r3, r1
 800798a:	4682      	mov	sl, r0
 800798c:	d8bc      	bhi.n	8007908 <_strtod_l+0x488>
 800798e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007992:	428b      	cmp	r3, r1
 8007994:	bf86      	itte	hi
 8007996:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007a34 <_strtod_l+0x5b4>
 800799a:	f04f 3aff 	movhi.w	sl, #4294967295
 800799e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80079a2:	2300      	movs	r3, #0
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	e084      	b.n	8007ab2 <_strtod_l+0x632>
 80079a8:	f018 0f01 	tst.w	r8, #1
 80079ac:	d005      	beq.n	80079ba <_strtod_l+0x53a>
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fe40 	bl	8000638 <__aeabi_dmul>
 80079b8:	2301      	movs	r3, #1
 80079ba:	9a04      	ldr	r2, [sp, #16]
 80079bc:	3208      	adds	r2, #8
 80079be:	f109 0901 	add.w	r9, r9, #1
 80079c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80079c6:	9204      	str	r2, [sp, #16]
 80079c8:	e7c9      	b.n	800795e <_strtod_l+0x4de>
 80079ca:	d0ea      	beq.n	80079a2 <_strtod_l+0x522>
 80079cc:	f1c8 0800 	rsb	r8, r8, #0
 80079d0:	f018 020f 	ands.w	r2, r8, #15
 80079d4:	d00a      	beq.n	80079ec <_strtod_l+0x56c>
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <_strtod_l+0x5a4>)
 80079d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079dc:	4650      	mov	r0, sl
 80079de:	4659      	mov	r1, fp
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f7f8 ff52 	bl	800088c <__aeabi_ddiv>
 80079e8:	4682      	mov	sl, r0
 80079ea:	468b      	mov	fp, r1
 80079ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80079f0:	d0d7      	beq.n	80079a2 <_strtod_l+0x522>
 80079f2:	f1b8 0f1f 	cmp.w	r8, #31
 80079f6:	dd1f      	ble.n	8007a38 <_strtod_l+0x5b8>
 80079f8:	2500      	movs	r5, #0
 80079fa:	462e      	mov	r6, r5
 80079fc:	9507      	str	r5, [sp, #28]
 80079fe:	9505      	str	r5, [sp, #20]
 8007a00:	2322      	movs	r3, #34	; 0x22
 8007a02:	f04f 0a00 	mov.w	sl, #0
 8007a06:	f04f 0b00 	mov.w	fp, #0
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	e786      	b.n	800791c <_strtod_l+0x49c>
 8007a0e:	bf00      	nop
 8007a10:	0800b041 	.word	0x0800b041
 8007a14:	0800b084 	.word	0x0800b084
 8007a18:	0800b039 	.word	0x0800b039
 8007a1c:	0800b1c4 	.word	0x0800b1c4
 8007a20:	0800b470 	.word	0x0800b470
 8007a24:	0800b350 	.word	0x0800b350
 8007a28:	0800b328 	.word	0x0800b328
 8007a2c:	7ff00000 	.word	0x7ff00000
 8007a30:	7ca00000 	.word	0x7ca00000
 8007a34:	7fefffff 	.word	0x7fefffff
 8007a38:	f018 0310 	ands.w	r3, r8, #16
 8007a3c:	bf18      	it	ne
 8007a3e:	236a      	movne	r3, #106	; 0x6a
 8007a40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007df0 <_strtod_l+0x970>
 8007a44:	9304      	str	r3, [sp, #16]
 8007a46:	4650      	mov	r0, sl
 8007a48:	4659      	mov	r1, fp
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f018 0f01 	tst.w	r8, #1
 8007a50:	d004      	beq.n	8007a5c <_strtod_l+0x5dc>
 8007a52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a56:	f7f8 fdef 	bl	8000638 <__aeabi_dmul>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007a60:	f109 0908 	add.w	r9, r9, #8
 8007a64:	d1f2      	bne.n	8007a4c <_strtod_l+0x5cc>
 8007a66:	b10b      	cbz	r3, 8007a6c <_strtod_l+0x5ec>
 8007a68:	4682      	mov	sl, r0
 8007a6a:	468b      	mov	fp, r1
 8007a6c:	9b04      	ldr	r3, [sp, #16]
 8007a6e:	b1c3      	cbz	r3, 8007aa2 <_strtod_l+0x622>
 8007a70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	4659      	mov	r1, fp
 8007a7c:	dd11      	ble.n	8007aa2 <_strtod_l+0x622>
 8007a7e:	2b1f      	cmp	r3, #31
 8007a80:	f340 8124 	ble.w	8007ccc <_strtod_l+0x84c>
 8007a84:	2b34      	cmp	r3, #52	; 0x34
 8007a86:	bfde      	ittt	le
 8007a88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a8c:	f04f 33ff 	movle.w	r3, #4294967295
 8007a90:	fa03 f202 	lslle.w	r2, r3, r2
 8007a94:	f04f 0a00 	mov.w	sl, #0
 8007a98:	bfcc      	ite	gt
 8007a9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007a9e:	ea02 0b01 	andle.w	fp, r2, r1
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	4659      	mov	r1, fp
 8007aaa:	f7f9 f82d 	bl	8000b08 <__aeabi_dcmpeq>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d1a2      	bne.n	80079f8 <_strtod_l+0x578>
 8007ab2:	9b07      	ldr	r3, [sp, #28]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	9908      	ldr	r1, [sp, #32]
 8007ab8:	462b      	mov	r3, r5
 8007aba:	463a      	mov	r2, r7
 8007abc:	4620      	mov	r0, r4
 8007abe:	f001 fe2d 	bl	800971c <__s2b>
 8007ac2:	9007      	str	r0, [sp, #28]
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f43f af1f 	beq.w	8007908 <_strtod_l+0x488>
 8007aca:	9b05      	ldr	r3, [sp, #20]
 8007acc:	1b9e      	subs	r6, r3, r6
 8007ace:	9b06      	ldr	r3, [sp, #24]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bfb4      	ite	lt
 8007ad4:	4633      	movlt	r3, r6
 8007ad6:	2300      	movge	r3, #0
 8007ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8007ada:	9b06      	ldr	r3, [sp, #24]
 8007adc:	2500      	movs	r5, #0
 8007ade:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ae2:	9312      	str	r3, [sp, #72]	; 0x48
 8007ae4:	462e      	mov	r6, r5
 8007ae6:	9b07      	ldr	r3, [sp, #28]
 8007ae8:	4620      	mov	r0, r4
 8007aea:	6859      	ldr	r1, [r3, #4]
 8007aec:	f001 fd6e 	bl	80095cc <_Balloc>
 8007af0:	9005      	str	r0, [sp, #20]
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f43f af0c 	beq.w	8007910 <_strtod_l+0x490>
 8007af8:	9b07      	ldr	r3, [sp, #28]
 8007afa:	691a      	ldr	r2, [r3, #16]
 8007afc:	3202      	adds	r2, #2
 8007afe:	f103 010c 	add.w	r1, r3, #12
 8007b02:	0092      	lsls	r2, r2, #2
 8007b04:	300c      	adds	r0, #12
 8007b06:	f001 fd53 	bl	80095b0 <memcpy>
 8007b0a:	ec4b ab10 	vmov	d0, sl, fp
 8007b0e:	aa1a      	add	r2, sp, #104	; 0x68
 8007b10:	a919      	add	r1, sp, #100	; 0x64
 8007b12:	4620      	mov	r0, r4
 8007b14:	f002 f948 	bl	8009da8 <__d2b>
 8007b18:	ec4b ab18 	vmov	d8, sl, fp
 8007b1c:	9018      	str	r0, [sp, #96]	; 0x60
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f43f aef6 	beq.w	8007910 <_strtod_l+0x490>
 8007b24:	2101      	movs	r1, #1
 8007b26:	4620      	mov	r0, r4
 8007b28:	f001 fe92 	bl	8009850 <__i2b>
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	f43f aeee 	beq.w	8007910 <_strtod_l+0x490>
 8007b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b36:	9904      	ldr	r1, [sp, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bfab      	itete	ge
 8007b3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007b3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b46:	bfac      	ite	ge
 8007b48:	eb03 0902 	addge.w	r9, r3, r2
 8007b4c:	1ad7      	sublt	r7, r2, r3
 8007b4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b50:	eba3 0801 	sub.w	r8, r3, r1
 8007b54:	4490      	add	r8, r2
 8007b56:	4ba1      	ldr	r3, [pc, #644]	; (8007ddc <_strtod_l+0x95c>)
 8007b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b5c:	4598      	cmp	r8, r3
 8007b5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b62:	f280 80c7 	bge.w	8007cf4 <_strtod_l+0x874>
 8007b66:	eba3 0308 	sub.w	r3, r3, r8
 8007b6a:	2b1f      	cmp	r3, #31
 8007b6c:	eba2 0203 	sub.w	r2, r2, r3
 8007b70:	f04f 0101 	mov.w	r1, #1
 8007b74:	f300 80b1 	bgt.w	8007cda <_strtod_l+0x85a>
 8007b78:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9308      	str	r3, [sp, #32]
 8007b82:	eb09 0802 	add.w	r8, r9, r2
 8007b86:	9b04      	ldr	r3, [sp, #16]
 8007b88:	45c1      	cmp	r9, r8
 8007b8a:	4417      	add	r7, r2
 8007b8c:	441f      	add	r7, r3
 8007b8e:	464b      	mov	r3, r9
 8007b90:	bfa8      	it	ge
 8007b92:	4643      	movge	r3, r8
 8007b94:	42bb      	cmp	r3, r7
 8007b96:	bfa8      	it	ge
 8007b98:	463b      	movge	r3, r7
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bfc2      	ittt	gt
 8007b9e:	eba8 0803 	subgt.w	r8, r8, r3
 8007ba2:	1aff      	subgt	r7, r7, r3
 8007ba4:	eba9 0903 	subgt.w	r9, r9, r3
 8007ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	dd17      	ble.n	8007bde <_strtod_l+0x75e>
 8007bae:	4631      	mov	r1, r6
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f001 ff0c 	bl	80099d0 <__pow5mult>
 8007bb8:	4606      	mov	r6, r0
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f43f aea8 	beq.w	8007910 <_strtod_l+0x490>
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f001 fe59 	bl	800987c <__multiply>
 8007bca:	900b      	str	r0, [sp, #44]	; 0x2c
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	f43f ae9f 	beq.w	8007910 <_strtod_l+0x490>
 8007bd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f001 fd39 	bl	800964c <_Bfree>
 8007bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bdc:	9318      	str	r3, [sp, #96]	; 0x60
 8007bde:	f1b8 0f00 	cmp.w	r8, #0
 8007be2:	f300 808c 	bgt.w	8007cfe <_strtod_l+0x87e>
 8007be6:	9b06      	ldr	r3, [sp, #24]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	dd08      	ble.n	8007bfe <_strtod_l+0x77e>
 8007bec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bee:	9905      	ldr	r1, [sp, #20]
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f001 feed 	bl	80099d0 <__pow5mult>
 8007bf6:	9005      	str	r0, [sp, #20]
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	f43f ae89 	beq.w	8007910 <_strtod_l+0x490>
 8007bfe:	2f00      	cmp	r7, #0
 8007c00:	dd08      	ble.n	8007c14 <_strtod_l+0x794>
 8007c02:	9905      	ldr	r1, [sp, #20]
 8007c04:	463a      	mov	r2, r7
 8007c06:	4620      	mov	r0, r4
 8007c08:	f001 ff3c 	bl	8009a84 <__lshift>
 8007c0c:	9005      	str	r0, [sp, #20]
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	f43f ae7e 	beq.w	8007910 <_strtod_l+0x490>
 8007c14:	f1b9 0f00 	cmp.w	r9, #0
 8007c18:	dd08      	ble.n	8007c2c <_strtod_l+0x7ac>
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	464a      	mov	r2, r9
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f001 ff30 	bl	8009a84 <__lshift>
 8007c24:	4606      	mov	r6, r0
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f43f ae72 	beq.w	8007910 <_strtod_l+0x490>
 8007c2c:	9a05      	ldr	r2, [sp, #20]
 8007c2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c30:	4620      	mov	r0, r4
 8007c32:	f001 ffb3 	bl	8009b9c <__mdiff>
 8007c36:	4605      	mov	r5, r0
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	f43f ae69 	beq.w	8007910 <_strtod_l+0x490>
 8007c3e:	68c3      	ldr	r3, [r0, #12]
 8007c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c42:	2300      	movs	r3, #0
 8007c44:	60c3      	str	r3, [r0, #12]
 8007c46:	4631      	mov	r1, r6
 8007c48:	f001 ff8c 	bl	8009b64 <__mcmp>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	da60      	bge.n	8007d12 <_strtod_l+0x892>
 8007c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c52:	ea53 030a 	orrs.w	r3, r3, sl
 8007c56:	f040 8082 	bne.w	8007d5e <_strtod_l+0x8de>
 8007c5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d17d      	bne.n	8007d5e <_strtod_l+0x8de>
 8007c62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c66:	0d1b      	lsrs	r3, r3, #20
 8007c68:	051b      	lsls	r3, r3, #20
 8007c6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c6e:	d976      	bls.n	8007d5e <_strtod_l+0x8de>
 8007c70:	696b      	ldr	r3, [r5, #20]
 8007c72:	b913      	cbnz	r3, 8007c7a <_strtod_l+0x7fa>
 8007c74:	692b      	ldr	r3, [r5, #16]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	dd71      	ble.n	8007d5e <_strtod_l+0x8de>
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f001 ff00 	bl	8009a84 <__lshift>
 8007c84:	4631      	mov	r1, r6
 8007c86:	4605      	mov	r5, r0
 8007c88:	f001 ff6c 	bl	8009b64 <__mcmp>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	dd66      	ble.n	8007d5e <_strtod_l+0x8de>
 8007c90:	9904      	ldr	r1, [sp, #16]
 8007c92:	4a53      	ldr	r2, [pc, #332]	; (8007de0 <_strtod_l+0x960>)
 8007c94:	465b      	mov	r3, fp
 8007c96:	2900      	cmp	r1, #0
 8007c98:	f000 8081 	beq.w	8007d9e <_strtod_l+0x91e>
 8007c9c:	ea02 010b 	and.w	r1, r2, fp
 8007ca0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ca4:	dc7b      	bgt.n	8007d9e <_strtod_l+0x91e>
 8007ca6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007caa:	f77f aea9 	ble.w	8007a00 <_strtod_l+0x580>
 8007cae:	4b4d      	ldr	r3, [pc, #308]	; (8007de4 <_strtod_l+0x964>)
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	4659      	mov	r1, fp
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f7f8 fcbf 	bl	8000638 <__aeabi_dmul>
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4303      	orrs	r3, r0
 8007cbe:	bf08      	it	eq
 8007cc0:	2322      	moveq	r3, #34	; 0x22
 8007cc2:	4682      	mov	sl, r0
 8007cc4:	468b      	mov	fp, r1
 8007cc6:	bf08      	it	eq
 8007cc8:	6023      	streq	r3, [r4, #0]
 8007cca:	e62b      	b.n	8007924 <_strtod_l+0x4a4>
 8007ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	ea03 0a0a 	and.w	sl, r3, sl
 8007cd8:	e6e3      	b.n	8007aa2 <_strtod_l+0x622>
 8007cda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007cde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007ce2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007ce6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007cea:	fa01 f308 	lsl.w	r3, r1, r8
 8007cee:	9308      	str	r3, [sp, #32]
 8007cf0:	910d      	str	r1, [sp, #52]	; 0x34
 8007cf2:	e746      	b.n	8007b82 <_strtod_l+0x702>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9308      	str	r3, [sp, #32]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8007cfc:	e741      	b.n	8007b82 <_strtod_l+0x702>
 8007cfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d00:	4642      	mov	r2, r8
 8007d02:	4620      	mov	r0, r4
 8007d04:	f001 febe 	bl	8009a84 <__lshift>
 8007d08:	9018      	str	r0, [sp, #96]	; 0x60
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	f47f af6b 	bne.w	8007be6 <_strtod_l+0x766>
 8007d10:	e5fe      	b.n	8007910 <_strtod_l+0x490>
 8007d12:	465f      	mov	r7, fp
 8007d14:	d16e      	bne.n	8007df4 <_strtod_l+0x974>
 8007d16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d1c:	b342      	cbz	r2, 8007d70 <_strtod_l+0x8f0>
 8007d1e:	4a32      	ldr	r2, [pc, #200]	; (8007de8 <_strtod_l+0x968>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d128      	bne.n	8007d76 <_strtod_l+0x8f6>
 8007d24:	9b04      	ldr	r3, [sp, #16]
 8007d26:	4651      	mov	r1, sl
 8007d28:	b1eb      	cbz	r3, 8007d66 <_strtod_l+0x8e6>
 8007d2a:	4b2d      	ldr	r3, [pc, #180]	; (8007de0 <_strtod_l+0x960>)
 8007d2c:	403b      	ands	r3, r7
 8007d2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d32:	f04f 32ff 	mov.w	r2, #4294967295
 8007d36:	d819      	bhi.n	8007d6c <_strtod_l+0x8ec>
 8007d38:	0d1b      	lsrs	r3, r3, #20
 8007d3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	4299      	cmp	r1, r3
 8007d44:	d117      	bne.n	8007d76 <_strtod_l+0x8f6>
 8007d46:	4b29      	ldr	r3, [pc, #164]	; (8007dec <_strtod_l+0x96c>)
 8007d48:	429f      	cmp	r7, r3
 8007d4a:	d102      	bne.n	8007d52 <_strtod_l+0x8d2>
 8007d4c:	3101      	adds	r1, #1
 8007d4e:	f43f addf 	beq.w	8007910 <_strtod_l+0x490>
 8007d52:	4b23      	ldr	r3, [pc, #140]	; (8007de0 <_strtod_l+0x960>)
 8007d54:	403b      	ands	r3, r7
 8007d56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007d5a:	f04f 0a00 	mov.w	sl, #0
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1a4      	bne.n	8007cae <_strtod_l+0x82e>
 8007d64:	e5de      	b.n	8007924 <_strtod_l+0x4a4>
 8007d66:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6a:	e7ea      	b.n	8007d42 <_strtod_l+0x8c2>
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	e7e8      	b.n	8007d42 <_strtod_l+0x8c2>
 8007d70:	ea53 030a 	orrs.w	r3, r3, sl
 8007d74:	d08c      	beq.n	8007c90 <_strtod_l+0x810>
 8007d76:	9b08      	ldr	r3, [sp, #32]
 8007d78:	b1db      	cbz	r3, 8007db2 <_strtod_l+0x932>
 8007d7a:	423b      	tst	r3, r7
 8007d7c:	d0ef      	beq.n	8007d5e <_strtod_l+0x8de>
 8007d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d80:	9a04      	ldr	r2, [sp, #16]
 8007d82:	4650      	mov	r0, sl
 8007d84:	4659      	mov	r1, fp
 8007d86:	b1c3      	cbz	r3, 8007dba <_strtod_l+0x93a>
 8007d88:	f7ff fb5e 	bl	8007448 <sulp>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	ec51 0b18 	vmov	r0, r1, d8
 8007d94:	f7f8 fa9a 	bl	80002cc <__adddf3>
 8007d98:	4682      	mov	sl, r0
 8007d9a:	468b      	mov	fp, r1
 8007d9c:	e7df      	b.n	8007d5e <_strtod_l+0x8de>
 8007d9e:	4013      	ands	r3, r2
 8007da0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007da4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007da8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007dac:	f04f 3aff 	mov.w	sl, #4294967295
 8007db0:	e7d5      	b.n	8007d5e <_strtod_l+0x8de>
 8007db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007db4:	ea13 0f0a 	tst.w	r3, sl
 8007db8:	e7e0      	b.n	8007d7c <_strtod_l+0x8fc>
 8007dba:	f7ff fb45 	bl	8007448 <sulp>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	ec51 0b18 	vmov	r0, r1, d8
 8007dc6:	f7f8 fa7f 	bl	80002c8 <__aeabi_dsub>
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4682      	mov	sl, r0
 8007dd0:	468b      	mov	fp, r1
 8007dd2:	f7f8 fe99 	bl	8000b08 <__aeabi_dcmpeq>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d0c1      	beq.n	8007d5e <_strtod_l+0x8de>
 8007dda:	e611      	b.n	8007a00 <_strtod_l+0x580>
 8007ddc:	fffffc02 	.word	0xfffffc02
 8007de0:	7ff00000 	.word	0x7ff00000
 8007de4:	39500000 	.word	0x39500000
 8007de8:	000fffff 	.word	0x000fffff
 8007dec:	7fefffff 	.word	0x7fefffff
 8007df0:	0800b098 	.word	0x0800b098
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	f002 f832 	bl	8009e60 <__ratio>
 8007dfc:	ec59 8b10 	vmov	r8, r9, d0
 8007e00:	ee10 0a10 	vmov	r0, s0
 8007e04:	2200      	movs	r2, #0
 8007e06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	f7f8 fe90 	bl	8000b30 <__aeabi_dcmple>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d07a      	beq.n	8007f0a <_strtod_l+0xa8a>
 8007e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d04a      	beq.n	8007eb0 <_strtod_l+0xa30>
 8007e1a:	4b95      	ldr	r3, [pc, #596]	; (8008070 <_strtod_l+0xbf0>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008070 <_strtod_l+0xbf0>
 8007e26:	f04f 0800 	mov.w	r8, #0
 8007e2a:	4b92      	ldr	r3, [pc, #584]	; (8008074 <_strtod_l+0xbf4>)
 8007e2c:	403b      	ands	r3, r7
 8007e2e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e32:	4b91      	ldr	r3, [pc, #580]	; (8008078 <_strtod_l+0xbf8>)
 8007e34:	429a      	cmp	r2, r3
 8007e36:	f040 80b0 	bne.w	8007f9a <_strtod_l+0xb1a>
 8007e3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e42:	ec4b ab10 	vmov	d0, sl, fp
 8007e46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e4a:	f001 ff31 	bl	8009cb0 <__ulp>
 8007e4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e52:	ec53 2b10 	vmov	r2, r3, d0
 8007e56:	f7f8 fbef 	bl	8000638 <__aeabi_dmul>
 8007e5a:	4652      	mov	r2, sl
 8007e5c:	465b      	mov	r3, fp
 8007e5e:	f7f8 fa35 	bl	80002cc <__adddf3>
 8007e62:	460b      	mov	r3, r1
 8007e64:	4983      	ldr	r1, [pc, #524]	; (8008074 <_strtod_l+0xbf4>)
 8007e66:	4a85      	ldr	r2, [pc, #532]	; (800807c <_strtod_l+0xbfc>)
 8007e68:	4019      	ands	r1, r3
 8007e6a:	4291      	cmp	r1, r2
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	d960      	bls.n	8007f32 <_strtod_l+0xab2>
 8007e70:	ee18 3a90 	vmov	r3, s17
 8007e74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d104      	bne.n	8007e86 <_strtod_l+0xa06>
 8007e7c:	ee18 3a10 	vmov	r3, s16
 8007e80:	3301      	adds	r3, #1
 8007e82:	f43f ad45 	beq.w	8007910 <_strtod_l+0x490>
 8007e86:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008088 <_strtod_l+0xc08>
 8007e8a:	f04f 3aff 	mov.w	sl, #4294967295
 8007e8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e90:	4620      	mov	r0, r4
 8007e92:	f001 fbdb 	bl	800964c <_Bfree>
 8007e96:	9905      	ldr	r1, [sp, #20]
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f001 fbd7 	bl	800964c <_Bfree>
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f001 fbd3 	bl	800964c <_Bfree>
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f001 fbcf 	bl	800964c <_Bfree>
 8007eae:	e61a      	b.n	8007ae6 <_strtod_l+0x666>
 8007eb0:	f1ba 0f00 	cmp.w	sl, #0
 8007eb4:	d11b      	bne.n	8007eee <_strtod_l+0xa6e>
 8007eb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007eba:	b9f3      	cbnz	r3, 8007efa <_strtod_l+0xa7a>
 8007ebc:	4b6c      	ldr	r3, [pc, #432]	; (8008070 <_strtod_l+0xbf0>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	f7f8 fe2a 	bl	8000b1c <__aeabi_dcmplt>
 8007ec8:	b9d0      	cbnz	r0, 8007f00 <_strtod_l+0xa80>
 8007eca:	4640      	mov	r0, r8
 8007ecc:	4649      	mov	r1, r9
 8007ece:	4b6c      	ldr	r3, [pc, #432]	; (8008080 <_strtod_l+0xc00>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f7f8 fbb1 	bl	8000638 <__aeabi_dmul>
 8007ed6:	4680      	mov	r8, r0
 8007ed8:	4689      	mov	r9, r1
 8007eda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ede:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007ee2:	9315      	str	r3, [sp, #84]	; 0x54
 8007ee4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007eec:	e79d      	b.n	8007e2a <_strtod_l+0x9aa>
 8007eee:	f1ba 0f01 	cmp.w	sl, #1
 8007ef2:	d102      	bne.n	8007efa <_strtod_l+0xa7a>
 8007ef4:	2f00      	cmp	r7, #0
 8007ef6:	f43f ad83 	beq.w	8007a00 <_strtod_l+0x580>
 8007efa:	4b62      	ldr	r3, [pc, #392]	; (8008084 <_strtod_l+0xc04>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	e78e      	b.n	8007e1e <_strtod_l+0x99e>
 8007f00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008080 <_strtod_l+0xc00>
 8007f04:	f04f 0800 	mov.w	r8, #0
 8007f08:	e7e7      	b.n	8007eda <_strtod_l+0xa5a>
 8007f0a:	4b5d      	ldr	r3, [pc, #372]	; (8008080 <_strtod_l+0xc00>)
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	4649      	mov	r1, r9
 8007f10:	2200      	movs	r2, #0
 8007f12:	f7f8 fb91 	bl	8000638 <__aeabi_dmul>
 8007f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f18:	4680      	mov	r8, r0
 8007f1a:	4689      	mov	r9, r1
 8007f1c:	b933      	cbnz	r3, 8007f2c <_strtod_l+0xaac>
 8007f1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f22:	900e      	str	r0, [sp, #56]	; 0x38
 8007f24:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f2a:	e7dd      	b.n	8007ee8 <_strtod_l+0xa68>
 8007f2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007f30:	e7f9      	b.n	8007f26 <_strtod_l+0xaa6>
 8007f32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1a8      	bne.n	8007e8e <_strtod_l+0xa0e>
 8007f3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f42:	0d1b      	lsrs	r3, r3, #20
 8007f44:	051b      	lsls	r3, r3, #20
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d1a1      	bne.n	8007e8e <_strtod_l+0xa0e>
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f7f8 fed3 	bl	8000cf8 <__aeabi_d2lz>
 8007f52:	f7f8 fb43 	bl	80005dc <__aeabi_l2d>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	f7f8 f9b3 	bl	80002c8 <__aeabi_dsub>
 8007f62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f68:	ea43 030a 	orr.w	r3, r3, sl
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4689      	mov	r9, r1
 8007f72:	d055      	beq.n	8008020 <_strtod_l+0xba0>
 8007f74:	a336      	add	r3, pc, #216	; (adr r3, 8008050 <_strtod_l+0xbd0>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	f7f8 fdcf 	bl	8000b1c <__aeabi_dcmplt>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	f47f acd0 	bne.w	8007924 <_strtod_l+0x4a4>
 8007f84:	a334      	add	r3, pc, #208	; (adr r3, 8008058 <_strtod_l+0xbd8>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	f7f8 fde3 	bl	8000b58 <__aeabi_dcmpgt>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f43f af7b 	beq.w	8007e8e <_strtod_l+0xa0e>
 8007f98:	e4c4      	b.n	8007924 <_strtod_l+0x4a4>
 8007f9a:	9b04      	ldr	r3, [sp, #16]
 8007f9c:	b333      	cbz	r3, 8007fec <_strtod_l+0xb6c>
 8007f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fa0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007fa4:	d822      	bhi.n	8007fec <_strtod_l+0xb6c>
 8007fa6:	a32e      	add	r3, pc, #184	; (adr r3, 8008060 <_strtod_l+0xbe0>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	4640      	mov	r0, r8
 8007fae:	4649      	mov	r1, r9
 8007fb0:	f7f8 fdbe 	bl	8000b30 <__aeabi_dcmple>
 8007fb4:	b1a0      	cbz	r0, 8007fe0 <_strtod_l+0xb60>
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	4640      	mov	r0, r8
 8007fba:	f7f8 fe15 	bl	8000be8 <__aeabi_d2uiz>
 8007fbe:	2801      	cmp	r0, #1
 8007fc0:	bf38      	it	cc
 8007fc2:	2001      	movcc	r0, #1
 8007fc4:	f7f8 fabe 	bl	8000544 <__aeabi_ui2d>
 8007fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fca:	4680      	mov	r8, r0
 8007fcc:	4689      	mov	r9, r1
 8007fce:	bb23      	cbnz	r3, 800801a <_strtod_l+0xb9a>
 8007fd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fd4:	9010      	str	r0, [sp, #64]	; 0x40
 8007fd6:	9311      	str	r3, [sp, #68]	; 0x44
 8007fd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fe4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007fe8:	1a9b      	subs	r3, r3, r2
 8007fea:	9309      	str	r3, [sp, #36]	; 0x24
 8007fec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8007ff4:	eef0 0a68 	vmov.f32	s1, s17
 8007ff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ffc:	f001 fe58 	bl	8009cb0 <__ulp>
 8008000:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008004:	ec53 2b10 	vmov	r2, r3, d0
 8008008:	f7f8 fb16 	bl	8000638 <__aeabi_dmul>
 800800c:	ec53 2b18 	vmov	r2, r3, d8
 8008010:	f7f8 f95c 	bl	80002cc <__adddf3>
 8008014:	4682      	mov	sl, r0
 8008016:	468b      	mov	fp, r1
 8008018:	e78d      	b.n	8007f36 <_strtod_l+0xab6>
 800801a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800801e:	e7db      	b.n	8007fd8 <_strtod_l+0xb58>
 8008020:	a311      	add	r3, pc, #68	; (adr r3, 8008068 <_strtod_l+0xbe8>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f7f8 fd79 	bl	8000b1c <__aeabi_dcmplt>
 800802a:	e7b2      	b.n	8007f92 <_strtod_l+0xb12>
 800802c:	2300      	movs	r3, #0
 800802e:	930a      	str	r3, [sp, #40]	; 0x28
 8008030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008034:	6013      	str	r3, [r2, #0]
 8008036:	f7ff ba6b 	b.w	8007510 <_strtod_l+0x90>
 800803a:	2a65      	cmp	r2, #101	; 0x65
 800803c:	f43f ab5f 	beq.w	80076fe <_strtod_l+0x27e>
 8008040:	2a45      	cmp	r2, #69	; 0x45
 8008042:	f43f ab5c 	beq.w	80076fe <_strtod_l+0x27e>
 8008046:	2301      	movs	r3, #1
 8008048:	f7ff bb94 	b.w	8007774 <_strtod_l+0x2f4>
 800804c:	f3af 8000 	nop.w
 8008050:	94a03595 	.word	0x94a03595
 8008054:	3fdfffff 	.word	0x3fdfffff
 8008058:	35afe535 	.word	0x35afe535
 800805c:	3fe00000 	.word	0x3fe00000
 8008060:	ffc00000 	.word	0xffc00000
 8008064:	41dfffff 	.word	0x41dfffff
 8008068:	94a03595 	.word	0x94a03595
 800806c:	3fcfffff 	.word	0x3fcfffff
 8008070:	3ff00000 	.word	0x3ff00000
 8008074:	7ff00000 	.word	0x7ff00000
 8008078:	7fe00000 	.word	0x7fe00000
 800807c:	7c9fffff 	.word	0x7c9fffff
 8008080:	3fe00000 	.word	0x3fe00000
 8008084:	bff00000 	.word	0xbff00000
 8008088:	7fefffff 	.word	0x7fefffff

0800808c <_strtod_r>:
 800808c:	4b01      	ldr	r3, [pc, #4]	; (8008094 <_strtod_r+0x8>)
 800808e:	f7ff b9f7 	b.w	8007480 <_strtod_l>
 8008092:	bf00      	nop
 8008094:	20000078 	.word	0x20000078

08008098 <_strtol_l.constprop.0>:
 8008098:	2b01      	cmp	r3, #1
 800809a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800809e:	d001      	beq.n	80080a4 <_strtol_l.constprop.0+0xc>
 80080a0:	2b24      	cmp	r3, #36	; 0x24
 80080a2:	d906      	bls.n	80080b2 <_strtol_l.constprop.0+0x1a>
 80080a4:	f7fe fafe 	bl	80066a4 <__errno>
 80080a8:	2316      	movs	r3, #22
 80080aa:	6003      	str	r3, [r0, #0]
 80080ac:	2000      	movs	r0, #0
 80080ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008198 <_strtol_l.constprop.0+0x100>
 80080b6:	460d      	mov	r5, r1
 80080b8:	462e      	mov	r6, r5
 80080ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80080c2:	f017 0708 	ands.w	r7, r7, #8
 80080c6:	d1f7      	bne.n	80080b8 <_strtol_l.constprop.0+0x20>
 80080c8:	2c2d      	cmp	r4, #45	; 0x2d
 80080ca:	d132      	bne.n	8008132 <_strtol_l.constprop.0+0x9a>
 80080cc:	782c      	ldrb	r4, [r5, #0]
 80080ce:	2701      	movs	r7, #1
 80080d0:	1cb5      	adds	r5, r6, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d05b      	beq.n	800818e <_strtol_l.constprop.0+0xf6>
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d109      	bne.n	80080ee <_strtol_l.constprop.0+0x56>
 80080da:	2c30      	cmp	r4, #48	; 0x30
 80080dc:	d107      	bne.n	80080ee <_strtol_l.constprop.0+0x56>
 80080de:	782c      	ldrb	r4, [r5, #0]
 80080e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80080e4:	2c58      	cmp	r4, #88	; 0x58
 80080e6:	d14d      	bne.n	8008184 <_strtol_l.constprop.0+0xec>
 80080e8:	786c      	ldrb	r4, [r5, #1]
 80080ea:	2310      	movs	r3, #16
 80080ec:	3502      	adds	r5, #2
 80080ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80080f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80080f6:	f04f 0c00 	mov.w	ip, #0
 80080fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80080fe:	4666      	mov	r6, ip
 8008100:	fb03 8a19 	mls	sl, r3, r9, r8
 8008104:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008108:	f1be 0f09 	cmp.w	lr, #9
 800810c:	d816      	bhi.n	800813c <_strtol_l.constprop.0+0xa4>
 800810e:	4674      	mov	r4, lr
 8008110:	42a3      	cmp	r3, r4
 8008112:	dd24      	ble.n	800815e <_strtol_l.constprop.0+0xc6>
 8008114:	f1bc 0f00 	cmp.w	ip, #0
 8008118:	db1e      	blt.n	8008158 <_strtol_l.constprop.0+0xc0>
 800811a:	45b1      	cmp	r9, r6
 800811c:	d31c      	bcc.n	8008158 <_strtol_l.constprop.0+0xc0>
 800811e:	d101      	bne.n	8008124 <_strtol_l.constprop.0+0x8c>
 8008120:	45a2      	cmp	sl, r4
 8008122:	db19      	blt.n	8008158 <_strtol_l.constprop.0+0xc0>
 8008124:	fb06 4603 	mla	r6, r6, r3, r4
 8008128:	f04f 0c01 	mov.w	ip, #1
 800812c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008130:	e7e8      	b.n	8008104 <_strtol_l.constprop.0+0x6c>
 8008132:	2c2b      	cmp	r4, #43	; 0x2b
 8008134:	bf04      	itt	eq
 8008136:	782c      	ldrbeq	r4, [r5, #0]
 8008138:	1cb5      	addeq	r5, r6, #2
 800813a:	e7ca      	b.n	80080d2 <_strtol_l.constprop.0+0x3a>
 800813c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008140:	f1be 0f19 	cmp.w	lr, #25
 8008144:	d801      	bhi.n	800814a <_strtol_l.constprop.0+0xb2>
 8008146:	3c37      	subs	r4, #55	; 0x37
 8008148:	e7e2      	b.n	8008110 <_strtol_l.constprop.0+0x78>
 800814a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800814e:	f1be 0f19 	cmp.w	lr, #25
 8008152:	d804      	bhi.n	800815e <_strtol_l.constprop.0+0xc6>
 8008154:	3c57      	subs	r4, #87	; 0x57
 8008156:	e7db      	b.n	8008110 <_strtol_l.constprop.0+0x78>
 8008158:	f04f 3cff 	mov.w	ip, #4294967295
 800815c:	e7e6      	b.n	800812c <_strtol_l.constprop.0+0x94>
 800815e:	f1bc 0f00 	cmp.w	ip, #0
 8008162:	da05      	bge.n	8008170 <_strtol_l.constprop.0+0xd8>
 8008164:	2322      	movs	r3, #34	; 0x22
 8008166:	6003      	str	r3, [r0, #0]
 8008168:	4646      	mov	r6, r8
 800816a:	b942      	cbnz	r2, 800817e <_strtol_l.constprop.0+0xe6>
 800816c:	4630      	mov	r0, r6
 800816e:	e79e      	b.n	80080ae <_strtol_l.constprop.0+0x16>
 8008170:	b107      	cbz	r7, 8008174 <_strtol_l.constprop.0+0xdc>
 8008172:	4276      	negs	r6, r6
 8008174:	2a00      	cmp	r2, #0
 8008176:	d0f9      	beq.n	800816c <_strtol_l.constprop.0+0xd4>
 8008178:	f1bc 0f00 	cmp.w	ip, #0
 800817c:	d000      	beq.n	8008180 <_strtol_l.constprop.0+0xe8>
 800817e:	1e69      	subs	r1, r5, #1
 8008180:	6011      	str	r1, [r2, #0]
 8008182:	e7f3      	b.n	800816c <_strtol_l.constprop.0+0xd4>
 8008184:	2430      	movs	r4, #48	; 0x30
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1b1      	bne.n	80080ee <_strtol_l.constprop.0+0x56>
 800818a:	2308      	movs	r3, #8
 800818c:	e7af      	b.n	80080ee <_strtol_l.constprop.0+0x56>
 800818e:	2c30      	cmp	r4, #48	; 0x30
 8008190:	d0a5      	beq.n	80080de <_strtol_l.constprop.0+0x46>
 8008192:	230a      	movs	r3, #10
 8008194:	e7ab      	b.n	80080ee <_strtol_l.constprop.0+0x56>
 8008196:	bf00      	nop
 8008198:	0800b0c1 	.word	0x0800b0c1

0800819c <_strtol_r>:
 800819c:	f7ff bf7c 	b.w	8008098 <_strtol_l.constprop.0>

080081a0 <quorem>:
 80081a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	6903      	ldr	r3, [r0, #16]
 80081a6:	690c      	ldr	r4, [r1, #16]
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	4607      	mov	r7, r0
 80081ac:	f2c0 8081 	blt.w	80082b2 <quorem+0x112>
 80081b0:	3c01      	subs	r4, #1
 80081b2:	f101 0814 	add.w	r8, r1, #20
 80081b6:	f100 0514 	add.w	r5, r0, #20
 80081ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081c8:	3301      	adds	r3, #1
 80081ca:	429a      	cmp	r2, r3
 80081cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80081d8:	d331      	bcc.n	800823e <quorem+0x9e>
 80081da:	f04f 0e00 	mov.w	lr, #0
 80081de:	4640      	mov	r0, r8
 80081e0:	46ac      	mov	ip, r5
 80081e2:	46f2      	mov	sl, lr
 80081e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80081e8:	b293      	uxth	r3, r2
 80081ea:	fb06 e303 	mla	r3, r6, r3, lr
 80081ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	ebaa 0303 	sub.w	r3, sl, r3
 80081f8:	f8dc a000 	ldr.w	sl, [ip]
 80081fc:	0c12      	lsrs	r2, r2, #16
 80081fe:	fa13 f38a 	uxtah	r3, r3, sl
 8008202:	fb06 e202 	mla	r2, r6, r2, lr
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	9b00      	ldr	r3, [sp, #0]
 800820a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800820e:	b292      	uxth	r2, r2
 8008210:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008214:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008218:	f8bd 3000 	ldrh.w	r3, [sp]
 800821c:	4581      	cmp	r9, r0
 800821e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008222:	f84c 3b04 	str.w	r3, [ip], #4
 8008226:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800822a:	d2db      	bcs.n	80081e4 <quorem+0x44>
 800822c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008230:	b92b      	cbnz	r3, 800823e <quorem+0x9e>
 8008232:	9b01      	ldr	r3, [sp, #4]
 8008234:	3b04      	subs	r3, #4
 8008236:	429d      	cmp	r5, r3
 8008238:	461a      	mov	r2, r3
 800823a:	d32e      	bcc.n	800829a <quorem+0xfa>
 800823c:	613c      	str	r4, [r7, #16]
 800823e:	4638      	mov	r0, r7
 8008240:	f001 fc90 	bl	8009b64 <__mcmp>
 8008244:	2800      	cmp	r0, #0
 8008246:	db24      	blt.n	8008292 <quorem+0xf2>
 8008248:	3601      	adds	r6, #1
 800824a:	4628      	mov	r0, r5
 800824c:	f04f 0c00 	mov.w	ip, #0
 8008250:	f858 2b04 	ldr.w	r2, [r8], #4
 8008254:	f8d0 e000 	ldr.w	lr, [r0]
 8008258:	b293      	uxth	r3, r2
 800825a:	ebac 0303 	sub.w	r3, ip, r3
 800825e:	0c12      	lsrs	r2, r2, #16
 8008260:	fa13 f38e 	uxtah	r3, r3, lr
 8008264:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008268:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800826c:	b29b      	uxth	r3, r3
 800826e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008272:	45c1      	cmp	r9, r8
 8008274:	f840 3b04 	str.w	r3, [r0], #4
 8008278:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800827c:	d2e8      	bcs.n	8008250 <quorem+0xb0>
 800827e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008286:	b922      	cbnz	r2, 8008292 <quorem+0xf2>
 8008288:	3b04      	subs	r3, #4
 800828a:	429d      	cmp	r5, r3
 800828c:	461a      	mov	r2, r3
 800828e:	d30a      	bcc.n	80082a6 <quorem+0x106>
 8008290:	613c      	str	r4, [r7, #16]
 8008292:	4630      	mov	r0, r6
 8008294:	b003      	add	sp, #12
 8008296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829a:	6812      	ldr	r2, [r2, #0]
 800829c:	3b04      	subs	r3, #4
 800829e:	2a00      	cmp	r2, #0
 80082a0:	d1cc      	bne.n	800823c <quorem+0x9c>
 80082a2:	3c01      	subs	r4, #1
 80082a4:	e7c7      	b.n	8008236 <quorem+0x96>
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	3b04      	subs	r3, #4
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	d1f0      	bne.n	8008290 <quorem+0xf0>
 80082ae:	3c01      	subs	r4, #1
 80082b0:	e7eb      	b.n	800828a <quorem+0xea>
 80082b2:	2000      	movs	r0, #0
 80082b4:	e7ee      	b.n	8008294 <quorem+0xf4>
	...

080082b8 <_dtoa_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	ed2d 8b04 	vpush	{d8-d9}
 80082c0:	ec57 6b10 	vmov	r6, r7, d0
 80082c4:	b093      	sub	sp, #76	; 0x4c
 80082c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082cc:	9106      	str	r1, [sp, #24]
 80082ce:	ee10 aa10 	vmov	sl, s0
 80082d2:	4604      	mov	r4, r0
 80082d4:	9209      	str	r2, [sp, #36]	; 0x24
 80082d6:	930c      	str	r3, [sp, #48]	; 0x30
 80082d8:	46bb      	mov	fp, r7
 80082da:	b975      	cbnz	r5, 80082fa <_dtoa_r+0x42>
 80082dc:	2010      	movs	r0, #16
 80082de:	f001 f94d 	bl	800957c <malloc>
 80082e2:	4602      	mov	r2, r0
 80082e4:	6260      	str	r0, [r4, #36]	; 0x24
 80082e6:	b920      	cbnz	r0, 80082f2 <_dtoa_r+0x3a>
 80082e8:	4ba7      	ldr	r3, [pc, #668]	; (8008588 <_dtoa_r+0x2d0>)
 80082ea:	21ea      	movs	r1, #234	; 0xea
 80082ec:	48a7      	ldr	r0, [pc, #668]	; (800858c <_dtoa_r+0x2d4>)
 80082ee:	f002 f8bd 	bl	800a46c <__assert_func>
 80082f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082f6:	6005      	str	r5, [r0, #0]
 80082f8:	60c5      	str	r5, [r0, #12]
 80082fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082fc:	6819      	ldr	r1, [r3, #0]
 80082fe:	b151      	cbz	r1, 8008316 <_dtoa_r+0x5e>
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	604a      	str	r2, [r1, #4]
 8008304:	2301      	movs	r3, #1
 8008306:	4093      	lsls	r3, r2
 8008308:	608b      	str	r3, [r1, #8]
 800830a:	4620      	mov	r0, r4
 800830c:	f001 f99e 	bl	800964c <_Bfree>
 8008310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	1e3b      	subs	r3, r7, #0
 8008318:	bfaa      	itet	ge
 800831a:	2300      	movge	r3, #0
 800831c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008320:	f8c8 3000 	strge.w	r3, [r8]
 8008324:	4b9a      	ldr	r3, [pc, #616]	; (8008590 <_dtoa_r+0x2d8>)
 8008326:	bfbc      	itt	lt
 8008328:	2201      	movlt	r2, #1
 800832a:	f8c8 2000 	strlt.w	r2, [r8]
 800832e:	ea33 030b 	bics.w	r3, r3, fp
 8008332:	d11b      	bne.n	800836c <_dtoa_r+0xb4>
 8008334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008336:	f242 730f 	movw	r3, #9999	; 0x270f
 800833a:	6013      	str	r3, [r2, #0]
 800833c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008340:	4333      	orrs	r3, r6
 8008342:	f000 8592 	beq.w	8008e6a <_dtoa_r+0xbb2>
 8008346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008348:	b963      	cbnz	r3, 8008364 <_dtoa_r+0xac>
 800834a:	4b92      	ldr	r3, [pc, #584]	; (8008594 <_dtoa_r+0x2dc>)
 800834c:	e022      	b.n	8008394 <_dtoa_r+0xdc>
 800834e:	4b92      	ldr	r3, [pc, #584]	; (8008598 <_dtoa_r+0x2e0>)
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	3308      	adds	r3, #8
 8008354:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	9801      	ldr	r0, [sp, #4]
 800835a:	b013      	add	sp, #76	; 0x4c
 800835c:	ecbd 8b04 	vpop	{d8-d9}
 8008360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008364:	4b8b      	ldr	r3, [pc, #556]	; (8008594 <_dtoa_r+0x2dc>)
 8008366:	9301      	str	r3, [sp, #4]
 8008368:	3303      	adds	r3, #3
 800836a:	e7f3      	b.n	8008354 <_dtoa_r+0x9c>
 800836c:	2200      	movs	r2, #0
 800836e:	2300      	movs	r3, #0
 8008370:	4650      	mov	r0, sl
 8008372:	4659      	mov	r1, fp
 8008374:	f7f8 fbc8 	bl	8000b08 <__aeabi_dcmpeq>
 8008378:	ec4b ab19 	vmov	d9, sl, fp
 800837c:	4680      	mov	r8, r0
 800837e:	b158      	cbz	r0, 8008398 <_dtoa_r+0xe0>
 8008380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008382:	2301      	movs	r3, #1
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 856b 	beq.w	8008e64 <_dtoa_r+0xbac>
 800838e:	4883      	ldr	r0, [pc, #524]	; (800859c <_dtoa_r+0x2e4>)
 8008390:	6018      	str	r0, [r3, #0]
 8008392:	1e43      	subs	r3, r0, #1
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	e7df      	b.n	8008358 <_dtoa_r+0xa0>
 8008398:	ec4b ab10 	vmov	d0, sl, fp
 800839c:	aa10      	add	r2, sp, #64	; 0x40
 800839e:	a911      	add	r1, sp, #68	; 0x44
 80083a0:	4620      	mov	r0, r4
 80083a2:	f001 fd01 	bl	8009da8 <__d2b>
 80083a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083aa:	ee08 0a10 	vmov	s16, r0
 80083ae:	2d00      	cmp	r5, #0
 80083b0:	f000 8084 	beq.w	80084bc <_dtoa_r+0x204>
 80083b4:	ee19 3a90 	vmov	r3, s19
 80083b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083c0:	4656      	mov	r6, sl
 80083c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80083ce:	4b74      	ldr	r3, [pc, #464]	; (80085a0 <_dtoa_r+0x2e8>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	4630      	mov	r0, r6
 80083d4:	4639      	mov	r1, r7
 80083d6:	f7f7 ff77 	bl	80002c8 <__aeabi_dsub>
 80083da:	a365      	add	r3, pc, #404	; (adr r3, 8008570 <_dtoa_r+0x2b8>)
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f7f8 f92a 	bl	8000638 <__aeabi_dmul>
 80083e4:	a364      	add	r3, pc, #400	; (adr r3, 8008578 <_dtoa_r+0x2c0>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f7f7 ff6f 	bl	80002cc <__adddf3>
 80083ee:	4606      	mov	r6, r0
 80083f0:	4628      	mov	r0, r5
 80083f2:	460f      	mov	r7, r1
 80083f4:	f7f8 f8b6 	bl	8000564 <__aeabi_i2d>
 80083f8:	a361      	add	r3, pc, #388	; (adr r3, 8008580 <_dtoa_r+0x2c8>)
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f7f8 f91b 	bl	8000638 <__aeabi_dmul>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4630      	mov	r0, r6
 8008408:	4639      	mov	r1, r7
 800840a:	f7f7 ff5f 	bl	80002cc <__adddf3>
 800840e:	4606      	mov	r6, r0
 8008410:	460f      	mov	r7, r1
 8008412:	f7f8 fbc1 	bl	8000b98 <__aeabi_d2iz>
 8008416:	2200      	movs	r2, #0
 8008418:	9000      	str	r0, [sp, #0]
 800841a:	2300      	movs	r3, #0
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f8 fb7c 	bl	8000b1c <__aeabi_dcmplt>
 8008424:	b150      	cbz	r0, 800843c <_dtoa_r+0x184>
 8008426:	9800      	ldr	r0, [sp, #0]
 8008428:	f7f8 f89c 	bl	8000564 <__aeabi_i2d>
 800842c:	4632      	mov	r2, r6
 800842e:	463b      	mov	r3, r7
 8008430:	f7f8 fb6a 	bl	8000b08 <__aeabi_dcmpeq>
 8008434:	b910      	cbnz	r0, 800843c <_dtoa_r+0x184>
 8008436:	9b00      	ldr	r3, [sp, #0]
 8008438:	3b01      	subs	r3, #1
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	9b00      	ldr	r3, [sp, #0]
 800843e:	2b16      	cmp	r3, #22
 8008440:	d85a      	bhi.n	80084f8 <_dtoa_r+0x240>
 8008442:	9a00      	ldr	r2, [sp, #0]
 8008444:	4b57      	ldr	r3, [pc, #348]	; (80085a4 <_dtoa_r+0x2ec>)
 8008446:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	ec51 0b19 	vmov	r0, r1, d9
 8008452:	f7f8 fb63 	bl	8000b1c <__aeabi_dcmplt>
 8008456:	2800      	cmp	r0, #0
 8008458:	d050      	beq.n	80084fc <_dtoa_r+0x244>
 800845a:	9b00      	ldr	r3, [sp, #0]
 800845c:	3b01      	subs	r3, #1
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	2300      	movs	r3, #0
 8008462:	930b      	str	r3, [sp, #44]	; 0x2c
 8008464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008466:	1b5d      	subs	r5, r3, r5
 8008468:	1e6b      	subs	r3, r5, #1
 800846a:	9305      	str	r3, [sp, #20]
 800846c:	bf45      	ittet	mi
 800846e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008472:	9304      	strmi	r3, [sp, #16]
 8008474:	2300      	movpl	r3, #0
 8008476:	2300      	movmi	r3, #0
 8008478:	bf4c      	ite	mi
 800847a:	9305      	strmi	r3, [sp, #20]
 800847c:	9304      	strpl	r3, [sp, #16]
 800847e:	9b00      	ldr	r3, [sp, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	db3d      	blt.n	8008500 <_dtoa_r+0x248>
 8008484:	9b05      	ldr	r3, [sp, #20]
 8008486:	9a00      	ldr	r2, [sp, #0]
 8008488:	920a      	str	r2, [sp, #40]	; 0x28
 800848a:	4413      	add	r3, r2
 800848c:	9305      	str	r3, [sp, #20]
 800848e:	2300      	movs	r3, #0
 8008490:	9307      	str	r3, [sp, #28]
 8008492:	9b06      	ldr	r3, [sp, #24]
 8008494:	2b09      	cmp	r3, #9
 8008496:	f200 8089 	bhi.w	80085ac <_dtoa_r+0x2f4>
 800849a:	2b05      	cmp	r3, #5
 800849c:	bfc4      	itt	gt
 800849e:	3b04      	subgt	r3, #4
 80084a0:	9306      	strgt	r3, [sp, #24]
 80084a2:	9b06      	ldr	r3, [sp, #24]
 80084a4:	f1a3 0302 	sub.w	r3, r3, #2
 80084a8:	bfcc      	ite	gt
 80084aa:	2500      	movgt	r5, #0
 80084ac:	2501      	movle	r5, #1
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	f200 8087 	bhi.w	80085c2 <_dtoa_r+0x30a>
 80084b4:	e8df f003 	tbb	[pc, r3]
 80084b8:	59383a2d 	.word	0x59383a2d
 80084bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084c0:	441d      	add	r5, r3
 80084c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	bfc1      	itttt	gt
 80084ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80084d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084da:	bfda      	itte	le
 80084dc:	f1c3 0320 	rsble	r3, r3, #32
 80084e0:	fa06 f003 	lslle.w	r0, r6, r3
 80084e4:	4318      	orrgt	r0, r3
 80084e6:	f7f8 f82d 	bl	8000544 <__aeabi_ui2d>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4606      	mov	r6, r0
 80084ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80084f2:	3d01      	subs	r5, #1
 80084f4:	930e      	str	r3, [sp, #56]	; 0x38
 80084f6:	e76a      	b.n	80083ce <_dtoa_r+0x116>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e7b2      	b.n	8008462 <_dtoa_r+0x1aa>
 80084fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80084fe:	e7b1      	b.n	8008464 <_dtoa_r+0x1ac>
 8008500:	9b04      	ldr	r3, [sp, #16]
 8008502:	9a00      	ldr	r2, [sp, #0]
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	9304      	str	r3, [sp, #16]
 8008508:	4253      	negs	r3, r2
 800850a:	9307      	str	r3, [sp, #28]
 800850c:	2300      	movs	r3, #0
 800850e:	930a      	str	r3, [sp, #40]	; 0x28
 8008510:	e7bf      	b.n	8008492 <_dtoa_r+0x1da>
 8008512:	2300      	movs	r3, #0
 8008514:	9308      	str	r3, [sp, #32]
 8008516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008518:	2b00      	cmp	r3, #0
 800851a:	dc55      	bgt.n	80085c8 <_dtoa_r+0x310>
 800851c:	2301      	movs	r3, #1
 800851e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008522:	461a      	mov	r2, r3
 8008524:	9209      	str	r2, [sp, #36]	; 0x24
 8008526:	e00c      	b.n	8008542 <_dtoa_r+0x28a>
 8008528:	2301      	movs	r3, #1
 800852a:	e7f3      	b.n	8008514 <_dtoa_r+0x25c>
 800852c:	2300      	movs	r3, #0
 800852e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008530:	9308      	str	r3, [sp, #32]
 8008532:	9b00      	ldr	r3, [sp, #0]
 8008534:	4413      	add	r3, r2
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	3301      	adds	r3, #1
 800853a:	2b01      	cmp	r3, #1
 800853c:	9303      	str	r3, [sp, #12]
 800853e:	bfb8      	it	lt
 8008540:	2301      	movlt	r3, #1
 8008542:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008544:	2200      	movs	r2, #0
 8008546:	6042      	str	r2, [r0, #4]
 8008548:	2204      	movs	r2, #4
 800854a:	f102 0614 	add.w	r6, r2, #20
 800854e:	429e      	cmp	r6, r3
 8008550:	6841      	ldr	r1, [r0, #4]
 8008552:	d93d      	bls.n	80085d0 <_dtoa_r+0x318>
 8008554:	4620      	mov	r0, r4
 8008556:	f001 f839 	bl	80095cc <_Balloc>
 800855a:	9001      	str	r0, [sp, #4]
 800855c:	2800      	cmp	r0, #0
 800855e:	d13b      	bne.n	80085d8 <_dtoa_r+0x320>
 8008560:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <_dtoa_r+0x2f0>)
 8008562:	4602      	mov	r2, r0
 8008564:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008568:	e6c0      	b.n	80082ec <_dtoa_r+0x34>
 800856a:	2301      	movs	r3, #1
 800856c:	e7df      	b.n	800852e <_dtoa_r+0x276>
 800856e:	bf00      	nop
 8008570:	636f4361 	.word	0x636f4361
 8008574:	3fd287a7 	.word	0x3fd287a7
 8008578:	8b60c8b3 	.word	0x8b60c8b3
 800857c:	3fc68a28 	.word	0x3fc68a28
 8008580:	509f79fb 	.word	0x509f79fb
 8008584:	3fd34413 	.word	0x3fd34413
 8008588:	0800b1ce 	.word	0x0800b1ce
 800858c:	0800b1e5 	.word	0x0800b1e5
 8008590:	7ff00000 	.word	0x7ff00000
 8008594:	0800b1ca 	.word	0x0800b1ca
 8008598:	0800b1c1 	.word	0x0800b1c1
 800859c:	0800b045 	.word	0x0800b045
 80085a0:	3ff80000 	.word	0x3ff80000
 80085a4:	0800b350 	.word	0x0800b350
 80085a8:	0800b240 	.word	0x0800b240
 80085ac:	2501      	movs	r5, #1
 80085ae:	2300      	movs	r3, #0
 80085b0:	9306      	str	r3, [sp, #24]
 80085b2:	9508      	str	r5, [sp, #32]
 80085b4:	f04f 33ff 	mov.w	r3, #4294967295
 80085b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085bc:	2200      	movs	r2, #0
 80085be:	2312      	movs	r3, #18
 80085c0:	e7b0      	b.n	8008524 <_dtoa_r+0x26c>
 80085c2:	2301      	movs	r3, #1
 80085c4:	9308      	str	r3, [sp, #32]
 80085c6:	e7f5      	b.n	80085b4 <_dtoa_r+0x2fc>
 80085c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085ce:	e7b8      	b.n	8008542 <_dtoa_r+0x28a>
 80085d0:	3101      	adds	r1, #1
 80085d2:	6041      	str	r1, [r0, #4]
 80085d4:	0052      	lsls	r2, r2, #1
 80085d6:	e7b8      	b.n	800854a <_dtoa_r+0x292>
 80085d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085da:	9a01      	ldr	r2, [sp, #4]
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	2b0e      	cmp	r3, #14
 80085e2:	f200 809d 	bhi.w	8008720 <_dtoa_r+0x468>
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	f000 809a 	beq.w	8008720 <_dtoa_r+0x468>
 80085ec:	9b00      	ldr	r3, [sp, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dd32      	ble.n	8008658 <_dtoa_r+0x3a0>
 80085f2:	4ab7      	ldr	r2, [pc, #732]	; (80088d0 <_dtoa_r+0x618>)
 80085f4:	f003 030f 	and.w	r3, r3, #15
 80085f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008600:	9b00      	ldr	r3, [sp, #0]
 8008602:	05d8      	lsls	r0, r3, #23
 8008604:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008608:	d516      	bpl.n	8008638 <_dtoa_r+0x380>
 800860a:	4bb2      	ldr	r3, [pc, #712]	; (80088d4 <_dtoa_r+0x61c>)
 800860c:	ec51 0b19 	vmov	r0, r1, d9
 8008610:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008614:	f7f8 f93a 	bl	800088c <__aeabi_ddiv>
 8008618:	f007 070f 	and.w	r7, r7, #15
 800861c:	4682      	mov	sl, r0
 800861e:	468b      	mov	fp, r1
 8008620:	2503      	movs	r5, #3
 8008622:	4eac      	ldr	r6, [pc, #688]	; (80088d4 <_dtoa_r+0x61c>)
 8008624:	b957      	cbnz	r7, 800863c <_dtoa_r+0x384>
 8008626:	4642      	mov	r2, r8
 8008628:	464b      	mov	r3, r9
 800862a:	4650      	mov	r0, sl
 800862c:	4659      	mov	r1, fp
 800862e:	f7f8 f92d 	bl	800088c <__aeabi_ddiv>
 8008632:	4682      	mov	sl, r0
 8008634:	468b      	mov	fp, r1
 8008636:	e028      	b.n	800868a <_dtoa_r+0x3d2>
 8008638:	2502      	movs	r5, #2
 800863a:	e7f2      	b.n	8008622 <_dtoa_r+0x36a>
 800863c:	07f9      	lsls	r1, r7, #31
 800863e:	d508      	bpl.n	8008652 <_dtoa_r+0x39a>
 8008640:	4640      	mov	r0, r8
 8008642:	4649      	mov	r1, r9
 8008644:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008648:	f7f7 fff6 	bl	8000638 <__aeabi_dmul>
 800864c:	3501      	adds	r5, #1
 800864e:	4680      	mov	r8, r0
 8008650:	4689      	mov	r9, r1
 8008652:	107f      	asrs	r7, r7, #1
 8008654:	3608      	adds	r6, #8
 8008656:	e7e5      	b.n	8008624 <_dtoa_r+0x36c>
 8008658:	f000 809b 	beq.w	8008792 <_dtoa_r+0x4da>
 800865c:	9b00      	ldr	r3, [sp, #0]
 800865e:	4f9d      	ldr	r7, [pc, #628]	; (80088d4 <_dtoa_r+0x61c>)
 8008660:	425e      	negs	r6, r3
 8008662:	4b9b      	ldr	r3, [pc, #620]	; (80088d0 <_dtoa_r+0x618>)
 8008664:	f006 020f 	and.w	r2, r6, #15
 8008668:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	ec51 0b19 	vmov	r0, r1, d9
 8008674:	f7f7 ffe0 	bl	8000638 <__aeabi_dmul>
 8008678:	1136      	asrs	r6, r6, #4
 800867a:	4682      	mov	sl, r0
 800867c:	468b      	mov	fp, r1
 800867e:	2300      	movs	r3, #0
 8008680:	2502      	movs	r5, #2
 8008682:	2e00      	cmp	r6, #0
 8008684:	d17a      	bne.n	800877c <_dtoa_r+0x4c4>
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1d3      	bne.n	8008632 <_dtoa_r+0x37a>
 800868a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8082 	beq.w	8008796 <_dtoa_r+0x4de>
 8008692:	4b91      	ldr	r3, [pc, #580]	; (80088d8 <_dtoa_r+0x620>)
 8008694:	2200      	movs	r2, #0
 8008696:	4650      	mov	r0, sl
 8008698:	4659      	mov	r1, fp
 800869a:	f7f8 fa3f 	bl	8000b1c <__aeabi_dcmplt>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d079      	beq.n	8008796 <_dtoa_r+0x4de>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d076      	beq.n	8008796 <_dtoa_r+0x4de>
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	dd36      	ble.n	800871c <_dtoa_r+0x464>
 80086ae:	9b00      	ldr	r3, [sp, #0]
 80086b0:	4650      	mov	r0, sl
 80086b2:	4659      	mov	r1, fp
 80086b4:	1e5f      	subs	r7, r3, #1
 80086b6:	2200      	movs	r2, #0
 80086b8:	4b88      	ldr	r3, [pc, #544]	; (80088dc <_dtoa_r+0x624>)
 80086ba:	f7f7 ffbd 	bl	8000638 <__aeabi_dmul>
 80086be:	9e02      	ldr	r6, [sp, #8]
 80086c0:	4682      	mov	sl, r0
 80086c2:	468b      	mov	fp, r1
 80086c4:	3501      	adds	r5, #1
 80086c6:	4628      	mov	r0, r5
 80086c8:	f7f7 ff4c 	bl	8000564 <__aeabi_i2d>
 80086cc:	4652      	mov	r2, sl
 80086ce:	465b      	mov	r3, fp
 80086d0:	f7f7 ffb2 	bl	8000638 <__aeabi_dmul>
 80086d4:	4b82      	ldr	r3, [pc, #520]	; (80088e0 <_dtoa_r+0x628>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	f7f7 fdf8 	bl	80002cc <__adddf3>
 80086dc:	46d0      	mov	r8, sl
 80086de:	46d9      	mov	r9, fp
 80086e0:	4682      	mov	sl, r0
 80086e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	d158      	bne.n	800879c <_dtoa_r+0x4e4>
 80086ea:	4b7e      	ldr	r3, [pc, #504]	; (80088e4 <_dtoa_r+0x62c>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	4640      	mov	r0, r8
 80086f0:	4649      	mov	r1, r9
 80086f2:	f7f7 fde9 	bl	80002c8 <__aeabi_dsub>
 80086f6:	4652      	mov	r2, sl
 80086f8:	465b      	mov	r3, fp
 80086fa:	4680      	mov	r8, r0
 80086fc:	4689      	mov	r9, r1
 80086fe:	f7f8 fa2b 	bl	8000b58 <__aeabi_dcmpgt>
 8008702:	2800      	cmp	r0, #0
 8008704:	f040 8295 	bne.w	8008c32 <_dtoa_r+0x97a>
 8008708:	4652      	mov	r2, sl
 800870a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800870e:	4640      	mov	r0, r8
 8008710:	4649      	mov	r1, r9
 8008712:	f7f8 fa03 	bl	8000b1c <__aeabi_dcmplt>
 8008716:	2800      	cmp	r0, #0
 8008718:	f040 8289 	bne.w	8008c2e <_dtoa_r+0x976>
 800871c:	ec5b ab19 	vmov	sl, fp, d9
 8008720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008722:	2b00      	cmp	r3, #0
 8008724:	f2c0 8148 	blt.w	80089b8 <_dtoa_r+0x700>
 8008728:	9a00      	ldr	r2, [sp, #0]
 800872a:	2a0e      	cmp	r2, #14
 800872c:	f300 8144 	bgt.w	80089b8 <_dtoa_r+0x700>
 8008730:	4b67      	ldr	r3, [pc, #412]	; (80088d0 <_dtoa_r+0x618>)
 8008732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008736:	e9d3 8900 	ldrd	r8, r9, [r3]
 800873a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	f280 80d5 	bge.w	80088ec <_dtoa_r+0x634>
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f300 80d1 	bgt.w	80088ec <_dtoa_r+0x634>
 800874a:	f040 826f 	bne.w	8008c2c <_dtoa_r+0x974>
 800874e:	4b65      	ldr	r3, [pc, #404]	; (80088e4 <_dtoa_r+0x62c>)
 8008750:	2200      	movs	r2, #0
 8008752:	4640      	mov	r0, r8
 8008754:	4649      	mov	r1, r9
 8008756:	f7f7 ff6f 	bl	8000638 <__aeabi_dmul>
 800875a:	4652      	mov	r2, sl
 800875c:	465b      	mov	r3, fp
 800875e:	f7f8 f9f1 	bl	8000b44 <__aeabi_dcmpge>
 8008762:	9e03      	ldr	r6, [sp, #12]
 8008764:	4637      	mov	r7, r6
 8008766:	2800      	cmp	r0, #0
 8008768:	f040 8245 	bne.w	8008bf6 <_dtoa_r+0x93e>
 800876c:	9d01      	ldr	r5, [sp, #4]
 800876e:	2331      	movs	r3, #49	; 0x31
 8008770:	f805 3b01 	strb.w	r3, [r5], #1
 8008774:	9b00      	ldr	r3, [sp, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	e240      	b.n	8008bfe <_dtoa_r+0x946>
 800877c:	07f2      	lsls	r2, r6, #31
 800877e:	d505      	bpl.n	800878c <_dtoa_r+0x4d4>
 8008780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008784:	f7f7 ff58 	bl	8000638 <__aeabi_dmul>
 8008788:	3501      	adds	r5, #1
 800878a:	2301      	movs	r3, #1
 800878c:	1076      	asrs	r6, r6, #1
 800878e:	3708      	adds	r7, #8
 8008790:	e777      	b.n	8008682 <_dtoa_r+0x3ca>
 8008792:	2502      	movs	r5, #2
 8008794:	e779      	b.n	800868a <_dtoa_r+0x3d2>
 8008796:	9f00      	ldr	r7, [sp, #0]
 8008798:	9e03      	ldr	r6, [sp, #12]
 800879a:	e794      	b.n	80086c6 <_dtoa_r+0x40e>
 800879c:	9901      	ldr	r1, [sp, #4]
 800879e:	4b4c      	ldr	r3, [pc, #304]	; (80088d0 <_dtoa_r+0x618>)
 80087a0:	4431      	add	r1, r6
 80087a2:	910d      	str	r1, [sp, #52]	; 0x34
 80087a4:	9908      	ldr	r1, [sp, #32]
 80087a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087ae:	2900      	cmp	r1, #0
 80087b0:	d043      	beq.n	800883a <_dtoa_r+0x582>
 80087b2:	494d      	ldr	r1, [pc, #308]	; (80088e8 <_dtoa_r+0x630>)
 80087b4:	2000      	movs	r0, #0
 80087b6:	f7f8 f869 	bl	800088c <__aeabi_ddiv>
 80087ba:	4652      	mov	r2, sl
 80087bc:	465b      	mov	r3, fp
 80087be:	f7f7 fd83 	bl	80002c8 <__aeabi_dsub>
 80087c2:	9d01      	ldr	r5, [sp, #4]
 80087c4:	4682      	mov	sl, r0
 80087c6:	468b      	mov	fp, r1
 80087c8:	4649      	mov	r1, r9
 80087ca:	4640      	mov	r0, r8
 80087cc:	f7f8 f9e4 	bl	8000b98 <__aeabi_d2iz>
 80087d0:	4606      	mov	r6, r0
 80087d2:	f7f7 fec7 	bl	8000564 <__aeabi_i2d>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4640      	mov	r0, r8
 80087dc:	4649      	mov	r1, r9
 80087de:	f7f7 fd73 	bl	80002c8 <__aeabi_dsub>
 80087e2:	3630      	adds	r6, #48	; 0x30
 80087e4:	f805 6b01 	strb.w	r6, [r5], #1
 80087e8:	4652      	mov	r2, sl
 80087ea:	465b      	mov	r3, fp
 80087ec:	4680      	mov	r8, r0
 80087ee:	4689      	mov	r9, r1
 80087f0:	f7f8 f994 	bl	8000b1c <__aeabi_dcmplt>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d163      	bne.n	80088c0 <_dtoa_r+0x608>
 80087f8:	4642      	mov	r2, r8
 80087fa:	464b      	mov	r3, r9
 80087fc:	4936      	ldr	r1, [pc, #216]	; (80088d8 <_dtoa_r+0x620>)
 80087fe:	2000      	movs	r0, #0
 8008800:	f7f7 fd62 	bl	80002c8 <__aeabi_dsub>
 8008804:	4652      	mov	r2, sl
 8008806:	465b      	mov	r3, fp
 8008808:	f7f8 f988 	bl	8000b1c <__aeabi_dcmplt>
 800880c:	2800      	cmp	r0, #0
 800880e:	f040 80b5 	bne.w	800897c <_dtoa_r+0x6c4>
 8008812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008814:	429d      	cmp	r5, r3
 8008816:	d081      	beq.n	800871c <_dtoa_r+0x464>
 8008818:	4b30      	ldr	r3, [pc, #192]	; (80088dc <_dtoa_r+0x624>)
 800881a:	2200      	movs	r2, #0
 800881c:	4650      	mov	r0, sl
 800881e:	4659      	mov	r1, fp
 8008820:	f7f7 ff0a 	bl	8000638 <__aeabi_dmul>
 8008824:	4b2d      	ldr	r3, [pc, #180]	; (80088dc <_dtoa_r+0x624>)
 8008826:	4682      	mov	sl, r0
 8008828:	468b      	mov	fp, r1
 800882a:	4640      	mov	r0, r8
 800882c:	4649      	mov	r1, r9
 800882e:	2200      	movs	r2, #0
 8008830:	f7f7 ff02 	bl	8000638 <__aeabi_dmul>
 8008834:	4680      	mov	r8, r0
 8008836:	4689      	mov	r9, r1
 8008838:	e7c6      	b.n	80087c8 <_dtoa_r+0x510>
 800883a:	4650      	mov	r0, sl
 800883c:	4659      	mov	r1, fp
 800883e:	f7f7 fefb 	bl	8000638 <__aeabi_dmul>
 8008842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008844:	9d01      	ldr	r5, [sp, #4]
 8008846:	930f      	str	r3, [sp, #60]	; 0x3c
 8008848:	4682      	mov	sl, r0
 800884a:	468b      	mov	fp, r1
 800884c:	4649      	mov	r1, r9
 800884e:	4640      	mov	r0, r8
 8008850:	f7f8 f9a2 	bl	8000b98 <__aeabi_d2iz>
 8008854:	4606      	mov	r6, r0
 8008856:	f7f7 fe85 	bl	8000564 <__aeabi_i2d>
 800885a:	3630      	adds	r6, #48	; 0x30
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4640      	mov	r0, r8
 8008862:	4649      	mov	r1, r9
 8008864:	f7f7 fd30 	bl	80002c8 <__aeabi_dsub>
 8008868:	f805 6b01 	strb.w	r6, [r5], #1
 800886c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800886e:	429d      	cmp	r5, r3
 8008870:	4680      	mov	r8, r0
 8008872:	4689      	mov	r9, r1
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	d124      	bne.n	80088c4 <_dtoa_r+0x60c>
 800887a:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <_dtoa_r+0x630>)
 800887c:	4650      	mov	r0, sl
 800887e:	4659      	mov	r1, fp
 8008880:	f7f7 fd24 	bl	80002cc <__adddf3>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	f7f8 f964 	bl	8000b58 <__aeabi_dcmpgt>
 8008890:	2800      	cmp	r0, #0
 8008892:	d173      	bne.n	800897c <_dtoa_r+0x6c4>
 8008894:	4652      	mov	r2, sl
 8008896:	465b      	mov	r3, fp
 8008898:	4913      	ldr	r1, [pc, #76]	; (80088e8 <_dtoa_r+0x630>)
 800889a:	2000      	movs	r0, #0
 800889c:	f7f7 fd14 	bl	80002c8 <__aeabi_dsub>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4640      	mov	r0, r8
 80088a6:	4649      	mov	r1, r9
 80088a8:	f7f8 f938 	bl	8000b1c <__aeabi_dcmplt>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	f43f af35 	beq.w	800871c <_dtoa_r+0x464>
 80088b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088b4:	1e6b      	subs	r3, r5, #1
 80088b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088bc:	2b30      	cmp	r3, #48	; 0x30
 80088be:	d0f8      	beq.n	80088b2 <_dtoa_r+0x5fa>
 80088c0:	9700      	str	r7, [sp, #0]
 80088c2:	e049      	b.n	8008958 <_dtoa_r+0x6a0>
 80088c4:	4b05      	ldr	r3, [pc, #20]	; (80088dc <_dtoa_r+0x624>)
 80088c6:	f7f7 feb7 	bl	8000638 <__aeabi_dmul>
 80088ca:	4680      	mov	r8, r0
 80088cc:	4689      	mov	r9, r1
 80088ce:	e7bd      	b.n	800884c <_dtoa_r+0x594>
 80088d0:	0800b350 	.word	0x0800b350
 80088d4:	0800b328 	.word	0x0800b328
 80088d8:	3ff00000 	.word	0x3ff00000
 80088dc:	40240000 	.word	0x40240000
 80088e0:	401c0000 	.word	0x401c0000
 80088e4:	40140000 	.word	0x40140000
 80088e8:	3fe00000 	.word	0x3fe00000
 80088ec:	9d01      	ldr	r5, [sp, #4]
 80088ee:	4656      	mov	r6, sl
 80088f0:	465f      	mov	r7, fp
 80088f2:	4642      	mov	r2, r8
 80088f4:	464b      	mov	r3, r9
 80088f6:	4630      	mov	r0, r6
 80088f8:	4639      	mov	r1, r7
 80088fa:	f7f7 ffc7 	bl	800088c <__aeabi_ddiv>
 80088fe:	f7f8 f94b 	bl	8000b98 <__aeabi_d2iz>
 8008902:	4682      	mov	sl, r0
 8008904:	f7f7 fe2e 	bl	8000564 <__aeabi_i2d>
 8008908:	4642      	mov	r2, r8
 800890a:	464b      	mov	r3, r9
 800890c:	f7f7 fe94 	bl	8000638 <__aeabi_dmul>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4630      	mov	r0, r6
 8008916:	4639      	mov	r1, r7
 8008918:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800891c:	f7f7 fcd4 	bl	80002c8 <__aeabi_dsub>
 8008920:	f805 6b01 	strb.w	r6, [r5], #1
 8008924:	9e01      	ldr	r6, [sp, #4]
 8008926:	9f03      	ldr	r7, [sp, #12]
 8008928:	1bae      	subs	r6, r5, r6
 800892a:	42b7      	cmp	r7, r6
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	d135      	bne.n	800899e <_dtoa_r+0x6e6>
 8008932:	f7f7 fccb 	bl	80002cc <__adddf3>
 8008936:	4642      	mov	r2, r8
 8008938:	464b      	mov	r3, r9
 800893a:	4606      	mov	r6, r0
 800893c:	460f      	mov	r7, r1
 800893e:	f7f8 f90b 	bl	8000b58 <__aeabi_dcmpgt>
 8008942:	b9d0      	cbnz	r0, 800897a <_dtoa_r+0x6c2>
 8008944:	4642      	mov	r2, r8
 8008946:	464b      	mov	r3, r9
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f8 f8dc 	bl	8000b08 <__aeabi_dcmpeq>
 8008950:	b110      	cbz	r0, 8008958 <_dtoa_r+0x6a0>
 8008952:	f01a 0f01 	tst.w	sl, #1
 8008956:	d110      	bne.n	800897a <_dtoa_r+0x6c2>
 8008958:	4620      	mov	r0, r4
 800895a:	ee18 1a10 	vmov	r1, s16
 800895e:	f000 fe75 	bl	800964c <_Bfree>
 8008962:	2300      	movs	r3, #0
 8008964:	9800      	ldr	r0, [sp, #0]
 8008966:	702b      	strb	r3, [r5, #0]
 8008968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800896a:	3001      	adds	r0, #1
 800896c:	6018      	str	r0, [r3, #0]
 800896e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008970:	2b00      	cmp	r3, #0
 8008972:	f43f acf1 	beq.w	8008358 <_dtoa_r+0xa0>
 8008976:	601d      	str	r5, [r3, #0]
 8008978:	e4ee      	b.n	8008358 <_dtoa_r+0xa0>
 800897a:	9f00      	ldr	r7, [sp, #0]
 800897c:	462b      	mov	r3, r5
 800897e:	461d      	mov	r5, r3
 8008980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008984:	2a39      	cmp	r2, #57	; 0x39
 8008986:	d106      	bne.n	8008996 <_dtoa_r+0x6de>
 8008988:	9a01      	ldr	r2, [sp, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d1f7      	bne.n	800897e <_dtoa_r+0x6c6>
 800898e:	9901      	ldr	r1, [sp, #4]
 8008990:	2230      	movs	r2, #48	; 0x30
 8008992:	3701      	adds	r7, #1
 8008994:	700a      	strb	r2, [r1, #0]
 8008996:	781a      	ldrb	r2, [r3, #0]
 8008998:	3201      	adds	r2, #1
 800899a:	701a      	strb	r2, [r3, #0]
 800899c:	e790      	b.n	80088c0 <_dtoa_r+0x608>
 800899e:	4ba6      	ldr	r3, [pc, #664]	; (8008c38 <_dtoa_r+0x980>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	f7f7 fe49 	bl	8000638 <__aeabi_dmul>
 80089a6:	2200      	movs	r2, #0
 80089a8:	2300      	movs	r3, #0
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	f7f8 f8ab 	bl	8000b08 <__aeabi_dcmpeq>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d09d      	beq.n	80088f2 <_dtoa_r+0x63a>
 80089b6:	e7cf      	b.n	8008958 <_dtoa_r+0x6a0>
 80089b8:	9a08      	ldr	r2, [sp, #32]
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	f000 80d7 	beq.w	8008b6e <_dtoa_r+0x8b6>
 80089c0:	9a06      	ldr	r2, [sp, #24]
 80089c2:	2a01      	cmp	r2, #1
 80089c4:	f300 80ba 	bgt.w	8008b3c <_dtoa_r+0x884>
 80089c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089ca:	2a00      	cmp	r2, #0
 80089cc:	f000 80b2 	beq.w	8008b34 <_dtoa_r+0x87c>
 80089d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089d4:	9e07      	ldr	r6, [sp, #28]
 80089d6:	9d04      	ldr	r5, [sp, #16]
 80089d8:	9a04      	ldr	r2, [sp, #16]
 80089da:	441a      	add	r2, r3
 80089dc:	9204      	str	r2, [sp, #16]
 80089de:	9a05      	ldr	r2, [sp, #20]
 80089e0:	2101      	movs	r1, #1
 80089e2:	441a      	add	r2, r3
 80089e4:	4620      	mov	r0, r4
 80089e6:	9205      	str	r2, [sp, #20]
 80089e8:	f000 ff32 	bl	8009850 <__i2b>
 80089ec:	4607      	mov	r7, r0
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	dd0c      	ble.n	8008a0c <_dtoa_r+0x754>
 80089f2:	9b05      	ldr	r3, [sp, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dd09      	ble.n	8008a0c <_dtoa_r+0x754>
 80089f8:	42ab      	cmp	r3, r5
 80089fa:	9a04      	ldr	r2, [sp, #16]
 80089fc:	bfa8      	it	ge
 80089fe:	462b      	movge	r3, r5
 8008a00:	1ad2      	subs	r2, r2, r3
 8008a02:	9204      	str	r2, [sp, #16]
 8008a04:	9a05      	ldr	r2, [sp, #20]
 8008a06:	1aed      	subs	r5, r5, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	9305      	str	r3, [sp, #20]
 8008a0c:	9b07      	ldr	r3, [sp, #28]
 8008a0e:	b31b      	cbz	r3, 8008a58 <_dtoa_r+0x7a0>
 8008a10:	9b08      	ldr	r3, [sp, #32]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 80af 	beq.w	8008b76 <_dtoa_r+0x8be>
 8008a18:	2e00      	cmp	r6, #0
 8008a1a:	dd13      	ble.n	8008a44 <_dtoa_r+0x78c>
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	4632      	mov	r2, r6
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 ffd5 	bl	80099d0 <__pow5mult>
 8008a26:	ee18 2a10 	vmov	r2, s16
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 ff24 	bl	800987c <__multiply>
 8008a34:	ee18 1a10 	vmov	r1, s16
 8008a38:	4680      	mov	r8, r0
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 fe06 	bl	800964c <_Bfree>
 8008a40:	ee08 8a10 	vmov	s16, r8
 8008a44:	9b07      	ldr	r3, [sp, #28]
 8008a46:	1b9a      	subs	r2, r3, r6
 8008a48:	d006      	beq.n	8008a58 <_dtoa_r+0x7a0>
 8008a4a:	ee18 1a10 	vmov	r1, s16
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 ffbe 	bl	80099d0 <__pow5mult>
 8008a54:	ee08 0a10 	vmov	s16, r0
 8008a58:	2101      	movs	r1, #1
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fef8 	bl	8009850 <__i2b>
 8008a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	4606      	mov	r6, r0
 8008a66:	f340 8088 	ble.w	8008b7a <_dtoa_r+0x8c2>
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	4601      	mov	r1, r0
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 ffae 	bl	80099d0 <__pow5mult>
 8008a74:	9b06      	ldr	r3, [sp, #24]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	4606      	mov	r6, r0
 8008a7a:	f340 8081 	ble.w	8008b80 <_dtoa_r+0x8c8>
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	6933      	ldr	r3, [r6, #16]
 8008a84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a88:	6918      	ldr	r0, [r3, #16]
 8008a8a:	f000 fe91 	bl	80097b0 <__hi0bits>
 8008a8e:	f1c0 0020 	rsb	r0, r0, #32
 8008a92:	9b05      	ldr	r3, [sp, #20]
 8008a94:	4418      	add	r0, r3
 8008a96:	f010 001f 	ands.w	r0, r0, #31
 8008a9a:	f000 8092 	beq.w	8008bc2 <_dtoa_r+0x90a>
 8008a9e:	f1c0 0320 	rsb	r3, r0, #32
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	f340 808a 	ble.w	8008bbc <_dtoa_r+0x904>
 8008aa8:	f1c0 001c 	rsb	r0, r0, #28
 8008aac:	9b04      	ldr	r3, [sp, #16]
 8008aae:	4403      	add	r3, r0
 8008ab0:	9304      	str	r3, [sp, #16]
 8008ab2:	9b05      	ldr	r3, [sp, #20]
 8008ab4:	4403      	add	r3, r0
 8008ab6:	4405      	add	r5, r0
 8008ab8:	9305      	str	r3, [sp, #20]
 8008aba:	9b04      	ldr	r3, [sp, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dd07      	ble.n	8008ad0 <_dtoa_r+0x818>
 8008ac0:	ee18 1a10 	vmov	r1, s16
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 ffdc 	bl	8009a84 <__lshift>
 8008acc:	ee08 0a10 	vmov	s16, r0
 8008ad0:	9b05      	ldr	r3, [sp, #20]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	dd05      	ble.n	8008ae2 <_dtoa_r+0x82a>
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 ffd2 	bl	8009a84 <__lshift>
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d06e      	beq.n	8008bc6 <_dtoa_r+0x90e>
 8008ae8:	ee18 0a10 	vmov	r0, s16
 8008aec:	4631      	mov	r1, r6
 8008aee:	f001 f839 	bl	8009b64 <__mcmp>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	da67      	bge.n	8008bc6 <_dtoa_r+0x90e>
 8008af6:	9b00      	ldr	r3, [sp, #0]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	ee18 1a10 	vmov	r1, s16
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	220a      	movs	r2, #10
 8008b02:	2300      	movs	r3, #0
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 fdc3 	bl	8009690 <__multadd>
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	ee08 0a10 	vmov	s16, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 81b1 	beq.w	8008e78 <_dtoa_r+0xbc0>
 8008b16:	2300      	movs	r3, #0
 8008b18:	4639      	mov	r1, r7
 8008b1a:	220a      	movs	r2, #10
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 fdb7 	bl	8009690 <__multadd>
 8008b22:	9b02      	ldr	r3, [sp, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	4607      	mov	r7, r0
 8008b28:	f300 808e 	bgt.w	8008c48 <_dtoa_r+0x990>
 8008b2c:	9b06      	ldr	r3, [sp, #24]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	dc51      	bgt.n	8008bd6 <_dtoa_r+0x91e>
 8008b32:	e089      	b.n	8008c48 <_dtoa_r+0x990>
 8008b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b3a:	e74b      	b.n	80089d4 <_dtoa_r+0x71c>
 8008b3c:	9b03      	ldr	r3, [sp, #12]
 8008b3e:	1e5e      	subs	r6, r3, #1
 8008b40:	9b07      	ldr	r3, [sp, #28]
 8008b42:	42b3      	cmp	r3, r6
 8008b44:	bfbf      	itttt	lt
 8008b46:	9b07      	ldrlt	r3, [sp, #28]
 8008b48:	9607      	strlt	r6, [sp, #28]
 8008b4a:	1af2      	sublt	r2, r6, r3
 8008b4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b4e:	bfb6      	itet	lt
 8008b50:	189b      	addlt	r3, r3, r2
 8008b52:	1b9e      	subge	r6, r3, r6
 8008b54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	bfb8      	it	lt
 8008b5a:	2600      	movlt	r6, #0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	bfb7      	itett	lt
 8008b60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b68:	1a9d      	sublt	r5, r3, r2
 8008b6a:	2300      	movlt	r3, #0
 8008b6c:	e734      	b.n	80089d8 <_dtoa_r+0x720>
 8008b6e:	9e07      	ldr	r6, [sp, #28]
 8008b70:	9d04      	ldr	r5, [sp, #16]
 8008b72:	9f08      	ldr	r7, [sp, #32]
 8008b74:	e73b      	b.n	80089ee <_dtoa_r+0x736>
 8008b76:	9a07      	ldr	r2, [sp, #28]
 8008b78:	e767      	b.n	8008a4a <_dtoa_r+0x792>
 8008b7a:	9b06      	ldr	r3, [sp, #24]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	dc18      	bgt.n	8008bb2 <_dtoa_r+0x8fa>
 8008b80:	f1ba 0f00 	cmp.w	sl, #0
 8008b84:	d115      	bne.n	8008bb2 <_dtoa_r+0x8fa>
 8008b86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b8a:	b993      	cbnz	r3, 8008bb2 <_dtoa_r+0x8fa>
 8008b8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b90:	0d1b      	lsrs	r3, r3, #20
 8008b92:	051b      	lsls	r3, r3, #20
 8008b94:	b183      	cbz	r3, 8008bb8 <_dtoa_r+0x900>
 8008b96:	9b04      	ldr	r3, [sp, #16]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	9304      	str	r3, [sp, #16]
 8008b9c:	9b05      	ldr	r3, [sp, #20]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	9305      	str	r3, [sp, #20]
 8008ba2:	f04f 0801 	mov.w	r8, #1
 8008ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f47f af6a 	bne.w	8008a82 <_dtoa_r+0x7ca>
 8008bae:	2001      	movs	r0, #1
 8008bb0:	e76f      	b.n	8008a92 <_dtoa_r+0x7da>
 8008bb2:	f04f 0800 	mov.w	r8, #0
 8008bb6:	e7f6      	b.n	8008ba6 <_dtoa_r+0x8ee>
 8008bb8:	4698      	mov	r8, r3
 8008bba:	e7f4      	b.n	8008ba6 <_dtoa_r+0x8ee>
 8008bbc:	f43f af7d 	beq.w	8008aba <_dtoa_r+0x802>
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	301c      	adds	r0, #28
 8008bc4:	e772      	b.n	8008aac <_dtoa_r+0x7f4>
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	dc37      	bgt.n	8008c3c <_dtoa_r+0x984>
 8008bcc:	9b06      	ldr	r3, [sp, #24]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	dd34      	ble.n	8008c3c <_dtoa_r+0x984>
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	9302      	str	r3, [sp, #8]
 8008bd6:	9b02      	ldr	r3, [sp, #8]
 8008bd8:	b96b      	cbnz	r3, 8008bf6 <_dtoa_r+0x93e>
 8008bda:	4631      	mov	r1, r6
 8008bdc:	2205      	movs	r2, #5
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 fd56 	bl	8009690 <__multadd>
 8008be4:	4601      	mov	r1, r0
 8008be6:	4606      	mov	r6, r0
 8008be8:	ee18 0a10 	vmov	r0, s16
 8008bec:	f000 ffba 	bl	8009b64 <__mcmp>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f73f adbb 	bgt.w	800876c <_dtoa_r+0x4b4>
 8008bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf8:	9d01      	ldr	r5, [sp, #4]
 8008bfa:	43db      	mvns	r3, r3
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	f04f 0800 	mov.w	r8, #0
 8008c02:	4631      	mov	r1, r6
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 fd21 	bl	800964c <_Bfree>
 8008c0a:	2f00      	cmp	r7, #0
 8008c0c:	f43f aea4 	beq.w	8008958 <_dtoa_r+0x6a0>
 8008c10:	f1b8 0f00 	cmp.w	r8, #0
 8008c14:	d005      	beq.n	8008c22 <_dtoa_r+0x96a>
 8008c16:	45b8      	cmp	r8, r7
 8008c18:	d003      	beq.n	8008c22 <_dtoa_r+0x96a>
 8008c1a:	4641      	mov	r1, r8
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 fd15 	bl	800964c <_Bfree>
 8008c22:	4639      	mov	r1, r7
 8008c24:	4620      	mov	r0, r4
 8008c26:	f000 fd11 	bl	800964c <_Bfree>
 8008c2a:	e695      	b.n	8008958 <_dtoa_r+0x6a0>
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	4637      	mov	r7, r6
 8008c30:	e7e1      	b.n	8008bf6 <_dtoa_r+0x93e>
 8008c32:	9700      	str	r7, [sp, #0]
 8008c34:	4637      	mov	r7, r6
 8008c36:	e599      	b.n	800876c <_dtoa_r+0x4b4>
 8008c38:	40240000 	.word	0x40240000
 8008c3c:	9b08      	ldr	r3, [sp, #32]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 80ca 	beq.w	8008dd8 <_dtoa_r+0xb20>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	9302      	str	r3, [sp, #8]
 8008c48:	2d00      	cmp	r5, #0
 8008c4a:	dd05      	ble.n	8008c58 <_dtoa_r+0x9a0>
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	462a      	mov	r2, r5
 8008c50:	4620      	mov	r0, r4
 8008c52:	f000 ff17 	bl	8009a84 <__lshift>
 8008c56:	4607      	mov	r7, r0
 8008c58:	f1b8 0f00 	cmp.w	r8, #0
 8008c5c:	d05b      	beq.n	8008d16 <_dtoa_r+0xa5e>
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 fcb3 	bl	80095cc <_Balloc>
 8008c66:	4605      	mov	r5, r0
 8008c68:	b928      	cbnz	r0, 8008c76 <_dtoa_r+0x9be>
 8008c6a:	4b87      	ldr	r3, [pc, #540]	; (8008e88 <_dtoa_r+0xbd0>)
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c72:	f7ff bb3b 	b.w	80082ec <_dtoa_r+0x34>
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	3202      	adds	r2, #2
 8008c7a:	0092      	lsls	r2, r2, #2
 8008c7c:	f107 010c 	add.w	r1, r7, #12
 8008c80:	300c      	adds	r0, #12
 8008c82:	f000 fc95 	bl	80095b0 <memcpy>
 8008c86:	2201      	movs	r2, #1
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 fefa 	bl	8009a84 <__lshift>
 8008c90:	9b01      	ldr	r3, [sp, #4]
 8008c92:	f103 0901 	add.w	r9, r3, #1
 8008c96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	9305      	str	r3, [sp, #20]
 8008c9e:	f00a 0301 	and.w	r3, sl, #1
 8008ca2:	46b8      	mov	r8, r7
 8008ca4:	9304      	str	r3, [sp, #16]
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	4631      	mov	r1, r6
 8008caa:	ee18 0a10 	vmov	r0, s16
 8008cae:	f7ff fa77 	bl	80081a0 <quorem>
 8008cb2:	4641      	mov	r1, r8
 8008cb4:	9002      	str	r0, [sp, #8]
 8008cb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cba:	ee18 0a10 	vmov	r0, s16
 8008cbe:	f000 ff51 	bl	8009b64 <__mcmp>
 8008cc2:	463a      	mov	r2, r7
 8008cc4:	9003      	str	r0, [sp, #12]
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 ff67 	bl	8009b9c <__mdiff>
 8008cce:	68c2      	ldr	r2, [r0, #12]
 8008cd0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	bb02      	cbnz	r2, 8008d1a <_dtoa_r+0xa62>
 8008cd8:	4601      	mov	r1, r0
 8008cda:	ee18 0a10 	vmov	r0, s16
 8008cde:	f000 ff41 	bl	8009b64 <__mcmp>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	9207      	str	r2, [sp, #28]
 8008cea:	f000 fcaf 	bl	800964c <_Bfree>
 8008cee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008cf2:	ea43 0102 	orr.w	r1, r3, r2
 8008cf6:	9b04      	ldr	r3, [sp, #16]
 8008cf8:	430b      	orrs	r3, r1
 8008cfa:	464d      	mov	r5, r9
 8008cfc:	d10f      	bne.n	8008d1e <_dtoa_r+0xa66>
 8008cfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d02:	d02a      	beq.n	8008d5a <_dtoa_r+0xaa2>
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	dd02      	ble.n	8008d10 <_dtoa_r+0xa58>
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d10:	f88b a000 	strb.w	sl, [fp]
 8008d14:	e775      	b.n	8008c02 <_dtoa_r+0x94a>
 8008d16:	4638      	mov	r0, r7
 8008d18:	e7ba      	b.n	8008c90 <_dtoa_r+0x9d8>
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	e7e2      	b.n	8008ce4 <_dtoa_r+0xa2c>
 8008d1e:	9b03      	ldr	r3, [sp, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	db04      	blt.n	8008d2e <_dtoa_r+0xa76>
 8008d24:	9906      	ldr	r1, [sp, #24]
 8008d26:	430b      	orrs	r3, r1
 8008d28:	9904      	ldr	r1, [sp, #16]
 8008d2a:	430b      	orrs	r3, r1
 8008d2c:	d122      	bne.n	8008d74 <_dtoa_r+0xabc>
 8008d2e:	2a00      	cmp	r2, #0
 8008d30:	ddee      	ble.n	8008d10 <_dtoa_r+0xa58>
 8008d32:	ee18 1a10 	vmov	r1, s16
 8008d36:	2201      	movs	r2, #1
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fea3 	bl	8009a84 <__lshift>
 8008d3e:	4631      	mov	r1, r6
 8008d40:	ee08 0a10 	vmov	s16, r0
 8008d44:	f000 ff0e 	bl	8009b64 <__mcmp>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	dc03      	bgt.n	8008d54 <_dtoa_r+0xa9c>
 8008d4c:	d1e0      	bne.n	8008d10 <_dtoa_r+0xa58>
 8008d4e:	f01a 0f01 	tst.w	sl, #1
 8008d52:	d0dd      	beq.n	8008d10 <_dtoa_r+0xa58>
 8008d54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d58:	d1d7      	bne.n	8008d0a <_dtoa_r+0xa52>
 8008d5a:	2339      	movs	r3, #57	; 0x39
 8008d5c:	f88b 3000 	strb.w	r3, [fp]
 8008d60:	462b      	mov	r3, r5
 8008d62:	461d      	mov	r5, r3
 8008d64:	3b01      	subs	r3, #1
 8008d66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d6a:	2a39      	cmp	r2, #57	; 0x39
 8008d6c:	d071      	beq.n	8008e52 <_dtoa_r+0xb9a>
 8008d6e:	3201      	adds	r2, #1
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	e746      	b.n	8008c02 <_dtoa_r+0x94a>
 8008d74:	2a00      	cmp	r2, #0
 8008d76:	dd07      	ble.n	8008d88 <_dtoa_r+0xad0>
 8008d78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d7c:	d0ed      	beq.n	8008d5a <_dtoa_r+0xaa2>
 8008d7e:	f10a 0301 	add.w	r3, sl, #1
 8008d82:	f88b 3000 	strb.w	r3, [fp]
 8008d86:	e73c      	b.n	8008c02 <_dtoa_r+0x94a>
 8008d88:	9b05      	ldr	r3, [sp, #20]
 8008d8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008d8e:	4599      	cmp	r9, r3
 8008d90:	d047      	beq.n	8008e22 <_dtoa_r+0xb6a>
 8008d92:	ee18 1a10 	vmov	r1, s16
 8008d96:	2300      	movs	r3, #0
 8008d98:	220a      	movs	r2, #10
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 fc78 	bl	8009690 <__multadd>
 8008da0:	45b8      	cmp	r8, r7
 8008da2:	ee08 0a10 	vmov	s16, r0
 8008da6:	f04f 0300 	mov.w	r3, #0
 8008daa:	f04f 020a 	mov.w	r2, #10
 8008dae:	4641      	mov	r1, r8
 8008db0:	4620      	mov	r0, r4
 8008db2:	d106      	bne.n	8008dc2 <_dtoa_r+0xb0a>
 8008db4:	f000 fc6c 	bl	8009690 <__multadd>
 8008db8:	4680      	mov	r8, r0
 8008dba:	4607      	mov	r7, r0
 8008dbc:	f109 0901 	add.w	r9, r9, #1
 8008dc0:	e772      	b.n	8008ca8 <_dtoa_r+0x9f0>
 8008dc2:	f000 fc65 	bl	8009690 <__multadd>
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	4680      	mov	r8, r0
 8008dca:	2300      	movs	r3, #0
 8008dcc:	220a      	movs	r2, #10
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fc5e 	bl	8009690 <__multadd>
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	e7f1      	b.n	8008dbc <_dtoa_r+0xb04>
 8008dd8:	9b03      	ldr	r3, [sp, #12]
 8008dda:	9302      	str	r3, [sp, #8]
 8008ddc:	9d01      	ldr	r5, [sp, #4]
 8008dde:	ee18 0a10 	vmov	r0, s16
 8008de2:	4631      	mov	r1, r6
 8008de4:	f7ff f9dc 	bl	80081a0 <quorem>
 8008de8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008dec:	9b01      	ldr	r3, [sp, #4]
 8008dee:	f805 ab01 	strb.w	sl, [r5], #1
 8008df2:	1aea      	subs	r2, r5, r3
 8008df4:	9b02      	ldr	r3, [sp, #8]
 8008df6:	4293      	cmp	r3, r2
 8008df8:	dd09      	ble.n	8008e0e <_dtoa_r+0xb56>
 8008dfa:	ee18 1a10 	vmov	r1, s16
 8008dfe:	2300      	movs	r3, #0
 8008e00:	220a      	movs	r2, #10
 8008e02:	4620      	mov	r0, r4
 8008e04:	f000 fc44 	bl	8009690 <__multadd>
 8008e08:	ee08 0a10 	vmov	s16, r0
 8008e0c:	e7e7      	b.n	8008dde <_dtoa_r+0xb26>
 8008e0e:	9b02      	ldr	r3, [sp, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	bfc8      	it	gt
 8008e14:	461d      	movgt	r5, r3
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	bfd8      	it	le
 8008e1a:	2501      	movle	r5, #1
 8008e1c:	441d      	add	r5, r3
 8008e1e:	f04f 0800 	mov.w	r8, #0
 8008e22:	ee18 1a10 	vmov	r1, s16
 8008e26:	2201      	movs	r2, #1
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f000 fe2b 	bl	8009a84 <__lshift>
 8008e2e:	4631      	mov	r1, r6
 8008e30:	ee08 0a10 	vmov	s16, r0
 8008e34:	f000 fe96 	bl	8009b64 <__mcmp>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	dc91      	bgt.n	8008d60 <_dtoa_r+0xaa8>
 8008e3c:	d102      	bne.n	8008e44 <_dtoa_r+0xb8c>
 8008e3e:	f01a 0f01 	tst.w	sl, #1
 8008e42:	d18d      	bne.n	8008d60 <_dtoa_r+0xaa8>
 8008e44:	462b      	mov	r3, r5
 8008e46:	461d      	mov	r5, r3
 8008e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e4c:	2a30      	cmp	r2, #48	; 0x30
 8008e4e:	d0fa      	beq.n	8008e46 <_dtoa_r+0xb8e>
 8008e50:	e6d7      	b.n	8008c02 <_dtoa_r+0x94a>
 8008e52:	9a01      	ldr	r2, [sp, #4]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d184      	bne.n	8008d62 <_dtoa_r+0xaaa>
 8008e58:	9b00      	ldr	r3, [sp, #0]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	2331      	movs	r3, #49	; 0x31
 8008e60:	7013      	strb	r3, [r2, #0]
 8008e62:	e6ce      	b.n	8008c02 <_dtoa_r+0x94a>
 8008e64:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <_dtoa_r+0xbd4>)
 8008e66:	f7ff ba95 	b.w	8008394 <_dtoa_r+0xdc>
 8008e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f47f aa6e 	bne.w	800834e <_dtoa_r+0x96>
 8008e72:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <_dtoa_r+0xbd8>)
 8008e74:	f7ff ba8e 	b.w	8008394 <_dtoa_r+0xdc>
 8008e78:	9b02      	ldr	r3, [sp, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	dcae      	bgt.n	8008ddc <_dtoa_r+0xb24>
 8008e7e:	9b06      	ldr	r3, [sp, #24]
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	f73f aea8 	bgt.w	8008bd6 <_dtoa_r+0x91e>
 8008e86:	e7a9      	b.n	8008ddc <_dtoa_r+0xb24>
 8008e88:	0800b240 	.word	0x0800b240
 8008e8c:	0800b044 	.word	0x0800b044
 8008e90:	0800b1c1 	.word	0x0800b1c1

08008e94 <rshift>:
 8008e94:	6903      	ldr	r3, [r0, #16]
 8008e96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ea2:	f100 0414 	add.w	r4, r0, #20
 8008ea6:	dd45      	ble.n	8008f34 <rshift+0xa0>
 8008ea8:	f011 011f 	ands.w	r1, r1, #31
 8008eac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008eb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008eb4:	d10c      	bne.n	8008ed0 <rshift+0x3c>
 8008eb6:	f100 0710 	add.w	r7, r0, #16
 8008eba:	4629      	mov	r1, r5
 8008ebc:	42b1      	cmp	r1, r6
 8008ebe:	d334      	bcc.n	8008f2a <rshift+0x96>
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	1eea      	subs	r2, r5, #3
 8008ec6:	4296      	cmp	r6, r2
 8008ec8:	bf38      	it	cc
 8008eca:	2300      	movcc	r3, #0
 8008ecc:	4423      	add	r3, r4
 8008ece:	e015      	b.n	8008efc <rshift+0x68>
 8008ed0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ed4:	f1c1 0820 	rsb	r8, r1, #32
 8008ed8:	40cf      	lsrs	r7, r1
 8008eda:	f105 0e04 	add.w	lr, r5, #4
 8008ede:	46a1      	mov	r9, r4
 8008ee0:	4576      	cmp	r6, lr
 8008ee2:	46f4      	mov	ip, lr
 8008ee4:	d815      	bhi.n	8008f12 <rshift+0x7e>
 8008ee6:	1a9a      	subs	r2, r3, r2
 8008ee8:	0092      	lsls	r2, r2, #2
 8008eea:	3a04      	subs	r2, #4
 8008eec:	3501      	adds	r5, #1
 8008eee:	42ae      	cmp	r6, r5
 8008ef0:	bf38      	it	cc
 8008ef2:	2200      	movcc	r2, #0
 8008ef4:	18a3      	adds	r3, r4, r2
 8008ef6:	50a7      	str	r7, [r4, r2]
 8008ef8:	b107      	cbz	r7, 8008efc <rshift+0x68>
 8008efa:	3304      	adds	r3, #4
 8008efc:	1b1a      	subs	r2, r3, r4
 8008efe:	42a3      	cmp	r3, r4
 8008f00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f04:	bf08      	it	eq
 8008f06:	2300      	moveq	r3, #0
 8008f08:	6102      	str	r2, [r0, #16]
 8008f0a:	bf08      	it	eq
 8008f0c:	6143      	streq	r3, [r0, #20]
 8008f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f12:	f8dc c000 	ldr.w	ip, [ip]
 8008f16:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f1a:	ea4c 0707 	orr.w	r7, ip, r7
 8008f1e:	f849 7b04 	str.w	r7, [r9], #4
 8008f22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f26:	40cf      	lsrs	r7, r1
 8008f28:	e7da      	b.n	8008ee0 <rshift+0x4c>
 8008f2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f32:	e7c3      	b.n	8008ebc <rshift+0x28>
 8008f34:	4623      	mov	r3, r4
 8008f36:	e7e1      	b.n	8008efc <rshift+0x68>

08008f38 <__hexdig_fun>:
 8008f38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f3c:	2b09      	cmp	r3, #9
 8008f3e:	d802      	bhi.n	8008f46 <__hexdig_fun+0xe>
 8008f40:	3820      	subs	r0, #32
 8008f42:	b2c0      	uxtb	r0, r0
 8008f44:	4770      	bx	lr
 8008f46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f4a:	2b05      	cmp	r3, #5
 8008f4c:	d801      	bhi.n	8008f52 <__hexdig_fun+0x1a>
 8008f4e:	3847      	subs	r0, #71	; 0x47
 8008f50:	e7f7      	b.n	8008f42 <__hexdig_fun+0xa>
 8008f52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f56:	2b05      	cmp	r3, #5
 8008f58:	d801      	bhi.n	8008f5e <__hexdig_fun+0x26>
 8008f5a:	3827      	subs	r0, #39	; 0x27
 8008f5c:	e7f1      	b.n	8008f42 <__hexdig_fun+0xa>
 8008f5e:	2000      	movs	r0, #0
 8008f60:	4770      	bx	lr
	...

08008f64 <__gethex>:
 8008f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f68:	ed2d 8b02 	vpush	{d8}
 8008f6c:	b089      	sub	sp, #36	; 0x24
 8008f6e:	ee08 0a10 	vmov	s16, r0
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	4bb4      	ldr	r3, [pc, #720]	; (8009248 <__gethex+0x2e4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	9301      	str	r3, [sp, #4]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	468b      	mov	fp, r1
 8008f7e:	4690      	mov	r8, r2
 8008f80:	f7f7 f946 	bl	8000210 <strlen>
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	f8db 2000 	ldr.w	r2, [fp]
 8008f8a:	4403      	add	r3, r0
 8008f8c:	4682      	mov	sl, r0
 8008f8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008f92:	9305      	str	r3, [sp, #20]
 8008f94:	1c93      	adds	r3, r2, #2
 8008f96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008f9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008f9e:	32fe      	adds	r2, #254	; 0xfe
 8008fa0:	18d1      	adds	r1, r2, r3
 8008fa2:	461f      	mov	r7, r3
 8008fa4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008fa8:	9100      	str	r1, [sp, #0]
 8008faa:	2830      	cmp	r0, #48	; 0x30
 8008fac:	d0f8      	beq.n	8008fa0 <__gethex+0x3c>
 8008fae:	f7ff ffc3 	bl	8008f38 <__hexdig_fun>
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d13a      	bne.n	800902e <__gethex+0xca>
 8008fb8:	9901      	ldr	r1, [sp, #4]
 8008fba:	4652      	mov	r2, sl
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	f001 fa33 	bl	800a428 <strncmp>
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d168      	bne.n	800909a <__gethex+0x136>
 8008fc8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008fcc:	eb07 060a 	add.w	r6, r7, sl
 8008fd0:	f7ff ffb2 	bl	8008f38 <__hexdig_fun>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d062      	beq.n	800909e <__gethex+0x13a>
 8008fd8:	4633      	mov	r3, r6
 8008fda:	7818      	ldrb	r0, [r3, #0]
 8008fdc:	2830      	cmp	r0, #48	; 0x30
 8008fde:	461f      	mov	r7, r3
 8008fe0:	f103 0301 	add.w	r3, r3, #1
 8008fe4:	d0f9      	beq.n	8008fda <__gethex+0x76>
 8008fe6:	f7ff ffa7 	bl	8008f38 <__hexdig_fun>
 8008fea:	2301      	movs	r3, #1
 8008fec:	fab0 f480 	clz	r4, r0
 8008ff0:	0964      	lsrs	r4, r4, #5
 8008ff2:	4635      	mov	r5, r6
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	463a      	mov	r2, r7
 8008ff8:	4616      	mov	r6, r2
 8008ffa:	3201      	adds	r2, #1
 8008ffc:	7830      	ldrb	r0, [r6, #0]
 8008ffe:	f7ff ff9b 	bl	8008f38 <__hexdig_fun>
 8009002:	2800      	cmp	r0, #0
 8009004:	d1f8      	bne.n	8008ff8 <__gethex+0x94>
 8009006:	9901      	ldr	r1, [sp, #4]
 8009008:	4652      	mov	r2, sl
 800900a:	4630      	mov	r0, r6
 800900c:	f001 fa0c 	bl	800a428 <strncmp>
 8009010:	b980      	cbnz	r0, 8009034 <__gethex+0xd0>
 8009012:	b94d      	cbnz	r5, 8009028 <__gethex+0xc4>
 8009014:	eb06 050a 	add.w	r5, r6, sl
 8009018:	462a      	mov	r2, r5
 800901a:	4616      	mov	r6, r2
 800901c:	3201      	adds	r2, #1
 800901e:	7830      	ldrb	r0, [r6, #0]
 8009020:	f7ff ff8a 	bl	8008f38 <__hexdig_fun>
 8009024:	2800      	cmp	r0, #0
 8009026:	d1f8      	bne.n	800901a <__gethex+0xb6>
 8009028:	1bad      	subs	r5, r5, r6
 800902a:	00ad      	lsls	r5, r5, #2
 800902c:	e004      	b.n	8009038 <__gethex+0xd4>
 800902e:	2400      	movs	r4, #0
 8009030:	4625      	mov	r5, r4
 8009032:	e7e0      	b.n	8008ff6 <__gethex+0x92>
 8009034:	2d00      	cmp	r5, #0
 8009036:	d1f7      	bne.n	8009028 <__gethex+0xc4>
 8009038:	7833      	ldrb	r3, [r6, #0]
 800903a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800903e:	2b50      	cmp	r3, #80	; 0x50
 8009040:	d13b      	bne.n	80090ba <__gethex+0x156>
 8009042:	7873      	ldrb	r3, [r6, #1]
 8009044:	2b2b      	cmp	r3, #43	; 0x2b
 8009046:	d02c      	beq.n	80090a2 <__gethex+0x13e>
 8009048:	2b2d      	cmp	r3, #45	; 0x2d
 800904a:	d02e      	beq.n	80090aa <__gethex+0x146>
 800904c:	1c71      	adds	r1, r6, #1
 800904e:	f04f 0900 	mov.w	r9, #0
 8009052:	7808      	ldrb	r0, [r1, #0]
 8009054:	f7ff ff70 	bl	8008f38 <__hexdig_fun>
 8009058:	1e43      	subs	r3, r0, #1
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b18      	cmp	r3, #24
 800905e:	d82c      	bhi.n	80090ba <__gethex+0x156>
 8009060:	f1a0 0210 	sub.w	r2, r0, #16
 8009064:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009068:	f7ff ff66 	bl	8008f38 <__hexdig_fun>
 800906c:	1e43      	subs	r3, r0, #1
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b18      	cmp	r3, #24
 8009072:	d91d      	bls.n	80090b0 <__gethex+0x14c>
 8009074:	f1b9 0f00 	cmp.w	r9, #0
 8009078:	d000      	beq.n	800907c <__gethex+0x118>
 800907a:	4252      	negs	r2, r2
 800907c:	4415      	add	r5, r2
 800907e:	f8cb 1000 	str.w	r1, [fp]
 8009082:	b1e4      	cbz	r4, 80090be <__gethex+0x15a>
 8009084:	9b00      	ldr	r3, [sp, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	bf14      	ite	ne
 800908a:	2700      	movne	r7, #0
 800908c:	2706      	moveq	r7, #6
 800908e:	4638      	mov	r0, r7
 8009090:	b009      	add	sp, #36	; 0x24
 8009092:	ecbd 8b02 	vpop	{d8}
 8009096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909a:	463e      	mov	r6, r7
 800909c:	4625      	mov	r5, r4
 800909e:	2401      	movs	r4, #1
 80090a0:	e7ca      	b.n	8009038 <__gethex+0xd4>
 80090a2:	f04f 0900 	mov.w	r9, #0
 80090a6:	1cb1      	adds	r1, r6, #2
 80090a8:	e7d3      	b.n	8009052 <__gethex+0xee>
 80090aa:	f04f 0901 	mov.w	r9, #1
 80090ae:	e7fa      	b.n	80090a6 <__gethex+0x142>
 80090b0:	230a      	movs	r3, #10
 80090b2:	fb03 0202 	mla	r2, r3, r2, r0
 80090b6:	3a10      	subs	r2, #16
 80090b8:	e7d4      	b.n	8009064 <__gethex+0x100>
 80090ba:	4631      	mov	r1, r6
 80090bc:	e7df      	b.n	800907e <__gethex+0x11a>
 80090be:	1bf3      	subs	r3, r6, r7
 80090c0:	3b01      	subs	r3, #1
 80090c2:	4621      	mov	r1, r4
 80090c4:	2b07      	cmp	r3, #7
 80090c6:	dc0b      	bgt.n	80090e0 <__gethex+0x17c>
 80090c8:	ee18 0a10 	vmov	r0, s16
 80090cc:	f000 fa7e 	bl	80095cc <_Balloc>
 80090d0:	4604      	mov	r4, r0
 80090d2:	b940      	cbnz	r0, 80090e6 <__gethex+0x182>
 80090d4:	4b5d      	ldr	r3, [pc, #372]	; (800924c <__gethex+0x2e8>)
 80090d6:	4602      	mov	r2, r0
 80090d8:	21de      	movs	r1, #222	; 0xde
 80090da:	485d      	ldr	r0, [pc, #372]	; (8009250 <__gethex+0x2ec>)
 80090dc:	f001 f9c6 	bl	800a46c <__assert_func>
 80090e0:	3101      	adds	r1, #1
 80090e2:	105b      	asrs	r3, r3, #1
 80090e4:	e7ee      	b.n	80090c4 <__gethex+0x160>
 80090e6:	f100 0914 	add.w	r9, r0, #20
 80090ea:	f04f 0b00 	mov.w	fp, #0
 80090ee:	f1ca 0301 	rsb	r3, sl, #1
 80090f2:	f8cd 9008 	str.w	r9, [sp, #8]
 80090f6:	f8cd b000 	str.w	fp, [sp]
 80090fa:	9306      	str	r3, [sp, #24]
 80090fc:	42b7      	cmp	r7, r6
 80090fe:	d340      	bcc.n	8009182 <__gethex+0x21e>
 8009100:	9802      	ldr	r0, [sp, #8]
 8009102:	9b00      	ldr	r3, [sp, #0]
 8009104:	f840 3b04 	str.w	r3, [r0], #4
 8009108:	eba0 0009 	sub.w	r0, r0, r9
 800910c:	1080      	asrs	r0, r0, #2
 800910e:	0146      	lsls	r6, r0, #5
 8009110:	6120      	str	r0, [r4, #16]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fb4c 	bl	80097b0 <__hi0bits>
 8009118:	1a30      	subs	r0, r6, r0
 800911a:	f8d8 6000 	ldr.w	r6, [r8]
 800911e:	42b0      	cmp	r0, r6
 8009120:	dd63      	ble.n	80091ea <__gethex+0x286>
 8009122:	1b87      	subs	r7, r0, r6
 8009124:	4639      	mov	r1, r7
 8009126:	4620      	mov	r0, r4
 8009128:	f000 fef0 	bl	8009f0c <__any_on>
 800912c:	4682      	mov	sl, r0
 800912e:	b1a8      	cbz	r0, 800915c <__gethex+0x1f8>
 8009130:	1e7b      	subs	r3, r7, #1
 8009132:	1159      	asrs	r1, r3, #5
 8009134:	f003 021f 	and.w	r2, r3, #31
 8009138:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800913c:	f04f 0a01 	mov.w	sl, #1
 8009140:	fa0a f202 	lsl.w	r2, sl, r2
 8009144:	420a      	tst	r2, r1
 8009146:	d009      	beq.n	800915c <__gethex+0x1f8>
 8009148:	4553      	cmp	r3, sl
 800914a:	dd05      	ble.n	8009158 <__gethex+0x1f4>
 800914c:	1eb9      	subs	r1, r7, #2
 800914e:	4620      	mov	r0, r4
 8009150:	f000 fedc 	bl	8009f0c <__any_on>
 8009154:	2800      	cmp	r0, #0
 8009156:	d145      	bne.n	80091e4 <__gethex+0x280>
 8009158:	f04f 0a02 	mov.w	sl, #2
 800915c:	4639      	mov	r1, r7
 800915e:	4620      	mov	r0, r4
 8009160:	f7ff fe98 	bl	8008e94 <rshift>
 8009164:	443d      	add	r5, r7
 8009166:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800916a:	42ab      	cmp	r3, r5
 800916c:	da4c      	bge.n	8009208 <__gethex+0x2a4>
 800916e:	ee18 0a10 	vmov	r0, s16
 8009172:	4621      	mov	r1, r4
 8009174:	f000 fa6a 	bl	800964c <_Bfree>
 8009178:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800917a:	2300      	movs	r3, #0
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	27a3      	movs	r7, #163	; 0xa3
 8009180:	e785      	b.n	800908e <__gethex+0x12a>
 8009182:	1e73      	subs	r3, r6, #1
 8009184:	9a05      	ldr	r2, [sp, #20]
 8009186:	9303      	str	r3, [sp, #12]
 8009188:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800918c:	4293      	cmp	r3, r2
 800918e:	d019      	beq.n	80091c4 <__gethex+0x260>
 8009190:	f1bb 0f20 	cmp.w	fp, #32
 8009194:	d107      	bne.n	80091a6 <__gethex+0x242>
 8009196:	9b02      	ldr	r3, [sp, #8]
 8009198:	9a00      	ldr	r2, [sp, #0]
 800919a:	f843 2b04 	str.w	r2, [r3], #4
 800919e:	9302      	str	r3, [sp, #8]
 80091a0:	2300      	movs	r3, #0
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	469b      	mov	fp, r3
 80091a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80091aa:	f7ff fec5 	bl	8008f38 <__hexdig_fun>
 80091ae:	9b00      	ldr	r3, [sp, #0]
 80091b0:	f000 000f 	and.w	r0, r0, #15
 80091b4:	fa00 f00b 	lsl.w	r0, r0, fp
 80091b8:	4303      	orrs	r3, r0
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	f10b 0b04 	add.w	fp, fp, #4
 80091c0:	9b03      	ldr	r3, [sp, #12]
 80091c2:	e00d      	b.n	80091e0 <__gethex+0x27c>
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	9a06      	ldr	r2, [sp, #24]
 80091c8:	4413      	add	r3, r2
 80091ca:	42bb      	cmp	r3, r7
 80091cc:	d3e0      	bcc.n	8009190 <__gethex+0x22c>
 80091ce:	4618      	mov	r0, r3
 80091d0:	9901      	ldr	r1, [sp, #4]
 80091d2:	9307      	str	r3, [sp, #28]
 80091d4:	4652      	mov	r2, sl
 80091d6:	f001 f927 	bl	800a428 <strncmp>
 80091da:	9b07      	ldr	r3, [sp, #28]
 80091dc:	2800      	cmp	r0, #0
 80091de:	d1d7      	bne.n	8009190 <__gethex+0x22c>
 80091e0:	461e      	mov	r6, r3
 80091e2:	e78b      	b.n	80090fc <__gethex+0x198>
 80091e4:	f04f 0a03 	mov.w	sl, #3
 80091e8:	e7b8      	b.n	800915c <__gethex+0x1f8>
 80091ea:	da0a      	bge.n	8009202 <__gethex+0x29e>
 80091ec:	1a37      	subs	r7, r6, r0
 80091ee:	4621      	mov	r1, r4
 80091f0:	ee18 0a10 	vmov	r0, s16
 80091f4:	463a      	mov	r2, r7
 80091f6:	f000 fc45 	bl	8009a84 <__lshift>
 80091fa:	1bed      	subs	r5, r5, r7
 80091fc:	4604      	mov	r4, r0
 80091fe:	f100 0914 	add.w	r9, r0, #20
 8009202:	f04f 0a00 	mov.w	sl, #0
 8009206:	e7ae      	b.n	8009166 <__gethex+0x202>
 8009208:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800920c:	42a8      	cmp	r0, r5
 800920e:	dd72      	ble.n	80092f6 <__gethex+0x392>
 8009210:	1b45      	subs	r5, r0, r5
 8009212:	42ae      	cmp	r6, r5
 8009214:	dc36      	bgt.n	8009284 <__gethex+0x320>
 8009216:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d02a      	beq.n	8009274 <__gethex+0x310>
 800921e:	2b03      	cmp	r3, #3
 8009220:	d02c      	beq.n	800927c <__gethex+0x318>
 8009222:	2b01      	cmp	r3, #1
 8009224:	d11c      	bne.n	8009260 <__gethex+0x2fc>
 8009226:	42ae      	cmp	r6, r5
 8009228:	d11a      	bne.n	8009260 <__gethex+0x2fc>
 800922a:	2e01      	cmp	r6, #1
 800922c:	d112      	bne.n	8009254 <__gethex+0x2f0>
 800922e:	9a04      	ldr	r2, [sp, #16]
 8009230:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	2301      	movs	r3, #1
 8009238:	6123      	str	r3, [r4, #16]
 800923a:	f8c9 3000 	str.w	r3, [r9]
 800923e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009240:	2762      	movs	r7, #98	; 0x62
 8009242:	601c      	str	r4, [r3, #0]
 8009244:	e723      	b.n	800908e <__gethex+0x12a>
 8009246:	bf00      	nop
 8009248:	0800b2b8 	.word	0x0800b2b8
 800924c:	0800b240 	.word	0x0800b240
 8009250:	0800b251 	.word	0x0800b251
 8009254:	1e71      	subs	r1, r6, #1
 8009256:	4620      	mov	r0, r4
 8009258:	f000 fe58 	bl	8009f0c <__any_on>
 800925c:	2800      	cmp	r0, #0
 800925e:	d1e6      	bne.n	800922e <__gethex+0x2ca>
 8009260:	ee18 0a10 	vmov	r0, s16
 8009264:	4621      	mov	r1, r4
 8009266:	f000 f9f1 	bl	800964c <_Bfree>
 800926a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800926c:	2300      	movs	r3, #0
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	2750      	movs	r7, #80	; 0x50
 8009272:	e70c      	b.n	800908e <__gethex+0x12a>
 8009274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1f2      	bne.n	8009260 <__gethex+0x2fc>
 800927a:	e7d8      	b.n	800922e <__gethex+0x2ca>
 800927c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1d5      	bne.n	800922e <__gethex+0x2ca>
 8009282:	e7ed      	b.n	8009260 <__gethex+0x2fc>
 8009284:	1e6f      	subs	r7, r5, #1
 8009286:	f1ba 0f00 	cmp.w	sl, #0
 800928a:	d131      	bne.n	80092f0 <__gethex+0x38c>
 800928c:	b127      	cbz	r7, 8009298 <__gethex+0x334>
 800928e:	4639      	mov	r1, r7
 8009290:	4620      	mov	r0, r4
 8009292:	f000 fe3b 	bl	8009f0c <__any_on>
 8009296:	4682      	mov	sl, r0
 8009298:	117b      	asrs	r3, r7, #5
 800929a:	2101      	movs	r1, #1
 800929c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80092a0:	f007 071f 	and.w	r7, r7, #31
 80092a4:	fa01 f707 	lsl.w	r7, r1, r7
 80092a8:	421f      	tst	r7, r3
 80092aa:	4629      	mov	r1, r5
 80092ac:	4620      	mov	r0, r4
 80092ae:	bf18      	it	ne
 80092b0:	f04a 0a02 	orrne.w	sl, sl, #2
 80092b4:	1b76      	subs	r6, r6, r5
 80092b6:	f7ff fded 	bl	8008e94 <rshift>
 80092ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80092be:	2702      	movs	r7, #2
 80092c0:	f1ba 0f00 	cmp.w	sl, #0
 80092c4:	d048      	beq.n	8009358 <__gethex+0x3f4>
 80092c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d015      	beq.n	80092fa <__gethex+0x396>
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d017      	beq.n	8009302 <__gethex+0x39e>
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d109      	bne.n	80092ea <__gethex+0x386>
 80092d6:	f01a 0f02 	tst.w	sl, #2
 80092da:	d006      	beq.n	80092ea <__gethex+0x386>
 80092dc:	f8d9 0000 	ldr.w	r0, [r9]
 80092e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80092e4:	f01a 0f01 	tst.w	sl, #1
 80092e8:	d10e      	bne.n	8009308 <__gethex+0x3a4>
 80092ea:	f047 0710 	orr.w	r7, r7, #16
 80092ee:	e033      	b.n	8009358 <__gethex+0x3f4>
 80092f0:	f04f 0a01 	mov.w	sl, #1
 80092f4:	e7d0      	b.n	8009298 <__gethex+0x334>
 80092f6:	2701      	movs	r7, #1
 80092f8:	e7e2      	b.n	80092c0 <__gethex+0x35c>
 80092fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092fc:	f1c3 0301 	rsb	r3, r3, #1
 8009300:	9315      	str	r3, [sp, #84]	; 0x54
 8009302:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0f0      	beq.n	80092ea <__gethex+0x386>
 8009308:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800930c:	f104 0314 	add.w	r3, r4, #20
 8009310:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009314:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009318:	f04f 0c00 	mov.w	ip, #0
 800931c:	4618      	mov	r0, r3
 800931e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009322:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009326:	d01c      	beq.n	8009362 <__gethex+0x3fe>
 8009328:	3201      	adds	r2, #1
 800932a:	6002      	str	r2, [r0, #0]
 800932c:	2f02      	cmp	r7, #2
 800932e:	f104 0314 	add.w	r3, r4, #20
 8009332:	d13f      	bne.n	80093b4 <__gethex+0x450>
 8009334:	f8d8 2000 	ldr.w	r2, [r8]
 8009338:	3a01      	subs	r2, #1
 800933a:	42b2      	cmp	r2, r6
 800933c:	d10a      	bne.n	8009354 <__gethex+0x3f0>
 800933e:	1171      	asrs	r1, r6, #5
 8009340:	2201      	movs	r2, #1
 8009342:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009346:	f006 061f 	and.w	r6, r6, #31
 800934a:	fa02 f606 	lsl.w	r6, r2, r6
 800934e:	421e      	tst	r6, r3
 8009350:	bf18      	it	ne
 8009352:	4617      	movne	r7, r2
 8009354:	f047 0720 	orr.w	r7, r7, #32
 8009358:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800935a:	601c      	str	r4, [r3, #0]
 800935c:	9b04      	ldr	r3, [sp, #16]
 800935e:	601d      	str	r5, [r3, #0]
 8009360:	e695      	b.n	800908e <__gethex+0x12a>
 8009362:	4299      	cmp	r1, r3
 8009364:	f843 cc04 	str.w	ip, [r3, #-4]
 8009368:	d8d8      	bhi.n	800931c <__gethex+0x3b8>
 800936a:	68a3      	ldr	r3, [r4, #8]
 800936c:	459b      	cmp	fp, r3
 800936e:	db19      	blt.n	80093a4 <__gethex+0x440>
 8009370:	6861      	ldr	r1, [r4, #4]
 8009372:	ee18 0a10 	vmov	r0, s16
 8009376:	3101      	adds	r1, #1
 8009378:	f000 f928 	bl	80095cc <_Balloc>
 800937c:	4681      	mov	r9, r0
 800937e:	b918      	cbnz	r0, 8009388 <__gethex+0x424>
 8009380:	4b1a      	ldr	r3, [pc, #104]	; (80093ec <__gethex+0x488>)
 8009382:	4602      	mov	r2, r0
 8009384:	2184      	movs	r1, #132	; 0x84
 8009386:	e6a8      	b.n	80090da <__gethex+0x176>
 8009388:	6922      	ldr	r2, [r4, #16]
 800938a:	3202      	adds	r2, #2
 800938c:	f104 010c 	add.w	r1, r4, #12
 8009390:	0092      	lsls	r2, r2, #2
 8009392:	300c      	adds	r0, #12
 8009394:	f000 f90c 	bl	80095b0 <memcpy>
 8009398:	4621      	mov	r1, r4
 800939a:	ee18 0a10 	vmov	r0, s16
 800939e:	f000 f955 	bl	800964c <_Bfree>
 80093a2:	464c      	mov	r4, r9
 80093a4:	6923      	ldr	r3, [r4, #16]
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093ac:	6122      	str	r2, [r4, #16]
 80093ae:	2201      	movs	r2, #1
 80093b0:	615a      	str	r2, [r3, #20]
 80093b2:	e7bb      	b.n	800932c <__gethex+0x3c8>
 80093b4:	6922      	ldr	r2, [r4, #16]
 80093b6:	455a      	cmp	r2, fp
 80093b8:	dd0b      	ble.n	80093d2 <__gethex+0x46e>
 80093ba:	2101      	movs	r1, #1
 80093bc:	4620      	mov	r0, r4
 80093be:	f7ff fd69 	bl	8008e94 <rshift>
 80093c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093c6:	3501      	adds	r5, #1
 80093c8:	42ab      	cmp	r3, r5
 80093ca:	f6ff aed0 	blt.w	800916e <__gethex+0x20a>
 80093ce:	2701      	movs	r7, #1
 80093d0:	e7c0      	b.n	8009354 <__gethex+0x3f0>
 80093d2:	f016 061f 	ands.w	r6, r6, #31
 80093d6:	d0fa      	beq.n	80093ce <__gethex+0x46a>
 80093d8:	4453      	add	r3, sl
 80093da:	f1c6 0620 	rsb	r6, r6, #32
 80093de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80093e2:	f000 f9e5 	bl	80097b0 <__hi0bits>
 80093e6:	42b0      	cmp	r0, r6
 80093e8:	dbe7      	blt.n	80093ba <__gethex+0x456>
 80093ea:	e7f0      	b.n	80093ce <__gethex+0x46a>
 80093ec:	0800b240 	.word	0x0800b240

080093f0 <L_shift>:
 80093f0:	f1c2 0208 	rsb	r2, r2, #8
 80093f4:	0092      	lsls	r2, r2, #2
 80093f6:	b570      	push	{r4, r5, r6, lr}
 80093f8:	f1c2 0620 	rsb	r6, r2, #32
 80093fc:	6843      	ldr	r3, [r0, #4]
 80093fe:	6804      	ldr	r4, [r0, #0]
 8009400:	fa03 f506 	lsl.w	r5, r3, r6
 8009404:	432c      	orrs	r4, r5
 8009406:	40d3      	lsrs	r3, r2
 8009408:	6004      	str	r4, [r0, #0]
 800940a:	f840 3f04 	str.w	r3, [r0, #4]!
 800940e:	4288      	cmp	r0, r1
 8009410:	d3f4      	bcc.n	80093fc <L_shift+0xc>
 8009412:	bd70      	pop	{r4, r5, r6, pc}

08009414 <__match>:
 8009414:	b530      	push	{r4, r5, lr}
 8009416:	6803      	ldr	r3, [r0, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800941e:	b914      	cbnz	r4, 8009426 <__match+0x12>
 8009420:	6003      	str	r3, [r0, #0]
 8009422:	2001      	movs	r0, #1
 8009424:	bd30      	pop	{r4, r5, pc}
 8009426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800942a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800942e:	2d19      	cmp	r5, #25
 8009430:	bf98      	it	ls
 8009432:	3220      	addls	r2, #32
 8009434:	42a2      	cmp	r2, r4
 8009436:	d0f0      	beq.n	800941a <__match+0x6>
 8009438:	2000      	movs	r0, #0
 800943a:	e7f3      	b.n	8009424 <__match+0x10>

0800943c <__hexnan>:
 800943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009440:	680b      	ldr	r3, [r1, #0]
 8009442:	115e      	asrs	r6, r3, #5
 8009444:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009448:	f013 031f 	ands.w	r3, r3, #31
 800944c:	b087      	sub	sp, #28
 800944e:	bf18      	it	ne
 8009450:	3604      	addne	r6, #4
 8009452:	2500      	movs	r5, #0
 8009454:	1f37      	subs	r7, r6, #4
 8009456:	4690      	mov	r8, r2
 8009458:	6802      	ldr	r2, [r0, #0]
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	4682      	mov	sl, r0
 800945e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009462:	46b9      	mov	r9, r7
 8009464:	463c      	mov	r4, r7
 8009466:	9502      	str	r5, [sp, #8]
 8009468:	46ab      	mov	fp, r5
 800946a:	7851      	ldrb	r1, [r2, #1]
 800946c:	1c53      	adds	r3, r2, #1
 800946e:	9303      	str	r3, [sp, #12]
 8009470:	b341      	cbz	r1, 80094c4 <__hexnan+0x88>
 8009472:	4608      	mov	r0, r1
 8009474:	9205      	str	r2, [sp, #20]
 8009476:	9104      	str	r1, [sp, #16]
 8009478:	f7ff fd5e 	bl	8008f38 <__hexdig_fun>
 800947c:	2800      	cmp	r0, #0
 800947e:	d14f      	bne.n	8009520 <__hexnan+0xe4>
 8009480:	9904      	ldr	r1, [sp, #16]
 8009482:	9a05      	ldr	r2, [sp, #20]
 8009484:	2920      	cmp	r1, #32
 8009486:	d818      	bhi.n	80094ba <__hexnan+0x7e>
 8009488:	9b02      	ldr	r3, [sp, #8]
 800948a:	459b      	cmp	fp, r3
 800948c:	dd13      	ble.n	80094b6 <__hexnan+0x7a>
 800948e:	454c      	cmp	r4, r9
 8009490:	d206      	bcs.n	80094a0 <__hexnan+0x64>
 8009492:	2d07      	cmp	r5, #7
 8009494:	dc04      	bgt.n	80094a0 <__hexnan+0x64>
 8009496:	462a      	mov	r2, r5
 8009498:	4649      	mov	r1, r9
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff ffa8 	bl	80093f0 <L_shift>
 80094a0:	4544      	cmp	r4, r8
 80094a2:	d950      	bls.n	8009546 <__hexnan+0x10a>
 80094a4:	2300      	movs	r3, #0
 80094a6:	f1a4 0904 	sub.w	r9, r4, #4
 80094aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80094ae:	f8cd b008 	str.w	fp, [sp, #8]
 80094b2:	464c      	mov	r4, r9
 80094b4:	461d      	mov	r5, r3
 80094b6:	9a03      	ldr	r2, [sp, #12]
 80094b8:	e7d7      	b.n	800946a <__hexnan+0x2e>
 80094ba:	2929      	cmp	r1, #41	; 0x29
 80094bc:	d156      	bne.n	800956c <__hexnan+0x130>
 80094be:	3202      	adds	r2, #2
 80094c0:	f8ca 2000 	str.w	r2, [sl]
 80094c4:	f1bb 0f00 	cmp.w	fp, #0
 80094c8:	d050      	beq.n	800956c <__hexnan+0x130>
 80094ca:	454c      	cmp	r4, r9
 80094cc:	d206      	bcs.n	80094dc <__hexnan+0xa0>
 80094ce:	2d07      	cmp	r5, #7
 80094d0:	dc04      	bgt.n	80094dc <__hexnan+0xa0>
 80094d2:	462a      	mov	r2, r5
 80094d4:	4649      	mov	r1, r9
 80094d6:	4620      	mov	r0, r4
 80094d8:	f7ff ff8a 	bl	80093f0 <L_shift>
 80094dc:	4544      	cmp	r4, r8
 80094de:	d934      	bls.n	800954a <__hexnan+0x10e>
 80094e0:	f1a8 0204 	sub.w	r2, r8, #4
 80094e4:	4623      	mov	r3, r4
 80094e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80094ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80094ee:	429f      	cmp	r7, r3
 80094f0:	d2f9      	bcs.n	80094e6 <__hexnan+0xaa>
 80094f2:	1b3b      	subs	r3, r7, r4
 80094f4:	f023 0303 	bic.w	r3, r3, #3
 80094f8:	3304      	adds	r3, #4
 80094fa:	3401      	adds	r4, #1
 80094fc:	3e03      	subs	r6, #3
 80094fe:	42b4      	cmp	r4, r6
 8009500:	bf88      	it	hi
 8009502:	2304      	movhi	r3, #4
 8009504:	4443      	add	r3, r8
 8009506:	2200      	movs	r2, #0
 8009508:	f843 2b04 	str.w	r2, [r3], #4
 800950c:	429f      	cmp	r7, r3
 800950e:	d2fb      	bcs.n	8009508 <__hexnan+0xcc>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	b91b      	cbnz	r3, 800951c <__hexnan+0xe0>
 8009514:	4547      	cmp	r7, r8
 8009516:	d127      	bne.n	8009568 <__hexnan+0x12c>
 8009518:	2301      	movs	r3, #1
 800951a:	603b      	str	r3, [r7, #0]
 800951c:	2005      	movs	r0, #5
 800951e:	e026      	b.n	800956e <__hexnan+0x132>
 8009520:	3501      	adds	r5, #1
 8009522:	2d08      	cmp	r5, #8
 8009524:	f10b 0b01 	add.w	fp, fp, #1
 8009528:	dd06      	ble.n	8009538 <__hexnan+0xfc>
 800952a:	4544      	cmp	r4, r8
 800952c:	d9c3      	bls.n	80094b6 <__hexnan+0x7a>
 800952e:	2300      	movs	r3, #0
 8009530:	f844 3c04 	str.w	r3, [r4, #-4]
 8009534:	2501      	movs	r5, #1
 8009536:	3c04      	subs	r4, #4
 8009538:	6822      	ldr	r2, [r4, #0]
 800953a:	f000 000f 	and.w	r0, r0, #15
 800953e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009542:	6022      	str	r2, [r4, #0]
 8009544:	e7b7      	b.n	80094b6 <__hexnan+0x7a>
 8009546:	2508      	movs	r5, #8
 8009548:	e7b5      	b.n	80094b6 <__hexnan+0x7a>
 800954a:	9b01      	ldr	r3, [sp, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d0df      	beq.n	8009510 <__hexnan+0xd4>
 8009550:	f04f 32ff 	mov.w	r2, #4294967295
 8009554:	f1c3 0320 	rsb	r3, r3, #32
 8009558:	fa22 f303 	lsr.w	r3, r2, r3
 800955c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009560:	401a      	ands	r2, r3
 8009562:	f846 2c04 	str.w	r2, [r6, #-4]
 8009566:	e7d3      	b.n	8009510 <__hexnan+0xd4>
 8009568:	3f04      	subs	r7, #4
 800956a:	e7d1      	b.n	8009510 <__hexnan+0xd4>
 800956c:	2004      	movs	r0, #4
 800956e:	b007      	add	sp, #28
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009574 <_localeconv_r>:
 8009574:	4800      	ldr	r0, [pc, #0]	; (8009578 <_localeconv_r+0x4>)
 8009576:	4770      	bx	lr
 8009578:	20000168 	.word	0x20000168

0800957c <malloc>:
 800957c:	4b02      	ldr	r3, [pc, #8]	; (8009588 <malloc+0xc>)
 800957e:	4601      	mov	r1, r0
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	f000 bd67 	b.w	800a054 <_malloc_r>
 8009586:	bf00      	nop
 8009588:	20000010 	.word	0x20000010

0800958c <__ascii_mbtowc>:
 800958c:	b082      	sub	sp, #8
 800958e:	b901      	cbnz	r1, 8009592 <__ascii_mbtowc+0x6>
 8009590:	a901      	add	r1, sp, #4
 8009592:	b142      	cbz	r2, 80095a6 <__ascii_mbtowc+0x1a>
 8009594:	b14b      	cbz	r3, 80095aa <__ascii_mbtowc+0x1e>
 8009596:	7813      	ldrb	r3, [r2, #0]
 8009598:	600b      	str	r3, [r1, #0]
 800959a:	7812      	ldrb	r2, [r2, #0]
 800959c:	1e10      	subs	r0, r2, #0
 800959e:	bf18      	it	ne
 80095a0:	2001      	movne	r0, #1
 80095a2:	b002      	add	sp, #8
 80095a4:	4770      	bx	lr
 80095a6:	4610      	mov	r0, r2
 80095a8:	e7fb      	b.n	80095a2 <__ascii_mbtowc+0x16>
 80095aa:	f06f 0001 	mvn.w	r0, #1
 80095ae:	e7f8      	b.n	80095a2 <__ascii_mbtowc+0x16>

080095b0 <memcpy>:
 80095b0:	440a      	add	r2, r1
 80095b2:	4291      	cmp	r1, r2
 80095b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b8:	d100      	bne.n	80095bc <memcpy+0xc>
 80095ba:	4770      	bx	lr
 80095bc:	b510      	push	{r4, lr}
 80095be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c6:	4291      	cmp	r1, r2
 80095c8:	d1f9      	bne.n	80095be <memcpy+0xe>
 80095ca:	bd10      	pop	{r4, pc}

080095cc <_Balloc>:
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095d0:	4604      	mov	r4, r0
 80095d2:	460d      	mov	r5, r1
 80095d4:	b976      	cbnz	r6, 80095f4 <_Balloc+0x28>
 80095d6:	2010      	movs	r0, #16
 80095d8:	f7ff ffd0 	bl	800957c <malloc>
 80095dc:	4602      	mov	r2, r0
 80095de:	6260      	str	r0, [r4, #36]	; 0x24
 80095e0:	b920      	cbnz	r0, 80095ec <_Balloc+0x20>
 80095e2:	4b18      	ldr	r3, [pc, #96]	; (8009644 <_Balloc+0x78>)
 80095e4:	4818      	ldr	r0, [pc, #96]	; (8009648 <_Balloc+0x7c>)
 80095e6:	2166      	movs	r1, #102	; 0x66
 80095e8:	f000 ff40 	bl	800a46c <__assert_func>
 80095ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095f0:	6006      	str	r6, [r0, #0]
 80095f2:	60c6      	str	r6, [r0, #12]
 80095f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095f6:	68f3      	ldr	r3, [r6, #12]
 80095f8:	b183      	cbz	r3, 800961c <_Balloc+0x50>
 80095fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009602:	b9b8      	cbnz	r0, 8009634 <_Balloc+0x68>
 8009604:	2101      	movs	r1, #1
 8009606:	fa01 f605 	lsl.w	r6, r1, r5
 800960a:	1d72      	adds	r2, r6, #5
 800960c:	0092      	lsls	r2, r2, #2
 800960e:	4620      	mov	r0, r4
 8009610:	f000 fc9d 	bl	8009f4e <_calloc_r>
 8009614:	b160      	cbz	r0, 8009630 <_Balloc+0x64>
 8009616:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800961a:	e00e      	b.n	800963a <_Balloc+0x6e>
 800961c:	2221      	movs	r2, #33	; 0x21
 800961e:	2104      	movs	r1, #4
 8009620:	4620      	mov	r0, r4
 8009622:	f000 fc94 	bl	8009f4e <_calloc_r>
 8009626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009628:	60f0      	str	r0, [r6, #12]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e4      	bne.n	80095fa <_Balloc+0x2e>
 8009630:	2000      	movs	r0, #0
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	6802      	ldr	r2, [r0, #0]
 8009636:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800963a:	2300      	movs	r3, #0
 800963c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009640:	e7f7      	b.n	8009632 <_Balloc+0x66>
 8009642:	bf00      	nop
 8009644:	0800b1ce 	.word	0x0800b1ce
 8009648:	0800b2cc 	.word	0x0800b2cc

0800964c <_Bfree>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009650:	4605      	mov	r5, r0
 8009652:	460c      	mov	r4, r1
 8009654:	b976      	cbnz	r6, 8009674 <_Bfree+0x28>
 8009656:	2010      	movs	r0, #16
 8009658:	f7ff ff90 	bl	800957c <malloc>
 800965c:	4602      	mov	r2, r0
 800965e:	6268      	str	r0, [r5, #36]	; 0x24
 8009660:	b920      	cbnz	r0, 800966c <_Bfree+0x20>
 8009662:	4b09      	ldr	r3, [pc, #36]	; (8009688 <_Bfree+0x3c>)
 8009664:	4809      	ldr	r0, [pc, #36]	; (800968c <_Bfree+0x40>)
 8009666:	218a      	movs	r1, #138	; 0x8a
 8009668:	f000 ff00 	bl	800a46c <__assert_func>
 800966c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009670:	6006      	str	r6, [r0, #0]
 8009672:	60c6      	str	r6, [r0, #12]
 8009674:	b13c      	cbz	r4, 8009686 <_Bfree+0x3a>
 8009676:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009678:	6862      	ldr	r2, [r4, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009680:	6021      	str	r1, [r4, #0]
 8009682:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009686:	bd70      	pop	{r4, r5, r6, pc}
 8009688:	0800b1ce 	.word	0x0800b1ce
 800968c:	0800b2cc 	.word	0x0800b2cc

08009690 <__multadd>:
 8009690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009694:	690d      	ldr	r5, [r1, #16]
 8009696:	4607      	mov	r7, r0
 8009698:	460c      	mov	r4, r1
 800969a:	461e      	mov	r6, r3
 800969c:	f101 0c14 	add.w	ip, r1, #20
 80096a0:	2000      	movs	r0, #0
 80096a2:	f8dc 3000 	ldr.w	r3, [ip]
 80096a6:	b299      	uxth	r1, r3
 80096a8:	fb02 6101 	mla	r1, r2, r1, r6
 80096ac:	0c1e      	lsrs	r6, r3, #16
 80096ae:	0c0b      	lsrs	r3, r1, #16
 80096b0:	fb02 3306 	mla	r3, r2, r6, r3
 80096b4:	b289      	uxth	r1, r1
 80096b6:	3001      	adds	r0, #1
 80096b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096bc:	4285      	cmp	r5, r0
 80096be:	f84c 1b04 	str.w	r1, [ip], #4
 80096c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096c6:	dcec      	bgt.n	80096a2 <__multadd+0x12>
 80096c8:	b30e      	cbz	r6, 800970e <__multadd+0x7e>
 80096ca:	68a3      	ldr	r3, [r4, #8]
 80096cc:	42ab      	cmp	r3, r5
 80096ce:	dc19      	bgt.n	8009704 <__multadd+0x74>
 80096d0:	6861      	ldr	r1, [r4, #4]
 80096d2:	4638      	mov	r0, r7
 80096d4:	3101      	adds	r1, #1
 80096d6:	f7ff ff79 	bl	80095cc <_Balloc>
 80096da:	4680      	mov	r8, r0
 80096dc:	b928      	cbnz	r0, 80096ea <__multadd+0x5a>
 80096de:	4602      	mov	r2, r0
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <__multadd+0x84>)
 80096e2:	480d      	ldr	r0, [pc, #52]	; (8009718 <__multadd+0x88>)
 80096e4:	21b5      	movs	r1, #181	; 0xb5
 80096e6:	f000 fec1 	bl	800a46c <__assert_func>
 80096ea:	6922      	ldr	r2, [r4, #16]
 80096ec:	3202      	adds	r2, #2
 80096ee:	f104 010c 	add.w	r1, r4, #12
 80096f2:	0092      	lsls	r2, r2, #2
 80096f4:	300c      	adds	r0, #12
 80096f6:	f7ff ff5b 	bl	80095b0 <memcpy>
 80096fa:	4621      	mov	r1, r4
 80096fc:	4638      	mov	r0, r7
 80096fe:	f7ff ffa5 	bl	800964c <_Bfree>
 8009702:	4644      	mov	r4, r8
 8009704:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009708:	3501      	adds	r5, #1
 800970a:	615e      	str	r6, [r3, #20]
 800970c:	6125      	str	r5, [r4, #16]
 800970e:	4620      	mov	r0, r4
 8009710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009714:	0800b240 	.word	0x0800b240
 8009718:	0800b2cc 	.word	0x0800b2cc

0800971c <__s2b>:
 800971c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009720:	460c      	mov	r4, r1
 8009722:	4615      	mov	r5, r2
 8009724:	461f      	mov	r7, r3
 8009726:	2209      	movs	r2, #9
 8009728:	3308      	adds	r3, #8
 800972a:	4606      	mov	r6, r0
 800972c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009730:	2100      	movs	r1, #0
 8009732:	2201      	movs	r2, #1
 8009734:	429a      	cmp	r2, r3
 8009736:	db09      	blt.n	800974c <__s2b+0x30>
 8009738:	4630      	mov	r0, r6
 800973a:	f7ff ff47 	bl	80095cc <_Balloc>
 800973e:	b940      	cbnz	r0, 8009752 <__s2b+0x36>
 8009740:	4602      	mov	r2, r0
 8009742:	4b19      	ldr	r3, [pc, #100]	; (80097a8 <__s2b+0x8c>)
 8009744:	4819      	ldr	r0, [pc, #100]	; (80097ac <__s2b+0x90>)
 8009746:	21ce      	movs	r1, #206	; 0xce
 8009748:	f000 fe90 	bl	800a46c <__assert_func>
 800974c:	0052      	lsls	r2, r2, #1
 800974e:	3101      	adds	r1, #1
 8009750:	e7f0      	b.n	8009734 <__s2b+0x18>
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	6143      	str	r3, [r0, #20]
 8009756:	2d09      	cmp	r5, #9
 8009758:	f04f 0301 	mov.w	r3, #1
 800975c:	6103      	str	r3, [r0, #16]
 800975e:	dd16      	ble.n	800978e <__s2b+0x72>
 8009760:	f104 0909 	add.w	r9, r4, #9
 8009764:	46c8      	mov	r8, r9
 8009766:	442c      	add	r4, r5
 8009768:	f818 3b01 	ldrb.w	r3, [r8], #1
 800976c:	4601      	mov	r1, r0
 800976e:	3b30      	subs	r3, #48	; 0x30
 8009770:	220a      	movs	r2, #10
 8009772:	4630      	mov	r0, r6
 8009774:	f7ff ff8c 	bl	8009690 <__multadd>
 8009778:	45a0      	cmp	r8, r4
 800977a:	d1f5      	bne.n	8009768 <__s2b+0x4c>
 800977c:	f1a5 0408 	sub.w	r4, r5, #8
 8009780:	444c      	add	r4, r9
 8009782:	1b2d      	subs	r5, r5, r4
 8009784:	1963      	adds	r3, r4, r5
 8009786:	42bb      	cmp	r3, r7
 8009788:	db04      	blt.n	8009794 <__s2b+0x78>
 800978a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978e:	340a      	adds	r4, #10
 8009790:	2509      	movs	r5, #9
 8009792:	e7f6      	b.n	8009782 <__s2b+0x66>
 8009794:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009798:	4601      	mov	r1, r0
 800979a:	3b30      	subs	r3, #48	; 0x30
 800979c:	220a      	movs	r2, #10
 800979e:	4630      	mov	r0, r6
 80097a0:	f7ff ff76 	bl	8009690 <__multadd>
 80097a4:	e7ee      	b.n	8009784 <__s2b+0x68>
 80097a6:	bf00      	nop
 80097a8:	0800b240 	.word	0x0800b240
 80097ac:	0800b2cc 	.word	0x0800b2cc

080097b0 <__hi0bits>:
 80097b0:	0c03      	lsrs	r3, r0, #16
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	b9d3      	cbnz	r3, 80097ec <__hi0bits+0x3c>
 80097b6:	0400      	lsls	r0, r0, #16
 80097b8:	2310      	movs	r3, #16
 80097ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097be:	bf04      	itt	eq
 80097c0:	0200      	lsleq	r0, r0, #8
 80097c2:	3308      	addeq	r3, #8
 80097c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097c8:	bf04      	itt	eq
 80097ca:	0100      	lsleq	r0, r0, #4
 80097cc:	3304      	addeq	r3, #4
 80097ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097d2:	bf04      	itt	eq
 80097d4:	0080      	lsleq	r0, r0, #2
 80097d6:	3302      	addeq	r3, #2
 80097d8:	2800      	cmp	r0, #0
 80097da:	db05      	blt.n	80097e8 <__hi0bits+0x38>
 80097dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097e0:	f103 0301 	add.w	r3, r3, #1
 80097e4:	bf08      	it	eq
 80097e6:	2320      	moveq	r3, #32
 80097e8:	4618      	mov	r0, r3
 80097ea:	4770      	bx	lr
 80097ec:	2300      	movs	r3, #0
 80097ee:	e7e4      	b.n	80097ba <__hi0bits+0xa>

080097f0 <__lo0bits>:
 80097f0:	6803      	ldr	r3, [r0, #0]
 80097f2:	f013 0207 	ands.w	r2, r3, #7
 80097f6:	4601      	mov	r1, r0
 80097f8:	d00b      	beq.n	8009812 <__lo0bits+0x22>
 80097fa:	07da      	lsls	r2, r3, #31
 80097fc:	d423      	bmi.n	8009846 <__lo0bits+0x56>
 80097fe:	0798      	lsls	r0, r3, #30
 8009800:	bf49      	itett	mi
 8009802:	085b      	lsrmi	r3, r3, #1
 8009804:	089b      	lsrpl	r3, r3, #2
 8009806:	2001      	movmi	r0, #1
 8009808:	600b      	strmi	r3, [r1, #0]
 800980a:	bf5c      	itt	pl
 800980c:	600b      	strpl	r3, [r1, #0]
 800980e:	2002      	movpl	r0, #2
 8009810:	4770      	bx	lr
 8009812:	b298      	uxth	r0, r3
 8009814:	b9a8      	cbnz	r0, 8009842 <__lo0bits+0x52>
 8009816:	0c1b      	lsrs	r3, r3, #16
 8009818:	2010      	movs	r0, #16
 800981a:	b2da      	uxtb	r2, r3
 800981c:	b90a      	cbnz	r2, 8009822 <__lo0bits+0x32>
 800981e:	3008      	adds	r0, #8
 8009820:	0a1b      	lsrs	r3, r3, #8
 8009822:	071a      	lsls	r2, r3, #28
 8009824:	bf04      	itt	eq
 8009826:	091b      	lsreq	r3, r3, #4
 8009828:	3004      	addeq	r0, #4
 800982a:	079a      	lsls	r2, r3, #30
 800982c:	bf04      	itt	eq
 800982e:	089b      	lsreq	r3, r3, #2
 8009830:	3002      	addeq	r0, #2
 8009832:	07da      	lsls	r2, r3, #31
 8009834:	d403      	bmi.n	800983e <__lo0bits+0x4e>
 8009836:	085b      	lsrs	r3, r3, #1
 8009838:	f100 0001 	add.w	r0, r0, #1
 800983c:	d005      	beq.n	800984a <__lo0bits+0x5a>
 800983e:	600b      	str	r3, [r1, #0]
 8009840:	4770      	bx	lr
 8009842:	4610      	mov	r0, r2
 8009844:	e7e9      	b.n	800981a <__lo0bits+0x2a>
 8009846:	2000      	movs	r0, #0
 8009848:	4770      	bx	lr
 800984a:	2020      	movs	r0, #32
 800984c:	4770      	bx	lr
	...

08009850 <__i2b>:
 8009850:	b510      	push	{r4, lr}
 8009852:	460c      	mov	r4, r1
 8009854:	2101      	movs	r1, #1
 8009856:	f7ff feb9 	bl	80095cc <_Balloc>
 800985a:	4602      	mov	r2, r0
 800985c:	b928      	cbnz	r0, 800986a <__i2b+0x1a>
 800985e:	4b05      	ldr	r3, [pc, #20]	; (8009874 <__i2b+0x24>)
 8009860:	4805      	ldr	r0, [pc, #20]	; (8009878 <__i2b+0x28>)
 8009862:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009866:	f000 fe01 	bl	800a46c <__assert_func>
 800986a:	2301      	movs	r3, #1
 800986c:	6144      	str	r4, [r0, #20]
 800986e:	6103      	str	r3, [r0, #16]
 8009870:	bd10      	pop	{r4, pc}
 8009872:	bf00      	nop
 8009874:	0800b240 	.word	0x0800b240
 8009878:	0800b2cc 	.word	0x0800b2cc

0800987c <__multiply>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	4691      	mov	r9, r2
 8009882:	690a      	ldr	r2, [r1, #16]
 8009884:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009888:	429a      	cmp	r2, r3
 800988a:	bfb8      	it	lt
 800988c:	460b      	movlt	r3, r1
 800988e:	460c      	mov	r4, r1
 8009890:	bfbc      	itt	lt
 8009892:	464c      	movlt	r4, r9
 8009894:	4699      	movlt	r9, r3
 8009896:	6927      	ldr	r7, [r4, #16]
 8009898:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	6861      	ldr	r1, [r4, #4]
 80098a0:	eb07 060a 	add.w	r6, r7, sl
 80098a4:	42b3      	cmp	r3, r6
 80098a6:	b085      	sub	sp, #20
 80098a8:	bfb8      	it	lt
 80098aa:	3101      	addlt	r1, #1
 80098ac:	f7ff fe8e 	bl	80095cc <_Balloc>
 80098b0:	b930      	cbnz	r0, 80098c0 <__multiply+0x44>
 80098b2:	4602      	mov	r2, r0
 80098b4:	4b44      	ldr	r3, [pc, #272]	; (80099c8 <__multiply+0x14c>)
 80098b6:	4845      	ldr	r0, [pc, #276]	; (80099cc <__multiply+0x150>)
 80098b8:	f240 115d 	movw	r1, #349	; 0x15d
 80098bc:	f000 fdd6 	bl	800a46c <__assert_func>
 80098c0:	f100 0514 	add.w	r5, r0, #20
 80098c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098c8:	462b      	mov	r3, r5
 80098ca:	2200      	movs	r2, #0
 80098cc:	4543      	cmp	r3, r8
 80098ce:	d321      	bcc.n	8009914 <__multiply+0x98>
 80098d0:	f104 0314 	add.w	r3, r4, #20
 80098d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098d8:	f109 0314 	add.w	r3, r9, #20
 80098dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098e0:	9202      	str	r2, [sp, #8]
 80098e2:	1b3a      	subs	r2, r7, r4
 80098e4:	3a15      	subs	r2, #21
 80098e6:	f022 0203 	bic.w	r2, r2, #3
 80098ea:	3204      	adds	r2, #4
 80098ec:	f104 0115 	add.w	r1, r4, #21
 80098f0:	428f      	cmp	r7, r1
 80098f2:	bf38      	it	cc
 80098f4:	2204      	movcc	r2, #4
 80098f6:	9201      	str	r2, [sp, #4]
 80098f8:	9a02      	ldr	r2, [sp, #8]
 80098fa:	9303      	str	r3, [sp, #12]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d80c      	bhi.n	800991a <__multiply+0x9e>
 8009900:	2e00      	cmp	r6, #0
 8009902:	dd03      	ble.n	800990c <__multiply+0x90>
 8009904:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009908:	2b00      	cmp	r3, #0
 800990a:	d05a      	beq.n	80099c2 <__multiply+0x146>
 800990c:	6106      	str	r6, [r0, #16]
 800990e:	b005      	add	sp, #20
 8009910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009914:	f843 2b04 	str.w	r2, [r3], #4
 8009918:	e7d8      	b.n	80098cc <__multiply+0x50>
 800991a:	f8b3 a000 	ldrh.w	sl, [r3]
 800991e:	f1ba 0f00 	cmp.w	sl, #0
 8009922:	d024      	beq.n	800996e <__multiply+0xf2>
 8009924:	f104 0e14 	add.w	lr, r4, #20
 8009928:	46a9      	mov	r9, r5
 800992a:	f04f 0c00 	mov.w	ip, #0
 800992e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009932:	f8d9 1000 	ldr.w	r1, [r9]
 8009936:	fa1f fb82 	uxth.w	fp, r2
 800993a:	b289      	uxth	r1, r1
 800993c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009940:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009944:	f8d9 2000 	ldr.w	r2, [r9]
 8009948:	4461      	add	r1, ip
 800994a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800994e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009952:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009956:	b289      	uxth	r1, r1
 8009958:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800995c:	4577      	cmp	r7, lr
 800995e:	f849 1b04 	str.w	r1, [r9], #4
 8009962:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009966:	d8e2      	bhi.n	800992e <__multiply+0xb2>
 8009968:	9a01      	ldr	r2, [sp, #4]
 800996a:	f845 c002 	str.w	ip, [r5, r2]
 800996e:	9a03      	ldr	r2, [sp, #12]
 8009970:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009974:	3304      	adds	r3, #4
 8009976:	f1b9 0f00 	cmp.w	r9, #0
 800997a:	d020      	beq.n	80099be <__multiply+0x142>
 800997c:	6829      	ldr	r1, [r5, #0]
 800997e:	f104 0c14 	add.w	ip, r4, #20
 8009982:	46ae      	mov	lr, r5
 8009984:	f04f 0a00 	mov.w	sl, #0
 8009988:	f8bc b000 	ldrh.w	fp, [ip]
 800998c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009990:	fb09 220b 	mla	r2, r9, fp, r2
 8009994:	4492      	add	sl, r2
 8009996:	b289      	uxth	r1, r1
 8009998:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800999c:	f84e 1b04 	str.w	r1, [lr], #4
 80099a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099a4:	f8be 1000 	ldrh.w	r1, [lr]
 80099a8:	0c12      	lsrs	r2, r2, #16
 80099aa:	fb09 1102 	mla	r1, r9, r2, r1
 80099ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80099b2:	4567      	cmp	r7, ip
 80099b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099b8:	d8e6      	bhi.n	8009988 <__multiply+0x10c>
 80099ba:	9a01      	ldr	r2, [sp, #4]
 80099bc:	50a9      	str	r1, [r5, r2]
 80099be:	3504      	adds	r5, #4
 80099c0:	e79a      	b.n	80098f8 <__multiply+0x7c>
 80099c2:	3e01      	subs	r6, #1
 80099c4:	e79c      	b.n	8009900 <__multiply+0x84>
 80099c6:	bf00      	nop
 80099c8:	0800b240 	.word	0x0800b240
 80099cc:	0800b2cc 	.word	0x0800b2cc

080099d0 <__pow5mult>:
 80099d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d4:	4615      	mov	r5, r2
 80099d6:	f012 0203 	ands.w	r2, r2, #3
 80099da:	4606      	mov	r6, r0
 80099dc:	460f      	mov	r7, r1
 80099de:	d007      	beq.n	80099f0 <__pow5mult+0x20>
 80099e0:	4c25      	ldr	r4, [pc, #148]	; (8009a78 <__pow5mult+0xa8>)
 80099e2:	3a01      	subs	r2, #1
 80099e4:	2300      	movs	r3, #0
 80099e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099ea:	f7ff fe51 	bl	8009690 <__multadd>
 80099ee:	4607      	mov	r7, r0
 80099f0:	10ad      	asrs	r5, r5, #2
 80099f2:	d03d      	beq.n	8009a70 <__pow5mult+0xa0>
 80099f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099f6:	b97c      	cbnz	r4, 8009a18 <__pow5mult+0x48>
 80099f8:	2010      	movs	r0, #16
 80099fa:	f7ff fdbf 	bl	800957c <malloc>
 80099fe:	4602      	mov	r2, r0
 8009a00:	6270      	str	r0, [r6, #36]	; 0x24
 8009a02:	b928      	cbnz	r0, 8009a10 <__pow5mult+0x40>
 8009a04:	4b1d      	ldr	r3, [pc, #116]	; (8009a7c <__pow5mult+0xac>)
 8009a06:	481e      	ldr	r0, [pc, #120]	; (8009a80 <__pow5mult+0xb0>)
 8009a08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a0c:	f000 fd2e 	bl	800a46c <__assert_func>
 8009a10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a14:	6004      	str	r4, [r0, #0]
 8009a16:	60c4      	str	r4, [r0, #12]
 8009a18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a20:	b94c      	cbnz	r4, 8009a36 <__pow5mult+0x66>
 8009a22:	f240 2171 	movw	r1, #625	; 0x271
 8009a26:	4630      	mov	r0, r6
 8009a28:	f7ff ff12 	bl	8009850 <__i2b>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a32:	4604      	mov	r4, r0
 8009a34:	6003      	str	r3, [r0, #0]
 8009a36:	f04f 0900 	mov.w	r9, #0
 8009a3a:	07eb      	lsls	r3, r5, #31
 8009a3c:	d50a      	bpl.n	8009a54 <__pow5mult+0x84>
 8009a3e:	4639      	mov	r1, r7
 8009a40:	4622      	mov	r2, r4
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ff1a 	bl	800987c <__multiply>
 8009a48:	4639      	mov	r1, r7
 8009a4a:	4680      	mov	r8, r0
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7ff fdfd 	bl	800964c <_Bfree>
 8009a52:	4647      	mov	r7, r8
 8009a54:	106d      	asrs	r5, r5, #1
 8009a56:	d00b      	beq.n	8009a70 <__pow5mult+0xa0>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	b938      	cbnz	r0, 8009a6c <__pow5mult+0x9c>
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	4621      	mov	r1, r4
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7ff ff0b 	bl	800987c <__multiply>
 8009a66:	6020      	str	r0, [r4, #0]
 8009a68:	f8c0 9000 	str.w	r9, [r0]
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	e7e4      	b.n	8009a3a <__pow5mult+0x6a>
 8009a70:	4638      	mov	r0, r7
 8009a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a76:	bf00      	nop
 8009a78:	0800b418 	.word	0x0800b418
 8009a7c:	0800b1ce 	.word	0x0800b1ce
 8009a80:	0800b2cc 	.word	0x0800b2cc

08009a84 <__lshift>:
 8009a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a88:	460c      	mov	r4, r1
 8009a8a:	6849      	ldr	r1, [r1, #4]
 8009a8c:	6923      	ldr	r3, [r4, #16]
 8009a8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a92:	68a3      	ldr	r3, [r4, #8]
 8009a94:	4607      	mov	r7, r0
 8009a96:	4691      	mov	r9, r2
 8009a98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a9c:	f108 0601 	add.w	r6, r8, #1
 8009aa0:	42b3      	cmp	r3, r6
 8009aa2:	db0b      	blt.n	8009abc <__lshift+0x38>
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	f7ff fd91 	bl	80095cc <_Balloc>
 8009aaa:	4605      	mov	r5, r0
 8009aac:	b948      	cbnz	r0, 8009ac2 <__lshift+0x3e>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	4b2a      	ldr	r3, [pc, #168]	; (8009b5c <__lshift+0xd8>)
 8009ab2:	482b      	ldr	r0, [pc, #172]	; (8009b60 <__lshift+0xdc>)
 8009ab4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ab8:	f000 fcd8 	bl	800a46c <__assert_func>
 8009abc:	3101      	adds	r1, #1
 8009abe:	005b      	lsls	r3, r3, #1
 8009ac0:	e7ee      	b.n	8009aa0 <__lshift+0x1c>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f100 0114 	add.w	r1, r0, #20
 8009ac8:	f100 0210 	add.w	r2, r0, #16
 8009acc:	4618      	mov	r0, r3
 8009ace:	4553      	cmp	r3, sl
 8009ad0:	db37      	blt.n	8009b42 <__lshift+0xbe>
 8009ad2:	6920      	ldr	r0, [r4, #16]
 8009ad4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ad8:	f104 0314 	add.w	r3, r4, #20
 8009adc:	f019 091f 	ands.w	r9, r9, #31
 8009ae0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ae4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ae8:	d02f      	beq.n	8009b4a <__lshift+0xc6>
 8009aea:	f1c9 0e20 	rsb	lr, r9, #32
 8009aee:	468a      	mov	sl, r1
 8009af0:	f04f 0c00 	mov.w	ip, #0
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	fa02 f209 	lsl.w	r2, r2, r9
 8009afa:	ea42 020c 	orr.w	r2, r2, ip
 8009afe:	f84a 2b04 	str.w	r2, [sl], #4
 8009b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b06:	4298      	cmp	r0, r3
 8009b08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b0c:	d8f2      	bhi.n	8009af4 <__lshift+0x70>
 8009b0e:	1b03      	subs	r3, r0, r4
 8009b10:	3b15      	subs	r3, #21
 8009b12:	f023 0303 	bic.w	r3, r3, #3
 8009b16:	3304      	adds	r3, #4
 8009b18:	f104 0215 	add.w	r2, r4, #21
 8009b1c:	4290      	cmp	r0, r2
 8009b1e:	bf38      	it	cc
 8009b20:	2304      	movcc	r3, #4
 8009b22:	f841 c003 	str.w	ip, [r1, r3]
 8009b26:	f1bc 0f00 	cmp.w	ip, #0
 8009b2a:	d001      	beq.n	8009b30 <__lshift+0xac>
 8009b2c:	f108 0602 	add.w	r6, r8, #2
 8009b30:	3e01      	subs	r6, #1
 8009b32:	4638      	mov	r0, r7
 8009b34:	612e      	str	r6, [r5, #16]
 8009b36:	4621      	mov	r1, r4
 8009b38:	f7ff fd88 	bl	800964c <_Bfree>
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b42:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b46:	3301      	adds	r3, #1
 8009b48:	e7c1      	b.n	8009ace <__lshift+0x4a>
 8009b4a:	3904      	subs	r1, #4
 8009b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b50:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b54:	4298      	cmp	r0, r3
 8009b56:	d8f9      	bhi.n	8009b4c <__lshift+0xc8>
 8009b58:	e7ea      	b.n	8009b30 <__lshift+0xac>
 8009b5a:	bf00      	nop
 8009b5c:	0800b240 	.word	0x0800b240
 8009b60:	0800b2cc 	.word	0x0800b2cc

08009b64 <__mcmp>:
 8009b64:	b530      	push	{r4, r5, lr}
 8009b66:	6902      	ldr	r2, [r0, #16]
 8009b68:	690c      	ldr	r4, [r1, #16]
 8009b6a:	1b12      	subs	r2, r2, r4
 8009b6c:	d10e      	bne.n	8009b8c <__mcmp+0x28>
 8009b6e:	f100 0314 	add.w	r3, r0, #20
 8009b72:	3114      	adds	r1, #20
 8009b74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b84:	42a5      	cmp	r5, r4
 8009b86:	d003      	beq.n	8009b90 <__mcmp+0x2c>
 8009b88:	d305      	bcc.n	8009b96 <__mcmp+0x32>
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	bd30      	pop	{r4, r5, pc}
 8009b90:	4283      	cmp	r3, r0
 8009b92:	d3f3      	bcc.n	8009b7c <__mcmp+0x18>
 8009b94:	e7fa      	b.n	8009b8c <__mcmp+0x28>
 8009b96:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9a:	e7f7      	b.n	8009b8c <__mcmp+0x28>

08009b9c <__mdiff>:
 8009b9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	4690      	mov	r8, r2
 8009baa:	f7ff ffdb 	bl	8009b64 <__mcmp>
 8009bae:	1e05      	subs	r5, r0, #0
 8009bb0:	d110      	bne.n	8009bd4 <__mdiff+0x38>
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7ff fd09 	bl	80095cc <_Balloc>
 8009bba:	b930      	cbnz	r0, 8009bca <__mdiff+0x2e>
 8009bbc:	4b3a      	ldr	r3, [pc, #232]	; (8009ca8 <__mdiff+0x10c>)
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	f240 2132 	movw	r1, #562	; 0x232
 8009bc4:	4839      	ldr	r0, [pc, #228]	; (8009cac <__mdiff+0x110>)
 8009bc6:	f000 fc51 	bl	800a46c <__assert_func>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd4:	bfa4      	itt	ge
 8009bd6:	4643      	movge	r3, r8
 8009bd8:	46a0      	movge	r8, r4
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009be0:	bfa6      	itte	ge
 8009be2:	461c      	movge	r4, r3
 8009be4:	2500      	movge	r5, #0
 8009be6:	2501      	movlt	r5, #1
 8009be8:	f7ff fcf0 	bl	80095cc <_Balloc>
 8009bec:	b920      	cbnz	r0, 8009bf8 <__mdiff+0x5c>
 8009bee:	4b2e      	ldr	r3, [pc, #184]	; (8009ca8 <__mdiff+0x10c>)
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bf6:	e7e5      	b.n	8009bc4 <__mdiff+0x28>
 8009bf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bfc:	6926      	ldr	r6, [r4, #16]
 8009bfe:	60c5      	str	r5, [r0, #12]
 8009c00:	f104 0914 	add.w	r9, r4, #20
 8009c04:	f108 0514 	add.w	r5, r8, #20
 8009c08:	f100 0e14 	add.w	lr, r0, #20
 8009c0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c14:	f108 0210 	add.w	r2, r8, #16
 8009c18:	46f2      	mov	sl, lr
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c24:	fa1f f883 	uxth.w	r8, r3
 8009c28:	fa11 f18b 	uxtah	r1, r1, fp
 8009c2c:	0c1b      	lsrs	r3, r3, #16
 8009c2e:	eba1 0808 	sub.w	r8, r1, r8
 8009c32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c3a:	fa1f f888 	uxth.w	r8, r8
 8009c3e:	1419      	asrs	r1, r3, #16
 8009c40:	454e      	cmp	r6, r9
 8009c42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c46:	f84a 3b04 	str.w	r3, [sl], #4
 8009c4a:	d8e7      	bhi.n	8009c1c <__mdiff+0x80>
 8009c4c:	1b33      	subs	r3, r6, r4
 8009c4e:	3b15      	subs	r3, #21
 8009c50:	f023 0303 	bic.w	r3, r3, #3
 8009c54:	3304      	adds	r3, #4
 8009c56:	3415      	adds	r4, #21
 8009c58:	42a6      	cmp	r6, r4
 8009c5a:	bf38      	it	cc
 8009c5c:	2304      	movcc	r3, #4
 8009c5e:	441d      	add	r5, r3
 8009c60:	4473      	add	r3, lr
 8009c62:	469e      	mov	lr, r3
 8009c64:	462e      	mov	r6, r5
 8009c66:	4566      	cmp	r6, ip
 8009c68:	d30e      	bcc.n	8009c88 <__mdiff+0xec>
 8009c6a:	f10c 0203 	add.w	r2, ip, #3
 8009c6e:	1b52      	subs	r2, r2, r5
 8009c70:	f022 0203 	bic.w	r2, r2, #3
 8009c74:	3d03      	subs	r5, #3
 8009c76:	45ac      	cmp	ip, r5
 8009c78:	bf38      	it	cc
 8009c7a:	2200      	movcc	r2, #0
 8009c7c:	441a      	add	r2, r3
 8009c7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c82:	b17b      	cbz	r3, 8009ca4 <__mdiff+0x108>
 8009c84:	6107      	str	r7, [r0, #16]
 8009c86:	e7a3      	b.n	8009bd0 <__mdiff+0x34>
 8009c88:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c8c:	fa11 f288 	uxtah	r2, r1, r8
 8009c90:	1414      	asrs	r4, r2, #16
 8009c92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c96:	b292      	uxth	r2, r2
 8009c98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c9c:	f84e 2b04 	str.w	r2, [lr], #4
 8009ca0:	1421      	asrs	r1, r4, #16
 8009ca2:	e7e0      	b.n	8009c66 <__mdiff+0xca>
 8009ca4:	3f01      	subs	r7, #1
 8009ca6:	e7ea      	b.n	8009c7e <__mdiff+0xe2>
 8009ca8:	0800b240 	.word	0x0800b240
 8009cac:	0800b2cc 	.word	0x0800b2cc

08009cb0 <__ulp>:
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	ed8d 0b00 	vstr	d0, [sp]
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	4912      	ldr	r1, [pc, #72]	; (8009d04 <__ulp+0x54>)
 8009cba:	4019      	ands	r1, r3
 8009cbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009cc0:	2900      	cmp	r1, #0
 8009cc2:	dd05      	ble.n	8009cd0 <__ulp+0x20>
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	ec43 2b10 	vmov	d0, r2, r3
 8009ccc:	b002      	add	sp, #8
 8009cce:	4770      	bx	lr
 8009cd0:	4249      	negs	r1, r1
 8009cd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009cd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009cda:	f04f 0200 	mov.w	r2, #0
 8009cde:	f04f 0300 	mov.w	r3, #0
 8009ce2:	da04      	bge.n	8009cee <__ulp+0x3e>
 8009ce4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009ce8:	fa41 f300 	asr.w	r3, r1, r0
 8009cec:	e7ec      	b.n	8009cc8 <__ulp+0x18>
 8009cee:	f1a0 0114 	sub.w	r1, r0, #20
 8009cf2:	291e      	cmp	r1, #30
 8009cf4:	bfda      	itte	le
 8009cf6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009cfa:	fa20 f101 	lsrle.w	r1, r0, r1
 8009cfe:	2101      	movgt	r1, #1
 8009d00:	460a      	mov	r2, r1
 8009d02:	e7e1      	b.n	8009cc8 <__ulp+0x18>
 8009d04:	7ff00000 	.word	0x7ff00000

08009d08 <__b2d>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	6905      	ldr	r5, [r0, #16]
 8009d0c:	f100 0714 	add.w	r7, r0, #20
 8009d10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009d14:	1f2e      	subs	r6, r5, #4
 8009d16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7ff fd48 	bl	80097b0 <__hi0bits>
 8009d20:	f1c0 0320 	rsb	r3, r0, #32
 8009d24:	280a      	cmp	r0, #10
 8009d26:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009da4 <__b2d+0x9c>
 8009d2a:	600b      	str	r3, [r1, #0]
 8009d2c:	dc14      	bgt.n	8009d58 <__b2d+0x50>
 8009d2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d32:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d36:	42b7      	cmp	r7, r6
 8009d38:	ea41 030c 	orr.w	r3, r1, ip
 8009d3c:	bf34      	ite	cc
 8009d3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d42:	2100      	movcs	r1, #0
 8009d44:	3015      	adds	r0, #21
 8009d46:	fa04 f000 	lsl.w	r0, r4, r0
 8009d4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d4e:	ea40 0201 	orr.w	r2, r0, r1
 8009d52:	ec43 2b10 	vmov	d0, r2, r3
 8009d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d58:	42b7      	cmp	r7, r6
 8009d5a:	bf3a      	itte	cc
 8009d5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d60:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d64:	2100      	movcs	r1, #0
 8009d66:	380b      	subs	r0, #11
 8009d68:	d017      	beq.n	8009d9a <__b2d+0x92>
 8009d6a:	f1c0 0c20 	rsb	ip, r0, #32
 8009d6e:	fa04 f500 	lsl.w	r5, r4, r0
 8009d72:	42be      	cmp	r6, r7
 8009d74:	fa21 f40c 	lsr.w	r4, r1, ip
 8009d78:	ea45 0504 	orr.w	r5, r5, r4
 8009d7c:	bf8c      	ite	hi
 8009d7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d82:	2400      	movls	r4, #0
 8009d84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009d88:	fa01 f000 	lsl.w	r0, r1, r0
 8009d8c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009d90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d94:	ea40 0204 	orr.w	r2, r0, r4
 8009d98:	e7db      	b.n	8009d52 <__b2d+0x4a>
 8009d9a:	ea44 030c 	orr.w	r3, r4, ip
 8009d9e:	460a      	mov	r2, r1
 8009da0:	e7d7      	b.n	8009d52 <__b2d+0x4a>
 8009da2:	bf00      	nop
 8009da4:	3ff00000 	.word	0x3ff00000

08009da8 <__d2b>:
 8009da8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dac:	4689      	mov	r9, r1
 8009dae:	2101      	movs	r1, #1
 8009db0:	ec57 6b10 	vmov	r6, r7, d0
 8009db4:	4690      	mov	r8, r2
 8009db6:	f7ff fc09 	bl	80095cc <_Balloc>
 8009dba:	4604      	mov	r4, r0
 8009dbc:	b930      	cbnz	r0, 8009dcc <__d2b+0x24>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	4b25      	ldr	r3, [pc, #148]	; (8009e58 <__d2b+0xb0>)
 8009dc2:	4826      	ldr	r0, [pc, #152]	; (8009e5c <__d2b+0xb4>)
 8009dc4:	f240 310a 	movw	r1, #778	; 0x30a
 8009dc8:	f000 fb50 	bl	800a46c <__assert_func>
 8009dcc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009dd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009dd4:	bb35      	cbnz	r5, 8009e24 <__d2b+0x7c>
 8009dd6:	2e00      	cmp	r6, #0
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	d028      	beq.n	8009e2e <__d2b+0x86>
 8009ddc:	4668      	mov	r0, sp
 8009dde:	9600      	str	r6, [sp, #0]
 8009de0:	f7ff fd06 	bl	80097f0 <__lo0bits>
 8009de4:	9900      	ldr	r1, [sp, #0]
 8009de6:	b300      	cbz	r0, 8009e2a <__d2b+0x82>
 8009de8:	9a01      	ldr	r2, [sp, #4]
 8009dea:	f1c0 0320 	rsb	r3, r0, #32
 8009dee:	fa02 f303 	lsl.w	r3, r2, r3
 8009df2:	430b      	orrs	r3, r1
 8009df4:	40c2      	lsrs	r2, r0
 8009df6:	6163      	str	r3, [r4, #20]
 8009df8:	9201      	str	r2, [sp, #4]
 8009dfa:	9b01      	ldr	r3, [sp, #4]
 8009dfc:	61a3      	str	r3, [r4, #24]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bf14      	ite	ne
 8009e02:	2202      	movne	r2, #2
 8009e04:	2201      	moveq	r2, #1
 8009e06:	6122      	str	r2, [r4, #16]
 8009e08:	b1d5      	cbz	r5, 8009e40 <__d2b+0x98>
 8009e0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e0e:	4405      	add	r5, r0
 8009e10:	f8c9 5000 	str.w	r5, [r9]
 8009e14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e18:	f8c8 0000 	str.w	r0, [r8]
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	b003      	add	sp, #12
 8009e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e28:	e7d5      	b.n	8009dd6 <__d2b+0x2e>
 8009e2a:	6161      	str	r1, [r4, #20]
 8009e2c:	e7e5      	b.n	8009dfa <__d2b+0x52>
 8009e2e:	a801      	add	r0, sp, #4
 8009e30:	f7ff fcde 	bl	80097f0 <__lo0bits>
 8009e34:	9b01      	ldr	r3, [sp, #4]
 8009e36:	6163      	str	r3, [r4, #20]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	6122      	str	r2, [r4, #16]
 8009e3c:	3020      	adds	r0, #32
 8009e3e:	e7e3      	b.n	8009e08 <__d2b+0x60>
 8009e40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e48:	f8c9 0000 	str.w	r0, [r9]
 8009e4c:	6918      	ldr	r0, [r3, #16]
 8009e4e:	f7ff fcaf 	bl	80097b0 <__hi0bits>
 8009e52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e56:	e7df      	b.n	8009e18 <__d2b+0x70>
 8009e58:	0800b240 	.word	0x0800b240
 8009e5c:	0800b2cc 	.word	0x0800b2cc

08009e60 <__ratio>:
 8009e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e64:	4688      	mov	r8, r1
 8009e66:	4669      	mov	r1, sp
 8009e68:	4681      	mov	r9, r0
 8009e6a:	f7ff ff4d 	bl	8009d08 <__b2d>
 8009e6e:	a901      	add	r1, sp, #4
 8009e70:	4640      	mov	r0, r8
 8009e72:	ec55 4b10 	vmov	r4, r5, d0
 8009e76:	f7ff ff47 	bl	8009d08 <__b2d>
 8009e7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e82:	eba3 0c02 	sub.w	ip, r3, r2
 8009e86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e8a:	1a9b      	subs	r3, r3, r2
 8009e8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e90:	ec51 0b10 	vmov	r0, r1, d0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	bfd6      	itet	le
 8009e98:	460a      	movle	r2, r1
 8009e9a:	462a      	movgt	r2, r5
 8009e9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ea0:	468b      	mov	fp, r1
 8009ea2:	462f      	mov	r7, r5
 8009ea4:	bfd4      	ite	le
 8009ea6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009eaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009eae:	4620      	mov	r0, r4
 8009eb0:	ee10 2a10 	vmov	r2, s0
 8009eb4:	465b      	mov	r3, fp
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	f7f6 fce8 	bl	800088c <__aeabi_ddiv>
 8009ebc:	ec41 0b10 	vmov	d0, r0, r1
 8009ec0:	b003      	add	sp, #12
 8009ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ec6 <__copybits>:
 8009ec6:	3901      	subs	r1, #1
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	1149      	asrs	r1, r1, #5
 8009ecc:	6914      	ldr	r4, [r2, #16]
 8009ece:	3101      	adds	r1, #1
 8009ed0:	f102 0314 	add.w	r3, r2, #20
 8009ed4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ed8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009edc:	1f05      	subs	r5, r0, #4
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	d30c      	bcc.n	8009efc <__copybits+0x36>
 8009ee2:	1aa3      	subs	r3, r4, r2
 8009ee4:	3b11      	subs	r3, #17
 8009ee6:	f023 0303 	bic.w	r3, r3, #3
 8009eea:	3211      	adds	r2, #17
 8009eec:	42a2      	cmp	r2, r4
 8009eee:	bf88      	it	hi
 8009ef0:	2300      	movhi	r3, #0
 8009ef2:	4418      	add	r0, r3
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4288      	cmp	r0, r1
 8009ef8:	d305      	bcc.n	8009f06 <__copybits+0x40>
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f00:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f04:	e7eb      	b.n	8009ede <__copybits+0x18>
 8009f06:	f840 3b04 	str.w	r3, [r0], #4
 8009f0a:	e7f4      	b.n	8009ef6 <__copybits+0x30>

08009f0c <__any_on>:
 8009f0c:	f100 0214 	add.w	r2, r0, #20
 8009f10:	6900      	ldr	r0, [r0, #16]
 8009f12:	114b      	asrs	r3, r1, #5
 8009f14:	4298      	cmp	r0, r3
 8009f16:	b510      	push	{r4, lr}
 8009f18:	db11      	blt.n	8009f3e <__any_on+0x32>
 8009f1a:	dd0a      	ble.n	8009f32 <__any_on+0x26>
 8009f1c:	f011 011f 	ands.w	r1, r1, #31
 8009f20:	d007      	beq.n	8009f32 <__any_on+0x26>
 8009f22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f26:	fa24 f001 	lsr.w	r0, r4, r1
 8009f2a:	fa00 f101 	lsl.w	r1, r0, r1
 8009f2e:	428c      	cmp	r4, r1
 8009f30:	d10b      	bne.n	8009f4a <__any_on+0x3e>
 8009f32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d803      	bhi.n	8009f42 <__any_on+0x36>
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	bd10      	pop	{r4, pc}
 8009f3e:	4603      	mov	r3, r0
 8009f40:	e7f7      	b.n	8009f32 <__any_on+0x26>
 8009f42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f46:	2900      	cmp	r1, #0
 8009f48:	d0f5      	beq.n	8009f36 <__any_on+0x2a>
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	e7f6      	b.n	8009f3c <__any_on+0x30>

08009f4e <_calloc_r>:
 8009f4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f50:	fba1 2402 	umull	r2, r4, r1, r2
 8009f54:	b94c      	cbnz	r4, 8009f6a <_calloc_r+0x1c>
 8009f56:	4611      	mov	r1, r2
 8009f58:	9201      	str	r2, [sp, #4]
 8009f5a:	f000 f87b 	bl	800a054 <_malloc_r>
 8009f5e:	9a01      	ldr	r2, [sp, #4]
 8009f60:	4605      	mov	r5, r0
 8009f62:	b930      	cbnz	r0, 8009f72 <_calloc_r+0x24>
 8009f64:	4628      	mov	r0, r5
 8009f66:	b003      	add	sp, #12
 8009f68:	bd30      	pop	{r4, r5, pc}
 8009f6a:	220c      	movs	r2, #12
 8009f6c:	6002      	str	r2, [r0, #0]
 8009f6e:	2500      	movs	r5, #0
 8009f70:	e7f8      	b.n	8009f64 <_calloc_r+0x16>
 8009f72:	4621      	mov	r1, r4
 8009f74:	f7fc fbc0 	bl	80066f8 <memset>
 8009f78:	e7f4      	b.n	8009f64 <_calloc_r+0x16>
	...

08009f7c <_free_r>:
 8009f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f7e:	2900      	cmp	r1, #0
 8009f80:	d044      	beq.n	800a00c <_free_r+0x90>
 8009f82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f86:	9001      	str	r0, [sp, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f8e:	bfb8      	it	lt
 8009f90:	18e4      	addlt	r4, r4, r3
 8009f92:	f000 fab5 	bl	800a500 <__malloc_lock>
 8009f96:	4a1e      	ldr	r2, [pc, #120]	; (800a010 <_free_r+0x94>)
 8009f98:	9801      	ldr	r0, [sp, #4]
 8009f9a:	6813      	ldr	r3, [r2, #0]
 8009f9c:	b933      	cbnz	r3, 8009fac <_free_r+0x30>
 8009f9e:	6063      	str	r3, [r4, #4]
 8009fa0:	6014      	str	r4, [r2, #0]
 8009fa2:	b003      	add	sp, #12
 8009fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fa8:	f000 bab0 	b.w	800a50c <__malloc_unlock>
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	d908      	bls.n	8009fc2 <_free_r+0x46>
 8009fb0:	6825      	ldr	r5, [r4, #0]
 8009fb2:	1961      	adds	r1, r4, r5
 8009fb4:	428b      	cmp	r3, r1
 8009fb6:	bf01      	itttt	eq
 8009fb8:	6819      	ldreq	r1, [r3, #0]
 8009fba:	685b      	ldreq	r3, [r3, #4]
 8009fbc:	1949      	addeq	r1, r1, r5
 8009fbe:	6021      	streq	r1, [r4, #0]
 8009fc0:	e7ed      	b.n	8009f9e <_free_r+0x22>
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	b10b      	cbz	r3, 8009fcc <_free_r+0x50>
 8009fc8:	42a3      	cmp	r3, r4
 8009fca:	d9fa      	bls.n	8009fc2 <_free_r+0x46>
 8009fcc:	6811      	ldr	r1, [r2, #0]
 8009fce:	1855      	adds	r5, r2, r1
 8009fd0:	42a5      	cmp	r5, r4
 8009fd2:	d10b      	bne.n	8009fec <_free_r+0x70>
 8009fd4:	6824      	ldr	r4, [r4, #0]
 8009fd6:	4421      	add	r1, r4
 8009fd8:	1854      	adds	r4, r2, r1
 8009fda:	42a3      	cmp	r3, r4
 8009fdc:	6011      	str	r1, [r2, #0]
 8009fde:	d1e0      	bne.n	8009fa2 <_free_r+0x26>
 8009fe0:	681c      	ldr	r4, [r3, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	6053      	str	r3, [r2, #4]
 8009fe6:	4421      	add	r1, r4
 8009fe8:	6011      	str	r1, [r2, #0]
 8009fea:	e7da      	b.n	8009fa2 <_free_r+0x26>
 8009fec:	d902      	bls.n	8009ff4 <_free_r+0x78>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	6003      	str	r3, [r0, #0]
 8009ff2:	e7d6      	b.n	8009fa2 <_free_r+0x26>
 8009ff4:	6825      	ldr	r5, [r4, #0]
 8009ff6:	1961      	adds	r1, r4, r5
 8009ff8:	428b      	cmp	r3, r1
 8009ffa:	bf04      	itt	eq
 8009ffc:	6819      	ldreq	r1, [r3, #0]
 8009ffe:	685b      	ldreq	r3, [r3, #4]
 800a000:	6063      	str	r3, [r4, #4]
 800a002:	bf04      	itt	eq
 800a004:	1949      	addeq	r1, r1, r5
 800a006:	6021      	streq	r1, [r4, #0]
 800a008:	6054      	str	r4, [r2, #4]
 800a00a:	e7ca      	b.n	8009fa2 <_free_r+0x26>
 800a00c:	b003      	add	sp, #12
 800a00e:	bd30      	pop	{r4, r5, pc}
 800a010:	20000498 	.word	0x20000498

0800a014 <sbrk_aligned>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	4e0e      	ldr	r6, [pc, #56]	; (800a050 <sbrk_aligned+0x3c>)
 800a018:	460c      	mov	r4, r1
 800a01a:	6831      	ldr	r1, [r6, #0]
 800a01c:	4605      	mov	r5, r0
 800a01e:	b911      	cbnz	r1, 800a026 <sbrk_aligned+0x12>
 800a020:	f000 f9f2 	bl	800a408 <_sbrk_r>
 800a024:	6030      	str	r0, [r6, #0]
 800a026:	4621      	mov	r1, r4
 800a028:	4628      	mov	r0, r5
 800a02a:	f000 f9ed 	bl	800a408 <_sbrk_r>
 800a02e:	1c43      	adds	r3, r0, #1
 800a030:	d00a      	beq.n	800a048 <sbrk_aligned+0x34>
 800a032:	1cc4      	adds	r4, r0, #3
 800a034:	f024 0403 	bic.w	r4, r4, #3
 800a038:	42a0      	cmp	r0, r4
 800a03a:	d007      	beq.n	800a04c <sbrk_aligned+0x38>
 800a03c:	1a21      	subs	r1, r4, r0
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 f9e2 	bl	800a408 <_sbrk_r>
 800a044:	3001      	adds	r0, #1
 800a046:	d101      	bne.n	800a04c <sbrk_aligned+0x38>
 800a048:	f04f 34ff 	mov.w	r4, #4294967295
 800a04c:	4620      	mov	r0, r4
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
 800a050:	2000049c 	.word	0x2000049c

0800a054 <_malloc_r>:
 800a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a058:	1ccd      	adds	r5, r1, #3
 800a05a:	f025 0503 	bic.w	r5, r5, #3
 800a05e:	3508      	adds	r5, #8
 800a060:	2d0c      	cmp	r5, #12
 800a062:	bf38      	it	cc
 800a064:	250c      	movcc	r5, #12
 800a066:	2d00      	cmp	r5, #0
 800a068:	4607      	mov	r7, r0
 800a06a:	db01      	blt.n	800a070 <_malloc_r+0x1c>
 800a06c:	42a9      	cmp	r1, r5
 800a06e:	d905      	bls.n	800a07c <_malloc_r+0x28>
 800a070:	230c      	movs	r3, #12
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	2600      	movs	r6, #0
 800a076:	4630      	mov	r0, r6
 800a078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07c:	4e2e      	ldr	r6, [pc, #184]	; (800a138 <_malloc_r+0xe4>)
 800a07e:	f000 fa3f 	bl	800a500 <__malloc_lock>
 800a082:	6833      	ldr	r3, [r6, #0]
 800a084:	461c      	mov	r4, r3
 800a086:	bb34      	cbnz	r4, 800a0d6 <_malloc_r+0x82>
 800a088:	4629      	mov	r1, r5
 800a08a:	4638      	mov	r0, r7
 800a08c:	f7ff ffc2 	bl	800a014 <sbrk_aligned>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	4604      	mov	r4, r0
 800a094:	d14d      	bne.n	800a132 <_malloc_r+0xde>
 800a096:	6834      	ldr	r4, [r6, #0]
 800a098:	4626      	mov	r6, r4
 800a09a:	2e00      	cmp	r6, #0
 800a09c:	d140      	bne.n	800a120 <_malloc_r+0xcc>
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	eb04 0803 	add.w	r8, r4, r3
 800a0a8:	f000 f9ae 	bl	800a408 <_sbrk_r>
 800a0ac:	4580      	cmp	r8, r0
 800a0ae:	d13a      	bne.n	800a126 <_malloc_r+0xd2>
 800a0b0:	6821      	ldr	r1, [r4, #0]
 800a0b2:	3503      	adds	r5, #3
 800a0b4:	1a6d      	subs	r5, r5, r1
 800a0b6:	f025 0503 	bic.w	r5, r5, #3
 800a0ba:	3508      	adds	r5, #8
 800a0bc:	2d0c      	cmp	r5, #12
 800a0be:	bf38      	it	cc
 800a0c0:	250c      	movcc	r5, #12
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	f7ff ffa5 	bl	800a014 <sbrk_aligned>
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	d02b      	beq.n	800a126 <_malloc_r+0xd2>
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	442b      	add	r3, r5
 800a0d2:	6023      	str	r3, [r4, #0]
 800a0d4:	e00e      	b.n	800a0f4 <_malloc_r+0xa0>
 800a0d6:	6822      	ldr	r2, [r4, #0]
 800a0d8:	1b52      	subs	r2, r2, r5
 800a0da:	d41e      	bmi.n	800a11a <_malloc_r+0xc6>
 800a0dc:	2a0b      	cmp	r2, #11
 800a0de:	d916      	bls.n	800a10e <_malloc_r+0xba>
 800a0e0:	1961      	adds	r1, r4, r5
 800a0e2:	42a3      	cmp	r3, r4
 800a0e4:	6025      	str	r5, [r4, #0]
 800a0e6:	bf18      	it	ne
 800a0e8:	6059      	strne	r1, [r3, #4]
 800a0ea:	6863      	ldr	r3, [r4, #4]
 800a0ec:	bf08      	it	eq
 800a0ee:	6031      	streq	r1, [r6, #0]
 800a0f0:	5162      	str	r2, [r4, r5]
 800a0f2:	604b      	str	r3, [r1, #4]
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	f104 060b 	add.w	r6, r4, #11
 800a0fa:	f000 fa07 	bl	800a50c <__malloc_unlock>
 800a0fe:	f026 0607 	bic.w	r6, r6, #7
 800a102:	1d23      	adds	r3, r4, #4
 800a104:	1af2      	subs	r2, r6, r3
 800a106:	d0b6      	beq.n	800a076 <_malloc_r+0x22>
 800a108:	1b9b      	subs	r3, r3, r6
 800a10a:	50a3      	str	r3, [r4, r2]
 800a10c:	e7b3      	b.n	800a076 <_malloc_r+0x22>
 800a10e:	6862      	ldr	r2, [r4, #4]
 800a110:	42a3      	cmp	r3, r4
 800a112:	bf0c      	ite	eq
 800a114:	6032      	streq	r2, [r6, #0]
 800a116:	605a      	strne	r2, [r3, #4]
 800a118:	e7ec      	b.n	800a0f4 <_malloc_r+0xa0>
 800a11a:	4623      	mov	r3, r4
 800a11c:	6864      	ldr	r4, [r4, #4]
 800a11e:	e7b2      	b.n	800a086 <_malloc_r+0x32>
 800a120:	4634      	mov	r4, r6
 800a122:	6876      	ldr	r6, [r6, #4]
 800a124:	e7b9      	b.n	800a09a <_malloc_r+0x46>
 800a126:	230c      	movs	r3, #12
 800a128:	603b      	str	r3, [r7, #0]
 800a12a:	4638      	mov	r0, r7
 800a12c:	f000 f9ee 	bl	800a50c <__malloc_unlock>
 800a130:	e7a1      	b.n	800a076 <_malloc_r+0x22>
 800a132:	6025      	str	r5, [r4, #0]
 800a134:	e7de      	b.n	800a0f4 <_malloc_r+0xa0>
 800a136:	bf00      	nop
 800a138:	20000498 	.word	0x20000498

0800a13c <__ssputs_r>:
 800a13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a140:	688e      	ldr	r6, [r1, #8]
 800a142:	429e      	cmp	r6, r3
 800a144:	4682      	mov	sl, r0
 800a146:	460c      	mov	r4, r1
 800a148:	4690      	mov	r8, r2
 800a14a:	461f      	mov	r7, r3
 800a14c:	d838      	bhi.n	800a1c0 <__ssputs_r+0x84>
 800a14e:	898a      	ldrh	r2, [r1, #12]
 800a150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a154:	d032      	beq.n	800a1bc <__ssputs_r+0x80>
 800a156:	6825      	ldr	r5, [r4, #0]
 800a158:	6909      	ldr	r1, [r1, #16]
 800a15a:	eba5 0901 	sub.w	r9, r5, r1
 800a15e:	6965      	ldr	r5, [r4, #20]
 800a160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a168:	3301      	adds	r3, #1
 800a16a:	444b      	add	r3, r9
 800a16c:	106d      	asrs	r5, r5, #1
 800a16e:	429d      	cmp	r5, r3
 800a170:	bf38      	it	cc
 800a172:	461d      	movcc	r5, r3
 800a174:	0553      	lsls	r3, r2, #21
 800a176:	d531      	bpl.n	800a1dc <__ssputs_r+0xa0>
 800a178:	4629      	mov	r1, r5
 800a17a:	f7ff ff6b 	bl	800a054 <_malloc_r>
 800a17e:	4606      	mov	r6, r0
 800a180:	b950      	cbnz	r0, 800a198 <__ssputs_r+0x5c>
 800a182:	230c      	movs	r3, #12
 800a184:	f8ca 3000 	str.w	r3, [sl]
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a18e:	81a3      	strh	r3, [r4, #12]
 800a190:	f04f 30ff 	mov.w	r0, #4294967295
 800a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a198:	6921      	ldr	r1, [r4, #16]
 800a19a:	464a      	mov	r2, r9
 800a19c:	f7ff fa08 	bl	80095b0 <memcpy>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	6126      	str	r6, [r4, #16]
 800a1ae:	6165      	str	r5, [r4, #20]
 800a1b0:	444e      	add	r6, r9
 800a1b2:	eba5 0509 	sub.w	r5, r5, r9
 800a1b6:	6026      	str	r6, [r4, #0]
 800a1b8:	60a5      	str	r5, [r4, #8]
 800a1ba:	463e      	mov	r6, r7
 800a1bc:	42be      	cmp	r6, r7
 800a1be:	d900      	bls.n	800a1c2 <__ssputs_r+0x86>
 800a1c0:	463e      	mov	r6, r7
 800a1c2:	6820      	ldr	r0, [r4, #0]
 800a1c4:	4632      	mov	r2, r6
 800a1c6:	4641      	mov	r1, r8
 800a1c8:	f000 f980 	bl	800a4cc <memmove>
 800a1cc:	68a3      	ldr	r3, [r4, #8]
 800a1ce:	1b9b      	subs	r3, r3, r6
 800a1d0:	60a3      	str	r3, [r4, #8]
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	4433      	add	r3, r6
 800a1d6:	6023      	str	r3, [r4, #0]
 800a1d8:	2000      	movs	r0, #0
 800a1da:	e7db      	b.n	800a194 <__ssputs_r+0x58>
 800a1dc:	462a      	mov	r2, r5
 800a1de:	f000 f99b 	bl	800a518 <_realloc_r>
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d1e1      	bne.n	800a1ac <__ssputs_r+0x70>
 800a1e8:	6921      	ldr	r1, [r4, #16]
 800a1ea:	4650      	mov	r0, sl
 800a1ec:	f7ff fec6 	bl	8009f7c <_free_r>
 800a1f0:	e7c7      	b.n	800a182 <__ssputs_r+0x46>
	...

0800a1f4 <_svfiprintf_r>:
 800a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f8:	4698      	mov	r8, r3
 800a1fa:	898b      	ldrh	r3, [r1, #12]
 800a1fc:	061b      	lsls	r3, r3, #24
 800a1fe:	b09d      	sub	sp, #116	; 0x74
 800a200:	4607      	mov	r7, r0
 800a202:	460d      	mov	r5, r1
 800a204:	4614      	mov	r4, r2
 800a206:	d50e      	bpl.n	800a226 <_svfiprintf_r+0x32>
 800a208:	690b      	ldr	r3, [r1, #16]
 800a20a:	b963      	cbnz	r3, 800a226 <_svfiprintf_r+0x32>
 800a20c:	2140      	movs	r1, #64	; 0x40
 800a20e:	f7ff ff21 	bl	800a054 <_malloc_r>
 800a212:	6028      	str	r0, [r5, #0]
 800a214:	6128      	str	r0, [r5, #16]
 800a216:	b920      	cbnz	r0, 800a222 <_svfiprintf_r+0x2e>
 800a218:	230c      	movs	r3, #12
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	e0d1      	b.n	800a3c6 <_svfiprintf_r+0x1d2>
 800a222:	2340      	movs	r3, #64	; 0x40
 800a224:	616b      	str	r3, [r5, #20]
 800a226:	2300      	movs	r3, #0
 800a228:	9309      	str	r3, [sp, #36]	; 0x24
 800a22a:	2320      	movs	r3, #32
 800a22c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a230:	f8cd 800c 	str.w	r8, [sp, #12]
 800a234:	2330      	movs	r3, #48	; 0x30
 800a236:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3e0 <_svfiprintf_r+0x1ec>
 800a23a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a23e:	f04f 0901 	mov.w	r9, #1
 800a242:	4623      	mov	r3, r4
 800a244:	469a      	mov	sl, r3
 800a246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a24a:	b10a      	cbz	r2, 800a250 <_svfiprintf_r+0x5c>
 800a24c:	2a25      	cmp	r2, #37	; 0x25
 800a24e:	d1f9      	bne.n	800a244 <_svfiprintf_r+0x50>
 800a250:	ebba 0b04 	subs.w	fp, sl, r4
 800a254:	d00b      	beq.n	800a26e <_svfiprintf_r+0x7a>
 800a256:	465b      	mov	r3, fp
 800a258:	4622      	mov	r2, r4
 800a25a:	4629      	mov	r1, r5
 800a25c:	4638      	mov	r0, r7
 800a25e:	f7ff ff6d 	bl	800a13c <__ssputs_r>
 800a262:	3001      	adds	r0, #1
 800a264:	f000 80aa 	beq.w	800a3bc <_svfiprintf_r+0x1c8>
 800a268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a26a:	445a      	add	r2, fp
 800a26c:	9209      	str	r2, [sp, #36]	; 0x24
 800a26e:	f89a 3000 	ldrb.w	r3, [sl]
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 80a2 	beq.w	800a3bc <_svfiprintf_r+0x1c8>
 800a278:	2300      	movs	r3, #0
 800a27a:	f04f 32ff 	mov.w	r2, #4294967295
 800a27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a282:	f10a 0a01 	add.w	sl, sl, #1
 800a286:	9304      	str	r3, [sp, #16]
 800a288:	9307      	str	r3, [sp, #28]
 800a28a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a28e:	931a      	str	r3, [sp, #104]	; 0x68
 800a290:	4654      	mov	r4, sl
 800a292:	2205      	movs	r2, #5
 800a294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a298:	4851      	ldr	r0, [pc, #324]	; (800a3e0 <_svfiprintf_r+0x1ec>)
 800a29a:	f7f5 ffc1 	bl	8000220 <memchr>
 800a29e:	9a04      	ldr	r2, [sp, #16]
 800a2a0:	b9d8      	cbnz	r0, 800a2da <_svfiprintf_r+0xe6>
 800a2a2:	06d0      	lsls	r0, r2, #27
 800a2a4:	bf44      	itt	mi
 800a2a6:	2320      	movmi	r3, #32
 800a2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ac:	0711      	lsls	r1, r2, #28
 800a2ae:	bf44      	itt	mi
 800a2b0:	232b      	movmi	r3, #43	; 0x2b
 800a2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a2bc:	d015      	beq.n	800a2ea <_svfiprintf_r+0xf6>
 800a2be:	9a07      	ldr	r2, [sp, #28]
 800a2c0:	4654      	mov	r4, sl
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	f04f 0c0a 	mov.w	ip, #10
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2ce:	3b30      	subs	r3, #48	; 0x30
 800a2d0:	2b09      	cmp	r3, #9
 800a2d2:	d94e      	bls.n	800a372 <_svfiprintf_r+0x17e>
 800a2d4:	b1b0      	cbz	r0, 800a304 <_svfiprintf_r+0x110>
 800a2d6:	9207      	str	r2, [sp, #28]
 800a2d8:	e014      	b.n	800a304 <_svfiprintf_r+0x110>
 800a2da:	eba0 0308 	sub.w	r3, r0, r8
 800a2de:	fa09 f303 	lsl.w	r3, r9, r3
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	9304      	str	r3, [sp, #16]
 800a2e6:	46a2      	mov	sl, r4
 800a2e8:	e7d2      	b.n	800a290 <_svfiprintf_r+0x9c>
 800a2ea:	9b03      	ldr	r3, [sp, #12]
 800a2ec:	1d19      	adds	r1, r3, #4
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	9103      	str	r1, [sp, #12]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	bfbb      	ittet	lt
 800a2f6:	425b      	neglt	r3, r3
 800a2f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2fc:	9307      	strge	r3, [sp, #28]
 800a2fe:	9307      	strlt	r3, [sp, #28]
 800a300:	bfb8      	it	lt
 800a302:	9204      	strlt	r2, [sp, #16]
 800a304:	7823      	ldrb	r3, [r4, #0]
 800a306:	2b2e      	cmp	r3, #46	; 0x2e
 800a308:	d10c      	bne.n	800a324 <_svfiprintf_r+0x130>
 800a30a:	7863      	ldrb	r3, [r4, #1]
 800a30c:	2b2a      	cmp	r3, #42	; 0x2a
 800a30e:	d135      	bne.n	800a37c <_svfiprintf_r+0x188>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	1d1a      	adds	r2, r3, #4
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	9203      	str	r2, [sp, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bfb8      	it	lt
 800a31c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a320:	3402      	adds	r4, #2
 800a322:	9305      	str	r3, [sp, #20]
 800a324:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3f0 <_svfiprintf_r+0x1fc>
 800a328:	7821      	ldrb	r1, [r4, #0]
 800a32a:	2203      	movs	r2, #3
 800a32c:	4650      	mov	r0, sl
 800a32e:	f7f5 ff77 	bl	8000220 <memchr>
 800a332:	b140      	cbz	r0, 800a346 <_svfiprintf_r+0x152>
 800a334:	2340      	movs	r3, #64	; 0x40
 800a336:	eba0 000a 	sub.w	r0, r0, sl
 800a33a:	fa03 f000 	lsl.w	r0, r3, r0
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	4303      	orrs	r3, r0
 800a342:	3401      	adds	r4, #1
 800a344:	9304      	str	r3, [sp, #16]
 800a346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a34a:	4826      	ldr	r0, [pc, #152]	; (800a3e4 <_svfiprintf_r+0x1f0>)
 800a34c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a350:	2206      	movs	r2, #6
 800a352:	f7f5 ff65 	bl	8000220 <memchr>
 800a356:	2800      	cmp	r0, #0
 800a358:	d038      	beq.n	800a3cc <_svfiprintf_r+0x1d8>
 800a35a:	4b23      	ldr	r3, [pc, #140]	; (800a3e8 <_svfiprintf_r+0x1f4>)
 800a35c:	bb1b      	cbnz	r3, 800a3a6 <_svfiprintf_r+0x1b2>
 800a35e:	9b03      	ldr	r3, [sp, #12]
 800a360:	3307      	adds	r3, #7
 800a362:	f023 0307 	bic.w	r3, r3, #7
 800a366:	3308      	adds	r3, #8
 800a368:	9303      	str	r3, [sp, #12]
 800a36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36c:	4433      	add	r3, r6
 800a36e:	9309      	str	r3, [sp, #36]	; 0x24
 800a370:	e767      	b.n	800a242 <_svfiprintf_r+0x4e>
 800a372:	fb0c 3202 	mla	r2, ip, r2, r3
 800a376:	460c      	mov	r4, r1
 800a378:	2001      	movs	r0, #1
 800a37a:	e7a5      	b.n	800a2c8 <_svfiprintf_r+0xd4>
 800a37c:	2300      	movs	r3, #0
 800a37e:	3401      	adds	r4, #1
 800a380:	9305      	str	r3, [sp, #20]
 800a382:	4619      	mov	r1, r3
 800a384:	f04f 0c0a 	mov.w	ip, #10
 800a388:	4620      	mov	r0, r4
 800a38a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a38e:	3a30      	subs	r2, #48	; 0x30
 800a390:	2a09      	cmp	r2, #9
 800a392:	d903      	bls.n	800a39c <_svfiprintf_r+0x1a8>
 800a394:	2b00      	cmp	r3, #0
 800a396:	d0c5      	beq.n	800a324 <_svfiprintf_r+0x130>
 800a398:	9105      	str	r1, [sp, #20]
 800a39a:	e7c3      	b.n	800a324 <_svfiprintf_r+0x130>
 800a39c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e7f0      	b.n	800a388 <_svfiprintf_r+0x194>
 800a3a6:	ab03      	add	r3, sp, #12
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	462a      	mov	r2, r5
 800a3ac:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <_svfiprintf_r+0x1f8>)
 800a3ae:	a904      	add	r1, sp, #16
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	f7fc fa49 	bl	8006848 <_printf_float>
 800a3b6:	1c42      	adds	r2, r0, #1
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	d1d6      	bne.n	800a36a <_svfiprintf_r+0x176>
 800a3bc:	89ab      	ldrh	r3, [r5, #12]
 800a3be:	065b      	lsls	r3, r3, #25
 800a3c0:	f53f af2c 	bmi.w	800a21c <_svfiprintf_r+0x28>
 800a3c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3c6:	b01d      	add	sp, #116	; 0x74
 800a3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3cc:	ab03      	add	r3, sp, #12
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	462a      	mov	r2, r5
 800a3d2:	4b06      	ldr	r3, [pc, #24]	; (800a3ec <_svfiprintf_r+0x1f8>)
 800a3d4:	a904      	add	r1, sp, #16
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	f7fc fcda 	bl	8006d90 <_printf_i>
 800a3dc:	e7eb      	b.n	800a3b6 <_svfiprintf_r+0x1c2>
 800a3de:	bf00      	nop
 800a3e0:	0800b424 	.word	0x0800b424
 800a3e4:	0800b42e 	.word	0x0800b42e
 800a3e8:	08006849 	.word	0x08006849
 800a3ec:	0800a13d 	.word	0x0800a13d
 800a3f0:	0800b42a 	.word	0x0800b42a
 800a3f4:	00000000 	.word	0x00000000

0800a3f8 <nan>:
 800a3f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a400 <nan+0x8>
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	00000000 	.word	0x00000000
 800a404:	7ff80000 	.word	0x7ff80000

0800a408 <_sbrk_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4d06      	ldr	r5, [pc, #24]	; (800a424 <_sbrk_r+0x1c>)
 800a40c:	2300      	movs	r3, #0
 800a40e:	4604      	mov	r4, r0
 800a410:	4608      	mov	r0, r1
 800a412:	602b      	str	r3, [r5, #0]
 800a414:	f7f7 fb1e 	bl	8001a54 <_sbrk>
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d102      	bne.n	800a422 <_sbrk_r+0x1a>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	b103      	cbz	r3, 800a422 <_sbrk_r+0x1a>
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	200004a0 	.word	0x200004a0

0800a428 <strncmp>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	b17a      	cbz	r2, 800a44c <strncmp+0x24>
 800a42c:	4603      	mov	r3, r0
 800a42e:	3901      	subs	r1, #1
 800a430:	1884      	adds	r4, r0, r2
 800a432:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a436:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a43a:	4290      	cmp	r0, r2
 800a43c:	d101      	bne.n	800a442 <strncmp+0x1a>
 800a43e:	42a3      	cmp	r3, r4
 800a440:	d101      	bne.n	800a446 <strncmp+0x1e>
 800a442:	1a80      	subs	r0, r0, r2
 800a444:	bd10      	pop	{r4, pc}
 800a446:	2800      	cmp	r0, #0
 800a448:	d1f3      	bne.n	800a432 <strncmp+0xa>
 800a44a:	e7fa      	b.n	800a442 <strncmp+0x1a>
 800a44c:	4610      	mov	r0, r2
 800a44e:	e7f9      	b.n	800a444 <strncmp+0x1c>

0800a450 <__ascii_wctomb>:
 800a450:	b149      	cbz	r1, 800a466 <__ascii_wctomb+0x16>
 800a452:	2aff      	cmp	r2, #255	; 0xff
 800a454:	bf85      	ittet	hi
 800a456:	238a      	movhi	r3, #138	; 0x8a
 800a458:	6003      	strhi	r3, [r0, #0]
 800a45a:	700a      	strbls	r2, [r1, #0]
 800a45c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a460:	bf98      	it	ls
 800a462:	2001      	movls	r0, #1
 800a464:	4770      	bx	lr
 800a466:	4608      	mov	r0, r1
 800a468:	4770      	bx	lr
	...

0800a46c <__assert_func>:
 800a46c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a46e:	4614      	mov	r4, r2
 800a470:	461a      	mov	r2, r3
 800a472:	4b09      	ldr	r3, [pc, #36]	; (800a498 <__assert_func+0x2c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4605      	mov	r5, r0
 800a478:	68d8      	ldr	r0, [r3, #12]
 800a47a:	b14c      	cbz	r4, 800a490 <__assert_func+0x24>
 800a47c:	4b07      	ldr	r3, [pc, #28]	; (800a49c <__assert_func+0x30>)
 800a47e:	9100      	str	r1, [sp, #0]
 800a480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a484:	4906      	ldr	r1, [pc, #24]	; (800a4a0 <__assert_func+0x34>)
 800a486:	462b      	mov	r3, r5
 800a488:	f000 f80e 	bl	800a4a8 <fiprintf>
 800a48c:	f000 fa8c 	bl	800a9a8 <abort>
 800a490:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <__assert_func+0x38>)
 800a492:	461c      	mov	r4, r3
 800a494:	e7f3      	b.n	800a47e <__assert_func+0x12>
 800a496:	bf00      	nop
 800a498:	20000010 	.word	0x20000010
 800a49c:	0800b435 	.word	0x0800b435
 800a4a0:	0800b442 	.word	0x0800b442
 800a4a4:	0800b470 	.word	0x0800b470

0800a4a8 <fiprintf>:
 800a4a8:	b40e      	push	{r1, r2, r3}
 800a4aa:	b503      	push	{r0, r1, lr}
 800a4ac:	4601      	mov	r1, r0
 800a4ae:	ab03      	add	r3, sp, #12
 800a4b0:	4805      	ldr	r0, [pc, #20]	; (800a4c8 <fiprintf+0x20>)
 800a4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b6:	6800      	ldr	r0, [r0, #0]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	f000 f885 	bl	800a5c8 <_vfiprintf_r>
 800a4be:	b002      	add	sp, #8
 800a4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4c4:	b003      	add	sp, #12
 800a4c6:	4770      	bx	lr
 800a4c8:	20000010 	.word	0x20000010

0800a4cc <memmove>:
 800a4cc:	4288      	cmp	r0, r1
 800a4ce:	b510      	push	{r4, lr}
 800a4d0:	eb01 0402 	add.w	r4, r1, r2
 800a4d4:	d902      	bls.n	800a4dc <memmove+0x10>
 800a4d6:	4284      	cmp	r4, r0
 800a4d8:	4623      	mov	r3, r4
 800a4da:	d807      	bhi.n	800a4ec <memmove+0x20>
 800a4dc:	1e43      	subs	r3, r0, #1
 800a4de:	42a1      	cmp	r1, r4
 800a4e0:	d008      	beq.n	800a4f4 <memmove+0x28>
 800a4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4ea:	e7f8      	b.n	800a4de <memmove+0x12>
 800a4ec:	4402      	add	r2, r0
 800a4ee:	4601      	mov	r1, r0
 800a4f0:	428a      	cmp	r2, r1
 800a4f2:	d100      	bne.n	800a4f6 <memmove+0x2a>
 800a4f4:	bd10      	pop	{r4, pc}
 800a4f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4fe:	e7f7      	b.n	800a4f0 <memmove+0x24>

0800a500 <__malloc_lock>:
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <__malloc_lock+0x8>)
 800a502:	f000 bc11 	b.w	800ad28 <__retarget_lock_acquire_recursive>
 800a506:	bf00      	nop
 800a508:	200004a4 	.word	0x200004a4

0800a50c <__malloc_unlock>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__malloc_unlock+0x8>)
 800a50e:	f000 bc0c 	b.w	800ad2a <__retarget_lock_release_recursive>
 800a512:	bf00      	nop
 800a514:	200004a4 	.word	0x200004a4

0800a518 <_realloc_r>:
 800a518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51c:	4680      	mov	r8, r0
 800a51e:	4614      	mov	r4, r2
 800a520:	460e      	mov	r6, r1
 800a522:	b921      	cbnz	r1, 800a52e <_realloc_r+0x16>
 800a524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a528:	4611      	mov	r1, r2
 800a52a:	f7ff bd93 	b.w	800a054 <_malloc_r>
 800a52e:	b92a      	cbnz	r2, 800a53c <_realloc_r+0x24>
 800a530:	f7ff fd24 	bl	8009f7c <_free_r>
 800a534:	4625      	mov	r5, r4
 800a536:	4628      	mov	r0, r5
 800a538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a53c:	f000 fc5c 	bl	800adf8 <_malloc_usable_size_r>
 800a540:	4284      	cmp	r4, r0
 800a542:	4607      	mov	r7, r0
 800a544:	d802      	bhi.n	800a54c <_realloc_r+0x34>
 800a546:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a54a:	d812      	bhi.n	800a572 <_realloc_r+0x5a>
 800a54c:	4621      	mov	r1, r4
 800a54e:	4640      	mov	r0, r8
 800a550:	f7ff fd80 	bl	800a054 <_malloc_r>
 800a554:	4605      	mov	r5, r0
 800a556:	2800      	cmp	r0, #0
 800a558:	d0ed      	beq.n	800a536 <_realloc_r+0x1e>
 800a55a:	42bc      	cmp	r4, r7
 800a55c:	4622      	mov	r2, r4
 800a55e:	4631      	mov	r1, r6
 800a560:	bf28      	it	cs
 800a562:	463a      	movcs	r2, r7
 800a564:	f7ff f824 	bl	80095b0 <memcpy>
 800a568:	4631      	mov	r1, r6
 800a56a:	4640      	mov	r0, r8
 800a56c:	f7ff fd06 	bl	8009f7c <_free_r>
 800a570:	e7e1      	b.n	800a536 <_realloc_r+0x1e>
 800a572:	4635      	mov	r5, r6
 800a574:	e7df      	b.n	800a536 <_realloc_r+0x1e>

0800a576 <__sfputc_r>:
 800a576:	6893      	ldr	r3, [r2, #8]
 800a578:	3b01      	subs	r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	b410      	push	{r4}
 800a57e:	6093      	str	r3, [r2, #8]
 800a580:	da08      	bge.n	800a594 <__sfputc_r+0x1e>
 800a582:	6994      	ldr	r4, [r2, #24]
 800a584:	42a3      	cmp	r3, r4
 800a586:	db01      	blt.n	800a58c <__sfputc_r+0x16>
 800a588:	290a      	cmp	r1, #10
 800a58a:	d103      	bne.n	800a594 <__sfputc_r+0x1e>
 800a58c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a590:	f000 b94a 	b.w	800a828 <__swbuf_r>
 800a594:	6813      	ldr	r3, [r2, #0]
 800a596:	1c58      	adds	r0, r3, #1
 800a598:	6010      	str	r0, [r2, #0]
 800a59a:	7019      	strb	r1, [r3, #0]
 800a59c:	4608      	mov	r0, r1
 800a59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <__sfputs_r>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	460f      	mov	r7, r1
 800a5aa:	4614      	mov	r4, r2
 800a5ac:	18d5      	adds	r5, r2, r3
 800a5ae:	42ac      	cmp	r4, r5
 800a5b0:	d101      	bne.n	800a5b6 <__sfputs_r+0x12>
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	e007      	b.n	800a5c6 <__sfputs_r+0x22>
 800a5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ba:	463a      	mov	r2, r7
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f7ff ffda 	bl	800a576 <__sfputc_r>
 800a5c2:	1c43      	adds	r3, r0, #1
 800a5c4:	d1f3      	bne.n	800a5ae <__sfputs_r+0xa>
 800a5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5c8 <_vfiprintf_r>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	460d      	mov	r5, r1
 800a5ce:	b09d      	sub	sp, #116	; 0x74
 800a5d0:	4614      	mov	r4, r2
 800a5d2:	4698      	mov	r8, r3
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	b118      	cbz	r0, 800a5e0 <_vfiprintf_r+0x18>
 800a5d8:	6983      	ldr	r3, [r0, #24]
 800a5da:	b90b      	cbnz	r3, 800a5e0 <_vfiprintf_r+0x18>
 800a5dc:	f000 fb06 	bl	800abec <__sinit>
 800a5e0:	4b89      	ldr	r3, [pc, #548]	; (800a808 <_vfiprintf_r+0x240>)
 800a5e2:	429d      	cmp	r5, r3
 800a5e4:	d11b      	bne.n	800a61e <_vfiprintf_r+0x56>
 800a5e6:	6875      	ldr	r5, [r6, #4]
 800a5e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ea:	07d9      	lsls	r1, r3, #31
 800a5ec:	d405      	bmi.n	800a5fa <_vfiprintf_r+0x32>
 800a5ee:	89ab      	ldrh	r3, [r5, #12]
 800a5f0:	059a      	lsls	r2, r3, #22
 800a5f2:	d402      	bmi.n	800a5fa <_vfiprintf_r+0x32>
 800a5f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f6:	f000 fb97 	bl	800ad28 <__retarget_lock_acquire_recursive>
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	071b      	lsls	r3, r3, #28
 800a5fe:	d501      	bpl.n	800a604 <_vfiprintf_r+0x3c>
 800a600:	692b      	ldr	r3, [r5, #16]
 800a602:	b9eb      	cbnz	r3, 800a640 <_vfiprintf_r+0x78>
 800a604:	4629      	mov	r1, r5
 800a606:	4630      	mov	r0, r6
 800a608:	f000 f960 	bl	800a8cc <__swsetup_r>
 800a60c:	b1c0      	cbz	r0, 800a640 <_vfiprintf_r+0x78>
 800a60e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a610:	07dc      	lsls	r4, r3, #31
 800a612:	d50e      	bpl.n	800a632 <_vfiprintf_r+0x6a>
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	b01d      	add	sp, #116	; 0x74
 800a61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61e:	4b7b      	ldr	r3, [pc, #492]	; (800a80c <_vfiprintf_r+0x244>)
 800a620:	429d      	cmp	r5, r3
 800a622:	d101      	bne.n	800a628 <_vfiprintf_r+0x60>
 800a624:	68b5      	ldr	r5, [r6, #8]
 800a626:	e7df      	b.n	800a5e8 <_vfiprintf_r+0x20>
 800a628:	4b79      	ldr	r3, [pc, #484]	; (800a810 <_vfiprintf_r+0x248>)
 800a62a:	429d      	cmp	r5, r3
 800a62c:	bf08      	it	eq
 800a62e:	68f5      	ldreq	r5, [r6, #12]
 800a630:	e7da      	b.n	800a5e8 <_vfiprintf_r+0x20>
 800a632:	89ab      	ldrh	r3, [r5, #12]
 800a634:	0598      	lsls	r0, r3, #22
 800a636:	d4ed      	bmi.n	800a614 <_vfiprintf_r+0x4c>
 800a638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a63a:	f000 fb76 	bl	800ad2a <__retarget_lock_release_recursive>
 800a63e:	e7e9      	b.n	800a614 <_vfiprintf_r+0x4c>
 800a640:	2300      	movs	r3, #0
 800a642:	9309      	str	r3, [sp, #36]	; 0x24
 800a644:	2320      	movs	r3, #32
 800a646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a64a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a64e:	2330      	movs	r3, #48	; 0x30
 800a650:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a814 <_vfiprintf_r+0x24c>
 800a654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a658:	f04f 0901 	mov.w	r9, #1
 800a65c:	4623      	mov	r3, r4
 800a65e:	469a      	mov	sl, r3
 800a660:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a664:	b10a      	cbz	r2, 800a66a <_vfiprintf_r+0xa2>
 800a666:	2a25      	cmp	r2, #37	; 0x25
 800a668:	d1f9      	bne.n	800a65e <_vfiprintf_r+0x96>
 800a66a:	ebba 0b04 	subs.w	fp, sl, r4
 800a66e:	d00b      	beq.n	800a688 <_vfiprintf_r+0xc0>
 800a670:	465b      	mov	r3, fp
 800a672:	4622      	mov	r2, r4
 800a674:	4629      	mov	r1, r5
 800a676:	4630      	mov	r0, r6
 800a678:	f7ff ff94 	bl	800a5a4 <__sfputs_r>
 800a67c:	3001      	adds	r0, #1
 800a67e:	f000 80aa 	beq.w	800a7d6 <_vfiprintf_r+0x20e>
 800a682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a684:	445a      	add	r2, fp
 800a686:	9209      	str	r2, [sp, #36]	; 0x24
 800a688:	f89a 3000 	ldrb.w	r3, [sl]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 80a2 	beq.w	800a7d6 <_vfiprintf_r+0x20e>
 800a692:	2300      	movs	r3, #0
 800a694:	f04f 32ff 	mov.w	r2, #4294967295
 800a698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a69c:	f10a 0a01 	add.w	sl, sl, #1
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	9307      	str	r3, [sp, #28]
 800a6a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6a8:	931a      	str	r3, [sp, #104]	; 0x68
 800a6aa:	4654      	mov	r4, sl
 800a6ac:	2205      	movs	r2, #5
 800a6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b2:	4858      	ldr	r0, [pc, #352]	; (800a814 <_vfiprintf_r+0x24c>)
 800a6b4:	f7f5 fdb4 	bl	8000220 <memchr>
 800a6b8:	9a04      	ldr	r2, [sp, #16]
 800a6ba:	b9d8      	cbnz	r0, 800a6f4 <_vfiprintf_r+0x12c>
 800a6bc:	06d1      	lsls	r1, r2, #27
 800a6be:	bf44      	itt	mi
 800a6c0:	2320      	movmi	r3, #32
 800a6c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6c6:	0713      	lsls	r3, r2, #28
 800a6c8:	bf44      	itt	mi
 800a6ca:	232b      	movmi	r3, #43	; 0x2b
 800a6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d6:	d015      	beq.n	800a704 <_vfiprintf_r+0x13c>
 800a6d8:	9a07      	ldr	r2, [sp, #28]
 800a6da:	4654      	mov	r4, sl
 800a6dc:	2000      	movs	r0, #0
 800a6de:	f04f 0c0a 	mov.w	ip, #10
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e8:	3b30      	subs	r3, #48	; 0x30
 800a6ea:	2b09      	cmp	r3, #9
 800a6ec:	d94e      	bls.n	800a78c <_vfiprintf_r+0x1c4>
 800a6ee:	b1b0      	cbz	r0, 800a71e <_vfiprintf_r+0x156>
 800a6f0:	9207      	str	r2, [sp, #28]
 800a6f2:	e014      	b.n	800a71e <_vfiprintf_r+0x156>
 800a6f4:	eba0 0308 	sub.w	r3, r0, r8
 800a6f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	9304      	str	r3, [sp, #16]
 800a700:	46a2      	mov	sl, r4
 800a702:	e7d2      	b.n	800a6aa <_vfiprintf_r+0xe2>
 800a704:	9b03      	ldr	r3, [sp, #12]
 800a706:	1d19      	adds	r1, r3, #4
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	9103      	str	r1, [sp, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bfbb      	ittet	lt
 800a710:	425b      	neglt	r3, r3
 800a712:	f042 0202 	orrlt.w	r2, r2, #2
 800a716:	9307      	strge	r3, [sp, #28]
 800a718:	9307      	strlt	r3, [sp, #28]
 800a71a:	bfb8      	it	lt
 800a71c:	9204      	strlt	r2, [sp, #16]
 800a71e:	7823      	ldrb	r3, [r4, #0]
 800a720:	2b2e      	cmp	r3, #46	; 0x2e
 800a722:	d10c      	bne.n	800a73e <_vfiprintf_r+0x176>
 800a724:	7863      	ldrb	r3, [r4, #1]
 800a726:	2b2a      	cmp	r3, #42	; 0x2a
 800a728:	d135      	bne.n	800a796 <_vfiprintf_r+0x1ce>
 800a72a:	9b03      	ldr	r3, [sp, #12]
 800a72c:	1d1a      	adds	r2, r3, #4
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	9203      	str	r2, [sp, #12]
 800a732:	2b00      	cmp	r3, #0
 800a734:	bfb8      	it	lt
 800a736:	f04f 33ff 	movlt.w	r3, #4294967295
 800a73a:	3402      	adds	r4, #2
 800a73c:	9305      	str	r3, [sp, #20]
 800a73e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a824 <_vfiprintf_r+0x25c>
 800a742:	7821      	ldrb	r1, [r4, #0]
 800a744:	2203      	movs	r2, #3
 800a746:	4650      	mov	r0, sl
 800a748:	f7f5 fd6a 	bl	8000220 <memchr>
 800a74c:	b140      	cbz	r0, 800a760 <_vfiprintf_r+0x198>
 800a74e:	2340      	movs	r3, #64	; 0x40
 800a750:	eba0 000a 	sub.w	r0, r0, sl
 800a754:	fa03 f000 	lsl.w	r0, r3, r0
 800a758:	9b04      	ldr	r3, [sp, #16]
 800a75a:	4303      	orrs	r3, r0
 800a75c:	3401      	adds	r4, #1
 800a75e:	9304      	str	r3, [sp, #16]
 800a760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a764:	482c      	ldr	r0, [pc, #176]	; (800a818 <_vfiprintf_r+0x250>)
 800a766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a76a:	2206      	movs	r2, #6
 800a76c:	f7f5 fd58 	bl	8000220 <memchr>
 800a770:	2800      	cmp	r0, #0
 800a772:	d03f      	beq.n	800a7f4 <_vfiprintf_r+0x22c>
 800a774:	4b29      	ldr	r3, [pc, #164]	; (800a81c <_vfiprintf_r+0x254>)
 800a776:	bb1b      	cbnz	r3, 800a7c0 <_vfiprintf_r+0x1f8>
 800a778:	9b03      	ldr	r3, [sp, #12]
 800a77a:	3307      	adds	r3, #7
 800a77c:	f023 0307 	bic.w	r3, r3, #7
 800a780:	3308      	adds	r3, #8
 800a782:	9303      	str	r3, [sp, #12]
 800a784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a786:	443b      	add	r3, r7
 800a788:	9309      	str	r3, [sp, #36]	; 0x24
 800a78a:	e767      	b.n	800a65c <_vfiprintf_r+0x94>
 800a78c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a790:	460c      	mov	r4, r1
 800a792:	2001      	movs	r0, #1
 800a794:	e7a5      	b.n	800a6e2 <_vfiprintf_r+0x11a>
 800a796:	2300      	movs	r3, #0
 800a798:	3401      	adds	r4, #1
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	4619      	mov	r1, r3
 800a79e:	f04f 0c0a 	mov.w	ip, #10
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a8:	3a30      	subs	r2, #48	; 0x30
 800a7aa:	2a09      	cmp	r2, #9
 800a7ac:	d903      	bls.n	800a7b6 <_vfiprintf_r+0x1ee>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0c5      	beq.n	800a73e <_vfiprintf_r+0x176>
 800a7b2:	9105      	str	r1, [sp, #20]
 800a7b4:	e7c3      	b.n	800a73e <_vfiprintf_r+0x176>
 800a7b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e7f0      	b.n	800a7a2 <_vfiprintf_r+0x1da>
 800a7c0:	ab03      	add	r3, sp, #12
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	462a      	mov	r2, r5
 800a7c6:	4b16      	ldr	r3, [pc, #88]	; (800a820 <_vfiprintf_r+0x258>)
 800a7c8:	a904      	add	r1, sp, #16
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f7fc f83c 	bl	8006848 <_printf_float>
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	1c78      	adds	r0, r7, #1
 800a7d4:	d1d6      	bne.n	800a784 <_vfiprintf_r+0x1bc>
 800a7d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7d8:	07d9      	lsls	r1, r3, #31
 800a7da:	d405      	bmi.n	800a7e8 <_vfiprintf_r+0x220>
 800a7dc:	89ab      	ldrh	r3, [r5, #12]
 800a7de:	059a      	lsls	r2, r3, #22
 800a7e0:	d402      	bmi.n	800a7e8 <_vfiprintf_r+0x220>
 800a7e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7e4:	f000 faa1 	bl	800ad2a <__retarget_lock_release_recursive>
 800a7e8:	89ab      	ldrh	r3, [r5, #12]
 800a7ea:	065b      	lsls	r3, r3, #25
 800a7ec:	f53f af12 	bmi.w	800a614 <_vfiprintf_r+0x4c>
 800a7f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7f2:	e711      	b.n	800a618 <_vfiprintf_r+0x50>
 800a7f4:	ab03      	add	r3, sp, #12
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <_vfiprintf_r+0x258>)
 800a7fc:	a904      	add	r1, sp, #16
 800a7fe:	4630      	mov	r0, r6
 800a800:	f7fc fac6 	bl	8006d90 <_printf_i>
 800a804:	e7e4      	b.n	800a7d0 <_vfiprintf_r+0x208>
 800a806:	bf00      	nop
 800a808:	0800b494 	.word	0x0800b494
 800a80c:	0800b4b4 	.word	0x0800b4b4
 800a810:	0800b474 	.word	0x0800b474
 800a814:	0800b424 	.word	0x0800b424
 800a818:	0800b42e 	.word	0x0800b42e
 800a81c:	08006849 	.word	0x08006849
 800a820:	0800a5a5 	.word	0x0800a5a5
 800a824:	0800b42a 	.word	0x0800b42a

0800a828 <__swbuf_r>:
 800a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82a:	460e      	mov	r6, r1
 800a82c:	4614      	mov	r4, r2
 800a82e:	4605      	mov	r5, r0
 800a830:	b118      	cbz	r0, 800a83a <__swbuf_r+0x12>
 800a832:	6983      	ldr	r3, [r0, #24]
 800a834:	b90b      	cbnz	r3, 800a83a <__swbuf_r+0x12>
 800a836:	f000 f9d9 	bl	800abec <__sinit>
 800a83a:	4b21      	ldr	r3, [pc, #132]	; (800a8c0 <__swbuf_r+0x98>)
 800a83c:	429c      	cmp	r4, r3
 800a83e:	d12b      	bne.n	800a898 <__swbuf_r+0x70>
 800a840:	686c      	ldr	r4, [r5, #4]
 800a842:	69a3      	ldr	r3, [r4, #24]
 800a844:	60a3      	str	r3, [r4, #8]
 800a846:	89a3      	ldrh	r3, [r4, #12]
 800a848:	071a      	lsls	r2, r3, #28
 800a84a:	d52f      	bpl.n	800a8ac <__swbuf_r+0x84>
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	b36b      	cbz	r3, 800a8ac <__swbuf_r+0x84>
 800a850:	6923      	ldr	r3, [r4, #16]
 800a852:	6820      	ldr	r0, [r4, #0]
 800a854:	1ac0      	subs	r0, r0, r3
 800a856:	6963      	ldr	r3, [r4, #20]
 800a858:	b2f6      	uxtb	r6, r6
 800a85a:	4283      	cmp	r3, r0
 800a85c:	4637      	mov	r7, r6
 800a85e:	dc04      	bgt.n	800a86a <__swbuf_r+0x42>
 800a860:	4621      	mov	r1, r4
 800a862:	4628      	mov	r0, r5
 800a864:	f000 f92e 	bl	800aac4 <_fflush_r>
 800a868:	bb30      	cbnz	r0, 800a8b8 <__swbuf_r+0x90>
 800a86a:	68a3      	ldr	r3, [r4, #8]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	60a3      	str	r3, [r4, #8]
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	6022      	str	r2, [r4, #0]
 800a876:	701e      	strb	r6, [r3, #0]
 800a878:	6963      	ldr	r3, [r4, #20]
 800a87a:	3001      	adds	r0, #1
 800a87c:	4283      	cmp	r3, r0
 800a87e:	d004      	beq.n	800a88a <__swbuf_r+0x62>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	07db      	lsls	r3, r3, #31
 800a884:	d506      	bpl.n	800a894 <__swbuf_r+0x6c>
 800a886:	2e0a      	cmp	r6, #10
 800a888:	d104      	bne.n	800a894 <__swbuf_r+0x6c>
 800a88a:	4621      	mov	r1, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	f000 f919 	bl	800aac4 <_fflush_r>
 800a892:	b988      	cbnz	r0, 800a8b8 <__swbuf_r+0x90>
 800a894:	4638      	mov	r0, r7
 800a896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a898:	4b0a      	ldr	r3, [pc, #40]	; (800a8c4 <__swbuf_r+0x9c>)
 800a89a:	429c      	cmp	r4, r3
 800a89c:	d101      	bne.n	800a8a2 <__swbuf_r+0x7a>
 800a89e:	68ac      	ldr	r4, [r5, #8]
 800a8a0:	e7cf      	b.n	800a842 <__swbuf_r+0x1a>
 800a8a2:	4b09      	ldr	r3, [pc, #36]	; (800a8c8 <__swbuf_r+0xa0>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	bf08      	it	eq
 800a8a8:	68ec      	ldreq	r4, [r5, #12]
 800a8aa:	e7ca      	b.n	800a842 <__swbuf_r+0x1a>
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 f80c 	bl	800a8cc <__swsetup_r>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d0cb      	beq.n	800a850 <__swbuf_r+0x28>
 800a8b8:	f04f 37ff 	mov.w	r7, #4294967295
 800a8bc:	e7ea      	b.n	800a894 <__swbuf_r+0x6c>
 800a8be:	bf00      	nop
 800a8c0:	0800b494 	.word	0x0800b494
 800a8c4:	0800b4b4 	.word	0x0800b4b4
 800a8c8:	0800b474 	.word	0x0800b474

0800a8cc <__swsetup_r>:
 800a8cc:	4b32      	ldr	r3, [pc, #200]	; (800a998 <__swsetup_r+0xcc>)
 800a8ce:	b570      	push	{r4, r5, r6, lr}
 800a8d0:	681d      	ldr	r5, [r3, #0]
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	b125      	cbz	r5, 800a8e2 <__swsetup_r+0x16>
 800a8d8:	69ab      	ldr	r3, [r5, #24]
 800a8da:	b913      	cbnz	r3, 800a8e2 <__swsetup_r+0x16>
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f000 f985 	bl	800abec <__sinit>
 800a8e2:	4b2e      	ldr	r3, [pc, #184]	; (800a99c <__swsetup_r+0xd0>)
 800a8e4:	429c      	cmp	r4, r3
 800a8e6:	d10f      	bne.n	800a908 <__swsetup_r+0x3c>
 800a8e8:	686c      	ldr	r4, [r5, #4]
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8f0:	0719      	lsls	r1, r3, #28
 800a8f2:	d42c      	bmi.n	800a94e <__swsetup_r+0x82>
 800a8f4:	06dd      	lsls	r5, r3, #27
 800a8f6:	d411      	bmi.n	800a91c <__swsetup_r+0x50>
 800a8f8:	2309      	movs	r3, #9
 800a8fa:	6033      	str	r3, [r6, #0]
 800a8fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	f04f 30ff 	mov.w	r0, #4294967295
 800a906:	e03e      	b.n	800a986 <__swsetup_r+0xba>
 800a908:	4b25      	ldr	r3, [pc, #148]	; (800a9a0 <__swsetup_r+0xd4>)
 800a90a:	429c      	cmp	r4, r3
 800a90c:	d101      	bne.n	800a912 <__swsetup_r+0x46>
 800a90e:	68ac      	ldr	r4, [r5, #8]
 800a910:	e7eb      	b.n	800a8ea <__swsetup_r+0x1e>
 800a912:	4b24      	ldr	r3, [pc, #144]	; (800a9a4 <__swsetup_r+0xd8>)
 800a914:	429c      	cmp	r4, r3
 800a916:	bf08      	it	eq
 800a918:	68ec      	ldreq	r4, [r5, #12]
 800a91a:	e7e6      	b.n	800a8ea <__swsetup_r+0x1e>
 800a91c:	0758      	lsls	r0, r3, #29
 800a91e:	d512      	bpl.n	800a946 <__swsetup_r+0x7a>
 800a920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a922:	b141      	cbz	r1, 800a936 <__swsetup_r+0x6a>
 800a924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a928:	4299      	cmp	r1, r3
 800a92a:	d002      	beq.n	800a932 <__swsetup_r+0x66>
 800a92c:	4630      	mov	r0, r6
 800a92e:	f7ff fb25 	bl	8009f7c <_free_r>
 800a932:	2300      	movs	r3, #0
 800a934:	6363      	str	r3, [r4, #52]	; 0x34
 800a936:	89a3      	ldrh	r3, [r4, #12]
 800a938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a93c:	81a3      	strh	r3, [r4, #12]
 800a93e:	2300      	movs	r3, #0
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	6923      	ldr	r3, [r4, #16]
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	f043 0308 	orr.w	r3, r3, #8
 800a94c:	81a3      	strh	r3, [r4, #12]
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	b94b      	cbnz	r3, 800a966 <__swsetup_r+0x9a>
 800a952:	89a3      	ldrh	r3, [r4, #12]
 800a954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a95c:	d003      	beq.n	800a966 <__swsetup_r+0x9a>
 800a95e:	4621      	mov	r1, r4
 800a960:	4630      	mov	r0, r6
 800a962:	f000 fa09 	bl	800ad78 <__smakebuf_r>
 800a966:	89a0      	ldrh	r0, [r4, #12]
 800a968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a96c:	f010 0301 	ands.w	r3, r0, #1
 800a970:	d00a      	beq.n	800a988 <__swsetup_r+0xbc>
 800a972:	2300      	movs	r3, #0
 800a974:	60a3      	str	r3, [r4, #8]
 800a976:	6963      	ldr	r3, [r4, #20]
 800a978:	425b      	negs	r3, r3
 800a97a:	61a3      	str	r3, [r4, #24]
 800a97c:	6923      	ldr	r3, [r4, #16]
 800a97e:	b943      	cbnz	r3, 800a992 <__swsetup_r+0xc6>
 800a980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a984:	d1ba      	bne.n	800a8fc <__swsetup_r+0x30>
 800a986:	bd70      	pop	{r4, r5, r6, pc}
 800a988:	0781      	lsls	r1, r0, #30
 800a98a:	bf58      	it	pl
 800a98c:	6963      	ldrpl	r3, [r4, #20]
 800a98e:	60a3      	str	r3, [r4, #8]
 800a990:	e7f4      	b.n	800a97c <__swsetup_r+0xb0>
 800a992:	2000      	movs	r0, #0
 800a994:	e7f7      	b.n	800a986 <__swsetup_r+0xba>
 800a996:	bf00      	nop
 800a998:	20000010 	.word	0x20000010
 800a99c:	0800b494 	.word	0x0800b494
 800a9a0:	0800b4b4 	.word	0x0800b4b4
 800a9a4:	0800b474 	.word	0x0800b474

0800a9a8 <abort>:
 800a9a8:	b508      	push	{r3, lr}
 800a9aa:	2006      	movs	r0, #6
 800a9ac:	f000 fa54 	bl	800ae58 <raise>
 800a9b0:	2001      	movs	r0, #1
 800a9b2:	f7f6 ffd7 	bl	8001964 <_exit>
	...

0800a9b8 <__sflush_r>:
 800a9b8:	898a      	ldrh	r2, [r1, #12]
 800a9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9be:	4605      	mov	r5, r0
 800a9c0:	0710      	lsls	r0, r2, #28
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	d458      	bmi.n	800aa78 <__sflush_r+0xc0>
 800a9c6:	684b      	ldr	r3, [r1, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dc05      	bgt.n	800a9d8 <__sflush_r+0x20>
 800a9cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	dc02      	bgt.n	800a9d8 <__sflush_r+0x20>
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9da:	2e00      	cmp	r6, #0
 800a9dc:	d0f9      	beq.n	800a9d2 <__sflush_r+0x1a>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9e4:	682f      	ldr	r7, [r5, #0]
 800a9e6:	602b      	str	r3, [r5, #0]
 800a9e8:	d032      	beq.n	800aa50 <__sflush_r+0x98>
 800a9ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	075a      	lsls	r2, r3, #29
 800a9f0:	d505      	bpl.n	800a9fe <__sflush_r+0x46>
 800a9f2:	6863      	ldr	r3, [r4, #4]
 800a9f4:	1ac0      	subs	r0, r0, r3
 800a9f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9f8:	b10b      	cbz	r3, 800a9fe <__sflush_r+0x46>
 800a9fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9fc:	1ac0      	subs	r0, r0, r3
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4602      	mov	r2, r0
 800aa02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa04:	6a21      	ldr	r1, [r4, #32]
 800aa06:	4628      	mov	r0, r5
 800aa08:	47b0      	blx	r6
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	d106      	bne.n	800aa1e <__sflush_r+0x66>
 800aa10:	6829      	ldr	r1, [r5, #0]
 800aa12:	291d      	cmp	r1, #29
 800aa14:	d82c      	bhi.n	800aa70 <__sflush_r+0xb8>
 800aa16:	4a2a      	ldr	r2, [pc, #168]	; (800aac0 <__sflush_r+0x108>)
 800aa18:	40ca      	lsrs	r2, r1
 800aa1a:	07d6      	lsls	r6, r2, #31
 800aa1c:	d528      	bpl.n	800aa70 <__sflush_r+0xb8>
 800aa1e:	2200      	movs	r2, #0
 800aa20:	6062      	str	r2, [r4, #4]
 800aa22:	04d9      	lsls	r1, r3, #19
 800aa24:	6922      	ldr	r2, [r4, #16]
 800aa26:	6022      	str	r2, [r4, #0]
 800aa28:	d504      	bpl.n	800aa34 <__sflush_r+0x7c>
 800aa2a:	1c42      	adds	r2, r0, #1
 800aa2c:	d101      	bne.n	800aa32 <__sflush_r+0x7a>
 800aa2e:	682b      	ldr	r3, [r5, #0]
 800aa30:	b903      	cbnz	r3, 800aa34 <__sflush_r+0x7c>
 800aa32:	6560      	str	r0, [r4, #84]	; 0x54
 800aa34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa36:	602f      	str	r7, [r5, #0]
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	d0ca      	beq.n	800a9d2 <__sflush_r+0x1a>
 800aa3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa40:	4299      	cmp	r1, r3
 800aa42:	d002      	beq.n	800aa4a <__sflush_r+0x92>
 800aa44:	4628      	mov	r0, r5
 800aa46:	f7ff fa99 	bl	8009f7c <_free_r>
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	6360      	str	r0, [r4, #52]	; 0x34
 800aa4e:	e7c1      	b.n	800a9d4 <__sflush_r+0x1c>
 800aa50:	6a21      	ldr	r1, [r4, #32]
 800aa52:	2301      	movs	r3, #1
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b0      	blx	r6
 800aa58:	1c41      	adds	r1, r0, #1
 800aa5a:	d1c7      	bne.n	800a9ec <__sflush_r+0x34>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0c4      	beq.n	800a9ec <__sflush_r+0x34>
 800aa62:	2b1d      	cmp	r3, #29
 800aa64:	d001      	beq.n	800aa6a <__sflush_r+0xb2>
 800aa66:	2b16      	cmp	r3, #22
 800aa68:	d101      	bne.n	800aa6e <__sflush_r+0xb6>
 800aa6a:	602f      	str	r7, [r5, #0]
 800aa6c:	e7b1      	b.n	800a9d2 <__sflush_r+0x1a>
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa74:	81a3      	strh	r3, [r4, #12]
 800aa76:	e7ad      	b.n	800a9d4 <__sflush_r+0x1c>
 800aa78:	690f      	ldr	r7, [r1, #16]
 800aa7a:	2f00      	cmp	r7, #0
 800aa7c:	d0a9      	beq.n	800a9d2 <__sflush_r+0x1a>
 800aa7e:	0793      	lsls	r3, r2, #30
 800aa80:	680e      	ldr	r6, [r1, #0]
 800aa82:	bf08      	it	eq
 800aa84:	694b      	ldreq	r3, [r1, #20]
 800aa86:	600f      	str	r7, [r1, #0]
 800aa88:	bf18      	it	ne
 800aa8a:	2300      	movne	r3, #0
 800aa8c:	eba6 0807 	sub.w	r8, r6, r7
 800aa90:	608b      	str	r3, [r1, #8]
 800aa92:	f1b8 0f00 	cmp.w	r8, #0
 800aa96:	dd9c      	ble.n	800a9d2 <__sflush_r+0x1a>
 800aa98:	6a21      	ldr	r1, [r4, #32]
 800aa9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa9c:	4643      	mov	r3, r8
 800aa9e:	463a      	mov	r2, r7
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	47b0      	blx	r6
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	dc06      	bgt.n	800aab6 <__sflush_r+0xfe>
 800aaa8:	89a3      	ldrh	r3, [r4, #12]
 800aaaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaae:	81a3      	strh	r3, [r4, #12]
 800aab0:	f04f 30ff 	mov.w	r0, #4294967295
 800aab4:	e78e      	b.n	800a9d4 <__sflush_r+0x1c>
 800aab6:	4407      	add	r7, r0
 800aab8:	eba8 0800 	sub.w	r8, r8, r0
 800aabc:	e7e9      	b.n	800aa92 <__sflush_r+0xda>
 800aabe:	bf00      	nop
 800aac0:	20400001 	.word	0x20400001

0800aac4 <_fflush_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	690b      	ldr	r3, [r1, #16]
 800aac8:	4605      	mov	r5, r0
 800aaca:	460c      	mov	r4, r1
 800aacc:	b913      	cbnz	r3, 800aad4 <_fflush_r+0x10>
 800aace:	2500      	movs	r5, #0
 800aad0:	4628      	mov	r0, r5
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	b118      	cbz	r0, 800aade <_fflush_r+0x1a>
 800aad6:	6983      	ldr	r3, [r0, #24]
 800aad8:	b90b      	cbnz	r3, 800aade <_fflush_r+0x1a>
 800aada:	f000 f887 	bl	800abec <__sinit>
 800aade:	4b14      	ldr	r3, [pc, #80]	; (800ab30 <_fflush_r+0x6c>)
 800aae0:	429c      	cmp	r4, r3
 800aae2:	d11b      	bne.n	800ab1c <_fflush_r+0x58>
 800aae4:	686c      	ldr	r4, [r5, #4]
 800aae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d0ef      	beq.n	800aace <_fflush_r+0xa>
 800aaee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aaf0:	07d0      	lsls	r0, r2, #31
 800aaf2:	d404      	bmi.n	800aafe <_fflush_r+0x3a>
 800aaf4:	0599      	lsls	r1, r3, #22
 800aaf6:	d402      	bmi.n	800aafe <_fflush_r+0x3a>
 800aaf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aafa:	f000 f915 	bl	800ad28 <__retarget_lock_acquire_recursive>
 800aafe:	4628      	mov	r0, r5
 800ab00:	4621      	mov	r1, r4
 800ab02:	f7ff ff59 	bl	800a9b8 <__sflush_r>
 800ab06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab08:	07da      	lsls	r2, r3, #31
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	d4e0      	bmi.n	800aad0 <_fflush_r+0xc>
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	059b      	lsls	r3, r3, #22
 800ab12:	d4dd      	bmi.n	800aad0 <_fflush_r+0xc>
 800ab14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab16:	f000 f908 	bl	800ad2a <__retarget_lock_release_recursive>
 800ab1a:	e7d9      	b.n	800aad0 <_fflush_r+0xc>
 800ab1c:	4b05      	ldr	r3, [pc, #20]	; (800ab34 <_fflush_r+0x70>)
 800ab1e:	429c      	cmp	r4, r3
 800ab20:	d101      	bne.n	800ab26 <_fflush_r+0x62>
 800ab22:	68ac      	ldr	r4, [r5, #8]
 800ab24:	e7df      	b.n	800aae6 <_fflush_r+0x22>
 800ab26:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <_fflush_r+0x74>)
 800ab28:	429c      	cmp	r4, r3
 800ab2a:	bf08      	it	eq
 800ab2c:	68ec      	ldreq	r4, [r5, #12]
 800ab2e:	e7da      	b.n	800aae6 <_fflush_r+0x22>
 800ab30:	0800b494 	.word	0x0800b494
 800ab34:	0800b4b4 	.word	0x0800b4b4
 800ab38:	0800b474 	.word	0x0800b474

0800ab3c <std>:
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	b510      	push	{r4, lr}
 800ab40:	4604      	mov	r4, r0
 800ab42:	e9c0 3300 	strd	r3, r3, [r0]
 800ab46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab4a:	6083      	str	r3, [r0, #8]
 800ab4c:	8181      	strh	r1, [r0, #12]
 800ab4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ab50:	81c2      	strh	r2, [r0, #14]
 800ab52:	6183      	str	r3, [r0, #24]
 800ab54:	4619      	mov	r1, r3
 800ab56:	2208      	movs	r2, #8
 800ab58:	305c      	adds	r0, #92	; 0x5c
 800ab5a:	f7fb fdcd 	bl	80066f8 <memset>
 800ab5e:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <std+0x38>)
 800ab60:	6263      	str	r3, [r4, #36]	; 0x24
 800ab62:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <std+0x3c>)
 800ab64:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab66:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <std+0x40>)
 800ab68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab6a:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <std+0x44>)
 800ab6c:	6224      	str	r4, [r4, #32]
 800ab6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ab70:	bd10      	pop	{r4, pc}
 800ab72:	bf00      	nop
 800ab74:	0800ae91 	.word	0x0800ae91
 800ab78:	0800aeb3 	.word	0x0800aeb3
 800ab7c:	0800aeeb 	.word	0x0800aeeb
 800ab80:	0800af0f 	.word	0x0800af0f

0800ab84 <_cleanup_r>:
 800ab84:	4901      	ldr	r1, [pc, #4]	; (800ab8c <_cleanup_r+0x8>)
 800ab86:	f000 b8af 	b.w	800ace8 <_fwalk_reent>
 800ab8a:	bf00      	nop
 800ab8c:	0800aac5 	.word	0x0800aac5

0800ab90 <__sfmoreglue>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	2268      	movs	r2, #104	; 0x68
 800ab94:	1e4d      	subs	r5, r1, #1
 800ab96:	4355      	muls	r5, r2
 800ab98:	460e      	mov	r6, r1
 800ab9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab9e:	f7ff fa59 	bl	800a054 <_malloc_r>
 800aba2:	4604      	mov	r4, r0
 800aba4:	b140      	cbz	r0, 800abb8 <__sfmoreglue+0x28>
 800aba6:	2100      	movs	r1, #0
 800aba8:	e9c0 1600 	strd	r1, r6, [r0]
 800abac:	300c      	adds	r0, #12
 800abae:	60a0      	str	r0, [r4, #8]
 800abb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abb4:	f7fb fda0 	bl	80066f8 <memset>
 800abb8:	4620      	mov	r0, r4
 800abba:	bd70      	pop	{r4, r5, r6, pc}

0800abbc <__sfp_lock_acquire>:
 800abbc:	4801      	ldr	r0, [pc, #4]	; (800abc4 <__sfp_lock_acquire+0x8>)
 800abbe:	f000 b8b3 	b.w	800ad28 <__retarget_lock_acquire_recursive>
 800abc2:	bf00      	nop
 800abc4:	200004a5 	.word	0x200004a5

0800abc8 <__sfp_lock_release>:
 800abc8:	4801      	ldr	r0, [pc, #4]	; (800abd0 <__sfp_lock_release+0x8>)
 800abca:	f000 b8ae 	b.w	800ad2a <__retarget_lock_release_recursive>
 800abce:	bf00      	nop
 800abd0:	200004a5 	.word	0x200004a5

0800abd4 <__sinit_lock_acquire>:
 800abd4:	4801      	ldr	r0, [pc, #4]	; (800abdc <__sinit_lock_acquire+0x8>)
 800abd6:	f000 b8a7 	b.w	800ad28 <__retarget_lock_acquire_recursive>
 800abda:	bf00      	nop
 800abdc:	200004a6 	.word	0x200004a6

0800abe0 <__sinit_lock_release>:
 800abe0:	4801      	ldr	r0, [pc, #4]	; (800abe8 <__sinit_lock_release+0x8>)
 800abe2:	f000 b8a2 	b.w	800ad2a <__retarget_lock_release_recursive>
 800abe6:	bf00      	nop
 800abe8:	200004a6 	.word	0x200004a6

0800abec <__sinit>:
 800abec:	b510      	push	{r4, lr}
 800abee:	4604      	mov	r4, r0
 800abf0:	f7ff fff0 	bl	800abd4 <__sinit_lock_acquire>
 800abf4:	69a3      	ldr	r3, [r4, #24]
 800abf6:	b11b      	cbz	r3, 800ac00 <__sinit+0x14>
 800abf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abfc:	f7ff bff0 	b.w	800abe0 <__sinit_lock_release>
 800ac00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac04:	6523      	str	r3, [r4, #80]	; 0x50
 800ac06:	4b13      	ldr	r3, [pc, #76]	; (800ac54 <__sinit+0x68>)
 800ac08:	4a13      	ldr	r2, [pc, #76]	; (800ac58 <__sinit+0x6c>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac0e:	42a3      	cmp	r3, r4
 800ac10:	bf04      	itt	eq
 800ac12:	2301      	moveq	r3, #1
 800ac14:	61a3      	streq	r3, [r4, #24]
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 f820 	bl	800ac5c <__sfp>
 800ac1c:	6060      	str	r0, [r4, #4]
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 f81c 	bl	800ac5c <__sfp>
 800ac24:	60a0      	str	r0, [r4, #8]
 800ac26:	4620      	mov	r0, r4
 800ac28:	f000 f818 	bl	800ac5c <__sfp>
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	60e0      	str	r0, [r4, #12]
 800ac30:	2104      	movs	r1, #4
 800ac32:	6860      	ldr	r0, [r4, #4]
 800ac34:	f7ff ff82 	bl	800ab3c <std>
 800ac38:	68a0      	ldr	r0, [r4, #8]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	2109      	movs	r1, #9
 800ac3e:	f7ff ff7d 	bl	800ab3c <std>
 800ac42:	68e0      	ldr	r0, [r4, #12]
 800ac44:	2202      	movs	r2, #2
 800ac46:	2112      	movs	r1, #18
 800ac48:	f7ff ff78 	bl	800ab3c <std>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	61a3      	str	r3, [r4, #24]
 800ac50:	e7d2      	b.n	800abf8 <__sinit+0xc>
 800ac52:	bf00      	nop
 800ac54:	0800b030 	.word	0x0800b030
 800ac58:	0800ab85 	.word	0x0800ab85

0800ac5c <__sfp>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	4607      	mov	r7, r0
 800ac60:	f7ff ffac 	bl	800abbc <__sfp_lock_acquire>
 800ac64:	4b1e      	ldr	r3, [pc, #120]	; (800ace0 <__sfp+0x84>)
 800ac66:	681e      	ldr	r6, [r3, #0]
 800ac68:	69b3      	ldr	r3, [r6, #24]
 800ac6a:	b913      	cbnz	r3, 800ac72 <__sfp+0x16>
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7ff ffbd 	bl	800abec <__sinit>
 800ac72:	3648      	adds	r6, #72	; 0x48
 800ac74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	d503      	bpl.n	800ac84 <__sfp+0x28>
 800ac7c:	6833      	ldr	r3, [r6, #0]
 800ac7e:	b30b      	cbz	r3, 800acc4 <__sfp+0x68>
 800ac80:	6836      	ldr	r6, [r6, #0]
 800ac82:	e7f7      	b.n	800ac74 <__sfp+0x18>
 800ac84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac88:	b9d5      	cbnz	r5, 800acc0 <__sfp+0x64>
 800ac8a:	4b16      	ldr	r3, [pc, #88]	; (800ace4 <__sfp+0x88>)
 800ac8c:	60e3      	str	r3, [r4, #12]
 800ac8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac92:	6665      	str	r5, [r4, #100]	; 0x64
 800ac94:	f000 f847 	bl	800ad26 <__retarget_lock_init_recursive>
 800ac98:	f7ff ff96 	bl	800abc8 <__sfp_lock_release>
 800ac9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aca4:	6025      	str	r5, [r4, #0]
 800aca6:	61a5      	str	r5, [r4, #24]
 800aca8:	2208      	movs	r2, #8
 800acaa:	4629      	mov	r1, r5
 800acac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acb0:	f7fb fd22 	bl	80066f8 <memset>
 800acb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acbc:	4620      	mov	r0, r4
 800acbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acc0:	3468      	adds	r4, #104	; 0x68
 800acc2:	e7d9      	b.n	800ac78 <__sfp+0x1c>
 800acc4:	2104      	movs	r1, #4
 800acc6:	4638      	mov	r0, r7
 800acc8:	f7ff ff62 	bl	800ab90 <__sfmoreglue>
 800accc:	4604      	mov	r4, r0
 800acce:	6030      	str	r0, [r6, #0]
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d1d5      	bne.n	800ac80 <__sfp+0x24>
 800acd4:	f7ff ff78 	bl	800abc8 <__sfp_lock_release>
 800acd8:	230c      	movs	r3, #12
 800acda:	603b      	str	r3, [r7, #0]
 800acdc:	e7ee      	b.n	800acbc <__sfp+0x60>
 800acde:	bf00      	nop
 800ace0:	0800b030 	.word	0x0800b030
 800ace4:	ffff0001 	.word	0xffff0001

0800ace8 <_fwalk_reent>:
 800ace8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acec:	4606      	mov	r6, r0
 800acee:	4688      	mov	r8, r1
 800acf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acf4:	2700      	movs	r7, #0
 800acf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acfa:	f1b9 0901 	subs.w	r9, r9, #1
 800acfe:	d505      	bpl.n	800ad0c <_fwalk_reent+0x24>
 800ad00:	6824      	ldr	r4, [r4, #0]
 800ad02:	2c00      	cmp	r4, #0
 800ad04:	d1f7      	bne.n	800acf6 <_fwalk_reent+0xe>
 800ad06:	4638      	mov	r0, r7
 800ad08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad0c:	89ab      	ldrh	r3, [r5, #12]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d907      	bls.n	800ad22 <_fwalk_reent+0x3a>
 800ad12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad16:	3301      	adds	r3, #1
 800ad18:	d003      	beq.n	800ad22 <_fwalk_reent+0x3a>
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	47c0      	blx	r8
 800ad20:	4307      	orrs	r7, r0
 800ad22:	3568      	adds	r5, #104	; 0x68
 800ad24:	e7e9      	b.n	800acfa <_fwalk_reent+0x12>

0800ad26 <__retarget_lock_init_recursive>:
 800ad26:	4770      	bx	lr

0800ad28 <__retarget_lock_acquire_recursive>:
 800ad28:	4770      	bx	lr

0800ad2a <__retarget_lock_release_recursive>:
 800ad2a:	4770      	bx	lr

0800ad2c <__swhatbuf_r>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	460e      	mov	r6, r1
 800ad30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad34:	2900      	cmp	r1, #0
 800ad36:	b096      	sub	sp, #88	; 0x58
 800ad38:	4614      	mov	r4, r2
 800ad3a:	461d      	mov	r5, r3
 800ad3c:	da08      	bge.n	800ad50 <__swhatbuf_r+0x24>
 800ad3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	602a      	str	r2, [r5, #0]
 800ad46:	061a      	lsls	r2, r3, #24
 800ad48:	d410      	bmi.n	800ad6c <__swhatbuf_r+0x40>
 800ad4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad4e:	e00e      	b.n	800ad6e <__swhatbuf_r+0x42>
 800ad50:	466a      	mov	r2, sp
 800ad52:	f000 f903 	bl	800af5c <_fstat_r>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	dbf1      	blt.n	800ad3e <__swhatbuf_r+0x12>
 800ad5a:	9a01      	ldr	r2, [sp, #4]
 800ad5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad64:	425a      	negs	r2, r3
 800ad66:	415a      	adcs	r2, r3
 800ad68:	602a      	str	r2, [r5, #0]
 800ad6a:	e7ee      	b.n	800ad4a <__swhatbuf_r+0x1e>
 800ad6c:	2340      	movs	r3, #64	; 0x40
 800ad6e:	2000      	movs	r0, #0
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	b016      	add	sp, #88	; 0x58
 800ad74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad78 <__smakebuf_r>:
 800ad78:	898b      	ldrh	r3, [r1, #12]
 800ad7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad7c:	079d      	lsls	r5, r3, #30
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460c      	mov	r4, r1
 800ad82:	d507      	bpl.n	800ad94 <__smakebuf_r+0x1c>
 800ad84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	6163      	str	r3, [r4, #20]
 800ad90:	b002      	add	sp, #8
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	ab01      	add	r3, sp, #4
 800ad96:	466a      	mov	r2, sp
 800ad98:	f7ff ffc8 	bl	800ad2c <__swhatbuf_r>
 800ad9c:	9900      	ldr	r1, [sp, #0]
 800ad9e:	4605      	mov	r5, r0
 800ada0:	4630      	mov	r0, r6
 800ada2:	f7ff f957 	bl	800a054 <_malloc_r>
 800ada6:	b948      	cbnz	r0, 800adbc <__smakebuf_r+0x44>
 800ada8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adac:	059a      	lsls	r2, r3, #22
 800adae:	d4ef      	bmi.n	800ad90 <__smakebuf_r+0x18>
 800adb0:	f023 0303 	bic.w	r3, r3, #3
 800adb4:	f043 0302 	orr.w	r3, r3, #2
 800adb8:	81a3      	strh	r3, [r4, #12]
 800adba:	e7e3      	b.n	800ad84 <__smakebuf_r+0xc>
 800adbc:	4b0d      	ldr	r3, [pc, #52]	; (800adf4 <__smakebuf_r+0x7c>)
 800adbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	6020      	str	r0, [r4, #0]
 800adc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc8:	81a3      	strh	r3, [r4, #12]
 800adca:	9b00      	ldr	r3, [sp, #0]
 800adcc:	6163      	str	r3, [r4, #20]
 800adce:	9b01      	ldr	r3, [sp, #4]
 800add0:	6120      	str	r0, [r4, #16]
 800add2:	b15b      	cbz	r3, 800adec <__smakebuf_r+0x74>
 800add4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800add8:	4630      	mov	r0, r6
 800adda:	f000 f8d1 	bl	800af80 <_isatty_r>
 800adde:	b128      	cbz	r0, 800adec <__smakebuf_r+0x74>
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f023 0303 	bic.w	r3, r3, #3
 800ade6:	f043 0301 	orr.w	r3, r3, #1
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	89a0      	ldrh	r0, [r4, #12]
 800adee:	4305      	orrs	r5, r0
 800adf0:	81a5      	strh	r5, [r4, #12]
 800adf2:	e7cd      	b.n	800ad90 <__smakebuf_r+0x18>
 800adf4:	0800ab85 	.word	0x0800ab85

0800adf8 <_malloc_usable_size_r>:
 800adf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfc:	1f18      	subs	r0, r3, #4
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bfbc      	itt	lt
 800ae02:	580b      	ldrlt	r3, [r1, r0]
 800ae04:	18c0      	addlt	r0, r0, r3
 800ae06:	4770      	bx	lr

0800ae08 <_raise_r>:
 800ae08:	291f      	cmp	r1, #31
 800ae0a:	b538      	push	{r3, r4, r5, lr}
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	460d      	mov	r5, r1
 800ae10:	d904      	bls.n	800ae1c <_raise_r+0x14>
 800ae12:	2316      	movs	r3, #22
 800ae14:	6003      	str	r3, [r0, #0]
 800ae16:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae1e:	b112      	cbz	r2, 800ae26 <_raise_r+0x1e>
 800ae20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae24:	b94b      	cbnz	r3, 800ae3a <_raise_r+0x32>
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 f830 	bl	800ae8c <_getpid_r>
 800ae2c:	462a      	mov	r2, r5
 800ae2e:	4601      	mov	r1, r0
 800ae30:	4620      	mov	r0, r4
 800ae32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae36:	f000 b817 	b.w	800ae68 <_kill_r>
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d00a      	beq.n	800ae54 <_raise_r+0x4c>
 800ae3e:	1c59      	adds	r1, r3, #1
 800ae40:	d103      	bne.n	800ae4a <_raise_r+0x42>
 800ae42:	2316      	movs	r3, #22
 800ae44:	6003      	str	r3, [r0, #0]
 800ae46:	2001      	movs	r0, #1
 800ae48:	e7e7      	b.n	800ae1a <_raise_r+0x12>
 800ae4a:	2400      	movs	r4, #0
 800ae4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae50:	4628      	mov	r0, r5
 800ae52:	4798      	blx	r3
 800ae54:	2000      	movs	r0, #0
 800ae56:	e7e0      	b.n	800ae1a <_raise_r+0x12>

0800ae58 <raise>:
 800ae58:	4b02      	ldr	r3, [pc, #8]	; (800ae64 <raise+0xc>)
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	6818      	ldr	r0, [r3, #0]
 800ae5e:	f7ff bfd3 	b.w	800ae08 <_raise_r>
 800ae62:	bf00      	nop
 800ae64:	20000010 	.word	0x20000010

0800ae68 <_kill_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4d07      	ldr	r5, [pc, #28]	; (800ae88 <_kill_r+0x20>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	4611      	mov	r1, r2
 800ae74:	602b      	str	r3, [r5, #0]
 800ae76:	f7f6 fd65 	bl	8001944 <_kill>
 800ae7a:	1c43      	adds	r3, r0, #1
 800ae7c:	d102      	bne.n	800ae84 <_kill_r+0x1c>
 800ae7e:	682b      	ldr	r3, [r5, #0]
 800ae80:	b103      	cbz	r3, 800ae84 <_kill_r+0x1c>
 800ae82:	6023      	str	r3, [r4, #0]
 800ae84:	bd38      	pop	{r3, r4, r5, pc}
 800ae86:	bf00      	nop
 800ae88:	200004a0 	.word	0x200004a0

0800ae8c <_getpid_r>:
 800ae8c:	f7f6 bd52 	b.w	8001934 <_getpid>

0800ae90 <__sread>:
 800ae90:	b510      	push	{r4, lr}
 800ae92:	460c      	mov	r4, r1
 800ae94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae98:	f000 f894 	bl	800afc4 <_read_r>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	bfab      	itete	ge
 800aea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aea2:	89a3      	ldrhlt	r3, [r4, #12]
 800aea4:	181b      	addge	r3, r3, r0
 800aea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aeaa:	bfac      	ite	ge
 800aeac:	6563      	strge	r3, [r4, #84]	; 0x54
 800aeae:	81a3      	strhlt	r3, [r4, #12]
 800aeb0:	bd10      	pop	{r4, pc}

0800aeb2 <__swrite>:
 800aeb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb6:	461f      	mov	r7, r3
 800aeb8:	898b      	ldrh	r3, [r1, #12]
 800aeba:	05db      	lsls	r3, r3, #23
 800aebc:	4605      	mov	r5, r0
 800aebe:	460c      	mov	r4, r1
 800aec0:	4616      	mov	r6, r2
 800aec2:	d505      	bpl.n	800aed0 <__swrite+0x1e>
 800aec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec8:	2302      	movs	r3, #2
 800aeca:	2200      	movs	r2, #0
 800aecc:	f000 f868 	bl	800afa0 <_lseek_r>
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	4632      	mov	r2, r6
 800aede:	463b      	mov	r3, r7
 800aee0:	4628      	mov	r0, r5
 800aee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee6:	f000 b817 	b.w	800af18 <_write_r>

0800aeea <__sseek>:
 800aeea:	b510      	push	{r4, lr}
 800aeec:	460c      	mov	r4, r1
 800aeee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef2:	f000 f855 	bl	800afa0 <_lseek_r>
 800aef6:	1c43      	adds	r3, r0, #1
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	bf15      	itete	ne
 800aefc:	6560      	strne	r0, [r4, #84]	; 0x54
 800aefe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af06:	81a3      	strheq	r3, [r4, #12]
 800af08:	bf18      	it	ne
 800af0a:	81a3      	strhne	r3, [r4, #12]
 800af0c:	bd10      	pop	{r4, pc}

0800af0e <__sclose>:
 800af0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af12:	f000 b813 	b.w	800af3c <_close_r>
	...

0800af18 <_write_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d07      	ldr	r5, [pc, #28]	; (800af38 <_write_r+0x20>)
 800af1c:	4604      	mov	r4, r0
 800af1e:	4608      	mov	r0, r1
 800af20:	4611      	mov	r1, r2
 800af22:	2200      	movs	r2, #0
 800af24:	602a      	str	r2, [r5, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	f7f6 fd43 	bl	80019b2 <_write>
 800af2c:	1c43      	adds	r3, r0, #1
 800af2e:	d102      	bne.n	800af36 <_write_r+0x1e>
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	b103      	cbz	r3, 800af36 <_write_r+0x1e>
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	200004a0 	.word	0x200004a0

0800af3c <_close_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d06      	ldr	r5, [pc, #24]	; (800af58 <_close_r+0x1c>)
 800af40:	2300      	movs	r3, #0
 800af42:	4604      	mov	r4, r0
 800af44:	4608      	mov	r0, r1
 800af46:	602b      	str	r3, [r5, #0]
 800af48:	f7f6 fd4f 	bl	80019ea <_close>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_close_r+0x1a>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_close_r+0x1a>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	200004a0 	.word	0x200004a0

0800af5c <_fstat_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	4d07      	ldr	r5, [pc, #28]	; (800af7c <_fstat_r+0x20>)
 800af60:	2300      	movs	r3, #0
 800af62:	4604      	mov	r4, r0
 800af64:	4608      	mov	r0, r1
 800af66:	4611      	mov	r1, r2
 800af68:	602b      	str	r3, [r5, #0]
 800af6a:	f7f6 fd4a 	bl	8001a02 <_fstat>
 800af6e:	1c43      	adds	r3, r0, #1
 800af70:	d102      	bne.n	800af78 <_fstat_r+0x1c>
 800af72:	682b      	ldr	r3, [r5, #0]
 800af74:	b103      	cbz	r3, 800af78 <_fstat_r+0x1c>
 800af76:	6023      	str	r3, [r4, #0]
 800af78:	bd38      	pop	{r3, r4, r5, pc}
 800af7a:	bf00      	nop
 800af7c:	200004a0 	.word	0x200004a0

0800af80 <_isatty_r>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	4d06      	ldr	r5, [pc, #24]	; (800af9c <_isatty_r+0x1c>)
 800af84:	2300      	movs	r3, #0
 800af86:	4604      	mov	r4, r0
 800af88:	4608      	mov	r0, r1
 800af8a:	602b      	str	r3, [r5, #0]
 800af8c:	f7f6 fd49 	bl	8001a22 <_isatty>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	d102      	bne.n	800af9a <_isatty_r+0x1a>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	b103      	cbz	r3, 800af9a <_isatty_r+0x1a>
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	200004a0 	.word	0x200004a0

0800afa0 <_lseek_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d07      	ldr	r5, [pc, #28]	; (800afc0 <_lseek_r+0x20>)
 800afa4:	4604      	mov	r4, r0
 800afa6:	4608      	mov	r0, r1
 800afa8:	4611      	mov	r1, r2
 800afaa:	2200      	movs	r2, #0
 800afac:	602a      	str	r2, [r5, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	f7f6 fd42 	bl	8001a38 <_lseek>
 800afb4:	1c43      	adds	r3, r0, #1
 800afb6:	d102      	bne.n	800afbe <_lseek_r+0x1e>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	b103      	cbz	r3, 800afbe <_lseek_r+0x1e>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	bd38      	pop	{r3, r4, r5, pc}
 800afc0:	200004a0 	.word	0x200004a0

0800afc4 <_read_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	4d07      	ldr	r5, [pc, #28]	; (800afe4 <_read_r+0x20>)
 800afc8:	4604      	mov	r4, r0
 800afca:	4608      	mov	r0, r1
 800afcc:	4611      	mov	r1, r2
 800afce:	2200      	movs	r2, #0
 800afd0:	602a      	str	r2, [r5, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	f7f6 fcd0 	bl	8001978 <_read>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d102      	bne.n	800afe2 <_read_r+0x1e>
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	b103      	cbz	r3, 800afe2 <_read_r+0x1e>
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	200004a0 	.word	0x200004a0

0800afe8 <_init>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	bf00      	nop
 800afec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afee:	bc08      	pop	{r3}
 800aff0:	469e      	mov	lr, r3
 800aff2:	4770      	bx	lr

0800aff4 <_fini>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	bf00      	nop
 800aff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affa:	bc08      	pop	{r3}
 800affc:	469e      	mov	lr, r3
 800affe:	4770      	bx	lr
