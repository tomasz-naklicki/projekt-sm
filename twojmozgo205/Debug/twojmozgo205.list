
twojmozgo205.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b60c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800b7e0  0800b7e0  0001b7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcf4  0800bcf4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcf4  0800bcf4  0001bcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcfc  0800bcfc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcfc  0800bcfc  0001bcfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd00  0800bd00  0001bd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bd04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001e0  0800bee4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800bee4  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012642  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276f  00000000  00000000  00032852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00034fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00035eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279ca  00000000  00000000  00036c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013729  00000000  00000000  0005e65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1f59  00000000  00000000  00071d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163cdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d0  00000000  00000000  00163d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b7c4 	.word	0x0800b7c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b7c4 	.word	0x0800b7c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <Motor_INIT>:
 *  Created on: Feb 8, 2023
 *      Author: tomas
 */
#include "DC_Motor.h"

void Motor_INIT(struct Motor* motor, TIM_HandleTypeDef* TIMER, uint32_t PWM_CHANNEL, GPIO_TypeDef* DIR1_PORT, GPIO_TypeDef* DIR2_PORT, uint16_t DIR1_PIN, uint16_t DIR2_PIN){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	motor->DUTY = 0.0f;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
	motor->TIMER = TIMER;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	601a      	str	r2, [r3, #0]
	motor->PWM_CHANNEL = PWM_CHANNEL;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	605a      	str	r2, [r3, #4]
	motor->DIR1_PORT = DIR1_PORT;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	609a      	str	r2, [r3, #8]
	motor->DIR2_PORT = DIR2_PORT;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	60da      	str	r2, [r3, #12]
	motor->DIR1_PIN = DIR1_PIN;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	8bba      	ldrh	r2, [r7, #28]
 800106a:	821a      	strh	r2, [r3, #16]
	motor->DIR2_PIN = DIR2_PIN;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8c3a      	ldrh	r2, [r7, #32]
 8001070:	825a      	strh	r2, [r3, #18]

	Motor_STOP(motor);
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 f9ca 	bl	800140c <Motor_STOP>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <Motor_SET_DIR>:

void Motor_SET_DIR(struct Motor* motor, _Bool dir){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
	if(dir == 1){
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d010      	beq.n	80010b4 <Motor_SET_DIR+0x34>
		HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 1);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6898      	ldr	r0, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	8a1b      	ldrh	r3, [r3, #16]
 800109a:	2201      	movs	r2, #1
 800109c:	4619      	mov	r1, r3
 800109e:	f001 fdeb 	bl	8002c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 0);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68d8      	ldr	r0, [r3, #12]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	8a5b      	ldrh	r3, [r3, #18]
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	f001 fde3 	bl	8002c78 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 0);
		HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 1);
	}
}
 80010b2:	e00f      	b.n	80010d4 <Motor_SET_DIR+0x54>
		HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 0);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6898      	ldr	r0, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	8a1b      	ldrh	r3, [r3, #16]
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	f001 fdda 	bl	8002c78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 1);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68d8      	ldr	r0, [r3, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	8a5b      	ldrh	r3, [r3, #18]
 80010cc:	2201      	movs	r2, #1
 80010ce:	4619      	mov	r1, r3
 80010d0:	f001 fdd2 	bl	8002c78 <HAL_GPIO_WritePin>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <Motor_MOVE>:
void Motor_MOVE(struct Motor* motor, float  duty){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	ed87 0a00 	vstr	s0, [r7]
	motor->DUTY = duty;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	615a      	str	r2, [r3, #20]
	if(motor->DUTY > 0){
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80010f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	dd7b      	ble.n	80011f6 <Motor_MOVE+0x11a>
		Motor_SET_DIR(motor, 1);
 80010fe:	2101      	movs	r1, #1
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ffbd 	bl	8001080 <Motor_SET_DIR>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10f      	bne.n	800112e <Motor_MOVE+0x52>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	edd3 7a05 	vldr	s15, [r3, #20]
 8001114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001118:	ee17 3a90 	vmov	r3, s15
 800111c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001120:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
 800112c:	e063      	b.n	80011f6 <Motor_MOVE+0x11a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b04      	cmp	r3, #4
 8001134:	d110      	bne.n	8001158 <Motor_MOVE+0x7c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a05 	vldr	s15, [r3, #20]
 800113c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001140:	ee17 3a90 	vmov	r3, s15
 8001144:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001148:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	460b      	mov	r3, r1
 8001154:	6393      	str	r3, [r2, #56]	; 0x38
 8001156:	e04e      	b.n	80011f6 <Motor_MOVE+0x11a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b08      	cmp	r3, #8
 800115e:	d110      	bne.n	8001182 <Motor_MOVE+0xa6>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edd3 7a05 	vldr	s15, [r3, #20]
 8001166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116a:	ee17 3a90 	vmov	r3, s15
 800116e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001172:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	460b      	mov	r3, r1
 800117e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001180:	e039      	b.n	80011f6 <Motor_MOVE+0x11a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b0c      	cmp	r3, #12
 8001188:	d110      	bne.n	80011ac <Motor_MOVE+0xd0>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001194:	ee17 3a90 	vmov	r3, s15
 8001198:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800119c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	460b      	mov	r3, r1
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	e024      	b.n	80011f6 <Motor_MOVE+0x11a>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b10      	cmp	r3, #16
 80011b2:	d110      	bne.n	80011d6 <Motor_MOVE+0xfa>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80011ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011be:	ee17 3a90 	vmov	r3, s15
 80011c2:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80011c6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	460b      	mov	r3, r1
 80011d2:	6593      	str	r3, [r2, #88]	; 0x58
 80011d4:	e00f      	b.n	80011f6 <Motor_MOVE+0x11a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80011dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e0:	ee17 3a90 	vmov	r3, s15
 80011e4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80011e8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	460b      	mov	r3, r1
 80011f4:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
	if(motor->DUTY < 0){
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80011fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001204:	d57b      	bpl.n	80012fe <Motor_MOVE+0x222>
		Motor_SET_DIR(motor, 0);
 8001206:	2100      	movs	r1, #0
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff39 	bl	8001080 <Motor_SET_DIR>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10f      	bne.n	8001236 <Motor_MOVE+0x15a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	edd3 7a05 	vldr	s15, [r3, #20]
 800121c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001220:	ee17 3a90 	vmov	r3, s15
 8001224:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001228:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
 8001234:	e063      	b.n	80012fe <Motor_MOVE+0x222>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b04      	cmp	r3, #4
 800123c:	d110      	bne.n	8001260 <Motor_MOVE+0x184>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a05 	vldr	s15, [r3, #20]
 8001244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001248:	ee17 3a90 	vmov	r3, s15
 800124c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001250:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	460b      	mov	r3, r1
 800125c:	6393      	str	r3, [r2, #56]	; 0x38
 800125e:	e04e      	b.n	80012fe <Motor_MOVE+0x222>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d110      	bne.n	800128a <Motor_MOVE+0x1ae>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	edd3 7a05 	vldr	s15, [r3, #20]
 800126e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001272:	ee17 3a90 	vmov	r3, s15
 8001276:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800127a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	460b      	mov	r3, r1
 8001286:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001288:	e039      	b.n	80012fe <Motor_MOVE+0x222>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d110      	bne.n	80012b4 <Motor_MOVE+0x1d8>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	edd3 7a05 	vldr	s15, [r3, #20]
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80012a4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	460b      	mov	r3, r1
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	e024      	b.n	80012fe <Motor_MOVE+0x222>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b10      	cmp	r3, #16
 80012ba:	d110      	bne.n	80012de <Motor_MOVE+0x202>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a05 	vldr	s15, [r3, #20]
 80012c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c6:	ee17 3a90 	vmov	r3, s15
 80012ca:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80012ce:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	460b      	mov	r3, r1
 80012da:	6593      	str	r3, [r2, #88]	; 0x58
 80012dc:	e00f      	b.n	80012fe <Motor_MOVE+0x222>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80012e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e8:	ee17 3a90 	vmov	r3, s15
 80012ec:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80012f0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	460b      	mov	r3, r1
 80012fc:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
	if(motor->DUTY == 0){
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a05 	vldr	s15, [r3, #20]
 8001304:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	d17a      	bne.n	8001404 <Motor_MOVE+0x328>
		Motor_STOP(motor);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f87c 	bl	800140c <Motor_STOP>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10f      	bne.n	800133c <Motor_MOVE+0x260>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001326:	ee17 3a90 	vmov	r3, s15
 800132a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800132e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800133a:	e063      	b.n	8001404 <Motor_MOVE+0x328>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d110      	bne.n	8001366 <Motor_MOVE+0x28a>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edd3 7a05 	vldr	s15, [r3, #20]
 800134a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134e:	ee17 3a90 	vmov	r3, s15
 8001352:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001356:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	460b      	mov	r3, r1
 8001362:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001364:	e04e      	b.n	8001404 <Motor_MOVE+0x328>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b08      	cmp	r3, #8
 800136c:	d110      	bne.n	8001390 <Motor_MOVE+0x2b4>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a05 	vldr	s15, [r3, #20]
 8001374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001378:	ee17 3a90 	vmov	r3, s15
 800137c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001380:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	460b      	mov	r3, r1
 800138c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800138e:	e039      	b.n	8001404 <Motor_MOVE+0x328>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b0c      	cmp	r3, #12
 8001396:	d110      	bne.n	80013ba <Motor_MOVE+0x2de>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	edd3 7a05 	vldr	s15, [r3, #20]
 800139e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a2:	ee17 3a90 	vmov	r3, s15
 80013a6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80013aa:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	460b      	mov	r3, r1
 80013b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013b8:	e024      	b.n	8001404 <Motor_MOVE+0x328>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d110      	bne.n	80013e4 <Motor_MOVE+0x308>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80013c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013cc:	ee17 3a90 	vmov	r3, s15
 80013d0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80013d4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	460b      	mov	r3, r1
 80013e0:	6593      	str	r3, [r2, #88]	; 0x58
}
 80013e2:	e00f      	b.n	8001404 <Motor_MOVE+0x328>
		__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, abs(motor->DUTY));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80013ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ee:	ee17 3a90 	vmov	r3, s15
 80013f2:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80013f6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	460b      	mov	r3, r1
 8001402:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <Motor_STOP>:

void Motor_STOP(struct Motor* motor){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->DIR1_PORT, motor->DIR1_PIN, 0);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6898      	ldr	r0, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	8a1b      	ldrh	r3, [r3, #16]
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	f001 fc2a 	bl	8002c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->DIR2_PORT, motor->DIR2_PIN, 0);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68d8      	ldr	r0, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	8a5b      	ldrh	r3, [r3, #18]
 800142c:	2200      	movs	r2, #0
 800142e:	4619      	mov	r1, r3
 8001430:	f001 fc22 	bl	8002c78 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <Motor_STOP+0x3c>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001446:	e02c      	b.n	80014a2 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d105      	bne.n	800145c <Motor_STOP+0x50>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	6393      	str	r3, [r2, #56]	; 0x38
}
 800145a:	e022      	b.n	80014a2 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b08      	cmp	r3, #8
 8001462:	d105      	bne.n	8001470 <Motor_STOP+0x64>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800146e:	e018      	b.n	80014a2 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b0c      	cmp	r3, #12
 8001476:	d105      	bne.n	8001484 <Motor_STOP+0x78>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001482:	e00e      	b.n	80014a2 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b10      	cmp	r3, #16
 800148a:	d105      	bne.n	8001498 <Motor_STOP+0x8c>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001496:	e004      	b.n	80014a2 <Motor_STOP+0x96>
	__HAL_TIM_SET_COMPARE(motor->TIMER, motor->PWM_CHANNEL, 0);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2300      	movs	r3, #0
 80014a0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <control_INIT>:
 *      Author: tomas
 */

#include "control.h"

void control_INIT(struct Controller* controller, float MAX_SIGNAL, float MIN_SIGNAL, float MAX_ERROR, float MIN_ERROR){
 80014aa:	b480      	push	{r7}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6178      	str	r0, [r7, #20]
 80014b2:	ed87 0a04 	vstr	s0, [r7, #16]
 80014b6:	edc7 0a03 	vstr	s1, [r7, #12]
 80014ba:	ed87 1a02 	vstr	s2, [r7, #8]
 80014be:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->MAX_SIGNAL = MAX_SIGNAL;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	601a      	str	r2, [r3, #0]
	controller->MIN_SIGNAL = MIN_SIGNAL;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	605a      	str	r2, [r3, #4]
	controller->MAX_ERROR = MAX_ERROR;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	609a      	str	r2, [r3, #8]
	controller->MIN_ERROR = MIN_ERROR;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	60da      	str	r2, [r3, #12]
	controller->prev_error = 0;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
	controller->prev_distance = 0;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
	controller->current_velocity = 0;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
	controller->start = 0;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2200      	movs	r2, #0
 80014f6:	771a      	strb	r2, [r3, #28]


}
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <control_GET_SIGNAL>:

float control_GET_SIGNAL(struct Controller* controller, float y, float y_ref){
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001510:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = y_ref - y;
 8001514:	ed97 7a01 	vldr	s14, [r7, #4]
 8001518:	edd7 7a02 	vldr	s15, [r7, #8]
 800151c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001520:	edc7 7a05 	vstr	s15, [r7, #20]
	float duty = error/5.0 * 100;
 8001524:	6978      	ldr	r0, [r7, #20]
 8001526:	f7ff f82f 	bl	8000588 <__aeabi_f2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <control_GET_SIGNAL+0x1b0>)
 8001530:	f7ff f9ac 	bl	800088c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <control_GET_SIGNAL+0x1b4>)
 8001542:	f7ff f879 	bl	8000638 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb6b 	bl	8000c28 <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	613b      	str	r3, [r7, #16]
	if(abs(error) <= controller->MIN_ERROR){
 8001556:	edd7 7a05 	vldr	s15, [r7, #20]
 800155a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155e:	ee17 3a90 	vmov	r3, s15
 8001562:	2b00      	cmp	r3, #0
 8001564:	bfb8      	it	lt
 8001566:	425b      	neglt	r3, r3
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	edd3 7a03 	vldr	s15, [r3, #12]
 8001576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157e:	d805      	bhi.n	800158c <control_GET_SIGNAL+0x88>
		controller->start = 0;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	771a      	strb	r2, [r3, #28]
		return 0;
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	e08b      	b.n	80016a4 <control_GET_SIGNAL+0x1a0>
	}
	else if(abs(error) > controller->MAX_ERROR && error>0) {
 800158c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001594:	ee17 3a90 	vmov	r3, s15
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfb8      	it	lt
 800159c:	425b      	neglt	r3, r3
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	dd0b      	ble.n	80015ce <control_GET_SIGNAL+0xca>
 80015b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	dd04      	ble.n	80015ce <control_GET_SIGNAL+0xca>
		controller->start = 1;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2201      	movs	r2, #1
 80015c8:	771a      	strb	r2, [r3, #28]
		return -100.0f;
 80015ca:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <control_GET_SIGNAL+0x1b8>)
 80015cc:	e06a      	b.n	80016a4 <control_GET_SIGNAL+0x1a0>
	}
	else if(abs(error) > controller->MAX_ERROR && error<0){
 80015ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d6:	ee17 3a90 	vmov	r3, s15
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfb8      	it	lt
 80015de:	425b      	neglt	r3, r3
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	dd0b      	ble.n	8001610 <control_GET_SIGNAL+0x10c>
 80015f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80015fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001604:	d504      	bpl.n	8001610 <control_GET_SIGNAL+0x10c>
		controller->start = 1;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2201      	movs	r2, #1
 800160a:	771a      	strb	r2, [r3, #28]
		return 100.0f;
 800160c:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <control_GET_SIGNAL+0x1bc>)
 800160e:	e049      	b.n	80016a4 <control_GET_SIGNAL+0x1a0>
	}

	else if(controller->start == 1){
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	7f1b      	ldrb	r3, [r3, #28]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d033      	beq.n	8001680 <control_GET_SIGNAL+0x17c>
		if(abs(duty) <= 94 && error<0) return 94.0f;
 8001618:	edd7 7a04 	vldr	s15, [r7, #16]
 800161c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	f113 0f5e 	cmn.w	r3, #94	; 0x5e
 8001628:	db10      	blt.n	800164c <control_GET_SIGNAL+0x148>
 800162a:	edd7 7a04 	vldr	s15, [r7, #16]
 800162e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001632:	ee17 3a90 	vmov	r3, s15
 8001636:	2b5e      	cmp	r3, #94	; 0x5e
 8001638:	dc08      	bgt.n	800164c <control_GET_SIGNAL+0x148>
 800163a:	edd7 7a05 	vldr	s15, [r7, #20]
 800163e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	d501      	bpl.n	800164c <control_GET_SIGNAL+0x148>
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <control_GET_SIGNAL+0x1c0>)
 800164a:	e02b      	b.n	80016a4 <control_GET_SIGNAL+0x1a0>
		else if(abs(duty) <= 94 && error>0) return -94.0f;
 800164c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001654:	ee17 3a90 	vmov	r3, s15
 8001658:	f113 0f5e 	cmn.w	r3, #94	; 0x5e
 800165c:	db21      	blt.n	80016a2 <control_GET_SIGNAL+0x19e>
 800165e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001666:	ee17 3a90 	vmov	r3, s15
 800166a:	2b5e      	cmp	r3, #94	; 0x5e
 800166c:	dc19      	bgt.n	80016a2 <control_GET_SIGNAL+0x19e>
 800166e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001672:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	dd12      	ble.n	80016a2 <control_GET_SIGNAL+0x19e>
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <control_GET_SIGNAL+0x1c4>)
 800167e:	e011      	b.n	80016a4 <control_GET_SIGNAL+0x1a0>
	}
	else{
		if(error>0){
 8001680:	edd7 7a05 	vldr	s15, [r7, #20]
 8001684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	dd04      	ble.n	8001698 <control_GET_SIGNAL+0x194>
			controller->start = 1;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2201      	movs	r2, #1
 8001692:	771a      	strb	r2, [r3, #28]
			return	 -100.0f;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <control_GET_SIGNAL+0x1b8>)
 8001696:	e005      	b.n	80016a4 <control_GET_SIGNAL+0x1a0>
		}
		else{
			controller->start = 1;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	771a      	strb	r2, [r3, #28]
			return 100.0f;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <control_GET_SIGNAL+0x1bc>)
 80016a0:	e000      	b.n	80016a4 <control_GET_SIGNAL+0x1a0>
		}
	}
	return duty;
 80016a2:	693b      	ldr	r3, [r7, #16]
}
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40140000 	.word	0x40140000
 80016b8:	40590000 	.word	0x40590000
 80016bc:	c2c80000 	.word	0xc2c80000
 80016c0:	42c80000 	.word	0x42c80000
 80016c4:	42bc0000 	.word	0x42bc0000
 80016c8:	c2bc0000 	.word	0xc2bc0000

080016cc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b8b      	ldr	r3, [pc, #556]	; (8001910 <MX_GPIO_Init+0x244>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a8a      	ldr	r2, [pc, #552]	; (8001910 <MX_GPIO_Init+0x244>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b88      	ldr	r3, [pc, #544]	; (8001910 <MX_GPIO_Init+0x244>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016fa:	4b85      	ldr	r3, [pc, #532]	; (8001910 <MX_GPIO_Init+0x244>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a84      	ldr	r2, [pc, #528]	; (8001910 <MX_GPIO_Init+0x244>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b82      	ldr	r3, [pc, #520]	; (8001910 <MX_GPIO_Init+0x244>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b7f      	ldr	r3, [pc, #508]	; (8001910 <MX_GPIO_Init+0x244>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a7e      	ldr	r2, [pc, #504]	; (8001910 <MX_GPIO_Init+0x244>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b7c      	ldr	r3, [pc, #496]	; (8001910 <MX_GPIO_Init+0x244>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b79      	ldr	r3, [pc, #484]	; (8001910 <MX_GPIO_Init+0x244>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a78      	ldr	r2, [pc, #480]	; (8001910 <MX_GPIO_Init+0x244>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b76      	ldr	r3, [pc, #472]	; (8001910 <MX_GPIO_Init+0x244>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001742:	4b73      	ldr	r3, [pc, #460]	; (8001910 <MX_GPIO_Init+0x244>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a72      	ldr	r2, [pc, #456]	; (8001910 <MX_GPIO_Init+0x244>)
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b70      	ldr	r3, [pc, #448]	; (8001910 <MX_GPIO_Init+0x244>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <MX_GPIO_Init+0x244>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a6c      	ldr	r2, [pc, #432]	; (8001910 <MX_GPIO_Init+0x244>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <MX_GPIO_Init+0x244>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001772:	4b67      	ldr	r3, [pc, #412]	; (8001910 <MX_GPIO_Init+0x244>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a66      	ldr	r2, [pc, #408]	; (8001910 <MX_GPIO_Init+0x244>)
 8001778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b64      	ldr	r3, [pc, #400]	; (8001910 <MX_GPIO_Init+0x244>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR1_Pin|DIR2_Pin|LD3_Pin
 800178a:	2200      	movs	r2, #0
 800178c:	f244 0187 	movw	r1, #16519	; 0x4087
 8001790:	4860      	ldr	r0, [pc, #384]	; (8001914 <MX_GPIO_Init+0x248>)
 8001792:	f001 fa71 	bl	8002c78 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2140      	movs	r1, #64	; 0x40
 800179a:	485f      	ldr	r0, [pc, #380]	; (8001918 <MX_GPIO_Init+0x24c>)
 800179c:	f001 fa6c 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	4859      	ldr	r0, [pc, #356]	; (800191c <MX_GPIO_Init+0x250>)
 80017b8:	f001 f89a 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017bc:	2332      	movs	r3, #50	; 0x32
 80017be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017cc:	230b      	movs	r3, #11
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4851      	ldr	r0, [pc, #324]	; (800191c <MX_GPIO_Init+0x250>)
 80017d8:	f001 f88a 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017dc:	2386      	movs	r3, #134	; 0x86
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ec:	230b      	movs	r3, #11
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	484a      	ldr	r0, [pc, #296]	; (8001920 <MX_GPIO_Init+0x254>)
 80017f8:	f001 f87a 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80017fc:	2310      	movs	r3, #16
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001800:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	4843      	ldr	r0, [pc, #268]	; (8001920 <MX_GPIO_Init+0x254>)
 8001812:	f001 f86d 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR1_Pin|DIR2_Pin|LD3_Pin
 8001816:	f244 0387 	movw	r3, #16519	; 0x4087
 800181a:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	4839      	ldr	r0, [pc, #228]	; (8001914 <MX_GPIO_Init+0x248>)
 8001830:	f001 f85e 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001846:	230b      	movs	r3, #11
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4830      	ldr	r0, [pc, #192]	; (8001914 <MX_GPIO_Init+0x248>)
 8001852:	f001 f84d 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001856:	2340      	movs	r3, #64	; 0x40
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	482a      	ldr	r0, [pc, #168]	; (8001918 <MX_GPIO_Init+0x24c>)
 800186e:	f001 f83f 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	4824      	ldr	r0, [pc, #144]	; (8001918 <MX_GPIO_Init+0x24c>)
 8001886:	f001 f833 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800188a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800189c:	230a      	movs	r3, #10
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	481e      	ldr	r0, [pc, #120]	; (8001920 <MX_GPIO_Init+0x254>)
 80018a8:	f001 f822 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4817      	ldr	r0, [pc, #92]	; (8001920 <MX_GPIO_Init+0x254>)
 80018c2:	f001 f815 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018d8:	230b      	movs	r3, #11
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_GPIO_Init+0x24c>)
 80018e4:	f001 f804 	bl	80028f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	200a      	movs	r0, #10
 80018ee:	f000 ff36 	bl	800275e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018f2:	200a      	movs	r0, #10
 80018f4:	f000 ff4f 	bl	8002796 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	2028      	movs	r0, #40	; 0x28
 80018fe:	f000 ff2e 	bl	800275e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001902:	2028      	movs	r0, #40	; 0x28
 8001904:	f000 ff47 	bl	8002796 <HAL_NVIC_EnableIRQ>

}
 8001908:	bf00      	nop
 800190a:	3730      	adds	r7, #48	; 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40020400 	.word	0x40020400
 8001918:	40021800 	.word	0x40021800
 800191c:	40020800 	.word	0x40020800
 8001920:	40020000 	.word	0x40020000

08001924 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == ECHO_Pin){
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	2b10      	cmp	r3, #16
 8001932:	f040 8089 	bne.w	8001a48 <HAL_GPIO_EXTI_Callback+0x124>
		_Bool state = HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin);
 8001936:	2110      	movs	r1, #16
 8001938:	4845      	ldr	r0, [pc, #276]	; (8001a50 <HAL_GPIO_EXTI_Callback+0x12c>)
 800193a:	f001 f985 	bl	8002c48 <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(state == 1){
 800194c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_GPIO_EXTI_Callback+0x40>
			__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001954:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x130>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim5);
 800195c:	483d      	ldr	r0, [pc, #244]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x130>)
 800195e:	f002 fadf 	bl	8003f20 <HAL_TIM_Base_Start>

			}

		}
	}
}
 8001962:	e071      	b.n	8001a48 <HAL_GPIO_EXTI_Callback+0x124>
			HAL_TIM_Base_Stop(&htim5);
 8001964:	483b      	ldr	r0, [pc, #236]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x130>)
 8001966:	f002 fb4b 	bl	8004000 <HAL_TIM_Base_Stop>
			x = __HAL_TIM_GET_COUNTER(&htim5);
 800196a:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x130>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x134>)
 8001972:	6013      	str	r3, [r2, #0]
			if(x/58.0f < 1000){
 8001974:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x134>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001980:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001a5c <HAL_GPIO_EXTI_Callback+0x138>
 8001984:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001988:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001a60 <HAL_GPIO_EXTI_Callback+0x13c>
 800198c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	d400      	bmi.n	8001998 <HAL_GPIO_EXTI_Callback+0x74>
}
 8001996:	e057      	b.n	8001a48 <HAL_GPIO_EXTI_Callback+0x124>
				value = x/58.0f;
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x134>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019a4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001a5c <HAL_GPIO_EXTI_Callback+0x138>
 80019a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x140>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]
				if(ticks>=50){
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x144>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b31      	cmp	r3, #49	; 0x31
 80019b8:	dd41      	ble.n	8001a3e <HAL_GPIO_EXTI_Callback+0x11a>
					int resp_len = sprintf((char*)tx_buffer, "Distance: %.2f ", value);
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x140>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fde2 	bl	8000588 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	f107 0008 	add.w	r0, r7, #8
 80019cc:	4927      	ldr	r1, [pc, #156]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x148>)
 80019ce:	f005 fccf 	bl	8007370 <siprintf>
 80019d2:	62b8      	str	r0, [r7, #40]	; 0x28
					HAL_UART_Transmit(&huart3, tx_buffer, resp_len,10);
 80019d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	f107 0108 	add.w	r1, r7, #8
 80019dc:	230a      	movs	r3, #10
 80019de:	4824      	ldr	r0, [pc, #144]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x14c>)
 80019e0:	f003 fb86 	bl	80050f0 <HAL_UART_Transmit>
					resp_len = sprintf((char*)tx_buffer, "Reference: %.2f ", y_ref);
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x150>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdcd 	bl	8000588 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	f107 0008 	add.w	r0, r7, #8
 80019f6:	4920      	ldr	r1, [pc, #128]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x154>)
 80019f8:	f005 fcba 	bl	8007370 <siprintf>
 80019fc:	62b8      	str	r0, [r7, #40]	; 0x28
					HAL_UART_Transmit(&huart3, tx_buffer, resp_len,10);
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	f107 0108 	add.w	r1, r7, #8
 8001a06:	230a      	movs	r3, #10
 8001a08:	4819      	ldr	r0, [pc, #100]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001a0a:	f003 fb71 	bl	80050f0 <HAL_UART_Transmit>
					resp_len = sprintf((char*)tx_buffer, "Duty: %.2f\r", duty);
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x158>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fdb8 	bl	8000588 <__aeabi_f2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	f107 0008 	add.w	r0, r7, #8
 8001a20:	4917      	ldr	r1, [pc, #92]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001a22:	f005 fca5 	bl	8007370 <siprintf>
 8001a26:	62b8      	str	r0, [r7, #40]	; 0x28
					HAL_UART_Transmit(&huart3, tx_buffer, resp_len,10);
 8001a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	f107 0108 	add.w	r1, r7, #8
 8001a30:	230a      	movs	r3, #10
 8001a32:	480f      	ldr	r0, [pc, #60]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001a34:	f003 fb5c 	bl	80050f0 <HAL_UART_Transmit>
					ticks=0;
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x144>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
				ticks++;
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x144>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x144>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	3730      	adds	r7, #48	; 0x30
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40020000 	.word	0x40020000
 8001a54:	20000304 	.word	0x20000304
 8001a58:	2000020c 	.word	0x2000020c
 8001a5c:	42680000 	.word	0x42680000
 8001a60:	447a0000 	.word	0x447a0000
 8001a64:	20000200 	.word	0x20000200
 8001a68:	200001fc 	.word	0x200001fc
 8001a6c:	0800b7e0 	.word	0x0800b7e0
 8001a70:	20000350 	.word	0x20000350
 8001a74:	20000204 	.word	0x20000204
 8001a78:	0800b7f0 	.word	0x0800b7f0
 8001a7c:	20000208 	.word	0x20000208
 8001a80:	0800b804 	.word	0x0800b804

08001a84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_UART_RxCpltCallback+0x34>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d108      	bne.n	8001aa6 <HAL_UART_RxCpltCallback+0x22>
		if(rx_buffer[0] == 'R'){
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_UART_RxCpltCallback+0x38>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b52      	cmp	r3, #82	; 0x52
 8001a9a:	d104      	bne.n	8001aa6 <HAL_UART_RxCpltCallback+0x22>
			sscanf((char*)&rx_buffer[1], "%f", &y_ref);
 8001a9c:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <HAL_UART_RxCpltCallback+0x3c>)
 8001a9e:	4909      	ldr	r1, [pc, #36]	; (8001ac4 <HAL_UART_RxCpltCallback+0x40>)
 8001aa0:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <HAL_UART_RxCpltCallback+0x44>)
 8001aa2:	f005 fc85 	bl	80073b0 <siscanf>
		}
	}
	HAL_UART_Receive_IT(&huart3, rx_buffer, 6);
 8001aa6:	2206      	movs	r2, #6
 8001aa8:	4904      	ldr	r1, [pc, #16]	; (8001abc <HAL_UART_RxCpltCallback+0x38>)
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <HAL_UART_RxCpltCallback+0x34>)
 8001aac:	f003 fba3 	bl	80051f6 <HAL_UART_Receive_IT>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000350 	.word	0x20000350
 8001abc:	20000210 	.word	0x20000210
 8001ac0:	20000204 	.word	0x20000204
 8001ac4:	0800b810 	.word	0x0800b810
 8001ac8:	20000211 	.word	0x20000211

08001acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad2:	f000 fce8 	bl	80024a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad6:	f000 f865 	bl	8001ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ada:	f7ff fdf7 	bl	80016cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001ade:	f000 fc21 	bl	8002324 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001ae2:	f000 fab9 	bl	8002058 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001ae6:	f000 fb2d 	bl	8002144 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001aea:	f000 fa09 	bl	8001f00 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, rx_buffer, 6);
 8001aee:	2206      	movs	r2, #6
 8001af0:	4920      	ldr	r1, [pc, #128]	; (8001b74 <main+0xa8>)
 8001af2:	4821      	ldr	r0, [pc, #132]	; (8001b78 <main+0xac>)
 8001af4:	f003 fb7f 	bl	80051f6 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001af8:	2100      	movs	r1, #0
 8001afa:	4820      	ldr	r0, [pc, #128]	; (8001b7c <main+0xb0>)
 8001afc:	f002 fb08 	bl	8004110 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b00:	2100      	movs	r1, #0
 8001b02:	481f      	ldr	r0, [pc, #124]	; (8001b80 <main+0xb4>)
 8001b04:	f002 fb04 	bl	8004110 <HAL_TIM_PWM_Start>

  Motor_INIT(&motor, &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR2_GPIO_Port, DIR1_Pin, DIR2_Pin);
 8001b08:	2304      	movs	r3, #4
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <main+0xb8>)
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <main+0xb8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	4919      	ldr	r1, [pc, #100]	; (8001b80 <main+0xb4>)
 8001b1a:	481b      	ldr	r0, [pc, #108]	; (8001b88 <main+0xbc>)
 8001b1c:	f7ff fa8c 	bl	8001038 <Motor_INIT>
  control_INIT(&controller, 100.0f, 60.0f, 5.0f, 1.0f);
 8001b20:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001b24:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001b28:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001b8c <main+0xc0>
 8001b2c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001b90 <main+0xc4>
 8001b30:	4818      	ldr	r0, [pc, #96]	; (8001b94 <main+0xc8>)
 8001b32:	f7ff fcba 	bl	80014aa <control_INIT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  duty = control_GET_SIGNAL(&controller, value, y_ref);
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <main+0xcc>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <main+0xd0>)
 8001b3e:	ed93 7a00 	vldr	s14, [r3]
 8001b42:	eef0 0a47 	vmov.f32	s1, s14
 8001b46:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4a:	4812      	ldr	r0, [pc, #72]	; (8001b94 <main+0xc8>)
 8001b4c:	f7ff fcda 	bl	8001504 <control_GET_SIGNAL>
 8001b50:	eef0 7a40 	vmov.f32	s15, s0
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <main+0xd4>)
 8001b56:	edc3 7a00 	vstr	s15, [r3]
	  Motor_MOVE(&motor, duty);
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <main+0xd4>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	4808      	ldr	r0, [pc, #32]	; (8001b88 <main+0xbc>)
 8001b66:	f7ff fab9 	bl	80010dc <Motor_MOVE>
	  HAL_Delay(50);
 8001b6a:	2032      	movs	r0, #50	; 0x32
 8001b6c:	f000 fcf8 	bl	8002560 <HAL_Delay>
	  duty = control_GET_SIGNAL(&controller, value, y_ref);
 8001b70:	e7e1      	b.n	8001b36 <main+0x6a>
 8001b72:	bf00      	nop
 8001b74:	20000210 	.word	0x20000210
 8001b78:	20000350 	.word	0x20000350
 8001b7c:	200002b8 	.word	0x200002b8
 8001b80:	2000026c 	.word	0x2000026c
 8001b84:	40020400 	.word	0x40020400
 8001b88:	20000230 	.word	0x20000230
 8001b8c:	42700000 	.word	0x42700000
 8001b90:	42c80000 	.word	0x42c80000
 8001b94:	20000248 	.word	0x20000248
 8001b98:	20000200 	.word	0x20000200
 8001b9c:	20000204 	.word	0x20000204
 8001ba0:	20000208 	.word	0x20000208

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	; 0x50
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	2230      	movs	r2, #48	; 0x30
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fd54 	bl	8006660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bc8:	f001 f888 	bl	8002cdc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <SystemClock_Config+0xc8>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	4a26      	ldr	r2, [pc, #152]	; (8001c6c <SystemClock_Config+0xc8>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd8:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <SystemClock_Config+0xc8>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <SystemClock_Config+0xcc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bec:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c04:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c14:	2304      	movs	r3, #4
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c18:	2348      	movs	r3, #72	; 0x48
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c20:	2303      	movs	r3, #3
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 f867 	bl	8002cfc <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c34:	f000 f81e 	bl	8001c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c38:	230f      	movs	r3, #15
 8001c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	2102      	movs	r1, #2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 faf5 	bl	8003244 <HAL_RCC_ClockConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c60:	f000 f808 	bl	8001c74 <Error_Handler>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3750      	adds	r7, #80	; 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40007000 	.word	0x40007000

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
}
 8001c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <Error_Handler+0x8>
	...

08001c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_MspInit+0x44>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_MspInit+0x44>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_MspInit+0x44>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_MspInit+0x44>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <HAL_MspInit+0x44>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_MspInit+0x44>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <NMI_Handler+0x4>

08001cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d14:	f000 fc04 	bl	8002520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 8001d20:	2010      	movs	r0, #16
 8001d22:	f000 ffc3 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <USART3_IRQHandler+0x10>)
 8001d32:	f003 faa5 	bl	8005280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000350 	.word	0x20000350

08001d40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001d44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d48:	f000 ffb0 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
	return 1;
 8001d54:	2301      	movs	r3, #1
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_kill>:

int _kill(int pid, int sig)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d6a:	f004 fc4f 	bl	800660c <__errno>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2216      	movs	r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
	return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_exit>:

void _exit (int status)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ffe7 	bl	8001d60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d92:	e7fe      	b.n	8001d92 <_exit+0x12>

08001d94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e00a      	b.n	8001dbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001da6:	f3af 8000 	nop.w
 8001daa:	4601      	mov	r1, r0
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	60ba      	str	r2, [r7, #8]
 8001db2:	b2ca      	uxtb	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbf0      	blt.n	8001da6 <_read+0x12>
	}

return len;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e009      	b.n	8001df4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	60ba      	str	r2, [r7, #8]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3301      	adds	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbf1      	blt.n	8001de0 <_write+0x12>
	}
	return len;
 8001dfc:	687b      	ldr	r3, [r7, #4]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_close>:

int _close(int file)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_isatty>:

int _isatty(int file)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
	return 1;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <_sbrk+0x5c>)
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <_sbrk+0x60>)
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <_sbrk+0x64>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <_sbrk+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d207      	bcs.n	8001eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea0:	f004 fbb4 	bl	800660c <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e009      	b.n	8001ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <_sbrk+0x64>)
 8001ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20050000 	.word	0x20050000
 8001ed0:	00000400 	.word	0x00000400
 8001ed4:	20000268 	.word	0x20000268
 8001ed8:	200003f0 	.word	0x200003f0

08001edc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <SystemInit+0x20>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <SystemInit+0x20>)
 8001ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b09a      	sub	sp, #104	; 0x68
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	222c      	movs	r2, #44	; 0x2c
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 fb90 	bl	8006660 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f40:	4b43      	ldr	r3, [pc, #268]	; (8002050 <MX_TIM1_Init+0x150>)
 8001f42:	4a44      	ldr	r2, [pc, #272]	; (8002054 <MX_TIM1_Init+0x154>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001f46:	4b42      	ldr	r3, [pc, #264]	; (8002050 <MX_TIM1_Init+0x150>)
 8001f48:	2247      	movs	r2, #71	; 0x47
 8001f4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4c:	4b40      	ldr	r3, [pc, #256]	; (8002050 <MX_TIM1_Init+0x150>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <MX_TIM1_Init+0x150>)
 8001f54:	2263      	movs	r2, #99	; 0x63
 8001f56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f58:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <MX_TIM1_Init+0x150>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f5e:	4b3c      	ldr	r3, [pc, #240]	; (8002050 <MX_TIM1_Init+0x150>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <MX_TIM1_Init+0x150>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f6a:	4839      	ldr	r0, [pc, #228]	; (8002050 <MX_TIM1_Init+0x150>)
 8001f6c:	f001 ff80 	bl	8003e70 <HAL_TIM_Base_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f76:	f7ff fe7d 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f84:	4619      	mov	r1, r3
 8001f86:	4832      	ldr	r0, [pc, #200]	; (8002050 <MX_TIM1_Init+0x150>)
 8001f88:	f002 fad0 	bl	800452c <HAL_TIM_ConfigClockSource>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f92:	f7ff fe6f 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f96:	482e      	ldr	r0, [pc, #184]	; (8002050 <MX_TIM1_Init+0x150>)
 8001f98:	f002 f859 	bl	800404e <HAL_TIM_PWM_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001fa2:	f7ff fe67 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4825      	ldr	r0, [pc, #148]	; (8002050 <MX_TIM1_Init+0x150>)
 8001fba:	f002 ff3f 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001fc4:	f7ff fe56 	bl	8001c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fc8:	2360      	movs	r3, #96	; 0x60
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8001fcc:	2364      	movs	r3, #100	; 0x64
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4619      	mov	r1, r3
 8001fec:	4818      	ldr	r0, [pc, #96]	; (8002050 <MX_TIM1_Init+0x150>)
 8001fee:	f002 f989 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001ff8:	f7ff fe3c 	bl	8001c74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002014:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800201e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4619      	mov	r1, r3
 8002030:	4807      	ldr	r0, [pc, #28]	; (8002050 <MX_TIM1_Init+0x150>)
 8002032:	f002 ff91 	bl	8004f58 <HAL_TIMEx_ConfigBreakDeadTime>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800203c:	f7ff fe1a 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <MX_TIM1_Init+0x150>)
 8002042:	f000 f913 	bl	800226c <HAL_TIM_MspPostInit>

}
 8002046:	bf00      	nop
 8002048:	3768      	adds	r7, #104	; 0x68
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000026c 	.word	0x2000026c
 8002054:	40010000 	.word	0x40010000

08002058 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002078:	463b      	mov	r3, r7
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <MX_TIM2_Init+0xe8>)
 800208c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002090:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002092:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <MX_TIM2_Init+0xe8>)
 8002094:	2247      	movs	r2, #71	; 0x47
 8002096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002098:	4b29      	ldr	r3, [pc, #164]	; (8002140 <MX_TIM2_Init+0xe8>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800209e:	4b28      	ldr	r3, [pc, #160]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020a0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80020a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020b2:	4823      	ldr	r0, [pc, #140]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020b4:	f001 fedc 	bl	8003e70 <HAL_TIM_Base_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80020be:	f7ff fdd9 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020cc:	4619      	mov	r1, r3
 80020ce:	481c      	ldr	r0, [pc, #112]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020d0:	f002 fa2c 	bl	800452c <HAL_TIM_ConfigClockSource>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80020da:	f7ff fdcb 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020de:	4818      	ldr	r0, [pc, #96]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020e0:	f001 ffb5 	bl	800404e <HAL_TIM_PWM_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80020ea:	f7ff fdc3 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	4810      	ldr	r0, [pc, #64]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020fe:	f002 fe9d 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002108:	f7ff fdb4 	bl	8001c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210c:	2360      	movs	r3, #96	; 0x60
 800210e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 8002110:	2314      	movs	r3, #20
 8002112:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	4619      	mov	r1, r3
 8002122:	4807      	ldr	r0, [pc, #28]	; (8002140 <MX_TIM2_Init+0xe8>)
 8002124:	f002 f8ee 	bl	8004304 <HAL_TIM_PWM_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800212e:	f7ff fda1 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <MX_TIM2_Init+0xe8>)
 8002134:	f000 f89a 	bl	800226c <HAL_TIM_MspPostInit>

}
 8002138:	bf00      	nop
 800213a:	3738      	adds	r7, #56	; 0x38
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	200002b8 	.word	0x200002b8

08002144 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <MX_TIM5_Init+0x94>)
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <MX_TIM5_Init+0x98>)
 8002166:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_TIM5_Init+0x94>)
 800216a:	2247      	movs	r2, #71	; 0x47
 800216c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_TIM5_Init+0x94>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_TIM5_Init+0x94>)
 8002176:	f04f 32ff 	mov.w	r2, #4294967295
 800217a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <MX_TIM5_Init+0x94>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <MX_TIM5_Init+0x94>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002188:	4813      	ldr	r0, [pc, #76]	; (80021d8 <MX_TIM5_Init+0x94>)
 800218a:	f001 fe71 	bl	8003e70 <HAL_TIM_Base_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002194:	f7ff fd6e 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	4619      	mov	r1, r3
 80021a4:	480c      	ldr	r0, [pc, #48]	; (80021d8 <MX_TIM5_Init+0x94>)
 80021a6:	f002 f9c1 	bl	800452c <HAL_TIM_ConfigClockSource>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80021b0:	f7ff fd60 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_TIM5_Init+0x94>)
 80021c2:	f002 fe3b 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80021cc:	f7ff fd52 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000304 	.word	0x20000304
 80021dc:	40000c00 	.word	0x40000c00

080021e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_TIM_Base_MspInit+0x80>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d10c      	bne.n	800220c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_TIM_Base_MspInit+0x84>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_TIM_Base_MspInit+0x84>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6453      	str	r3, [r2, #68]	; 0x44
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_TIM_Base_MspInit+0x84>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800220a:	e022      	b.n	8002252 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002214:	d10c      	bne.n	8002230 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_TIM_Base_MspInit+0x84>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <HAL_TIM_Base_MspInit+0x84>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_TIM_Base_MspInit+0x84>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
}
 800222e:	e010      	b.n	8002252 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM5)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <HAL_TIM_Base_MspInit+0x88>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10b      	bne.n	8002252 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_TIM_Base_MspInit+0x84>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_TIM_Base_MspInit+0x84>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <HAL_TIM_Base_MspInit+0x84>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
}
 8002252:	bf00      	nop
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40010000 	.word	0x40010000
 8002264:	40023800 	.word	0x40023800
 8002268:	40000c00 	.word	0x40000c00

0800226c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a22      	ldr	r2, [pc, #136]	; (8002314 <HAL_TIM_MspPostInit+0xa8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d11d      	bne.n	80022ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_TIM_MspPostInit+0xac>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a21      	ldr	r2, [pc, #132]	; (8002318 <HAL_TIM_MspPostInit+0xac>)
 8002294:	f043 0310 	orr.w	r3, r3, #16
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_TIM_MspPostInit+0xac>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	4816      	ldr	r0, [pc, #88]	; (800231c <HAL_TIM_MspPostInit+0xb0>)
 80022c4:	f000 fb14 	bl	80028f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022c8:	e020      	b.n	800230c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d2:	d11b      	bne.n	800230c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_TIM_MspPostInit+0xac>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <HAL_TIM_MspPostInit+0xac>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6313      	str	r3, [r2, #48]	; 0x30
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_TIM_MspPostInit+0xac>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022ec:	2301      	movs	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022fc:	2301      	movs	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	4806      	ldr	r0, [pc, #24]	; (8002320 <HAL_TIM_MspPostInit+0xb4>)
 8002308:	f000 faf2 	bl	80028f0 <HAL_GPIO_Init>
}
 800230c:	bf00      	nop
 800230e:	3728      	adds	r7, #40	; 0x28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40010000 	.word	0x40010000
 8002318:	40023800 	.word	0x40023800
 800231c:	40021000 	.word	0x40021000
 8002320:	40020000 	.word	0x40020000

08002324 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <MX_USART3_UART_Init+0x58>)
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <MX_USART3_UART_Init+0x5c>)
 800232c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002330:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002334:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <MX_USART3_UART_Init+0x58>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <MX_USART3_UART_Init+0x58>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <MX_USART3_UART_Init+0x58>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002368:	f002 fe74 	bl	8005054 <HAL_UART_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002372:	f7ff fc7f 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000350 	.word	0x20000350
 8002380:	40004800 	.word	0x40004800

08002384 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b0aa      	sub	sp, #168	; 0xa8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800239c:	f107 0310 	add.w	r3, r7, #16
 80023a0:	2284      	movs	r2, #132	; 0x84
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f004 f95b 	bl	8006660 <memset>
  if(uartHandle->Instance==USART3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a26      	ldr	r2, [pc, #152]	; (8002448 <HAL_UART_MspInit+0xc4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d144      	bne.n	800243e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	4618      	mov	r0, r3
 80023c4:	f001 f964 	bl	8003690 <HAL_RCCEx_PeriphCLKConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023ce:	f7ff fc51 	bl	8001c74 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_UART_MspInit+0xc8>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_UART_MspInit+0xc8>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_UART_MspInit+0xc8>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_UART_MspInit+0xc8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a17      	ldr	r2, [pc, #92]	; (800244c <HAL_UART_MspInit+0xc8>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_UART_MspInit+0xc8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800241c:	2307      	movs	r3, #7
 800241e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002422:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002426:	4619      	mov	r1, r3
 8002428:	4809      	ldr	r0, [pc, #36]	; (8002450 <HAL_UART_MspInit+0xcc>)
 800242a:	f000 fa61 	bl	80028f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	2027      	movs	r0, #39	; 0x27
 8002434:	f000 f993 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002438:	2027      	movs	r0, #39	; 0x27
 800243a:	f000 f9ac 	bl	8002796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800243e:	bf00      	nop
 8002440:	37a8      	adds	r7, #168	; 0xa8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40004800 	.word	0x40004800
 800244c:	40023800 	.word	0x40023800
 8002450:	40020c00 	.word	0x40020c00

08002454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800248c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002458:	480d      	ldr	r0, [pc, #52]	; (8002490 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800245a:	490e      	ldr	r1, [pc, #56]	; (8002494 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800245c:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002460:	e002      	b.n	8002468 <LoopCopyDataInit>

08002462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002466:	3304      	adds	r3, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800246c:	d3f9      	bcc.n	8002462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002470:	4c0b      	ldr	r4, [pc, #44]	; (80024a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002474:	e001      	b.n	800247a <LoopFillZerobss>

08002476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002478:	3204      	adds	r2, #4

0800247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800247c:	d3fb      	bcc.n	8002476 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800247e:	f7ff fd2d 	bl	8001edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002482:	f004 f8c9 	bl	8006618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002486:	f7ff fb21 	bl	8001acc <main>
  bx  lr    
 800248a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800248c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002494:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002498:	0800bd04 	.word	0x0800bd04
  ldr r2, =_sbss
 800249c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024a0:	200003ec 	.word	0x200003ec

080024a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC_IRQHandler>

080024a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024aa:	2003      	movs	r0, #3
 80024ac:	f000 f94c 	bl	8002748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f000 f805 	bl	80024c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b6:	f7ff fbe3 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x54>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_InitTick+0x58>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f967 	bl	80027b2 <HAL_SYSTICK_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00e      	b.n	800250c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b0f      	cmp	r3, #15
 80024f2:	d80a      	bhi.n	800250a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f4:	2200      	movs	r2, #0
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f000 f92f 	bl	800275e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_InitTick+0x5c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000000 	.word	0x20000000
 8002518:	20000008 	.word	0x20000008
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x20>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x24>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_IncTick+0x24>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000008 	.word	0x20000008
 8002544:	200003d8 	.word	0x200003d8

08002548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return uwTick;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_GetTick+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	200003d8 	.word	0x200003d8

08002560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff ffee 	bl	8002548 <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d005      	beq.n	8002586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_Delay+0x44>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002586:	bf00      	nop
 8002588:	f7ff ffde 	bl	8002548 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d8f7      	bhi.n	8002588 <HAL_Delay+0x28>
  {
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000008 	.word	0x20000008

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <__NVIC_SetPriorityGrouping+0x40>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <__NVIC_SetPriorityGrouping+0x40>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00
 80025ec:	05fa0000 	.word	0x05fa0000

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db0b      	blt.n	8002636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4907      	ldr	r1, [pc, #28]	; (8002644 <__NVIC_EnableIRQ+0x38>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2001      	movs	r0, #1
 800262e:	fa00 f202 	lsl.w	r2, r0, r2
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db0a      	blt.n	8002672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	490c      	ldr	r1, [pc, #48]	; (8002694 <__NVIC_SetPriority+0x4c>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002670:	e00a      	b.n	8002688 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <__NVIC_SetPriority+0x50>)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3b04      	subs	r3, #4
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	440b      	add	r3, r1
 8002686:	761a      	strb	r2, [r3, #24]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000e100 	.word	0xe000e100
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f1c3 0307 	rsb	r3, r3, #7
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	bf28      	it	cs
 80026ba:	2304      	movcs	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d902      	bls.n	80026cc <NVIC_EncodePriority+0x30>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b03      	subs	r3, #3
 80026ca:	e000      	b.n	80026ce <NVIC_EncodePriority+0x32>
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	401a      	ands	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43d9      	mvns	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	4313      	orrs	r3, r2
         );
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002714:	d301      	bcc.n	800271a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002716:	2301      	movs	r3, #1
 8002718:	e00f      	b.n	800273a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <SysTick_Config+0x40>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002722:	210f      	movs	r1, #15
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f7ff ff8e 	bl	8002648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <SysTick_Config+0x40>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <SysTick_Config+0x40>)
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000e010 	.word	0xe000e010

08002748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ff29 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002770:	f7ff ff3e 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 8002774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	6978      	ldr	r0, [r7, #20]
 800277c:	f7ff ff8e 	bl	800269c <NVIC_EncodePriority>
 8002780:	4602      	mov	r2, r0
 8002782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff5d 	bl	8002648 <__NVIC_SetPriority>
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff31 	bl	800260c <__NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffa2 	bl	8002704 <SysTick_Config>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff feb6 	bl	8002548 <HAL_GetTick>
 80027dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d008      	beq.n	80027fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2280      	movs	r2, #128	; 0x80
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e052      	b.n	80028a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0216 	bic.w	r2, r2, #22
 800280a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800281a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <HAL_DMA_Abort+0x62>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0208 	bic.w	r2, r2, #8
 800283a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284c:	e013      	b.n	8002876 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800284e:	f7ff fe7b 	bl	8002548 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b05      	cmp	r3, #5
 800285a:	d90c      	bls.n	8002876 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2203      	movs	r2, #3
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e015      	b.n	80028a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e4      	bne.n	800284e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	223f      	movs	r2, #63	; 0x3f
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d004      	beq.n	80028c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e00c      	b.n	80028e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2205      	movs	r2, #5
 80028cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	e175      	b.n	8002bfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	429a      	cmp	r2, r3
 800292a:	f040 8164 	bne.w	8002bf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d005      	beq.n	8002946 <HAL_GPIO_Init+0x56>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d130      	bne.n	80029a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800297c:	2201      	movs	r2, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 0201 	and.w	r2, r3, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d017      	beq.n	80029e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d123      	bne.n	8002a38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	08da      	lsrs	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3208      	adds	r2, #8
 80029f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	220f      	movs	r2, #15
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	08da      	lsrs	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3208      	adds	r2, #8
 8002a32:	69b9      	ldr	r1, [r7, #24]
 8002a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0203 	and.w	r2, r3, #3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80be 	beq.w	8002bf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	4b66      	ldr	r3, [pc, #408]	; (8002c14 <HAL_GPIO_Init+0x324>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	4a65      	ldr	r2, [pc, #404]	; (8002c14 <HAL_GPIO_Init+0x324>)
 8002a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a84:	6453      	str	r3, [r2, #68]	; 0x44
 8002a86:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <HAL_GPIO_Init+0x324>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a92:	4a61      	ldr	r2, [pc, #388]	; (8002c18 <HAL_GPIO_Init+0x328>)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a58      	ldr	r2, [pc, #352]	; (8002c1c <HAL_GPIO_Init+0x32c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d037      	beq.n	8002b2e <HAL_GPIO_Init+0x23e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a57      	ldr	r2, [pc, #348]	; (8002c20 <HAL_GPIO_Init+0x330>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d031      	beq.n	8002b2a <HAL_GPIO_Init+0x23a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a56      	ldr	r2, [pc, #344]	; (8002c24 <HAL_GPIO_Init+0x334>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d02b      	beq.n	8002b26 <HAL_GPIO_Init+0x236>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a55      	ldr	r2, [pc, #340]	; (8002c28 <HAL_GPIO_Init+0x338>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d025      	beq.n	8002b22 <HAL_GPIO_Init+0x232>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a54      	ldr	r2, [pc, #336]	; (8002c2c <HAL_GPIO_Init+0x33c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01f      	beq.n	8002b1e <HAL_GPIO_Init+0x22e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a53      	ldr	r2, [pc, #332]	; (8002c30 <HAL_GPIO_Init+0x340>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d019      	beq.n	8002b1a <HAL_GPIO_Init+0x22a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a52      	ldr	r2, [pc, #328]	; (8002c34 <HAL_GPIO_Init+0x344>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_GPIO_Init+0x226>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a51      	ldr	r2, [pc, #324]	; (8002c38 <HAL_GPIO_Init+0x348>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00d      	beq.n	8002b12 <HAL_GPIO_Init+0x222>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a50      	ldr	r2, [pc, #320]	; (8002c3c <HAL_GPIO_Init+0x34c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <HAL_GPIO_Init+0x21e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4f      	ldr	r2, [pc, #316]	; (8002c40 <HAL_GPIO_Init+0x350>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_GPIO_Init+0x21a>
 8002b06:	2309      	movs	r3, #9
 8002b08:	e012      	b.n	8002b30 <HAL_GPIO_Init+0x240>
 8002b0a:	230a      	movs	r3, #10
 8002b0c:	e010      	b.n	8002b30 <HAL_GPIO_Init+0x240>
 8002b0e:	2308      	movs	r3, #8
 8002b10:	e00e      	b.n	8002b30 <HAL_GPIO_Init+0x240>
 8002b12:	2307      	movs	r3, #7
 8002b14:	e00c      	b.n	8002b30 <HAL_GPIO_Init+0x240>
 8002b16:	2306      	movs	r3, #6
 8002b18:	e00a      	b.n	8002b30 <HAL_GPIO_Init+0x240>
 8002b1a:	2305      	movs	r3, #5
 8002b1c:	e008      	b.n	8002b30 <HAL_GPIO_Init+0x240>
 8002b1e:	2304      	movs	r3, #4
 8002b20:	e006      	b.n	8002b30 <HAL_GPIO_Init+0x240>
 8002b22:	2303      	movs	r3, #3
 8002b24:	e004      	b.n	8002b30 <HAL_GPIO_Init+0x240>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_Init+0x240>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_GPIO_Init+0x240>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	f002 0203 	and.w	r2, r2, #3
 8002b36:	0092      	lsls	r2, r2, #2
 8002b38:	4093      	lsls	r3, r2
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b40:	4935      	ldr	r1, [pc, #212]	; (8002c18 <HAL_GPIO_Init+0x328>)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	3302      	adds	r3, #2
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_GPIO_Init+0x354>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b72:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <HAL_GPIO_Init+0x354>)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b78:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <HAL_GPIO_Init+0x354>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b9c:	4a29      	ldr	r2, [pc, #164]	; (8002c44 <HAL_GPIO_Init+0x354>)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba2:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_GPIO_Init+0x354>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bc6:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <HAL_GPIO_Init+0x354>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_GPIO_Init+0x354>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <HAL_GPIO_Init+0x354>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	f67f ae86 	bls.w	8002910 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40020000 	.word	0x40020000
 8002c20:	40020400 	.word	0x40020400
 8002c24:	40020800 	.word	0x40020800
 8002c28:	40020c00 	.word	0x40020c00
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40021400 	.word	0x40021400
 8002c34:	40021800 	.word	0x40021800
 8002c38:	40021c00 	.word	0x40021c00
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	40022400 	.word	0x40022400
 8002c44:	40013c00 	.word	0x40013c00

08002c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e001      	b.n	8002c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c88:	787b      	ldrb	r3, [r7, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c94:	e003      	b.n	8002c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	041a      	lsls	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	619a      	str	r2, [r3, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fe2a 	bl	8001924 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40013c00 	.word	0x40013c00

08002cdc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40007000 	.word	0x40007000

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e291      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8087 	beq.w	8002e2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d20:	4b96      	ldr	r3, [pc, #600]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d00c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2c:	4b93      	ldr	r3, [pc, #588]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d112      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62>
 8002d38:	4b90      	ldr	r3, [pc, #576]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d46:	4b8d      	ldr	r3, [pc, #564]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d06c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x130>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d168      	bne.n	8002e2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e26b      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x7a>
 8002d68:	4b84      	ldr	r3, [pc, #528]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a83      	ldr	r2, [pc, #524]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e02e      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x9c>
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7e      	ldr	r2, [pc, #504]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b7c      	ldr	r3, [pc, #496]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7b      	ldr	r2, [pc, #492]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01d      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002da2:	4b76      	ldr	r3, [pc, #472]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a75      	ldr	r2, [pc, #468]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b73      	ldr	r3, [pc, #460]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a72      	ldr	r2, [pc, #456]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd8>
 8002dbc:	4b6f      	ldr	r3, [pc, #444]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a6e      	ldr	r2, [pc, #440]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a6b      	ldr	r2, [pc, #428]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7ff fbb4 	bl	8002548 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7ff fbb0 	bl	8002548 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e21f      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0xe8>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7ff fba0 	bl	8002548 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7ff fb9c 	bl	8002548 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e20b      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	4b57      	ldr	r3, [pc, #348]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x110>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d069      	beq.n	8002f0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e3a:	4b50      	ldr	r3, [pc, #320]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x190>
 8002e52:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x17a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1df      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	493d      	ldr	r1, [pc, #244]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e040      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d023      	beq.n	8002edc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a38      	ldr	r2, [pc, #224]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7ff fb52 	bl	8002548 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7ff fb4e 	bl	8002548 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1bd      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eba:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4929      	ldr	r1, [pc, #164]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
 8002eda:	e018      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002edc:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a26      	ldr	r2, [pc, #152]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7ff fb2e 	bl	8002548 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7ff fb2a 	bl	8002548 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e199      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d038      	beq.n	8002f8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2e:	f7ff fb0b 	bl	8002548 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f36:	f7ff fb07 	bl	8002548 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e176      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x23a>
 8002f54:	e01a      	b.n	8002f8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5a:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7ff faf1 	bl	8002548 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7ff faed 	bl	8002548 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d903      	bls.n	8002f80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e15c      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
 8002f7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f80:	4b91      	ldr	r3, [pc, #580]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ee      	bne.n	8002f6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80a4 	beq.w	80030e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b8b      	ldr	r3, [pc, #556]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4b88      	ldr	r3, [pc, #544]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a87      	ldr	r2, [pc, #540]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b85      	ldr	r3, [pc, #532]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc2:	4b82      	ldr	r3, [pc, #520]	; (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fce:	4b7f      	ldr	r3, [pc, #508]	; (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a7e      	ldr	r2, [pc, #504]	; (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7ff fab5 	bl	8002548 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7ff fab1 	bl	8002548 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b64      	cmp	r3, #100	; 0x64
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e120      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff4:	4b75      	ldr	r3, [pc, #468]	; (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x31a>
 8003008:	4b6f      	ldr	r3, [pc, #444]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a6e      	ldr	r2, [pc, #440]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	e02d      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x33c>
 800301e:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a69      	ldr	r2, [pc, #420]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	4b67      	ldr	r3, [pc, #412]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a66      	ldr	r2, [pc, #408]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
 8003036:	e01c      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b05      	cmp	r3, #5
 800303e:	d10c      	bne.n	800305a <HAL_RCC_OscConfig+0x35e>
 8003040:	4b61      	ldr	r3, [pc, #388]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	4a60      	ldr	r2, [pc, #384]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	6713      	str	r3, [r2, #112]	; 0x70
 800304c:	4b5e      	ldr	r3, [pc, #376]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a5d      	ldr	r2, [pc, #372]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
 8003058:	e00b      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
 800305a:	4b5b      	ldr	r3, [pc, #364]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a5a      	ldr	r2, [pc, #360]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	4b58      	ldr	r3, [pc, #352]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a57      	ldr	r2, [pc, #348]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d015      	beq.n	80030a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7ff fa65 	bl	8002548 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7ff fa61 	bl	8002548 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0ce      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ee      	beq.n	8003082 <HAL_RCC_OscConfig+0x386>
 80030a4:	e014      	b.n	80030d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7ff fa4f 	bl	8002548 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7ff fa4b 	bl	8002548 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e0b8      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c4:	4b40      	ldr	r3, [pc, #256]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ee      	bne.n	80030ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d105      	bne.n	80030e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d6:	4b3c      	ldr	r3, [pc, #240]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	4a3b      	ldr	r2, [pc, #236]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80a4 	beq.w	8003234 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ec:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d06b      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d149      	bne.n	8003194 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003100:	4b31      	ldr	r3, [pc, #196]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a30      	ldr	r2, [pc, #192]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800310a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7ff fa1c 	bl	8002548 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7ff fa18 	bl	8002548 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e087      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	019b      	lsls	r3, r3, #6
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	4313      	orrs	r3, r2
 8003158:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800315a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800315e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7ff f9ec 	bl	8002548 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003174:	f7ff f9e8 	bl	8002548 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e057      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x478>
 8003192:	e04f      	b.n	8003234 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0b      	ldr	r2, [pc, #44]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800319a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7ff f9d2 	bl	8002548 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a8:	f7ff f9ce 	bl	8002548 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e03d      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4ac>
 80031c6:	e035      	b.n	8003234 <HAL_RCC_OscConfig+0x538>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_RCC_OscConfig+0x544>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d028      	beq.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d121      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d11a      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003200:	4013      	ands	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003206:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003208:	4293      	cmp	r3, r2
 800320a:	d111      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d107      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800

08003244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0d0      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 020f 	bic.w	r2, r3, #15
 8003272:	4965      	ldr	r1, [pc, #404]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a58      	ldr	r2, [pc, #352]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a52      	ldr	r2, [pc, #328]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d040      	beq.n	8003368 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d115      	bne.n	8003326 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e073      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003316:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06b      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b39      	ldr	r3, [pc, #228]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4936      	ldr	r1, [pc, #216]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003338:	f7ff f906 	bl	8002548 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7ff f902 	bl	8002548 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e053      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b2d      	ldr	r3, [pc, #180]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d210      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	4922      	ldr	r1, [pc, #136]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f821 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	; (8003410 <HAL_RCC_ClockConfig+0x1cc>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1d0>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1d4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f862 	bl	80024c0 <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00
 800340c:	40023800 	.word	0x40023800
 8003410:	0800b820 	.word	0x0800b820
 8003414:	20000000 	.word	0x20000000
 8003418:	20000004 	.word	0x20000004

0800341c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b094      	sub	sp, #80	; 0x50
 8003422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	647b      	str	r3, [r7, #68]	; 0x44
 8003428:	2300      	movs	r3, #0
 800342a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800342c:	2300      	movs	r3, #0
 800342e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003434:	4b79      	ldr	r3, [pc, #484]	; (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d00d      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x40>
 8003440:	2b08      	cmp	r3, #8
 8003442:	f200 80e1 	bhi.w	8003608 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x34>
 800344a:	2b04      	cmp	r3, #4
 800344c:	d003      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x3a>
 800344e:	e0db      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b73      	ldr	r3, [pc, #460]	; (8003620 <HAL_RCC_GetSysClockFreq+0x204>)
 8003452:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003454:	e0db      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003456:	4b73      	ldr	r3, [pc, #460]	; (8003624 <HAL_RCC_GetSysClockFreq+0x208>)
 8003458:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800345a:	e0d8      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800345c:	4b6f      	ldr	r3, [pc, #444]	; (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003464:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003466:	4b6d      	ldr	r3, [pc, #436]	; (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d063      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b6a      	ldr	r3, [pc, #424]	; (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	2200      	movs	r2, #0
 800347a:	63bb      	str	r3, [r7, #56]	; 0x38
 800347c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
 8003486:	2300      	movs	r3, #0
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
 800348a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800348e:	4622      	mov	r2, r4
 8003490:	462b      	mov	r3, r5
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	f04f 0100 	mov.w	r1, #0
 800349a:	0159      	lsls	r1, r3, #5
 800349c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a0:	0150      	lsls	r0, r2, #5
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4621      	mov	r1, r4
 80034a8:	1a51      	subs	r1, r2, r1
 80034aa:	6139      	str	r1, [r7, #16]
 80034ac:	4629      	mov	r1, r5
 80034ae:	eb63 0301 	sbc.w	r3, r3, r1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c0:	4659      	mov	r1, fp
 80034c2:	018b      	lsls	r3, r1, #6
 80034c4:	4651      	mov	r1, sl
 80034c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ca:	4651      	mov	r1, sl
 80034cc:	018a      	lsls	r2, r1, #6
 80034ce:	4651      	mov	r1, sl
 80034d0:	ebb2 0801 	subs.w	r8, r2, r1
 80034d4:	4659      	mov	r1, fp
 80034d6:	eb63 0901 	sbc.w	r9, r3, r1
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ee:	4690      	mov	r8, r2
 80034f0:	4699      	mov	r9, r3
 80034f2:	4623      	mov	r3, r4
 80034f4:	eb18 0303 	adds.w	r3, r8, r3
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	462b      	mov	r3, r5
 80034fc:	eb49 0303 	adc.w	r3, r9, r3
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800350e:	4629      	mov	r1, r5
 8003510:	024b      	lsls	r3, r1, #9
 8003512:	4621      	mov	r1, r4
 8003514:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003518:	4621      	mov	r1, r4
 800351a:	024a      	lsls	r2, r1, #9
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003522:	2200      	movs	r2, #0
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
 8003526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800352c:	f7fd fbcc 	bl	8000cc8 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4613      	mov	r3, r2
 8003536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003538:	e058      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353a:	4b38      	ldr	r3, [pc, #224]	; (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	2200      	movs	r2, #0
 8003542:	4618      	mov	r0, r3
 8003544:	4611      	mov	r1, r2
 8003546:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800354a:	623b      	str	r3, [r7, #32]
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
 8003550:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	f04f 0000 	mov.w	r0, #0
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	0159      	lsls	r1, r3, #5
 8003562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003566:	0150      	lsls	r0, r2, #5
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4641      	mov	r1, r8
 800356e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003572:	4649      	mov	r1, r9
 8003574:	eb63 0b01 	sbc.w	fp, r3, r1
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003584:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003588:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800358c:	ebb2 040a 	subs.w	r4, r2, sl
 8003590:	eb63 050b 	sbc.w	r5, r3, fp
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	00eb      	lsls	r3, r5, #3
 800359e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035a2:	00e2      	lsls	r2, r4, #3
 80035a4:	4614      	mov	r4, r2
 80035a6:	461d      	mov	r5, r3
 80035a8:	4643      	mov	r3, r8
 80035aa:	18e3      	adds	r3, r4, r3
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	464b      	mov	r3, r9
 80035b0:	eb45 0303 	adc.w	r3, r5, r3
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035c2:	4629      	mov	r1, r5
 80035c4:	028b      	lsls	r3, r1, #10
 80035c6:	4621      	mov	r1, r4
 80035c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035cc:	4621      	mov	r1, r4
 80035ce:	028a      	lsls	r2, r1, #10
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d6:	2200      	movs	r2, #0
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	61fa      	str	r2, [r7, #28]
 80035dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e0:	f7fd fb72 	bl	8000cc8 <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4613      	mov	r3, r2
 80035ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	3301      	adds	r3, #1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80035fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003606:	e002      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_RCC_GetSysClockFreq+0x204>)
 800360a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800360c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003610:	4618      	mov	r0, r3
 8003612:	3750      	adds	r7, #80	; 0x50
 8003614:	46bd      	mov	sp, r7
 8003616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800
 8003620:	00f42400 	.word	0x00f42400
 8003624:	007a1200 	.word	0x007a1200

08003628 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000000 	.word	0x20000000

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003644:	f7ff fff0 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0a9b      	lsrs	r3, r3, #10
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40023800 	.word	0x40023800
 8003664:	0800b830 	.word	0x0800b830

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800366c:	f7ff ffdc 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0b5b      	lsrs	r3, r3, #13
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	; (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	0800b830 	.word	0x0800b830

08003690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d012      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036b8:	4b69      	ldr	r3, [pc, #420]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a68      	ldr	r2, [pc, #416]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036c2:	6093      	str	r3, [r2, #8]
 80036c4:	4b66      	ldr	r3, [pc, #408]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	4964      	ldr	r1, [pc, #400]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036da:	2301      	movs	r3, #1
 80036dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d017      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ea:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	4959      	ldr	r1, [pc, #356]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003708:	d101      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003716:	2301      	movs	r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d017      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003726:	4b4e      	ldr	r3, [pc, #312]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800372c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	494a      	ldr	r1, [pc, #296]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003752:	2301      	movs	r3, #1
 8003754:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003762:	2301      	movs	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 808b 	beq.w	800388a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003774:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	4a39      	ldr	r2, [pc, #228]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377e:	6413      	str	r3, [r2, #64]	; 0x40
 8003780:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800378c:	4b35      	ldr	r3, [pc, #212]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a34      	ldr	r2, [pc, #208]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003798:	f7fe fed6 	bl	8002548 <HAL_GetTick>
 800379c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fe fed2 	bl	8002548 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e357      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037b2:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037be:	4b28      	ldr	r3, [pc, #160]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d035      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d02e      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037dc:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f2:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037fe:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003804:	4b16      	ldr	r3, [pc, #88]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d114      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe fe9a 	bl	8002548 <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fe fe96 	bl	8002548 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e319      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0ee      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003846:	d111      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003856:	400b      	ands	r3, r1
 8003858:	4901      	ldr	r1, [pc, #4]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
 800385e:	e00b      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003860:	40023800 	.word	0x40023800
 8003864:	40007000 	.word	0x40007000
 8003868:	0ffffcff 	.word	0x0ffffcff
 800386c:	4baa      	ldr	r3, [pc, #680]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4aa9      	ldr	r2, [pc, #676]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003872:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003876:	6093      	str	r3, [r2, #8]
 8003878:	4ba7      	ldr	r3, [pc, #668]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003884:	49a4      	ldr	r1, [pc, #656]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003886:	4313      	orrs	r3, r2
 8003888:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003896:	4ba0      	ldr	r3, [pc, #640]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389c:	4a9e      	ldr	r2, [pc, #632]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038a6:	4b9c      	ldr	r3, [pc, #624]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	4999      	ldr	r1, [pc, #612]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038c4:	4b94      	ldr	r3, [pc, #592]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d2:	4991      	ldr	r1, [pc, #580]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038e6:	4b8c      	ldr	r3, [pc, #560]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f4:	4988      	ldr	r1, [pc, #544]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003908:	4b83      	ldr	r3, [pc, #524]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003916:	4980      	ldr	r1, [pc, #512]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800392a:	4b7b      	ldr	r3, [pc, #492]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4977      	ldr	r1, [pc, #476]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800394c:	4b72      	ldr	r3, [pc, #456]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003952:	f023 0203 	bic.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	496f      	ldr	r1, [pc, #444]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800396e:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	f023 020c 	bic.w	r2, r3, #12
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	4966      	ldr	r1, [pc, #408]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003990:	4b61      	ldr	r3, [pc, #388]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	495e      	ldr	r1, [pc, #376]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039b2:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	4955      	ldr	r1, [pc, #340]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039d4:	4b50      	ldr	r3, [pc, #320]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	494d      	ldr	r1, [pc, #308]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039f6:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	4944      	ldr	r1, [pc, #272]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a18:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a26:	493c      	ldr	r1, [pc, #240]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	4933      	ldr	r1, [pc, #204]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a5c:	4b2e      	ldr	r3, [pc, #184]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6a:	492b      	ldr	r1, [pc, #172]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d011      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8c:	4922      	ldr	r1, [pc, #136]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003acc:	4912      	ldr	r1, [pc, #72]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af0:	4909      	ldr	r1, [pc, #36]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d006      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80d9 	beq.w	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a01      	ldr	r2, [pc, #4]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b16:	e001      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1e:	f7fe fd13 	bl	8002548 <HAL_GetTick>
 8003b22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b26:	f7fe fd0f 	bl	8002548 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b64      	cmp	r3, #100	; 0x64
 8003b32:	d901      	bls.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e194      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b38:	4b6c      	ldr	r3, [pc, #432]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d021      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d11d      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b58:	4b64      	ldr	r3, [pc, #400]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	0c1b      	lsrs	r3, r3, #16
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b66:	4b61      	ldr	r3, [pc, #388]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6c:	0e1b      	lsrs	r3, r3, #24
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	019a      	lsls	r2, r3, #6
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	041b      	lsls	r3, r3, #16
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	061b      	lsls	r3, r3, #24
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	071b      	lsls	r3, r3, #28
 8003b8c:	4957      	ldr	r1, [pc, #348]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02e      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbe:	d129      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bc0:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc6:	0c1b      	lsrs	r3, r3, #16
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bce:	4b47      	ldr	r3, [pc, #284]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd4:	0f1b      	lsrs	r3, r3, #28
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	019a      	lsls	r2, r3, #6
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	041b      	lsls	r3, r3, #16
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	071b      	lsls	r3, r3, #28
 8003bf4:	493d      	ldr	r1, [pc, #244]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c02:	f023 021f 	bic.w	r2, r3, #31
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	4937      	ldr	r1, [pc, #220]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01d      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c26:	0e1b      	lsrs	r3, r3, #24
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c2e:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c34:	0f1b      	lsrs	r3, r3, #28
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	019a      	lsls	r2, r3, #6
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	071b      	lsls	r3, r3, #28
 8003c54:	4925      	ldr	r1, [pc, #148]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d011      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	019a      	lsls	r2, r3, #6
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	071b      	lsls	r3, r3, #28
 8003c84:	4919      	ldr	r1, [pc, #100]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c8c:	4b17      	ldr	r3, [pc, #92]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a16      	ldr	r2, [pc, #88]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c98:	f7fe fc56 	bl	8002548 <HAL_GetTick>
 8003c9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ca0:	f7fe fc52 	bl	8002548 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0d7      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 80cd 	bne.w	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a08      	ldr	r2, [pc, #32]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd2:	f7fe fc39 	bl	8002548 <HAL_GetTick>
 8003cd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cda:	f7fe fc35 	bl	8002548 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b64      	cmp	r3, #100	; 0x64
 8003ce6:	d903      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e0ba      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003cec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cf0:	4b5e      	ldr	r3, [pc, #376]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cfc:	d0ed      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d02e      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d12a      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d26:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d34:	4b4d      	ldr	r3, [pc, #308]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	0f1b      	lsrs	r3, r3, #28
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	019a      	lsls	r2, r3, #6
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	431a      	orrs	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	071b      	lsls	r3, r3, #28
 8003d5a:	4944      	ldr	r1, [pc, #272]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d62:	4b42      	ldr	r3, [pc, #264]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	3b01      	subs	r3, #1
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	493d      	ldr	r1, [pc, #244]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d022      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d90:	d11d      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d92:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	0e1b      	lsrs	r3, r3, #24
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003da0:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	0f1b      	lsrs	r3, r3, #28
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	019a      	lsls	r2, r3, #6
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	061b      	lsls	r3, r3, #24
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	071b      	lsls	r3, r3, #28
 8003dc6:	4929      	ldr	r1, [pc, #164]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d028      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dda:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	0e1b      	lsrs	r3, r3, #24
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003de8:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	0c1b      	lsrs	r3, r3, #16
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	019a      	lsls	r2, r3, #6
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	431a      	orrs	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	071b      	lsls	r3, r3, #28
 8003e0e:	4917      	ldr	r1, [pc, #92]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e16:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4911      	ldr	r1, [pc, #68]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a0e      	ldr	r2, [pc, #56]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e38:	f7fe fb86 	bl	8002548 <HAL_GetTick>
 8003e3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e40:	f7fe fb82 	bl	8002548 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	; 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e007      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e5e:	d1ef      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800

08003e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e049      	b.n	8003f16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fe f9a2 	bl	80021e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f000 fc06 	bl	80046c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d001      	beq.n	8003f38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e04c      	b.n	8003fd2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a26      	ldr	r2, [pc, #152]	; (8003fe0 <HAL_TIM_Base_Start+0xc0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d022      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f52:	d01d      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a22      	ldr	r2, [pc, #136]	; (8003fe4 <HAL_TIM_Base_Start+0xc4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d018      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a21      	ldr	r2, [pc, #132]	; (8003fe8 <HAL_TIM_Base_Start+0xc8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1f      	ldr	r2, [pc, #124]	; (8003fec <HAL_TIM_Base_Start+0xcc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <HAL_TIM_Base_Start+0xd0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <HAL_TIM_Base_Start+0xd4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_TIM_Base_Start+0x70>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <HAL_TIM_Base_Start+0xd8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d115      	bne.n	8003fbc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <HAL_TIM_Base_Start+0xdc>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d015      	beq.n	8003fce <HAL_TIM_Base_Start+0xae>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d011      	beq.n	8003fce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fba:	e008      	b.n	8003fce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e000      	b.n	8003fd0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800
 8003fec:	40000c00 	.word	0x40000c00
 8003ff0:	40010400 	.word	0x40010400
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40001800 	.word	0x40001800
 8003ffc:	00010007 	.word	0x00010007

08004000 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10f      	bne.n	8004038 <HAL_TIM_Base_Stop+0x38>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	f240 4344 	movw	r3, #1092	; 0x444
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_TIM_Base_Stop+0x38>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e049      	b.n	80040f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f841 	bl	80040fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f000 fb17 	bl	80046c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_TIM_PWM_Start+0x24>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e03c      	b.n	80041ae <HAL_TIM_PWM_Start+0x9e>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b04      	cmp	r3, #4
 8004138:	d109      	bne.n	800414e <HAL_TIM_PWM_Start+0x3e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e02f      	b.n	80041ae <HAL_TIM_PWM_Start+0x9e>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d109      	bne.n	8004168 <HAL_TIM_PWM_Start+0x58>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e022      	b.n	80041ae <HAL_TIM_PWM_Start+0x9e>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b0c      	cmp	r3, #12
 800416c:	d109      	bne.n	8004182 <HAL_TIM_PWM_Start+0x72>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e015      	b.n	80041ae <HAL_TIM_PWM_Start+0x9e>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b10      	cmp	r3, #16
 8004186:	d109      	bne.n	800419c <HAL_TIM_PWM_Start+0x8c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	bf14      	ite	ne
 8004194:	2301      	movne	r3, #1
 8004196:	2300      	moveq	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	e008      	b.n	80041ae <HAL_TIM_PWM_Start+0x9e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e092      	b.n	80042dc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Start+0xb6>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c4:	e023      	b.n	800420e <HAL_TIM_PWM_Start+0xfe>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_PWM_Start+0xc6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d4:	e01b      	b.n	800420e <HAL_TIM_PWM_Start+0xfe>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_PWM_Start+0xd6>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e4:	e013      	b.n	800420e <HAL_TIM_PWM_Start+0xfe>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_PWM_Start+0xe6>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041f4:	e00b      	b.n	800420e <HAL_TIM_PWM_Start+0xfe>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_PWM_Start+0xf6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004204:	e003      	b.n	800420e <HAL_TIM_PWM_Start+0xfe>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2201      	movs	r2, #1
 8004214:	6839      	ldr	r1, [r7, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fdea 	bl	8004df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a30      	ldr	r2, [pc, #192]	; (80042e4 <HAL_TIM_PWM_Start+0x1d4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_TIM_PWM_Start+0x120>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2f      	ldr	r2, [pc, #188]	; (80042e8 <HAL_TIM_PWM_Start+0x1d8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_TIM_PWM_Start+0x124>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_TIM_PWM_Start+0x126>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a25      	ldr	r2, [pc, #148]	; (80042e4 <HAL_TIM_PWM_Start+0x1d4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d022      	beq.n	800429a <HAL_TIM_PWM_Start+0x18a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d01d      	beq.n	800429a <HAL_TIM_PWM_Start+0x18a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a22      	ldr	r2, [pc, #136]	; (80042ec <HAL_TIM_PWM_Start+0x1dc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d018      	beq.n	800429a <HAL_TIM_PWM_Start+0x18a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <HAL_TIM_PWM_Start+0x1e0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_TIM_PWM_Start+0x18a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1f      	ldr	r2, [pc, #124]	; (80042f4 <HAL_TIM_PWM_Start+0x1e4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00e      	beq.n	800429a <HAL_TIM_PWM_Start+0x18a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <HAL_TIM_PWM_Start+0x1d8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_TIM_PWM_Start+0x18a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <HAL_TIM_PWM_Start+0x1e8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_TIM_PWM_Start+0x18a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a19      	ldr	r2, [pc, #100]	; (80042fc <HAL_TIM_PWM_Start+0x1ec>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d115      	bne.n	80042c6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <HAL_TIM_PWM_Start+0x1f0>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b06      	cmp	r3, #6
 80042aa:	d015      	beq.n	80042d8 <HAL_TIM_PWM_Start+0x1c8>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b2:	d011      	beq.n	80042d8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c4:	e008      	b.n	80042d8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0201 	orr.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e000      	b.n	80042da <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40010400 	.word	0x40010400
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800
 80042f4:	40000c00 	.word	0x40000c00
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40001800 	.word	0x40001800
 8004300:	00010007 	.word	0x00010007

08004304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800431e:	2302      	movs	r3, #2
 8004320:	e0ff      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b14      	cmp	r3, #20
 800432e:	f200 80f0 	bhi.w	8004512 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	0800438d 	.word	0x0800438d
 800433c:	08004513 	.word	0x08004513
 8004340:	08004513 	.word	0x08004513
 8004344:	08004513 	.word	0x08004513
 8004348:	080043cd 	.word	0x080043cd
 800434c:	08004513 	.word	0x08004513
 8004350:	08004513 	.word	0x08004513
 8004354:	08004513 	.word	0x08004513
 8004358:	0800440f 	.word	0x0800440f
 800435c:	08004513 	.word	0x08004513
 8004360:	08004513 	.word	0x08004513
 8004364:	08004513 	.word	0x08004513
 8004368:	0800444f 	.word	0x0800444f
 800436c:	08004513 	.word	0x08004513
 8004370:	08004513 	.word	0x08004513
 8004374:	08004513 	.word	0x08004513
 8004378:	08004491 	.word	0x08004491
 800437c:	08004513 	.word	0x08004513
 8004380:	08004513 	.word	0x08004513
 8004384:	08004513 	.word	0x08004513
 8004388:	080044d1 	.word	0x080044d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fa34 	bl	8004800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0208 	orr.w	r2, r2, #8
 80043a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0204 	bic.w	r2, r2, #4
 80043b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6999      	ldr	r1, [r3, #24]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	619a      	str	r2, [r3, #24]
      break;
 80043ca:	e0a5      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fa86 	bl	80048e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6999      	ldr	r1, [r3, #24]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	021a      	lsls	r2, r3, #8
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	619a      	str	r2, [r3, #24]
      break;
 800440c:	e084      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fadd 	bl	80049d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0208 	orr.w	r2, r2, #8
 8004428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0204 	bic.w	r2, r2, #4
 8004438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69d9      	ldr	r1, [r3, #28]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	61da      	str	r2, [r3, #28]
      break;
 800444c:	e064      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fb33 	bl	8004ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69d9      	ldr	r1, [r3, #28]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	021a      	lsls	r2, r3, #8
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	61da      	str	r2, [r3, #28]
      break;
 800448e:	e043      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fb6a 	bl	8004b70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0208 	orr.w	r2, r2, #8
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0204 	bic.w	r2, r2, #4
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044ce:	e023      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fb9c 	bl	8004c14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	021a      	lsls	r2, r3, #8
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004510:	e002      	b.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	75fb      	strb	r3, [r7, #23]
      break;
 8004516:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop

0800452c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_ConfigClockSource+0x1c>
 8004544:	2302      	movs	r3, #2
 8004546:	e0b4      	b.n	80046b2 <HAL_TIM_ConfigClockSource+0x186>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	4b56      	ldr	r3, [pc, #344]	; (80046bc <HAL_TIM_ConfigClockSource+0x190>)
 8004564:	4013      	ands	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800456e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004580:	d03e      	beq.n	8004600 <HAL_TIM_ConfigClockSource+0xd4>
 8004582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004586:	f200 8087 	bhi.w	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458e:	f000 8086 	beq.w	800469e <HAL_TIM_ConfigClockSource+0x172>
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004596:	d87f      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b70      	cmp	r3, #112	; 0x70
 800459a:	d01a      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0xa6>
 800459c:	2b70      	cmp	r3, #112	; 0x70
 800459e:	d87b      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b60      	cmp	r3, #96	; 0x60
 80045a2:	d050      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x11a>
 80045a4:	2b60      	cmp	r3, #96	; 0x60
 80045a6:	d877      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b50      	cmp	r3, #80	; 0x50
 80045aa:	d03c      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0xfa>
 80045ac:	2b50      	cmp	r3, #80	; 0x50
 80045ae:	d873      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d058      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x13a>
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d86f      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b30      	cmp	r3, #48	; 0x30
 80045ba:	d064      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	2b30      	cmp	r3, #48	; 0x30
 80045be:	d86b      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d060      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d867      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d05c      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d05a      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	e062      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6899      	ldr	r1, [r3, #8]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f000 fbe5 	bl	8004db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	609a      	str	r2, [r3, #8]
      break;
 80045fe:	e04f      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	6899      	ldr	r1, [r3, #8]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f000 fbce 	bl	8004db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004622:	609a      	str	r2, [r3, #8]
      break;
 8004624:	e03c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	461a      	mov	r2, r3
 8004634:	f000 fb42 	bl	8004cbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2150      	movs	r1, #80	; 0x50
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fb9b 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 8004644:	e02c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	461a      	mov	r2, r3
 8004654:	f000 fb61 	bl	8004d1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2160      	movs	r1, #96	; 0x60
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fb8b 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 8004664:	e01c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6859      	ldr	r1, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	461a      	mov	r2, r3
 8004674:	f000 fb22 	bl	8004cbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2140      	movs	r1, #64	; 0x40
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fb7b 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 8004684:	e00c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f000 fb72 	bl	8004d7a <TIM_ITRx_SetConfig>
      break;
 8004696:	e003      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      break;
 800469c:	e000      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800469e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	fffeff88 	.word	0xfffeff88

080046c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a40      	ldr	r2, [pc, #256]	; (80047d4 <TIM_Base_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d013      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d00f      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a3d      	ldr	r2, [pc, #244]	; (80047d8 <TIM_Base_SetConfig+0x118>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00b      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a3c      	ldr	r2, [pc, #240]	; (80047dc <TIM_Base_SetConfig+0x11c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d007      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a3b      	ldr	r2, [pc, #236]	; (80047e0 <TIM_Base_SetConfig+0x120>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a3a      	ldr	r2, [pc, #232]	; (80047e4 <TIM_Base_SetConfig+0x124>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d108      	bne.n	8004712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2f      	ldr	r2, [pc, #188]	; (80047d4 <TIM_Base_SetConfig+0x114>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d02b      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d027      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <TIM_Base_SetConfig+0x118>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d023      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2b      	ldr	r2, [pc, #172]	; (80047dc <TIM_Base_SetConfig+0x11c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01f      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <TIM_Base_SetConfig+0x120>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01b      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a29      	ldr	r2, [pc, #164]	; (80047e4 <TIM_Base_SetConfig+0x124>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d017      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a28      	ldr	r2, [pc, #160]	; (80047e8 <TIM_Base_SetConfig+0x128>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d013      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a27      	ldr	r2, [pc, #156]	; (80047ec <TIM_Base_SetConfig+0x12c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00f      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <TIM_Base_SetConfig+0x130>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00b      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <TIM_Base_SetConfig+0x134>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d007      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a24      	ldr	r2, [pc, #144]	; (80047f8 <TIM_Base_SetConfig+0x138>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d003      	beq.n	8004772 <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <TIM_Base_SetConfig+0x13c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d108      	bne.n	8004784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <TIM_Base_SetConfig+0x114>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_Base_SetConfig+0xf8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a0c      	ldr	r2, [pc, #48]	; (80047e4 <TIM_Base_SetConfig+0x124>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d103      	bne.n	80047c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	615a      	str	r2, [r3, #20]
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40010400 	.word	0x40010400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800
 80047f4:	40001800 	.word	0x40001800
 80047f8:	40001c00 	.word	0x40001c00
 80047fc:	40002000 	.word	0x40002000

08004800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4b2b      	ldr	r3, [pc, #172]	; (80048d8 <TIM_OC1_SetConfig+0xd8>)
 800482c:	4013      	ands	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0302 	bic.w	r3, r3, #2
 8004848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a21      	ldr	r2, [pc, #132]	; (80048dc <TIM_OC1_SetConfig+0xdc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_OC1_SetConfig+0x64>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <TIM_OC1_SetConfig+0xe0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d10c      	bne.n	800487e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0308 	bic.w	r3, r3, #8
 800486a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 0304 	bic.w	r3, r3, #4
 800487c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a16      	ldr	r2, [pc, #88]	; (80048dc <TIM_OC1_SetConfig+0xdc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_OC1_SetConfig+0x8e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <TIM_OC1_SetConfig+0xe0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d111      	bne.n	80048b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800489c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	621a      	str	r2, [r3, #32]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	fffeff8f 	.word	0xfffeff8f
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40010400 	.word	0x40010400

080048e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f023 0210 	bic.w	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4b2e      	ldr	r3, [pc, #184]	; (80049c8 <TIM_OC2_SetConfig+0xe4>)
 8004910:	4013      	ands	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0320 	bic.w	r3, r3, #32
 800492e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a23      	ldr	r2, [pc, #140]	; (80049cc <TIM_OC2_SetConfig+0xe8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_OC2_SetConfig+0x68>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <TIM_OC2_SetConfig+0xec>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d10d      	bne.n	8004968 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004966:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a18      	ldr	r2, [pc, #96]	; (80049cc <TIM_OC2_SetConfig+0xe8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_OC2_SetConfig+0x94>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <TIM_OC2_SetConfig+0xec>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d113      	bne.n	80049a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800497e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	feff8fff 	.word	0xfeff8fff
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40010400 	.word	0x40010400

080049d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4b2d      	ldr	r3, [pc, #180]	; (8004ab4 <TIM_OC3_SetConfig+0xe0>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a22      	ldr	r2, [pc, #136]	; (8004ab8 <TIM_OC3_SetConfig+0xe4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_OC3_SetConfig+0x66>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a21      	ldr	r2, [pc, #132]	; (8004abc <TIM_OC3_SetConfig+0xe8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d10d      	bne.n	8004a56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <TIM_OC3_SetConfig+0xe4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <TIM_OC3_SetConfig+0x92>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a16      	ldr	r2, [pc, #88]	; (8004abc <TIM_OC3_SetConfig+0xe8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d113      	bne.n	8004a8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	fffeff8f 	.word	0xfffeff8f
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40010400 	.word	0x40010400

08004ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <TIM_OC4_SetConfig+0xa4>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	031b      	lsls	r3, r3, #12
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <TIM_OC4_SetConfig+0xa8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_OC4_SetConfig+0x68>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a12      	ldr	r2, [pc, #72]	; (8004b6c <TIM_OC4_SetConfig+0xac>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d109      	bne.n	8004b3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	019b      	lsls	r3, r3, #6
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	feff8fff 	.word	0xfeff8fff
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40010400 	.word	0x40010400

08004b70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <TIM_OC5_SetConfig+0x98>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <TIM_OC5_SetConfig+0x9c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_OC5_SetConfig+0x5e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a11      	ldr	r2, [pc, #68]	; (8004c10 <TIM_OC5_SetConfig+0xa0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d109      	bne.n	8004be2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	621a      	str	r2, [r3, #32]
}
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	fffeff8f 	.word	0xfffeff8f
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40010400 	.word	0x40010400

08004c14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4b1c      	ldr	r3, [pc, #112]	; (8004cb0 <TIM_OC6_SetConfig+0x9c>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	051b      	lsls	r3, r3, #20
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <TIM_OC6_SetConfig+0xa0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_OC6_SetConfig+0x60>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a12      	ldr	r2, [pc, #72]	; (8004cb8 <TIM_OC6_SetConfig+0xa4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d109      	bne.n	8004c88 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	029b      	lsls	r3, r3, #10
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	feff8fff 	.word	0xfeff8fff
 8004cb4:	40010000 	.word	0x40010000
 8004cb8:	40010400 	.word	0x40010400

08004cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f023 0201 	bic.w	r2, r3, #1
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f023 030a 	bic.w	r3, r3, #10
 8004cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b087      	sub	sp, #28
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f023 0210 	bic.w	r2, r3, #16
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	031b      	lsls	r3, r3, #12
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f043 0307 	orr.w	r3, r3, #7
 8004d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	609a      	str	r2, [r3, #8]
}
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	021a      	lsls	r2, r3, #8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	609a      	str	r2, [r3, #8]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f003 031f 	and.w	r3, r3, #31
 8004e02:	2201      	movs	r2, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a1a      	ldr	r2, [r3, #32]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	401a      	ands	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e06d      	b.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a20      	ldr	r2, [pc, #128]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d022      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d01d      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d018      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a15      	ldr	r2, [pc, #84]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10c      	bne.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010400 	.word	0x40010400
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40001800 	.word	0x40001800

08004f58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e065      	b.n	8005040 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a16      	ldr	r2, [pc, #88]	; (800504c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	; (8005050 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d115      	bne.n	800502e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	051b      	lsls	r3, r3, #20
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40010000 	.word	0x40010000
 8005050:	40010400 	.word	0x40010400

08005054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e040      	b.n	80050e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fd f984 	bl	8002384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fbe6 	bl	8005864 <UART_SetConfig>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e022      	b.n	80050e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fe3e 	bl	8005d2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fec5 	bl	8005e70 <UART_CheckIdleState>
 80050e6:	4603      	mov	r3, r0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005104:	2b20      	cmp	r3, #32
 8005106:	d171      	bne.n	80051ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_UART_Transmit+0x24>
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e06a      	b.n	80051ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2221      	movs	r2, #33	; 0x21
 8005124:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005126:	f7fd fa0f 	bl	8002548 <HAL_GetTick>
 800512a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005144:	d108      	bne.n	8005158 <HAL_UART_Transmit+0x68>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	e003      	b.n	8005160 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005160:	e02c      	b.n	80051bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2200      	movs	r2, #0
 800516a:	2180      	movs	r1, #128	; 0x80
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 feb6 	bl	8005ede <UART_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e038      	b.n	80051ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005190:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	3302      	adds	r3, #2
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	e007      	b.n	80051aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	3301      	adds	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1cc      	bne.n	8005162 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	2140      	movs	r1, #64	; 0x40
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fe83 	bl	8005ede <UART_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e005      	b.n	80051ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e000      	b.n	80051ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80051ec:	2302      	movs	r3, #2
  }
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b08a      	sub	sp, #40	; 0x28
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	4613      	mov	r3, r2
 8005202:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520a:	2b20      	cmp	r3, #32
 800520c:	d132      	bne.n	8005274 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_UART_Receive_IT+0x24>
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e02b      	b.n	8005276 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	613b      	str	r3, [r7, #16]
   return(result);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	623b      	str	r3, [r7, #32]
 8005252:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	69f9      	ldr	r1, [r7, #28]
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	61bb      	str	r3, [r7, #24]
   return(result);
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e6      	bne.n	8005232 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	461a      	mov	r2, r3
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 fefe 	bl	800606c <UART_Start_Receive_IT>
 8005270:	4603      	mov	r3, r0
 8005272:	e000      	b.n	8005276 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
  }
}
 8005276:	4618      	mov	r0, r3
 8005278:	3728      	adds	r7, #40	; 0x28
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b0ba      	sub	sp, #232	; 0xe8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80052aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80052ae:	4013      	ands	r3, r2
 80052b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80052b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d115      	bne.n	80052e8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00f      	beq.n	80052e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8297 	beq.w	800580c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
      }
      return;
 80052e6:	e291      	b.n	800580c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8117 	beq.w	8005520 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005302:	4b85      	ldr	r3, [pc, #532]	; (8005518 <HAL_UART_IRQHandler+0x298>)
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 810a 	beq.w	8005520 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800530c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d011      	beq.n	800533c <HAL_UART_IRQHandler+0xbc>
 8005318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00b      	beq.n	800533c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2201      	movs	r2, #1
 800532a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005332:	f043 0201 	orr.w	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800533c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d011      	beq.n	800536c <HAL_UART_IRQHandler+0xec>
 8005348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00b      	beq.n	800536c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2202      	movs	r2, #2
 800535a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d011      	beq.n	800539c <HAL_UART_IRQHandler+0x11c>
 8005378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2204      	movs	r2, #4
 800538a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005392:	f043 0202 	orr.w	r2, r3, #2
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800539c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d017      	beq.n	80053d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00b      	beq.n	80053d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2208      	movs	r2, #8
 80053c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ce:	f043 0208 	orr.w	r2, r3, #8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d012      	beq.n	800540a <HAL_UART_IRQHandler+0x18a>
 80053e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00c      	beq.n	800540a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005400:	f043 0220 	orr.w	r2, r3, #32
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 81fd 	beq.w	8005810 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00d      	beq.n	800543e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005444:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d005      	beq.n	8005462 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800545a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04f      	beq.n	8005502 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fec8 	bl	80061f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d141      	bne.n	80054fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800548c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1d9      	bne.n	8005476 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d013      	beq.n	80054f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ce:	4a13      	ldr	r2, [pc, #76]	; (800551c <HAL_UART_IRQHandler+0x29c>)
 80054d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fd f9e7 	bl	80028aa <HAL_DMA_Abort_IT>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d017      	beq.n	8005512 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	e00f      	b.n	8005512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f9a0 	bl	8005838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f8:	e00b      	b.n	8005512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f99c 	bl	8005838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	e007      	b.n	8005512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f998 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005510:	e17e      	b.n	8005810 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005512:	bf00      	nop
    return;
 8005514:	e17c      	b.n	8005810 <HAL_UART_IRQHandler+0x590>
 8005516:	bf00      	nop
 8005518:	04000120 	.word	0x04000120
 800551c:	080062c1 	.word	0x080062c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005524:	2b01      	cmp	r3, #1
 8005526:	f040 814c 	bne.w	80057c2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8145 	beq.w	80057c2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 813e 	beq.w	80057c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2210      	movs	r2, #16
 800554c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	f040 80b6 	bne.w	80056ca <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800556a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8150 	beq.w	8005814 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800557a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800557e:	429a      	cmp	r2, r3
 8005580:	f080 8148 	bcs.w	8005814 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800558a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	f000 8086 	beq.w	80056a8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1da      	bne.n	800559c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3308      	adds	r3, #8
 80055ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3308      	adds	r3, #8
 8005606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800560a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800560e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005612:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800561c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e1      	bne.n	80055e6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3308      	adds	r3, #8
 8005628:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3308      	adds	r3, #8
 8005642:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005646:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005648:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800564c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e3      	bne.n	8005622 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005678:	f023 0310 	bic.w	r3, r3, #16
 800567c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800568a:	65bb      	str	r3, [r7, #88]	; 0x58
 800568c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e4      	bne.n	8005668 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fd f891 	bl	80027ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	b29b      	uxth	r3, r3
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f8c2 	bl	800584c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056c8:	e0a4      	b.n	8005814 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 8096 	beq.w	8005818 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80056ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8091 	beq.w	8005818 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800570a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005718:	647b      	str	r3, [r7, #68]	; 0x44
 800571a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800571e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e4      	bne.n	80056f6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3308      	adds	r3, #8
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	623b      	str	r3, [r7, #32]
   return(result);
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	f023 0301 	bic.w	r3, r3, #1
 8005742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3308      	adds	r3, #8
 800574c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005750:	633a      	str	r2, [r7, #48]	; 0x30
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e3      	bne.n	800572c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	60fb      	str	r3, [r7, #12]
   return(result);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f023 0310 	bic.w	r3, r3, #16
 800578c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	69b9      	ldr	r1, [r7, #24]
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	617b      	str	r3, [r7, #20]
   return(result);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e4      	bne.n	8005778 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057b8:	4619      	mov	r1, r3
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f846 	bl	800584c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057c0:	e02a      	b.n	8005818 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00e      	beq.n	80057ec <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01c      	beq.n	800581c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	4798      	blx	r3
    }
    return;
 80057ea:	e017      	b.n	800581c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <HAL_UART_IRQHandler+0x59e>
 80057f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00c      	beq.n	800581e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fd71 	bl	80062ec <UART_EndTransmit_IT>
    return;
 800580a:	e008      	b.n	800581e <HAL_UART_IRQHandler+0x59e>
      return;
 800580c:	bf00      	nop
 800580e:	e006      	b.n	800581e <HAL_UART_IRQHandler+0x59e>
    return;
 8005810:	bf00      	nop
 8005812:	e004      	b.n	800581e <HAL_UART_IRQHandler+0x59e>
      return;
 8005814:	bf00      	nop
 8005816:	e002      	b.n	800581e <HAL_UART_IRQHandler+0x59e>
      return;
 8005818:	bf00      	nop
 800581a:	e000      	b.n	800581e <HAL_UART_IRQHandler+0x59e>
    return;
 800581c:	bf00      	nop
  }

}
 800581e:	37e8      	adds	r7, #232	; 0xe8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4ba6      	ldr	r3, [pc, #664]	; (8005b28 <UART_SetConfig+0x2c4>)
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	6979      	ldr	r1, [r7, #20]
 8005898:	430b      	orrs	r3, r1
 800589a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a94      	ldr	r2, [pc, #592]	; (8005b2c <UART_SetConfig+0x2c8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d120      	bne.n	8005922 <UART_SetConfig+0xbe>
 80058e0:	4b93      	ldr	r3, [pc, #588]	; (8005b30 <UART_SetConfig+0x2cc>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d816      	bhi.n	800591c <UART_SetConfig+0xb8>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x90>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005905 	.word	0x08005905
 80058f8:	08005911 	.word	0x08005911
 80058fc:	0800590b 	.word	0x0800590b
 8005900:	08005917 	.word	0x08005917
 8005904:	2301      	movs	r3, #1
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e150      	b.n	8005bac <UART_SetConfig+0x348>
 800590a:	2302      	movs	r3, #2
 800590c:	77fb      	strb	r3, [r7, #31]
 800590e:	e14d      	b.n	8005bac <UART_SetConfig+0x348>
 8005910:	2304      	movs	r3, #4
 8005912:	77fb      	strb	r3, [r7, #31]
 8005914:	e14a      	b.n	8005bac <UART_SetConfig+0x348>
 8005916:	2308      	movs	r3, #8
 8005918:	77fb      	strb	r3, [r7, #31]
 800591a:	e147      	b.n	8005bac <UART_SetConfig+0x348>
 800591c:	2310      	movs	r3, #16
 800591e:	77fb      	strb	r3, [r7, #31]
 8005920:	e144      	b.n	8005bac <UART_SetConfig+0x348>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a83      	ldr	r2, [pc, #524]	; (8005b34 <UART_SetConfig+0x2d0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d132      	bne.n	8005992 <UART_SetConfig+0x12e>
 800592c:	4b80      	ldr	r3, [pc, #512]	; (8005b30 <UART_SetConfig+0x2cc>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b0c      	cmp	r3, #12
 8005938:	d828      	bhi.n	800598c <UART_SetConfig+0x128>
 800593a:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <UART_SetConfig+0xdc>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	08005975 	.word	0x08005975
 8005944:	0800598d 	.word	0x0800598d
 8005948:	0800598d 	.word	0x0800598d
 800594c:	0800598d 	.word	0x0800598d
 8005950:	08005981 	.word	0x08005981
 8005954:	0800598d 	.word	0x0800598d
 8005958:	0800598d 	.word	0x0800598d
 800595c:	0800598d 	.word	0x0800598d
 8005960:	0800597b 	.word	0x0800597b
 8005964:	0800598d 	.word	0x0800598d
 8005968:	0800598d 	.word	0x0800598d
 800596c:	0800598d 	.word	0x0800598d
 8005970:	08005987 	.word	0x08005987
 8005974:	2300      	movs	r3, #0
 8005976:	77fb      	strb	r3, [r7, #31]
 8005978:	e118      	b.n	8005bac <UART_SetConfig+0x348>
 800597a:	2302      	movs	r3, #2
 800597c:	77fb      	strb	r3, [r7, #31]
 800597e:	e115      	b.n	8005bac <UART_SetConfig+0x348>
 8005980:	2304      	movs	r3, #4
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e112      	b.n	8005bac <UART_SetConfig+0x348>
 8005986:	2308      	movs	r3, #8
 8005988:	77fb      	strb	r3, [r7, #31]
 800598a:	e10f      	b.n	8005bac <UART_SetConfig+0x348>
 800598c:	2310      	movs	r3, #16
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e10c      	b.n	8005bac <UART_SetConfig+0x348>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a68      	ldr	r2, [pc, #416]	; (8005b38 <UART_SetConfig+0x2d4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d120      	bne.n	80059de <UART_SetConfig+0x17a>
 800599c:	4b64      	ldr	r3, [pc, #400]	; (8005b30 <UART_SetConfig+0x2cc>)
 800599e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059a6:	2b30      	cmp	r3, #48	; 0x30
 80059a8:	d013      	beq.n	80059d2 <UART_SetConfig+0x16e>
 80059aa:	2b30      	cmp	r3, #48	; 0x30
 80059ac:	d814      	bhi.n	80059d8 <UART_SetConfig+0x174>
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d009      	beq.n	80059c6 <UART_SetConfig+0x162>
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d810      	bhi.n	80059d8 <UART_SetConfig+0x174>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <UART_SetConfig+0x15c>
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d006      	beq.n	80059cc <UART_SetConfig+0x168>
 80059be:	e00b      	b.n	80059d8 <UART_SetConfig+0x174>
 80059c0:	2300      	movs	r3, #0
 80059c2:	77fb      	strb	r3, [r7, #31]
 80059c4:	e0f2      	b.n	8005bac <UART_SetConfig+0x348>
 80059c6:	2302      	movs	r3, #2
 80059c8:	77fb      	strb	r3, [r7, #31]
 80059ca:	e0ef      	b.n	8005bac <UART_SetConfig+0x348>
 80059cc:	2304      	movs	r3, #4
 80059ce:	77fb      	strb	r3, [r7, #31]
 80059d0:	e0ec      	b.n	8005bac <UART_SetConfig+0x348>
 80059d2:	2308      	movs	r3, #8
 80059d4:	77fb      	strb	r3, [r7, #31]
 80059d6:	e0e9      	b.n	8005bac <UART_SetConfig+0x348>
 80059d8:	2310      	movs	r3, #16
 80059da:	77fb      	strb	r3, [r7, #31]
 80059dc:	e0e6      	b.n	8005bac <UART_SetConfig+0x348>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a56      	ldr	r2, [pc, #344]	; (8005b3c <UART_SetConfig+0x2d8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d120      	bne.n	8005a2a <UART_SetConfig+0x1c6>
 80059e8:	4b51      	ldr	r3, [pc, #324]	; (8005b30 <UART_SetConfig+0x2cc>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059f2:	2bc0      	cmp	r3, #192	; 0xc0
 80059f4:	d013      	beq.n	8005a1e <UART_SetConfig+0x1ba>
 80059f6:	2bc0      	cmp	r3, #192	; 0xc0
 80059f8:	d814      	bhi.n	8005a24 <UART_SetConfig+0x1c0>
 80059fa:	2b80      	cmp	r3, #128	; 0x80
 80059fc:	d009      	beq.n	8005a12 <UART_SetConfig+0x1ae>
 80059fe:	2b80      	cmp	r3, #128	; 0x80
 8005a00:	d810      	bhi.n	8005a24 <UART_SetConfig+0x1c0>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <UART_SetConfig+0x1a8>
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d006      	beq.n	8005a18 <UART_SetConfig+0x1b4>
 8005a0a:	e00b      	b.n	8005a24 <UART_SetConfig+0x1c0>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e0cc      	b.n	8005bac <UART_SetConfig+0x348>
 8005a12:	2302      	movs	r3, #2
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e0c9      	b.n	8005bac <UART_SetConfig+0x348>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e0c6      	b.n	8005bac <UART_SetConfig+0x348>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e0c3      	b.n	8005bac <UART_SetConfig+0x348>
 8005a24:	2310      	movs	r3, #16
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e0c0      	b.n	8005bac <UART_SetConfig+0x348>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a44      	ldr	r2, [pc, #272]	; (8005b40 <UART_SetConfig+0x2dc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d125      	bne.n	8005a80 <UART_SetConfig+0x21c>
 8005a34:	4b3e      	ldr	r3, [pc, #248]	; (8005b30 <UART_SetConfig+0x2cc>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a42:	d017      	beq.n	8005a74 <UART_SetConfig+0x210>
 8005a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a48:	d817      	bhi.n	8005a7a <UART_SetConfig+0x216>
 8005a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a4e:	d00b      	beq.n	8005a68 <UART_SetConfig+0x204>
 8005a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a54:	d811      	bhi.n	8005a7a <UART_SetConfig+0x216>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <UART_SetConfig+0x1fe>
 8005a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5e:	d006      	beq.n	8005a6e <UART_SetConfig+0x20a>
 8005a60:	e00b      	b.n	8005a7a <UART_SetConfig+0x216>
 8005a62:	2300      	movs	r3, #0
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e0a1      	b.n	8005bac <UART_SetConfig+0x348>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e09e      	b.n	8005bac <UART_SetConfig+0x348>
 8005a6e:	2304      	movs	r3, #4
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e09b      	b.n	8005bac <UART_SetConfig+0x348>
 8005a74:	2308      	movs	r3, #8
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e098      	b.n	8005bac <UART_SetConfig+0x348>
 8005a7a:	2310      	movs	r3, #16
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e095      	b.n	8005bac <UART_SetConfig+0x348>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a2f      	ldr	r2, [pc, #188]	; (8005b44 <UART_SetConfig+0x2e0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d125      	bne.n	8005ad6 <UART_SetConfig+0x272>
 8005a8a:	4b29      	ldr	r3, [pc, #164]	; (8005b30 <UART_SetConfig+0x2cc>)
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a98:	d017      	beq.n	8005aca <UART_SetConfig+0x266>
 8005a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a9e:	d817      	bhi.n	8005ad0 <UART_SetConfig+0x26c>
 8005aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa4:	d00b      	beq.n	8005abe <UART_SetConfig+0x25a>
 8005aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aaa:	d811      	bhi.n	8005ad0 <UART_SetConfig+0x26c>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <UART_SetConfig+0x254>
 8005ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab4:	d006      	beq.n	8005ac4 <UART_SetConfig+0x260>
 8005ab6:	e00b      	b.n	8005ad0 <UART_SetConfig+0x26c>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e076      	b.n	8005bac <UART_SetConfig+0x348>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	77fb      	strb	r3, [r7, #31]
 8005ac2:	e073      	b.n	8005bac <UART_SetConfig+0x348>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e070      	b.n	8005bac <UART_SetConfig+0x348>
 8005aca:	2308      	movs	r3, #8
 8005acc:	77fb      	strb	r3, [r7, #31]
 8005ace:	e06d      	b.n	8005bac <UART_SetConfig+0x348>
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e06a      	b.n	8005bac <UART_SetConfig+0x348>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1b      	ldr	r2, [pc, #108]	; (8005b48 <UART_SetConfig+0x2e4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d138      	bne.n	8005b52 <UART_SetConfig+0x2ee>
 8005ae0:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <UART_SetConfig+0x2cc>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005aea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aee:	d017      	beq.n	8005b20 <UART_SetConfig+0x2bc>
 8005af0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005af4:	d82a      	bhi.n	8005b4c <UART_SetConfig+0x2e8>
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afa:	d00b      	beq.n	8005b14 <UART_SetConfig+0x2b0>
 8005afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b00:	d824      	bhi.n	8005b4c <UART_SetConfig+0x2e8>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <UART_SetConfig+0x2aa>
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0a:	d006      	beq.n	8005b1a <UART_SetConfig+0x2b6>
 8005b0c:	e01e      	b.n	8005b4c <UART_SetConfig+0x2e8>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e04b      	b.n	8005bac <UART_SetConfig+0x348>
 8005b14:	2302      	movs	r3, #2
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e048      	b.n	8005bac <UART_SetConfig+0x348>
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	77fb      	strb	r3, [r7, #31]
 8005b1e:	e045      	b.n	8005bac <UART_SetConfig+0x348>
 8005b20:	2308      	movs	r3, #8
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e042      	b.n	8005bac <UART_SetConfig+0x348>
 8005b26:	bf00      	nop
 8005b28:	efff69f3 	.word	0xefff69f3
 8005b2c:	40011000 	.word	0x40011000
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40004400 	.word	0x40004400
 8005b38:	40004800 	.word	0x40004800
 8005b3c:	40004c00 	.word	0x40004c00
 8005b40:	40005000 	.word	0x40005000
 8005b44:	40011400 	.word	0x40011400
 8005b48:	40007800 	.word	0x40007800
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e02c      	b.n	8005bac <UART_SetConfig+0x348>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a72      	ldr	r2, [pc, #456]	; (8005d20 <UART_SetConfig+0x4bc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d125      	bne.n	8005ba8 <UART_SetConfig+0x344>
 8005b5c:	4b71      	ldr	r3, [pc, #452]	; (8005d24 <UART_SetConfig+0x4c0>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b6a:	d017      	beq.n	8005b9c <UART_SetConfig+0x338>
 8005b6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b70:	d817      	bhi.n	8005ba2 <UART_SetConfig+0x33e>
 8005b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b76:	d00b      	beq.n	8005b90 <UART_SetConfig+0x32c>
 8005b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7c:	d811      	bhi.n	8005ba2 <UART_SetConfig+0x33e>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <UART_SetConfig+0x326>
 8005b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b86:	d006      	beq.n	8005b96 <UART_SetConfig+0x332>
 8005b88:	e00b      	b.n	8005ba2 <UART_SetConfig+0x33e>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e00d      	b.n	8005bac <UART_SetConfig+0x348>
 8005b90:	2302      	movs	r3, #2
 8005b92:	77fb      	strb	r3, [r7, #31]
 8005b94:	e00a      	b.n	8005bac <UART_SetConfig+0x348>
 8005b96:	2304      	movs	r3, #4
 8005b98:	77fb      	strb	r3, [r7, #31]
 8005b9a:	e007      	b.n	8005bac <UART_SetConfig+0x348>
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	77fb      	strb	r3, [r7, #31]
 8005ba0:	e004      	b.n	8005bac <UART_SetConfig+0x348>
 8005ba2:	2310      	movs	r3, #16
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	e001      	b.n	8005bac <UART_SetConfig+0x348>
 8005ba8:	2310      	movs	r3, #16
 8005baa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb4:	d15b      	bne.n	8005c6e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005bb6:	7ffb      	ldrb	r3, [r7, #31]
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d828      	bhi.n	8005c0e <UART_SetConfig+0x3aa>
 8005bbc:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x360>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005c0f 	.word	0x08005c0f
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fd fd2a 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005bec:	61b8      	str	r0, [r7, #24]
        break;
 8005bee:	e013      	b.n	8005c18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fd fd3a 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8005bf4:	61b8      	str	r0, [r7, #24]
        break;
 8005bf6:	e00f      	b.n	8005c18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b4b      	ldr	r3, [pc, #300]	; (8005d28 <UART_SetConfig+0x4c4>)
 8005bfa:	61bb      	str	r3, [r7, #24]
        break;
 8005bfc:	e00c      	b.n	8005c18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fd fc0d 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8005c02:	61b8      	str	r0, [r7, #24]
        break;
 8005c04:	e008      	b.n	8005c18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0a:	61bb      	str	r3, [r7, #24]
        break;
 8005c0c:	e004      	b.n	8005c18 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	77bb      	strb	r3, [r7, #30]
        break;
 8005c16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d074      	beq.n	8005d08 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	005a      	lsls	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	441a      	add	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	d916      	bls.n	8005c68 <UART_SetConfig+0x404>
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c40:	d212      	bcs.n	8005c68 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f023 030f 	bic.w	r3, r3, #15
 8005c4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	89fb      	ldrh	r3, [r7, #14]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	89fa      	ldrh	r2, [r7, #14]
 8005c64:	60da      	str	r2, [r3, #12]
 8005c66:	e04f      	b.n	8005d08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	77bb      	strb	r3, [r7, #30]
 8005c6c:	e04c      	b.n	8005d08 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c6e:	7ffb      	ldrb	r3, [r7, #31]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d828      	bhi.n	8005cc6 <UART_SetConfig+0x462>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0x418>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005cb1 	.word	0x08005cb1
 8005c88:	08005cc7 	.word	0x08005cc7
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005cc7 	.word	0x08005cc7
 8005c94:	08005cc7 	.word	0x08005cc7
 8005c98:	08005cc7 	.word	0x08005cc7
 8005c9c:	08005cbf 	.word	0x08005cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f7fd fcce 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005ca4:	61b8      	str	r0, [r7, #24]
        break;
 8005ca6:	e013      	b.n	8005cd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fd fcde 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8005cac:	61b8      	str	r0, [r7, #24]
        break;
 8005cae:	e00f      	b.n	8005cd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <UART_SetConfig+0x4c4>)
 8005cb2:	61bb      	str	r3, [r7, #24]
        break;
 8005cb4:	e00c      	b.n	8005cd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb6:	f7fd fbb1 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8005cba:	61b8      	str	r0, [r7, #24]
        break;
 8005cbc:	e008      	b.n	8005cd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	61bb      	str	r3, [r7, #24]
        break;
 8005cc4:	e004      	b.n	8005cd0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	77bb      	strb	r3, [r7, #30]
        break;
 8005cce:	bf00      	nop
    }

    if (pclk != 0U)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d018      	beq.n	8005d08 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	085a      	lsrs	r2, r3, #1
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	441a      	add	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b0f      	cmp	r3, #15
 8005cee:	d909      	bls.n	8005d04 <UART_SetConfig+0x4a0>
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf6:	d205      	bcs.n	8005d04 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	e001      	b.n	8005d08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d14:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40007c00 	.word	0x40007c00
 8005d24:	40023800 	.word	0x40023800
 8005d28:	00f42400 	.word	0x00f42400

08005d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01a      	beq.n	8005e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e2a:	d10a      	bne.n	8005e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	605a      	str	r2, [r3, #4]
  }
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e80:	f7fc fb62 	bl	8002548 <HAL_GetTick>
 8005e84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d10e      	bne.n	8005eb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f81b 	bl	8005ede <UART_WaitOnFlagUntilTimeout>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e011      	b.n	8005ed6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b09c      	sub	sp, #112	; 0x70
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4613      	mov	r3, r2
 8005eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eee:	e0a7      	b.n	8006040 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	f000 80a3 	beq.w	8006040 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efa:	f7fc fb25 	bl	8002548 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d13f      	bne.n	8005f90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f24:	667b      	str	r3, [r7, #100]	; 0x64
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e6      	bne.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3308      	adds	r3, #8
 8005f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f54:	f023 0301 	bic.w	r3, r3, #1
 8005f58:	663b      	str	r3, [r7, #96]	; 0x60
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f62:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e5      	bne.n	8005f42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e068      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d050      	beq.n	8006040 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fac:	d148      	bne.n	8006040 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fb6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e6      	bne.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f023 0301 	bic.w	r3, r3, #1
 8006000:	66bb      	str	r3, [r7, #104]	; 0x68
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3308      	adds	r3, #8
 8006008:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800600a:	623a      	str	r2, [r7, #32]
 800600c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	69f9      	ldr	r1, [r7, #28]
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	61bb      	str	r3, [r7, #24]
   return(result);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e5      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e010      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4013      	ands	r3, r2
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	429a      	cmp	r2, r3
 800604e:	bf0c      	ite	eq
 8006050:	2301      	moveq	r3, #1
 8006052:	2300      	movne	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	429a      	cmp	r2, r3
 800605c:	f43f af48 	beq.w	8005ef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3770      	adds	r7, #112	; 0x70
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800606c:	b480      	push	{r7}
 800606e:	b097      	sub	sp, #92	; 0x5c
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609e:	d10e      	bne.n	80060be <UART_Start_Receive_IT+0x52>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d105      	bne.n	80060b4 <UART_Start_Receive_IT+0x48>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060b2:	e02d      	b.n	8006110 <UART_Start_Receive_IT+0xa4>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	22ff      	movs	r2, #255	; 0xff
 80060b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060bc:	e028      	b.n	8006110 <UART_Start_Receive_IT+0xa4>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10d      	bne.n	80060e2 <UART_Start_Receive_IT+0x76>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d104      	bne.n	80060d8 <UART_Start_Receive_IT+0x6c>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	22ff      	movs	r2, #255	; 0xff
 80060d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060d6:	e01b      	b.n	8006110 <UART_Start_Receive_IT+0xa4>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	227f      	movs	r2, #127	; 0x7f
 80060dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060e0:	e016      	b.n	8006110 <UART_Start_Receive_IT+0xa4>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ea:	d10d      	bne.n	8006108 <UART_Start_Receive_IT+0x9c>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d104      	bne.n	80060fe <UART_Start_Receive_IT+0x92>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	227f      	movs	r2, #127	; 0x7f
 80060f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060fc:	e008      	b.n	8006110 <UART_Start_Receive_IT+0xa4>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	223f      	movs	r2, #63	; 0x3f
 8006102:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006106:	e003      	b.n	8006110 <UART_Start_Receive_IT+0xa4>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2222      	movs	r2, #34	; 0x22
 800611c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	657b      	str	r3, [r7, #84]	; 0x54
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3308      	adds	r3, #8
 800613e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006140:	64ba      	str	r2, [r7, #72]	; 0x48
 8006142:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800614e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e5      	bne.n	8006120 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615c:	d107      	bne.n	800616e <UART_Start_Receive_IT+0x102>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a21      	ldr	r2, [pc, #132]	; (80061f0 <UART_Start_Receive_IT+0x184>)
 800616a:	669a      	str	r2, [r3, #104]	; 0x68
 800616c:	e002      	b.n	8006174 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a20      	ldr	r2, [pc, #128]	; (80061f4 <UART_Start_Receive_IT+0x188>)
 8006172:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d019      	beq.n	80061b0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006190:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
 800619c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e6      	bne.n	800617c <UART_Start_Receive_IT+0x110>
 80061ae:	e018      	b.n	80061e2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	613b      	str	r3, [r7, #16]
   return(result);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f043 0320 	orr.w	r3, r3, #32
 80061c4:	653b      	str	r3, [r7, #80]	; 0x50
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ce:	623b      	str	r3, [r7, #32]
 80061d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	61bb      	str	r3, [r7, #24]
   return(result);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e6      	bne.n	80061b0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	375c      	adds	r7, #92	; 0x5c
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	080064a7 	.word	0x080064a7
 80061f4:	08006341 	.word	0x08006341

080061f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b095      	sub	sp, #84	; 0x54
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006214:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621e:	643b      	str	r3, [r7, #64]	; 0x40
 8006220:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e6      	bne.n	8006200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3308      	adds	r3, #8
 8006238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	61fb      	str	r3, [r7, #28]
   return(result);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	64bb      	str	r3, [r7, #72]	; 0x48
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e5      	bne.n	8006232 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800626a:	2b01      	cmp	r3, #1
 800626c:	d118      	bne.n	80062a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	60bb      	str	r3, [r7, #8]
   return(result);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f023 0310 	bic.w	r3, r3, #16
 8006282:	647b      	str	r3, [r7, #68]	; 0x44
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6979      	ldr	r1, [r7, #20]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	613b      	str	r3, [r7, #16]
   return(result);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e6      	bne.n	800626e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062b4:	bf00      	nop
 80062b6:	3754      	adds	r7, #84	; 0x54
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff faaa 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	60bb      	str	r3, [r7, #8]
   return(result);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6979      	ldr	r1, [r7, #20]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	613b      	str	r3, [r7, #16]
   return(result);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e6      	bne.n	80062f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fa76 	bl	8005824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006338:	bf00      	nop
 800633a:	3720      	adds	r7, #32
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b096      	sub	sp, #88	; 0x58
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800634e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006358:	2b22      	cmp	r3, #34	; 0x22
 800635a:	f040 8098 	bne.w	800648e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006368:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800636c:	b2d9      	uxtb	r1, r3
 800636e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006372:	b2da      	uxtb	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	400a      	ands	r2, r1
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d17b      	bne.n	800649e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ba:	653b      	str	r3, [r7, #80]	; 0x50
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c4:	647b      	str	r3, [r7, #68]	; 0x44
 80063c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e6      	bne.n	80063a6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	623b      	str	r3, [r7, #32]
   return(result);
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3308      	adds	r3, #8
 80063f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063f8:	633a      	str	r2, [r7, #48]	; 0x30
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e5      	bne.n	80063d8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006424:	2b01      	cmp	r3, #1
 8006426:	d12e      	bne.n	8006486 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	60fb      	str	r3, [r7, #12]
   return(result);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0310 	bic.w	r3, r3, #16
 8006442:	64bb      	str	r3, [r7, #72]	; 0x48
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	69b9      	ldr	r1, [r7, #24]
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	617b      	str	r3, [r7, #20]
   return(result);
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e6      	bne.n	800642e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d103      	bne.n	8006476 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2210      	movs	r2, #16
 8006474:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff f9e4 	bl	800584c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006484:	e00b      	b.n	800649e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fb fafc 	bl	8001a84 <HAL_UART_RxCpltCallback>
}
 800648c:	e007      	b.n	800649e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0208 	orr.w	r2, r2, #8
 800649c:	619a      	str	r2, [r3, #24]
}
 800649e:	bf00      	nop
 80064a0:	3758      	adds	r7, #88	; 0x58
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b096      	sub	sp, #88	; 0x58
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064be:	2b22      	cmp	r3, #34	; 0x22
 80064c0:	f040 8098 	bne.w	80065f4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80064d4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80064d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064dc:	4013      	ands	r3, r2
 80064de:	b29a      	uxth	r2, r3
 80064e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e8:	1c9a      	adds	r2, r3, #2
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d17b      	bne.n	8006604 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006520:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652a:	643b      	str	r3, [r7, #64]	; 0x40
 800652c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e6      	bne.n	800650c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	61fb      	str	r3, [r7, #28]
   return(result);
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	64bb      	str	r3, [r7, #72]	; 0x48
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800655e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e5      	bne.n	800653e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800658a:	2b01      	cmp	r3, #1
 800658c:	d12e      	bne.n	80065ec <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f023 0310 	bic.w	r3, r3, #16
 80065a8:	647b      	str	r3, [r7, #68]	; 0x44
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6979      	ldr	r1, [r7, #20]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	613b      	str	r3, [r7, #16]
   return(result);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e6      	bne.n	8006594 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d103      	bne.n	80065dc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2210      	movs	r2, #16
 80065da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff f931 	bl	800584c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065ea:	e00b      	b.n	8006604 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fb fa49 	bl	8001a84 <HAL_UART_RxCpltCallback>
}
 80065f2:	e007      	b.n	8006604 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0208 	orr.w	r2, r2, #8
 8006602:	619a      	str	r2, [r3, #24]
}
 8006604:	bf00      	nop
 8006606:	3758      	adds	r7, #88	; 0x58
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <__errno>:
 800660c:	4b01      	ldr	r3, [pc, #4]	; (8006614 <__errno+0x8>)
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	2000000c 	.word	0x2000000c

08006618 <__libc_init_array>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	4d0d      	ldr	r5, [pc, #52]	; (8006650 <__libc_init_array+0x38>)
 800661c:	4c0d      	ldr	r4, [pc, #52]	; (8006654 <__libc_init_array+0x3c>)
 800661e:	1b64      	subs	r4, r4, r5
 8006620:	10a4      	asrs	r4, r4, #2
 8006622:	2600      	movs	r6, #0
 8006624:	42a6      	cmp	r6, r4
 8006626:	d109      	bne.n	800663c <__libc_init_array+0x24>
 8006628:	4d0b      	ldr	r5, [pc, #44]	; (8006658 <__libc_init_array+0x40>)
 800662a:	4c0c      	ldr	r4, [pc, #48]	; (800665c <__libc_init_array+0x44>)
 800662c:	f005 f8ca 	bl	800b7c4 <_init>
 8006630:	1b64      	subs	r4, r4, r5
 8006632:	10a4      	asrs	r4, r4, #2
 8006634:	2600      	movs	r6, #0
 8006636:	42a6      	cmp	r6, r4
 8006638:	d105      	bne.n	8006646 <__libc_init_array+0x2e>
 800663a:	bd70      	pop	{r4, r5, r6, pc}
 800663c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006640:	4798      	blx	r3
 8006642:	3601      	adds	r6, #1
 8006644:	e7ee      	b.n	8006624 <__libc_init_array+0xc>
 8006646:	f855 3b04 	ldr.w	r3, [r5], #4
 800664a:	4798      	blx	r3
 800664c:	3601      	adds	r6, #1
 800664e:	e7f2      	b.n	8006636 <__libc_init_array+0x1e>
 8006650:	0800bcfc 	.word	0x0800bcfc
 8006654:	0800bcfc 	.word	0x0800bcfc
 8006658:	0800bcfc 	.word	0x0800bcfc
 800665c:	0800bd00 	.word	0x0800bd00

08006660 <memset>:
 8006660:	4402      	add	r2, r0
 8006662:	4603      	mov	r3, r0
 8006664:	4293      	cmp	r3, r2
 8006666:	d100      	bne.n	800666a <memset+0xa>
 8006668:	4770      	bx	lr
 800666a:	f803 1b01 	strb.w	r1, [r3], #1
 800666e:	e7f9      	b.n	8006664 <memset+0x4>

08006670 <__cvt>:
 8006670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	ec55 4b10 	vmov	r4, r5, d0
 8006678:	2d00      	cmp	r5, #0
 800667a:	460e      	mov	r6, r1
 800667c:	4619      	mov	r1, r3
 800667e:	462b      	mov	r3, r5
 8006680:	bfbb      	ittet	lt
 8006682:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006686:	461d      	movlt	r5, r3
 8006688:	2300      	movge	r3, #0
 800668a:	232d      	movlt	r3, #45	; 0x2d
 800668c:	700b      	strb	r3, [r1, #0]
 800668e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006690:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006694:	4691      	mov	r9, r2
 8006696:	f023 0820 	bic.w	r8, r3, #32
 800669a:	bfbc      	itt	lt
 800669c:	4622      	movlt	r2, r4
 800669e:	4614      	movlt	r4, r2
 80066a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066a4:	d005      	beq.n	80066b2 <__cvt+0x42>
 80066a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80066aa:	d100      	bne.n	80066ae <__cvt+0x3e>
 80066ac:	3601      	adds	r6, #1
 80066ae:	2102      	movs	r1, #2
 80066b0:	e000      	b.n	80066b4 <__cvt+0x44>
 80066b2:	2103      	movs	r1, #3
 80066b4:	ab03      	add	r3, sp, #12
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	ab02      	add	r3, sp, #8
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	ec45 4b10 	vmov	d0, r4, r5
 80066c0:	4653      	mov	r3, sl
 80066c2:	4632      	mov	r2, r6
 80066c4:	f001 fe44 	bl	8008350 <_dtoa_r>
 80066c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80066cc:	4607      	mov	r7, r0
 80066ce:	d102      	bne.n	80066d6 <__cvt+0x66>
 80066d0:	f019 0f01 	tst.w	r9, #1
 80066d4:	d022      	beq.n	800671c <__cvt+0xac>
 80066d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066da:	eb07 0906 	add.w	r9, r7, r6
 80066de:	d110      	bne.n	8006702 <__cvt+0x92>
 80066e0:	783b      	ldrb	r3, [r7, #0]
 80066e2:	2b30      	cmp	r3, #48	; 0x30
 80066e4:	d10a      	bne.n	80066fc <__cvt+0x8c>
 80066e6:	2200      	movs	r2, #0
 80066e8:	2300      	movs	r3, #0
 80066ea:	4620      	mov	r0, r4
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7fa fa0b 	bl	8000b08 <__aeabi_dcmpeq>
 80066f2:	b918      	cbnz	r0, 80066fc <__cvt+0x8c>
 80066f4:	f1c6 0601 	rsb	r6, r6, #1
 80066f8:	f8ca 6000 	str.w	r6, [sl]
 80066fc:	f8da 3000 	ldr.w	r3, [sl]
 8006700:	4499      	add	r9, r3
 8006702:	2200      	movs	r2, #0
 8006704:	2300      	movs	r3, #0
 8006706:	4620      	mov	r0, r4
 8006708:	4629      	mov	r1, r5
 800670a:	f7fa f9fd 	bl	8000b08 <__aeabi_dcmpeq>
 800670e:	b108      	cbz	r0, 8006714 <__cvt+0xa4>
 8006710:	f8cd 900c 	str.w	r9, [sp, #12]
 8006714:	2230      	movs	r2, #48	; 0x30
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	454b      	cmp	r3, r9
 800671a:	d307      	bcc.n	800672c <__cvt+0xbc>
 800671c:	9b03      	ldr	r3, [sp, #12]
 800671e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006720:	1bdb      	subs	r3, r3, r7
 8006722:	4638      	mov	r0, r7
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	b004      	add	sp, #16
 8006728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672c:	1c59      	adds	r1, r3, #1
 800672e:	9103      	str	r1, [sp, #12]
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	e7f0      	b.n	8006716 <__cvt+0xa6>

08006734 <__exponent>:
 8006734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006736:	4603      	mov	r3, r0
 8006738:	2900      	cmp	r1, #0
 800673a:	bfb8      	it	lt
 800673c:	4249      	neglt	r1, r1
 800673e:	f803 2b02 	strb.w	r2, [r3], #2
 8006742:	bfb4      	ite	lt
 8006744:	222d      	movlt	r2, #45	; 0x2d
 8006746:	222b      	movge	r2, #43	; 0x2b
 8006748:	2909      	cmp	r1, #9
 800674a:	7042      	strb	r2, [r0, #1]
 800674c:	dd2a      	ble.n	80067a4 <__exponent+0x70>
 800674e:	f10d 0407 	add.w	r4, sp, #7
 8006752:	46a4      	mov	ip, r4
 8006754:	270a      	movs	r7, #10
 8006756:	46a6      	mov	lr, r4
 8006758:	460a      	mov	r2, r1
 800675a:	fb91 f6f7 	sdiv	r6, r1, r7
 800675e:	fb07 1516 	mls	r5, r7, r6, r1
 8006762:	3530      	adds	r5, #48	; 0x30
 8006764:	2a63      	cmp	r2, #99	; 0x63
 8006766:	f104 34ff 	add.w	r4, r4, #4294967295
 800676a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800676e:	4631      	mov	r1, r6
 8006770:	dcf1      	bgt.n	8006756 <__exponent+0x22>
 8006772:	3130      	adds	r1, #48	; 0x30
 8006774:	f1ae 0502 	sub.w	r5, lr, #2
 8006778:	f804 1c01 	strb.w	r1, [r4, #-1]
 800677c:	1c44      	adds	r4, r0, #1
 800677e:	4629      	mov	r1, r5
 8006780:	4561      	cmp	r1, ip
 8006782:	d30a      	bcc.n	800679a <__exponent+0x66>
 8006784:	f10d 0209 	add.w	r2, sp, #9
 8006788:	eba2 020e 	sub.w	r2, r2, lr
 800678c:	4565      	cmp	r5, ip
 800678e:	bf88      	it	hi
 8006790:	2200      	movhi	r2, #0
 8006792:	4413      	add	r3, r2
 8006794:	1a18      	subs	r0, r3, r0
 8006796:	b003      	add	sp, #12
 8006798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800679a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800679e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80067a2:	e7ed      	b.n	8006780 <__exponent+0x4c>
 80067a4:	2330      	movs	r3, #48	; 0x30
 80067a6:	3130      	adds	r1, #48	; 0x30
 80067a8:	7083      	strb	r3, [r0, #2]
 80067aa:	70c1      	strb	r1, [r0, #3]
 80067ac:	1d03      	adds	r3, r0, #4
 80067ae:	e7f1      	b.n	8006794 <__exponent+0x60>

080067b0 <_printf_float>:
 80067b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	ed2d 8b02 	vpush	{d8}
 80067b8:	b08d      	sub	sp, #52	; 0x34
 80067ba:	460c      	mov	r4, r1
 80067bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80067c0:	4616      	mov	r6, r2
 80067c2:	461f      	mov	r7, r3
 80067c4:	4605      	mov	r5, r0
 80067c6:	f002 ff21 	bl	800960c <_localeconv_r>
 80067ca:	f8d0 a000 	ldr.w	sl, [r0]
 80067ce:	4650      	mov	r0, sl
 80067d0:	f7f9 fd1e 	bl	8000210 <strlen>
 80067d4:	2300      	movs	r3, #0
 80067d6:	930a      	str	r3, [sp, #40]	; 0x28
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	9305      	str	r3, [sp, #20]
 80067dc:	f8d8 3000 	ldr.w	r3, [r8]
 80067e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80067e4:	3307      	adds	r3, #7
 80067e6:	f023 0307 	bic.w	r3, r3, #7
 80067ea:	f103 0208 	add.w	r2, r3, #8
 80067ee:	f8c8 2000 	str.w	r2, [r8]
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80067fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80067fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006802:	9307      	str	r3, [sp, #28]
 8006804:	f8cd 8018 	str.w	r8, [sp, #24]
 8006808:	ee08 0a10 	vmov	s16, r0
 800680c:	4b9f      	ldr	r3, [pc, #636]	; (8006a8c <_printf_float+0x2dc>)
 800680e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006812:	f04f 32ff 	mov.w	r2, #4294967295
 8006816:	f7fa f9a9 	bl	8000b6c <__aeabi_dcmpun>
 800681a:	bb88      	cbnz	r0, 8006880 <_printf_float+0xd0>
 800681c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006820:	4b9a      	ldr	r3, [pc, #616]	; (8006a8c <_printf_float+0x2dc>)
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	f7fa f983 	bl	8000b30 <__aeabi_dcmple>
 800682a:	bb48      	cbnz	r0, 8006880 <_printf_float+0xd0>
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7fa f972 	bl	8000b1c <__aeabi_dcmplt>
 8006838:	b110      	cbz	r0, 8006840 <_printf_float+0x90>
 800683a:	232d      	movs	r3, #45	; 0x2d
 800683c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006840:	4b93      	ldr	r3, [pc, #588]	; (8006a90 <_printf_float+0x2e0>)
 8006842:	4894      	ldr	r0, [pc, #592]	; (8006a94 <_printf_float+0x2e4>)
 8006844:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006848:	bf94      	ite	ls
 800684a:	4698      	movls	r8, r3
 800684c:	4680      	movhi	r8, r0
 800684e:	2303      	movs	r3, #3
 8006850:	6123      	str	r3, [r4, #16]
 8006852:	9b05      	ldr	r3, [sp, #20]
 8006854:	f023 0204 	bic.w	r2, r3, #4
 8006858:	6022      	str	r2, [r4, #0]
 800685a:	f04f 0900 	mov.w	r9, #0
 800685e:	9700      	str	r7, [sp, #0]
 8006860:	4633      	mov	r3, r6
 8006862:	aa0b      	add	r2, sp, #44	; 0x2c
 8006864:	4621      	mov	r1, r4
 8006866:	4628      	mov	r0, r5
 8006868:	f000 f9d8 	bl	8006c1c <_printf_common>
 800686c:	3001      	adds	r0, #1
 800686e:	f040 8090 	bne.w	8006992 <_printf_float+0x1e2>
 8006872:	f04f 30ff 	mov.w	r0, #4294967295
 8006876:	b00d      	add	sp, #52	; 0x34
 8006878:	ecbd 8b02 	vpop	{d8}
 800687c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	4640      	mov	r0, r8
 8006886:	4649      	mov	r1, r9
 8006888:	f7fa f970 	bl	8000b6c <__aeabi_dcmpun>
 800688c:	b140      	cbz	r0, 80068a0 <_printf_float+0xf0>
 800688e:	464b      	mov	r3, r9
 8006890:	2b00      	cmp	r3, #0
 8006892:	bfbc      	itt	lt
 8006894:	232d      	movlt	r3, #45	; 0x2d
 8006896:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800689a:	487f      	ldr	r0, [pc, #508]	; (8006a98 <_printf_float+0x2e8>)
 800689c:	4b7f      	ldr	r3, [pc, #508]	; (8006a9c <_printf_float+0x2ec>)
 800689e:	e7d1      	b.n	8006844 <_printf_float+0x94>
 80068a0:	6863      	ldr	r3, [r4, #4]
 80068a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80068a6:	9206      	str	r2, [sp, #24]
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	d13f      	bne.n	800692c <_printf_float+0x17c>
 80068ac:	2306      	movs	r3, #6
 80068ae:	6063      	str	r3, [r4, #4]
 80068b0:	9b05      	ldr	r3, [sp, #20]
 80068b2:	6861      	ldr	r1, [r4, #4]
 80068b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80068b8:	2300      	movs	r3, #0
 80068ba:	9303      	str	r3, [sp, #12]
 80068bc:	ab0a      	add	r3, sp, #40	; 0x28
 80068be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80068c2:	ab09      	add	r3, sp, #36	; 0x24
 80068c4:	ec49 8b10 	vmov	d0, r8, r9
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	6022      	str	r2, [r4, #0]
 80068cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068d0:	4628      	mov	r0, r5
 80068d2:	f7ff fecd 	bl	8006670 <__cvt>
 80068d6:	9b06      	ldr	r3, [sp, #24]
 80068d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068da:	2b47      	cmp	r3, #71	; 0x47
 80068dc:	4680      	mov	r8, r0
 80068de:	d108      	bne.n	80068f2 <_printf_float+0x142>
 80068e0:	1cc8      	adds	r0, r1, #3
 80068e2:	db02      	blt.n	80068ea <_printf_float+0x13a>
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	4299      	cmp	r1, r3
 80068e8:	dd41      	ble.n	800696e <_printf_float+0x1be>
 80068ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80068ee:	fa5f fb8b 	uxtb.w	fp, fp
 80068f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068f6:	d820      	bhi.n	800693a <_printf_float+0x18a>
 80068f8:	3901      	subs	r1, #1
 80068fa:	465a      	mov	r2, fp
 80068fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006900:	9109      	str	r1, [sp, #36]	; 0x24
 8006902:	f7ff ff17 	bl	8006734 <__exponent>
 8006906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006908:	1813      	adds	r3, r2, r0
 800690a:	2a01      	cmp	r2, #1
 800690c:	4681      	mov	r9, r0
 800690e:	6123      	str	r3, [r4, #16]
 8006910:	dc02      	bgt.n	8006918 <_printf_float+0x168>
 8006912:	6822      	ldr	r2, [r4, #0]
 8006914:	07d2      	lsls	r2, r2, #31
 8006916:	d501      	bpl.n	800691c <_printf_float+0x16c>
 8006918:	3301      	adds	r3, #1
 800691a:	6123      	str	r3, [r4, #16]
 800691c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006920:	2b00      	cmp	r3, #0
 8006922:	d09c      	beq.n	800685e <_printf_float+0xae>
 8006924:	232d      	movs	r3, #45	; 0x2d
 8006926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800692a:	e798      	b.n	800685e <_printf_float+0xae>
 800692c:	9a06      	ldr	r2, [sp, #24]
 800692e:	2a47      	cmp	r2, #71	; 0x47
 8006930:	d1be      	bne.n	80068b0 <_printf_float+0x100>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1bc      	bne.n	80068b0 <_printf_float+0x100>
 8006936:	2301      	movs	r3, #1
 8006938:	e7b9      	b.n	80068ae <_printf_float+0xfe>
 800693a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800693e:	d118      	bne.n	8006972 <_printf_float+0x1c2>
 8006940:	2900      	cmp	r1, #0
 8006942:	6863      	ldr	r3, [r4, #4]
 8006944:	dd0b      	ble.n	800695e <_printf_float+0x1ae>
 8006946:	6121      	str	r1, [r4, #16]
 8006948:	b913      	cbnz	r3, 8006950 <_printf_float+0x1a0>
 800694a:	6822      	ldr	r2, [r4, #0]
 800694c:	07d0      	lsls	r0, r2, #31
 800694e:	d502      	bpl.n	8006956 <_printf_float+0x1a6>
 8006950:	3301      	adds	r3, #1
 8006952:	440b      	add	r3, r1
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	65a1      	str	r1, [r4, #88]	; 0x58
 8006958:	f04f 0900 	mov.w	r9, #0
 800695c:	e7de      	b.n	800691c <_printf_float+0x16c>
 800695e:	b913      	cbnz	r3, 8006966 <_printf_float+0x1b6>
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	07d2      	lsls	r2, r2, #31
 8006964:	d501      	bpl.n	800696a <_printf_float+0x1ba>
 8006966:	3302      	adds	r3, #2
 8006968:	e7f4      	b.n	8006954 <_printf_float+0x1a4>
 800696a:	2301      	movs	r3, #1
 800696c:	e7f2      	b.n	8006954 <_printf_float+0x1a4>
 800696e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006974:	4299      	cmp	r1, r3
 8006976:	db05      	blt.n	8006984 <_printf_float+0x1d4>
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	6121      	str	r1, [r4, #16]
 800697c:	07d8      	lsls	r0, r3, #31
 800697e:	d5ea      	bpl.n	8006956 <_printf_float+0x1a6>
 8006980:	1c4b      	adds	r3, r1, #1
 8006982:	e7e7      	b.n	8006954 <_printf_float+0x1a4>
 8006984:	2900      	cmp	r1, #0
 8006986:	bfd4      	ite	le
 8006988:	f1c1 0202 	rsble	r2, r1, #2
 800698c:	2201      	movgt	r2, #1
 800698e:	4413      	add	r3, r2
 8006990:	e7e0      	b.n	8006954 <_printf_float+0x1a4>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	055a      	lsls	r2, r3, #21
 8006996:	d407      	bmi.n	80069a8 <_printf_float+0x1f8>
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	4642      	mov	r2, r8
 800699c:	4631      	mov	r1, r6
 800699e:	4628      	mov	r0, r5
 80069a0:	47b8      	blx	r7
 80069a2:	3001      	adds	r0, #1
 80069a4:	d12c      	bne.n	8006a00 <_printf_float+0x250>
 80069a6:	e764      	b.n	8006872 <_printf_float+0xc2>
 80069a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069ac:	f240 80e0 	bls.w	8006b70 <_printf_float+0x3c0>
 80069b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069b4:	2200      	movs	r2, #0
 80069b6:	2300      	movs	r3, #0
 80069b8:	f7fa f8a6 	bl	8000b08 <__aeabi_dcmpeq>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d034      	beq.n	8006a2a <_printf_float+0x27a>
 80069c0:	4a37      	ldr	r2, [pc, #220]	; (8006aa0 <_printf_float+0x2f0>)
 80069c2:	2301      	movs	r3, #1
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f af51 	beq.w	8006872 <_printf_float+0xc2>
 80069d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069d4:	429a      	cmp	r2, r3
 80069d6:	db02      	blt.n	80069de <_printf_float+0x22e>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	07d8      	lsls	r0, r3, #31
 80069dc:	d510      	bpl.n	8006a00 <_printf_float+0x250>
 80069de:	ee18 3a10 	vmov	r3, s16
 80069e2:	4652      	mov	r2, sl
 80069e4:	4631      	mov	r1, r6
 80069e6:	4628      	mov	r0, r5
 80069e8:	47b8      	blx	r7
 80069ea:	3001      	adds	r0, #1
 80069ec:	f43f af41 	beq.w	8006872 <_printf_float+0xc2>
 80069f0:	f04f 0800 	mov.w	r8, #0
 80069f4:	f104 091a 	add.w	r9, r4, #26
 80069f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fa:	3b01      	subs	r3, #1
 80069fc:	4543      	cmp	r3, r8
 80069fe:	dc09      	bgt.n	8006a14 <_printf_float+0x264>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	079b      	lsls	r3, r3, #30
 8006a04:	f100 8105 	bmi.w	8006c12 <_printf_float+0x462>
 8006a08:	68e0      	ldr	r0, [r4, #12]
 8006a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a0c:	4298      	cmp	r0, r3
 8006a0e:	bfb8      	it	lt
 8006a10:	4618      	movlt	r0, r3
 8006a12:	e730      	b.n	8006876 <_printf_float+0xc6>
 8006a14:	2301      	movs	r3, #1
 8006a16:	464a      	mov	r2, r9
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	f43f af27 	beq.w	8006872 <_printf_float+0xc2>
 8006a24:	f108 0801 	add.w	r8, r8, #1
 8006a28:	e7e6      	b.n	80069f8 <_printf_float+0x248>
 8006a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dc39      	bgt.n	8006aa4 <_printf_float+0x2f4>
 8006a30:	4a1b      	ldr	r2, [pc, #108]	; (8006aa0 <_printf_float+0x2f0>)
 8006a32:	2301      	movs	r3, #1
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f43f af19 	beq.w	8006872 <_printf_float+0xc2>
 8006a40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a44:	4313      	orrs	r3, r2
 8006a46:	d102      	bne.n	8006a4e <_printf_float+0x29e>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	07d9      	lsls	r1, r3, #31
 8006a4c:	d5d8      	bpl.n	8006a00 <_printf_float+0x250>
 8006a4e:	ee18 3a10 	vmov	r3, s16
 8006a52:	4652      	mov	r2, sl
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	f43f af09 	beq.w	8006872 <_printf_float+0xc2>
 8006a60:	f04f 0900 	mov.w	r9, #0
 8006a64:	f104 0a1a 	add.w	sl, r4, #26
 8006a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6a:	425b      	negs	r3, r3
 8006a6c:	454b      	cmp	r3, r9
 8006a6e:	dc01      	bgt.n	8006a74 <_printf_float+0x2c4>
 8006a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a72:	e792      	b.n	800699a <_printf_float+0x1ea>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4652      	mov	r2, sl
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f43f aef7 	beq.w	8006872 <_printf_float+0xc2>
 8006a84:	f109 0901 	add.w	r9, r9, #1
 8006a88:	e7ee      	b.n	8006a68 <_printf_float+0x2b8>
 8006a8a:	bf00      	nop
 8006a8c:	7fefffff 	.word	0x7fefffff
 8006a90:	0800b83c 	.word	0x0800b83c
 8006a94:	0800b840 	.word	0x0800b840
 8006a98:	0800b848 	.word	0x0800b848
 8006a9c:	0800b844 	.word	0x0800b844
 8006aa0:	0800bc41 	.word	0x0800bc41
 8006aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	bfa8      	it	ge
 8006aac:	461a      	movge	r2, r3
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	4691      	mov	r9, r2
 8006ab2:	dc37      	bgt.n	8006b24 <_printf_float+0x374>
 8006ab4:	f04f 0b00 	mov.w	fp, #0
 8006ab8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006abc:	f104 021a 	add.w	r2, r4, #26
 8006ac0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ac2:	9305      	str	r3, [sp, #20]
 8006ac4:	eba3 0309 	sub.w	r3, r3, r9
 8006ac8:	455b      	cmp	r3, fp
 8006aca:	dc33      	bgt.n	8006b34 <_printf_float+0x384>
 8006acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	db3b      	blt.n	8006b4c <_printf_float+0x39c>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	07da      	lsls	r2, r3, #31
 8006ad8:	d438      	bmi.n	8006b4c <_printf_float+0x39c>
 8006ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006adc:	9a05      	ldr	r2, [sp, #20]
 8006ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ae0:	1a9a      	subs	r2, r3, r2
 8006ae2:	eba3 0901 	sub.w	r9, r3, r1
 8006ae6:	4591      	cmp	r9, r2
 8006ae8:	bfa8      	it	ge
 8006aea:	4691      	movge	r9, r2
 8006aec:	f1b9 0f00 	cmp.w	r9, #0
 8006af0:	dc35      	bgt.n	8006b5e <_printf_float+0x3ae>
 8006af2:	f04f 0800 	mov.w	r8, #0
 8006af6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006afa:	f104 0a1a 	add.w	sl, r4, #26
 8006afe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	eba3 0309 	sub.w	r3, r3, r9
 8006b08:	4543      	cmp	r3, r8
 8006b0a:	f77f af79 	ble.w	8006a00 <_printf_float+0x250>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4652      	mov	r2, sl
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	47b8      	blx	r7
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f43f aeaa 	beq.w	8006872 <_printf_float+0xc2>
 8006b1e:	f108 0801 	add.w	r8, r8, #1
 8006b22:	e7ec      	b.n	8006afe <_printf_float+0x34e>
 8006b24:	4613      	mov	r3, r2
 8006b26:	4631      	mov	r1, r6
 8006b28:	4642      	mov	r2, r8
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	47b8      	blx	r7
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d1c0      	bne.n	8006ab4 <_printf_float+0x304>
 8006b32:	e69e      	b.n	8006872 <_printf_float+0xc2>
 8006b34:	2301      	movs	r3, #1
 8006b36:	4631      	mov	r1, r6
 8006b38:	4628      	mov	r0, r5
 8006b3a:	9205      	str	r2, [sp, #20]
 8006b3c:	47b8      	blx	r7
 8006b3e:	3001      	adds	r0, #1
 8006b40:	f43f ae97 	beq.w	8006872 <_printf_float+0xc2>
 8006b44:	9a05      	ldr	r2, [sp, #20]
 8006b46:	f10b 0b01 	add.w	fp, fp, #1
 8006b4a:	e7b9      	b.n	8006ac0 <_printf_float+0x310>
 8006b4c:	ee18 3a10 	vmov	r3, s16
 8006b50:	4652      	mov	r2, sl
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d1be      	bne.n	8006ada <_printf_float+0x32a>
 8006b5c:	e689      	b.n	8006872 <_printf_float+0xc2>
 8006b5e:	9a05      	ldr	r2, [sp, #20]
 8006b60:	464b      	mov	r3, r9
 8006b62:	4442      	add	r2, r8
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d1c1      	bne.n	8006af2 <_printf_float+0x342>
 8006b6e:	e680      	b.n	8006872 <_printf_float+0xc2>
 8006b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b72:	2a01      	cmp	r2, #1
 8006b74:	dc01      	bgt.n	8006b7a <_printf_float+0x3ca>
 8006b76:	07db      	lsls	r3, r3, #31
 8006b78:	d538      	bpl.n	8006bec <_printf_float+0x43c>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4628      	mov	r0, r5
 8006b82:	47b8      	blx	r7
 8006b84:	3001      	adds	r0, #1
 8006b86:	f43f ae74 	beq.w	8006872 <_printf_float+0xc2>
 8006b8a:	ee18 3a10 	vmov	r3, s16
 8006b8e:	4652      	mov	r2, sl
 8006b90:	4631      	mov	r1, r6
 8006b92:	4628      	mov	r0, r5
 8006b94:	47b8      	blx	r7
 8006b96:	3001      	adds	r0, #1
 8006b98:	f43f ae6b 	beq.w	8006872 <_printf_float+0xc2>
 8006b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f7f9 ffb0 	bl	8000b08 <__aeabi_dcmpeq>
 8006ba8:	b9d8      	cbnz	r0, 8006be2 <_printf_float+0x432>
 8006baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bac:	f108 0201 	add.w	r2, r8, #1
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	47b8      	blx	r7
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d10e      	bne.n	8006bda <_printf_float+0x42a>
 8006bbc:	e659      	b.n	8006872 <_printf_float+0xc2>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	47b8      	blx	r7
 8006bc8:	3001      	adds	r0, #1
 8006bca:	f43f ae52 	beq.w	8006872 <_printf_float+0xc2>
 8006bce:	f108 0801 	add.w	r8, r8, #1
 8006bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	4543      	cmp	r3, r8
 8006bd8:	dcf1      	bgt.n	8006bbe <_printf_float+0x40e>
 8006bda:	464b      	mov	r3, r9
 8006bdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006be0:	e6dc      	b.n	800699c <_printf_float+0x1ec>
 8006be2:	f04f 0800 	mov.w	r8, #0
 8006be6:	f104 0a1a 	add.w	sl, r4, #26
 8006bea:	e7f2      	b.n	8006bd2 <_printf_float+0x422>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4642      	mov	r2, r8
 8006bf0:	e7df      	b.n	8006bb2 <_printf_float+0x402>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	464a      	mov	r2, r9
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f43f ae38 	beq.w	8006872 <_printf_float+0xc2>
 8006c02:	f108 0801 	add.w	r8, r8, #1
 8006c06:	68e3      	ldr	r3, [r4, #12]
 8006c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c0a:	1a5b      	subs	r3, r3, r1
 8006c0c:	4543      	cmp	r3, r8
 8006c0e:	dcf0      	bgt.n	8006bf2 <_printf_float+0x442>
 8006c10:	e6fa      	b.n	8006a08 <_printf_float+0x258>
 8006c12:	f04f 0800 	mov.w	r8, #0
 8006c16:	f104 0919 	add.w	r9, r4, #25
 8006c1a:	e7f4      	b.n	8006c06 <_printf_float+0x456>

08006c1c <_printf_common>:
 8006c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c20:	4616      	mov	r6, r2
 8006c22:	4699      	mov	r9, r3
 8006c24:	688a      	ldr	r2, [r1, #8]
 8006c26:	690b      	ldr	r3, [r1, #16]
 8006c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	bfb8      	it	lt
 8006c30:	4613      	movlt	r3, r2
 8006c32:	6033      	str	r3, [r6, #0]
 8006c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c38:	4607      	mov	r7, r0
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	b10a      	cbz	r2, 8006c42 <_printf_common+0x26>
 8006c3e:	3301      	adds	r3, #1
 8006c40:	6033      	str	r3, [r6, #0]
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	0699      	lsls	r1, r3, #26
 8006c46:	bf42      	ittt	mi
 8006c48:	6833      	ldrmi	r3, [r6, #0]
 8006c4a:	3302      	addmi	r3, #2
 8006c4c:	6033      	strmi	r3, [r6, #0]
 8006c4e:	6825      	ldr	r5, [r4, #0]
 8006c50:	f015 0506 	ands.w	r5, r5, #6
 8006c54:	d106      	bne.n	8006c64 <_printf_common+0x48>
 8006c56:	f104 0a19 	add.w	sl, r4, #25
 8006c5a:	68e3      	ldr	r3, [r4, #12]
 8006c5c:	6832      	ldr	r2, [r6, #0]
 8006c5e:	1a9b      	subs	r3, r3, r2
 8006c60:	42ab      	cmp	r3, r5
 8006c62:	dc26      	bgt.n	8006cb2 <_printf_common+0x96>
 8006c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c68:	1e13      	subs	r3, r2, #0
 8006c6a:	6822      	ldr	r2, [r4, #0]
 8006c6c:	bf18      	it	ne
 8006c6e:	2301      	movne	r3, #1
 8006c70:	0692      	lsls	r2, r2, #26
 8006c72:	d42b      	bmi.n	8006ccc <_printf_common+0xb0>
 8006c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c78:	4649      	mov	r1, r9
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	47c0      	blx	r8
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d01e      	beq.n	8006cc0 <_printf_common+0xa4>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	68e5      	ldr	r5, [r4, #12]
 8006c86:	6832      	ldr	r2, [r6, #0]
 8006c88:	f003 0306 	and.w	r3, r3, #6
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	bf08      	it	eq
 8006c90:	1aad      	subeq	r5, r5, r2
 8006c92:	68a3      	ldr	r3, [r4, #8]
 8006c94:	6922      	ldr	r2, [r4, #16]
 8006c96:	bf0c      	ite	eq
 8006c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c9c:	2500      	movne	r5, #0
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	bfc4      	itt	gt
 8006ca2:	1a9b      	subgt	r3, r3, r2
 8006ca4:	18ed      	addgt	r5, r5, r3
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	341a      	adds	r4, #26
 8006caa:	42b5      	cmp	r5, r6
 8006cac:	d11a      	bne.n	8006ce4 <_printf_common+0xc8>
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e008      	b.n	8006cc4 <_printf_common+0xa8>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4652      	mov	r2, sl
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	4638      	mov	r0, r7
 8006cba:	47c0      	blx	r8
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d103      	bne.n	8006cc8 <_printf_common+0xac>
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc8:	3501      	adds	r5, #1
 8006cca:	e7c6      	b.n	8006c5a <_printf_common+0x3e>
 8006ccc:	18e1      	adds	r1, r4, r3
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	2030      	movs	r0, #48	; 0x30
 8006cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cd6:	4422      	add	r2, r4
 8006cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	e7c7      	b.n	8006c74 <_printf_common+0x58>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	4649      	mov	r1, r9
 8006cea:	4638      	mov	r0, r7
 8006cec:	47c0      	blx	r8
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d0e6      	beq.n	8006cc0 <_printf_common+0xa4>
 8006cf2:	3601      	adds	r6, #1
 8006cf4:	e7d9      	b.n	8006caa <_printf_common+0x8e>
	...

08006cf8 <_printf_i>:
 8006cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cfc:	7e0f      	ldrb	r7, [r1, #24]
 8006cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d00:	2f78      	cmp	r7, #120	; 0x78
 8006d02:	4691      	mov	r9, r2
 8006d04:	4680      	mov	r8, r0
 8006d06:	460c      	mov	r4, r1
 8006d08:	469a      	mov	sl, r3
 8006d0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d0e:	d807      	bhi.n	8006d20 <_printf_i+0x28>
 8006d10:	2f62      	cmp	r7, #98	; 0x62
 8006d12:	d80a      	bhi.n	8006d2a <_printf_i+0x32>
 8006d14:	2f00      	cmp	r7, #0
 8006d16:	f000 80d8 	beq.w	8006eca <_printf_i+0x1d2>
 8006d1a:	2f58      	cmp	r7, #88	; 0x58
 8006d1c:	f000 80a3 	beq.w	8006e66 <_printf_i+0x16e>
 8006d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d28:	e03a      	b.n	8006da0 <_printf_i+0xa8>
 8006d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d2e:	2b15      	cmp	r3, #21
 8006d30:	d8f6      	bhi.n	8006d20 <_printf_i+0x28>
 8006d32:	a101      	add	r1, pc, #4	; (adr r1, 8006d38 <_printf_i+0x40>)
 8006d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d38:	08006d91 	.word	0x08006d91
 8006d3c:	08006da5 	.word	0x08006da5
 8006d40:	08006d21 	.word	0x08006d21
 8006d44:	08006d21 	.word	0x08006d21
 8006d48:	08006d21 	.word	0x08006d21
 8006d4c:	08006d21 	.word	0x08006d21
 8006d50:	08006da5 	.word	0x08006da5
 8006d54:	08006d21 	.word	0x08006d21
 8006d58:	08006d21 	.word	0x08006d21
 8006d5c:	08006d21 	.word	0x08006d21
 8006d60:	08006d21 	.word	0x08006d21
 8006d64:	08006eb1 	.word	0x08006eb1
 8006d68:	08006dd5 	.word	0x08006dd5
 8006d6c:	08006e93 	.word	0x08006e93
 8006d70:	08006d21 	.word	0x08006d21
 8006d74:	08006d21 	.word	0x08006d21
 8006d78:	08006ed3 	.word	0x08006ed3
 8006d7c:	08006d21 	.word	0x08006d21
 8006d80:	08006dd5 	.word	0x08006dd5
 8006d84:	08006d21 	.word	0x08006d21
 8006d88:	08006d21 	.word	0x08006d21
 8006d8c:	08006e9b 	.word	0x08006e9b
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	1d1a      	adds	r2, r3, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	602a      	str	r2, [r5, #0]
 8006d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0a3      	b.n	8006eec <_printf_i+0x1f4>
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	6829      	ldr	r1, [r5, #0]
 8006da8:	0606      	lsls	r6, r0, #24
 8006daa:	f101 0304 	add.w	r3, r1, #4
 8006dae:	d50a      	bpl.n	8006dc6 <_printf_i+0xce>
 8006db0:	680e      	ldr	r6, [r1, #0]
 8006db2:	602b      	str	r3, [r5, #0]
 8006db4:	2e00      	cmp	r6, #0
 8006db6:	da03      	bge.n	8006dc0 <_printf_i+0xc8>
 8006db8:	232d      	movs	r3, #45	; 0x2d
 8006dba:	4276      	negs	r6, r6
 8006dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc0:	485e      	ldr	r0, [pc, #376]	; (8006f3c <_printf_i+0x244>)
 8006dc2:	230a      	movs	r3, #10
 8006dc4:	e019      	b.n	8006dfa <_printf_i+0x102>
 8006dc6:	680e      	ldr	r6, [r1, #0]
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006dce:	bf18      	it	ne
 8006dd0:	b236      	sxthne	r6, r6
 8006dd2:	e7ef      	b.n	8006db4 <_printf_i+0xbc>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	6820      	ldr	r0, [r4, #0]
 8006dd8:	1d19      	adds	r1, r3, #4
 8006dda:	6029      	str	r1, [r5, #0]
 8006ddc:	0601      	lsls	r1, r0, #24
 8006dde:	d501      	bpl.n	8006de4 <_printf_i+0xec>
 8006de0:	681e      	ldr	r6, [r3, #0]
 8006de2:	e002      	b.n	8006dea <_printf_i+0xf2>
 8006de4:	0646      	lsls	r6, r0, #25
 8006de6:	d5fb      	bpl.n	8006de0 <_printf_i+0xe8>
 8006de8:	881e      	ldrh	r6, [r3, #0]
 8006dea:	4854      	ldr	r0, [pc, #336]	; (8006f3c <_printf_i+0x244>)
 8006dec:	2f6f      	cmp	r7, #111	; 0x6f
 8006dee:	bf0c      	ite	eq
 8006df0:	2308      	moveq	r3, #8
 8006df2:	230a      	movne	r3, #10
 8006df4:	2100      	movs	r1, #0
 8006df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dfa:	6865      	ldr	r5, [r4, #4]
 8006dfc:	60a5      	str	r5, [r4, #8]
 8006dfe:	2d00      	cmp	r5, #0
 8006e00:	bfa2      	ittt	ge
 8006e02:	6821      	ldrge	r1, [r4, #0]
 8006e04:	f021 0104 	bicge.w	r1, r1, #4
 8006e08:	6021      	strge	r1, [r4, #0]
 8006e0a:	b90e      	cbnz	r6, 8006e10 <_printf_i+0x118>
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	d04d      	beq.n	8006eac <_printf_i+0x1b4>
 8006e10:	4615      	mov	r5, r2
 8006e12:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e16:	fb03 6711 	mls	r7, r3, r1, r6
 8006e1a:	5dc7      	ldrb	r7, [r0, r7]
 8006e1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e20:	4637      	mov	r7, r6
 8006e22:	42bb      	cmp	r3, r7
 8006e24:	460e      	mov	r6, r1
 8006e26:	d9f4      	bls.n	8006e12 <_printf_i+0x11a>
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d10b      	bne.n	8006e44 <_printf_i+0x14c>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	07de      	lsls	r6, r3, #31
 8006e30:	d508      	bpl.n	8006e44 <_printf_i+0x14c>
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	6861      	ldr	r1, [r4, #4]
 8006e36:	4299      	cmp	r1, r3
 8006e38:	bfde      	ittt	le
 8006e3a:	2330      	movle	r3, #48	; 0x30
 8006e3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e44:	1b52      	subs	r2, r2, r5
 8006e46:	6122      	str	r2, [r4, #16]
 8006e48:	f8cd a000 	str.w	sl, [sp]
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	aa03      	add	r2, sp, #12
 8006e50:	4621      	mov	r1, r4
 8006e52:	4640      	mov	r0, r8
 8006e54:	f7ff fee2 	bl	8006c1c <_printf_common>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d14c      	bne.n	8006ef6 <_printf_i+0x1fe>
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	b004      	add	sp, #16
 8006e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e66:	4835      	ldr	r0, [pc, #212]	; (8006f3c <_printf_i+0x244>)
 8006e68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e6c:	6829      	ldr	r1, [r5, #0]
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e74:	6029      	str	r1, [r5, #0]
 8006e76:	061d      	lsls	r5, r3, #24
 8006e78:	d514      	bpl.n	8006ea4 <_printf_i+0x1ac>
 8006e7a:	07df      	lsls	r7, r3, #31
 8006e7c:	bf44      	itt	mi
 8006e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e82:	6023      	strmi	r3, [r4, #0]
 8006e84:	b91e      	cbnz	r6, 8006e8e <_printf_i+0x196>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	f023 0320 	bic.w	r3, r3, #32
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	2310      	movs	r3, #16
 8006e90:	e7b0      	b.n	8006df4 <_printf_i+0xfc>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	f043 0320 	orr.w	r3, r3, #32
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	2378      	movs	r3, #120	; 0x78
 8006e9c:	4828      	ldr	r0, [pc, #160]	; (8006f40 <_printf_i+0x248>)
 8006e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ea2:	e7e3      	b.n	8006e6c <_printf_i+0x174>
 8006ea4:	0659      	lsls	r1, r3, #25
 8006ea6:	bf48      	it	mi
 8006ea8:	b2b6      	uxthmi	r6, r6
 8006eaa:	e7e6      	b.n	8006e7a <_printf_i+0x182>
 8006eac:	4615      	mov	r5, r2
 8006eae:	e7bb      	b.n	8006e28 <_printf_i+0x130>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	6826      	ldr	r6, [r4, #0]
 8006eb4:	6961      	ldr	r1, [r4, #20]
 8006eb6:	1d18      	adds	r0, r3, #4
 8006eb8:	6028      	str	r0, [r5, #0]
 8006eba:	0635      	lsls	r5, r6, #24
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	d501      	bpl.n	8006ec4 <_printf_i+0x1cc>
 8006ec0:	6019      	str	r1, [r3, #0]
 8006ec2:	e002      	b.n	8006eca <_printf_i+0x1d2>
 8006ec4:	0670      	lsls	r0, r6, #25
 8006ec6:	d5fb      	bpl.n	8006ec0 <_printf_i+0x1c8>
 8006ec8:	8019      	strh	r1, [r3, #0]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6123      	str	r3, [r4, #16]
 8006ece:	4615      	mov	r5, r2
 8006ed0:	e7ba      	b.n	8006e48 <_printf_i+0x150>
 8006ed2:	682b      	ldr	r3, [r5, #0]
 8006ed4:	1d1a      	adds	r2, r3, #4
 8006ed6:	602a      	str	r2, [r5, #0]
 8006ed8:	681d      	ldr	r5, [r3, #0]
 8006eda:	6862      	ldr	r2, [r4, #4]
 8006edc:	2100      	movs	r1, #0
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f7f9 f99e 	bl	8000220 <memchr>
 8006ee4:	b108      	cbz	r0, 8006eea <_printf_i+0x1f2>
 8006ee6:	1b40      	subs	r0, r0, r5
 8006ee8:	6060      	str	r0, [r4, #4]
 8006eea:	6863      	ldr	r3, [r4, #4]
 8006eec:	6123      	str	r3, [r4, #16]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ef4:	e7a8      	b.n	8006e48 <_printf_i+0x150>
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	462a      	mov	r2, r5
 8006efa:	4649      	mov	r1, r9
 8006efc:	4640      	mov	r0, r8
 8006efe:	47d0      	blx	sl
 8006f00:	3001      	adds	r0, #1
 8006f02:	d0ab      	beq.n	8006e5c <_printf_i+0x164>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	079b      	lsls	r3, r3, #30
 8006f08:	d413      	bmi.n	8006f32 <_printf_i+0x23a>
 8006f0a:	68e0      	ldr	r0, [r4, #12]
 8006f0c:	9b03      	ldr	r3, [sp, #12]
 8006f0e:	4298      	cmp	r0, r3
 8006f10:	bfb8      	it	lt
 8006f12:	4618      	movlt	r0, r3
 8006f14:	e7a4      	b.n	8006e60 <_printf_i+0x168>
 8006f16:	2301      	movs	r3, #1
 8006f18:	4632      	mov	r2, r6
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	47d0      	blx	sl
 8006f20:	3001      	adds	r0, #1
 8006f22:	d09b      	beq.n	8006e5c <_printf_i+0x164>
 8006f24:	3501      	adds	r5, #1
 8006f26:	68e3      	ldr	r3, [r4, #12]
 8006f28:	9903      	ldr	r1, [sp, #12]
 8006f2a:	1a5b      	subs	r3, r3, r1
 8006f2c:	42ab      	cmp	r3, r5
 8006f2e:	dcf2      	bgt.n	8006f16 <_printf_i+0x21e>
 8006f30:	e7eb      	b.n	8006f0a <_printf_i+0x212>
 8006f32:	2500      	movs	r5, #0
 8006f34:	f104 0619 	add.w	r6, r4, #25
 8006f38:	e7f5      	b.n	8006f26 <_printf_i+0x22e>
 8006f3a:	bf00      	nop
 8006f3c:	0800b84c 	.word	0x0800b84c
 8006f40:	0800b85d 	.word	0x0800b85d

08006f44 <_scanf_float>:
 8006f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	b087      	sub	sp, #28
 8006f4a:	4617      	mov	r7, r2
 8006f4c:	9303      	str	r3, [sp, #12]
 8006f4e:	688b      	ldr	r3, [r1, #8]
 8006f50:	1e5a      	subs	r2, r3, #1
 8006f52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006f56:	bf83      	ittte	hi
 8006f58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006f5c:	195b      	addhi	r3, r3, r5
 8006f5e:	9302      	strhi	r3, [sp, #8]
 8006f60:	2300      	movls	r3, #0
 8006f62:	bf86      	itte	hi
 8006f64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006f68:	608b      	strhi	r3, [r1, #8]
 8006f6a:	9302      	strls	r3, [sp, #8]
 8006f6c:	680b      	ldr	r3, [r1, #0]
 8006f6e:	468b      	mov	fp, r1
 8006f70:	2500      	movs	r5, #0
 8006f72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006f76:	f84b 3b1c 	str.w	r3, [fp], #28
 8006f7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006f7e:	4680      	mov	r8, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	465e      	mov	r6, fp
 8006f84:	46aa      	mov	sl, r5
 8006f86:	46a9      	mov	r9, r5
 8006f88:	9501      	str	r5, [sp, #4]
 8006f8a:	68a2      	ldr	r2, [r4, #8]
 8006f8c:	b152      	cbz	r2, 8006fa4 <_scanf_float+0x60>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b4e      	cmp	r3, #78	; 0x4e
 8006f94:	d864      	bhi.n	8007060 <_scanf_float+0x11c>
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d83c      	bhi.n	8007014 <_scanf_float+0xd0>
 8006f9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006f9e:	b2c8      	uxtb	r0, r1
 8006fa0:	280e      	cmp	r0, #14
 8006fa2:	d93a      	bls.n	800701a <_scanf_float+0xd6>
 8006fa4:	f1b9 0f00 	cmp.w	r9, #0
 8006fa8:	d003      	beq.n	8006fb2 <_scanf_float+0x6e>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fb6:	f1ba 0f01 	cmp.w	sl, #1
 8006fba:	f200 8113 	bhi.w	80071e4 <_scanf_float+0x2a0>
 8006fbe:	455e      	cmp	r6, fp
 8006fc0:	f200 8105 	bhi.w	80071ce <_scanf_float+0x28a>
 8006fc4:	2501      	movs	r5, #1
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	b007      	add	sp, #28
 8006fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006fd2:	2a0d      	cmp	r2, #13
 8006fd4:	d8e6      	bhi.n	8006fa4 <_scanf_float+0x60>
 8006fd6:	a101      	add	r1, pc, #4	; (adr r1, 8006fdc <_scanf_float+0x98>)
 8006fd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006fdc:	0800711b 	.word	0x0800711b
 8006fe0:	08006fa5 	.word	0x08006fa5
 8006fe4:	08006fa5 	.word	0x08006fa5
 8006fe8:	08006fa5 	.word	0x08006fa5
 8006fec:	0800717b 	.word	0x0800717b
 8006ff0:	08007153 	.word	0x08007153
 8006ff4:	08006fa5 	.word	0x08006fa5
 8006ff8:	08006fa5 	.word	0x08006fa5
 8006ffc:	08007129 	.word	0x08007129
 8007000:	08006fa5 	.word	0x08006fa5
 8007004:	08006fa5 	.word	0x08006fa5
 8007008:	08006fa5 	.word	0x08006fa5
 800700c:	08006fa5 	.word	0x08006fa5
 8007010:	080070e1 	.word	0x080070e1
 8007014:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007018:	e7db      	b.n	8006fd2 <_scanf_float+0x8e>
 800701a:	290e      	cmp	r1, #14
 800701c:	d8c2      	bhi.n	8006fa4 <_scanf_float+0x60>
 800701e:	a001      	add	r0, pc, #4	; (adr r0, 8007024 <_scanf_float+0xe0>)
 8007020:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007024:	080070d3 	.word	0x080070d3
 8007028:	08006fa5 	.word	0x08006fa5
 800702c:	080070d3 	.word	0x080070d3
 8007030:	08007167 	.word	0x08007167
 8007034:	08006fa5 	.word	0x08006fa5
 8007038:	08007081 	.word	0x08007081
 800703c:	080070bd 	.word	0x080070bd
 8007040:	080070bd 	.word	0x080070bd
 8007044:	080070bd 	.word	0x080070bd
 8007048:	080070bd 	.word	0x080070bd
 800704c:	080070bd 	.word	0x080070bd
 8007050:	080070bd 	.word	0x080070bd
 8007054:	080070bd 	.word	0x080070bd
 8007058:	080070bd 	.word	0x080070bd
 800705c:	080070bd 	.word	0x080070bd
 8007060:	2b6e      	cmp	r3, #110	; 0x6e
 8007062:	d809      	bhi.n	8007078 <_scanf_float+0x134>
 8007064:	2b60      	cmp	r3, #96	; 0x60
 8007066:	d8b2      	bhi.n	8006fce <_scanf_float+0x8a>
 8007068:	2b54      	cmp	r3, #84	; 0x54
 800706a:	d077      	beq.n	800715c <_scanf_float+0x218>
 800706c:	2b59      	cmp	r3, #89	; 0x59
 800706e:	d199      	bne.n	8006fa4 <_scanf_float+0x60>
 8007070:	2d07      	cmp	r5, #7
 8007072:	d197      	bne.n	8006fa4 <_scanf_float+0x60>
 8007074:	2508      	movs	r5, #8
 8007076:	e029      	b.n	80070cc <_scanf_float+0x188>
 8007078:	2b74      	cmp	r3, #116	; 0x74
 800707a:	d06f      	beq.n	800715c <_scanf_float+0x218>
 800707c:	2b79      	cmp	r3, #121	; 0x79
 800707e:	e7f6      	b.n	800706e <_scanf_float+0x12a>
 8007080:	6821      	ldr	r1, [r4, #0]
 8007082:	05c8      	lsls	r0, r1, #23
 8007084:	d51a      	bpl.n	80070bc <_scanf_float+0x178>
 8007086:	9b02      	ldr	r3, [sp, #8]
 8007088:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800708c:	6021      	str	r1, [r4, #0]
 800708e:	f109 0901 	add.w	r9, r9, #1
 8007092:	b11b      	cbz	r3, 800709c <_scanf_float+0x158>
 8007094:	3b01      	subs	r3, #1
 8007096:	3201      	adds	r2, #1
 8007098:	9302      	str	r3, [sp, #8]
 800709a:	60a2      	str	r2, [r4, #8]
 800709c:	68a3      	ldr	r3, [r4, #8]
 800709e:	3b01      	subs	r3, #1
 80070a0:	60a3      	str	r3, [r4, #8]
 80070a2:	6923      	ldr	r3, [r4, #16]
 80070a4:	3301      	adds	r3, #1
 80070a6:	6123      	str	r3, [r4, #16]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	607b      	str	r3, [r7, #4]
 80070b0:	f340 8084 	ble.w	80071bc <_scanf_float+0x278>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	3301      	adds	r3, #1
 80070b8:	603b      	str	r3, [r7, #0]
 80070ba:	e766      	b.n	8006f8a <_scanf_float+0x46>
 80070bc:	eb1a 0f05 	cmn.w	sl, r5
 80070c0:	f47f af70 	bne.w	8006fa4 <_scanf_float+0x60>
 80070c4:	6822      	ldr	r2, [r4, #0]
 80070c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80070ca:	6022      	str	r2, [r4, #0]
 80070cc:	f806 3b01 	strb.w	r3, [r6], #1
 80070d0:	e7e4      	b.n	800709c <_scanf_float+0x158>
 80070d2:	6822      	ldr	r2, [r4, #0]
 80070d4:	0610      	lsls	r0, r2, #24
 80070d6:	f57f af65 	bpl.w	8006fa4 <_scanf_float+0x60>
 80070da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070de:	e7f4      	b.n	80070ca <_scanf_float+0x186>
 80070e0:	f1ba 0f00 	cmp.w	sl, #0
 80070e4:	d10e      	bne.n	8007104 <_scanf_float+0x1c0>
 80070e6:	f1b9 0f00 	cmp.w	r9, #0
 80070ea:	d10e      	bne.n	800710a <_scanf_float+0x1c6>
 80070ec:	6822      	ldr	r2, [r4, #0]
 80070ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80070f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80070f6:	d108      	bne.n	800710a <_scanf_float+0x1c6>
 80070f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070fc:	6022      	str	r2, [r4, #0]
 80070fe:	f04f 0a01 	mov.w	sl, #1
 8007102:	e7e3      	b.n	80070cc <_scanf_float+0x188>
 8007104:	f1ba 0f02 	cmp.w	sl, #2
 8007108:	d055      	beq.n	80071b6 <_scanf_float+0x272>
 800710a:	2d01      	cmp	r5, #1
 800710c:	d002      	beq.n	8007114 <_scanf_float+0x1d0>
 800710e:	2d04      	cmp	r5, #4
 8007110:	f47f af48 	bne.w	8006fa4 <_scanf_float+0x60>
 8007114:	3501      	adds	r5, #1
 8007116:	b2ed      	uxtb	r5, r5
 8007118:	e7d8      	b.n	80070cc <_scanf_float+0x188>
 800711a:	f1ba 0f01 	cmp.w	sl, #1
 800711e:	f47f af41 	bne.w	8006fa4 <_scanf_float+0x60>
 8007122:	f04f 0a02 	mov.w	sl, #2
 8007126:	e7d1      	b.n	80070cc <_scanf_float+0x188>
 8007128:	b97d      	cbnz	r5, 800714a <_scanf_float+0x206>
 800712a:	f1b9 0f00 	cmp.w	r9, #0
 800712e:	f47f af3c 	bne.w	8006faa <_scanf_float+0x66>
 8007132:	6822      	ldr	r2, [r4, #0]
 8007134:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007138:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800713c:	f47f af39 	bne.w	8006fb2 <_scanf_float+0x6e>
 8007140:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007144:	6022      	str	r2, [r4, #0]
 8007146:	2501      	movs	r5, #1
 8007148:	e7c0      	b.n	80070cc <_scanf_float+0x188>
 800714a:	2d03      	cmp	r5, #3
 800714c:	d0e2      	beq.n	8007114 <_scanf_float+0x1d0>
 800714e:	2d05      	cmp	r5, #5
 8007150:	e7de      	b.n	8007110 <_scanf_float+0x1cc>
 8007152:	2d02      	cmp	r5, #2
 8007154:	f47f af26 	bne.w	8006fa4 <_scanf_float+0x60>
 8007158:	2503      	movs	r5, #3
 800715a:	e7b7      	b.n	80070cc <_scanf_float+0x188>
 800715c:	2d06      	cmp	r5, #6
 800715e:	f47f af21 	bne.w	8006fa4 <_scanf_float+0x60>
 8007162:	2507      	movs	r5, #7
 8007164:	e7b2      	b.n	80070cc <_scanf_float+0x188>
 8007166:	6822      	ldr	r2, [r4, #0]
 8007168:	0591      	lsls	r1, r2, #22
 800716a:	f57f af1b 	bpl.w	8006fa4 <_scanf_float+0x60>
 800716e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007172:	6022      	str	r2, [r4, #0]
 8007174:	f8cd 9004 	str.w	r9, [sp, #4]
 8007178:	e7a8      	b.n	80070cc <_scanf_float+0x188>
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007180:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007184:	d006      	beq.n	8007194 <_scanf_float+0x250>
 8007186:	0550      	lsls	r0, r2, #21
 8007188:	f57f af0c 	bpl.w	8006fa4 <_scanf_float+0x60>
 800718c:	f1b9 0f00 	cmp.w	r9, #0
 8007190:	f43f af0f 	beq.w	8006fb2 <_scanf_float+0x6e>
 8007194:	0591      	lsls	r1, r2, #22
 8007196:	bf58      	it	pl
 8007198:	9901      	ldrpl	r1, [sp, #4]
 800719a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800719e:	bf58      	it	pl
 80071a0:	eba9 0101 	subpl.w	r1, r9, r1
 80071a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80071a8:	bf58      	it	pl
 80071aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80071ae:	6022      	str	r2, [r4, #0]
 80071b0:	f04f 0900 	mov.w	r9, #0
 80071b4:	e78a      	b.n	80070cc <_scanf_float+0x188>
 80071b6:	f04f 0a03 	mov.w	sl, #3
 80071ba:	e787      	b.n	80070cc <_scanf_float+0x188>
 80071bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071c0:	4639      	mov	r1, r7
 80071c2:	4640      	mov	r0, r8
 80071c4:	4798      	blx	r3
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f43f aedf 	beq.w	8006f8a <_scanf_float+0x46>
 80071cc:	e6ea      	b.n	8006fa4 <_scanf_float+0x60>
 80071ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071d6:	463a      	mov	r2, r7
 80071d8:	4640      	mov	r0, r8
 80071da:	4798      	blx	r3
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	3b01      	subs	r3, #1
 80071e0:	6123      	str	r3, [r4, #16]
 80071e2:	e6ec      	b.n	8006fbe <_scanf_float+0x7a>
 80071e4:	1e6b      	subs	r3, r5, #1
 80071e6:	2b06      	cmp	r3, #6
 80071e8:	d825      	bhi.n	8007236 <_scanf_float+0x2f2>
 80071ea:	2d02      	cmp	r5, #2
 80071ec:	d836      	bhi.n	800725c <_scanf_float+0x318>
 80071ee:	455e      	cmp	r6, fp
 80071f0:	f67f aee8 	bls.w	8006fc4 <_scanf_float+0x80>
 80071f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071fc:	463a      	mov	r2, r7
 80071fe:	4640      	mov	r0, r8
 8007200:	4798      	blx	r3
 8007202:	6923      	ldr	r3, [r4, #16]
 8007204:	3b01      	subs	r3, #1
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	e7f1      	b.n	80071ee <_scanf_float+0x2aa>
 800720a:	9802      	ldr	r0, [sp, #8]
 800720c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007210:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007214:	9002      	str	r0, [sp, #8]
 8007216:	463a      	mov	r2, r7
 8007218:	4640      	mov	r0, r8
 800721a:	4798      	blx	r3
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	3b01      	subs	r3, #1
 8007220:	6123      	str	r3, [r4, #16]
 8007222:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007226:	fa5f fa8a 	uxtb.w	sl, sl
 800722a:	f1ba 0f02 	cmp.w	sl, #2
 800722e:	d1ec      	bne.n	800720a <_scanf_float+0x2c6>
 8007230:	3d03      	subs	r5, #3
 8007232:	b2ed      	uxtb	r5, r5
 8007234:	1b76      	subs	r6, r6, r5
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	05da      	lsls	r2, r3, #23
 800723a:	d52f      	bpl.n	800729c <_scanf_float+0x358>
 800723c:	055b      	lsls	r3, r3, #21
 800723e:	d510      	bpl.n	8007262 <_scanf_float+0x31e>
 8007240:	455e      	cmp	r6, fp
 8007242:	f67f aebf 	bls.w	8006fc4 <_scanf_float+0x80>
 8007246:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800724a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800724e:	463a      	mov	r2, r7
 8007250:	4640      	mov	r0, r8
 8007252:	4798      	blx	r3
 8007254:	6923      	ldr	r3, [r4, #16]
 8007256:	3b01      	subs	r3, #1
 8007258:	6123      	str	r3, [r4, #16]
 800725a:	e7f1      	b.n	8007240 <_scanf_float+0x2fc>
 800725c:	46aa      	mov	sl, r5
 800725e:	9602      	str	r6, [sp, #8]
 8007260:	e7df      	b.n	8007222 <_scanf_float+0x2de>
 8007262:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	2965      	cmp	r1, #101	; 0x65
 800726a:	f103 33ff 	add.w	r3, r3, #4294967295
 800726e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007272:	6123      	str	r3, [r4, #16]
 8007274:	d00c      	beq.n	8007290 <_scanf_float+0x34c>
 8007276:	2945      	cmp	r1, #69	; 0x45
 8007278:	d00a      	beq.n	8007290 <_scanf_float+0x34c>
 800727a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800727e:	463a      	mov	r2, r7
 8007280:	4640      	mov	r0, r8
 8007282:	4798      	blx	r3
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800728a:	3b01      	subs	r3, #1
 800728c:	1eb5      	subs	r5, r6, #2
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007294:	463a      	mov	r2, r7
 8007296:	4640      	mov	r0, r8
 8007298:	4798      	blx	r3
 800729a:	462e      	mov	r6, r5
 800729c:	6825      	ldr	r5, [r4, #0]
 800729e:	f015 0510 	ands.w	r5, r5, #16
 80072a2:	d159      	bne.n	8007358 <_scanf_float+0x414>
 80072a4:	7035      	strb	r5, [r6, #0]
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b0:	d11b      	bne.n	80072ea <_scanf_float+0x3a6>
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	454b      	cmp	r3, r9
 80072b6:	eba3 0209 	sub.w	r2, r3, r9
 80072ba:	d123      	bne.n	8007304 <_scanf_float+0x3c0>
 80072bc:	2200      	movs	r2, #0
 80072be:	4659      	mov	r1, fp
 80072c0:	4640      	mov	r0, r8
 80072c2:	f000 ff0b 	bl	80080dc <_strtod_r>
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	f012 0f02 	tst.w	r2, #2
 80072ce:	ec57 6b10 	vmov	r6, r7, d0
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	d021      	beq.n	800731a <_scanf_float+0x3d6>
 80072d6:	9903      	ldr	r1, [sp, #12]
 80072d8:	1d1a      	adds	r2, r3, #4
 80072da:	600a      	str	r2, [r1, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	e9c3 6700 	strd	r6, r7, [r3]
 80072e2:	68e3      	ldr	r3, [r4, #12]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60e3      	str	r3, [r4, #12]
 80072e8:	e66d      	b.n	8006fc6 <_scanf_float+0x82>
 80072ea:	9b04      	ldr	r3, [sp, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0e5      	beq.n	80072bc <_scanf_float+0x378>
 80072f0:	9905      	ldr	r1, [sp, #20]
 80072f2:	230a      	movs	r3, #10
 80072f4:	462a      	mov	r2, r5
 80072f6:	3101      	adds	r1, #1
 80072f8:	4640      	mov	r0, r8
 80072fa:	f000 ff77 	bl	80081ec <_strtol_r>
 80072fe:	9b04      	ldr	r3, [sp, #16]
 8007300:	9e05      	ldr	r6, [sp, #20]
 8007302:	1ac2      	subs	r2, r0, r3
 8007304:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007308:	429e      	cmp	r6, r3
 800730a:	bf28      	it	cs
 800730c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007310:	4912      	ldr	r1, [pc, #72]	; (800735c <_scanf_float+0x418>)
 8007312:	4630      	mov	r0, r6
 8007314:	f000 f82c 	bl	8007370 <siprintf>
 8007318:	e7d0      	b.n	80072bc <_scanf_float+0x378>
 800731a:	9903      	ldr	r1, [sp, #12]
 800731c:	f012 0f04 	tst.w	r2, #4
 8007320:	f103 0204 	add.w	r2, r3, #4
 8007324:	600a      	str	r2, [r1, #0]
 8007326:	d1d9      	bne.n	80072dc <_scanf_float+0x398>
 8007328:	f8d3 8000 	ldr.w	r8, [r3]
 800732c:	ee10 2a10 	vmov	r2, s0
 8007330:	ee10 0a10 	vmov	r0, s0
 8007334:	463b      	mov	r3, r7
 8007336:	4639      	mov	r1, r7
 8007338:	f7f9 fc18 	bl	8000b6c <__aeabi_dcmpun>
 800733c:	b128      	cbz	r0, 800734a <_scanf_float+0x406>
 800733e:	4808      	ldr	r0, [pc, #32]	; (8007360 <_scanf_float+0x41c>)
 8007340:	f000 f810 	bl	8007364 <nanf>
 8007344:	ed88 0a00 	vstr	s0, [r8]
 8007348:	e7cb      	b.n	80072e2 <_scanf_float+0x39e>
 800734a:	4630      	mov	r0, r6
 800734c:	4639      	mov	r1, r7
 800734e:	f7f9 fc6b 	bl	8000c28 <__aeabi_d2f>
 8007352:	f8c8 0000 	str.w	r0, [r8]
 8007356:	e7c4      	b.n	80072e2 <_scanf_float+0x39e>
 8007358:	2500      	movs	r5, #0
 800735a:	e634      	b.n	8006fc6 <_scanf_float+0x82>
 800735c:	0800b86e 	.word	0x0800b86e
 8007360:	0800bc93 	.word	0x0800bc93

08007364 <nanf>:
 8007364:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800736c <nanf+0x8>
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	7fc00000 	.word	0x7fc00000

08007370 <siprintf>:
 8007370:	b40e      	push	{r1, r2, r3}
 8007372:	b500      	push	{lr}
 8007374:	b09c      	sub	sp, #112	; 0x70
 8007376:	ab1d      	add	r3, sp, #116	; 0x74
 8007378:	9002      	str	r0, [sp, #8]
 800737a:	9006      	str	r0, [sp, #24]
 800737c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007380:	4809      	ldr	r0, [pc, #36]	; (80073a8 <siprintf+0x38>)
 8007382:	9107      	str	r1, [sp, #28]
 8007384:	9104      	str	r1, [sp, #16]
 8007386:	4909      	ldr	r1, [pc, #36]	; (80073ac <siprintf+0x3c>)
 8007388:	f853 2b04 	ldr.w	r2, [r3], #4
 800738c:	9105      	str	r1, [sp, #20]
 800738e:	6800      	ldr	r0, [r0, #0]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	a902      	add	r1, sp, #8
 8007394:	f002 ff8c 	bl	800a2b0 <_svfiprintf_r>
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	b01c      	add	sp, #112	; 0x70
 80073a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a4:	b003      	add	sp, #12
 80073a6:	4770      	bx	lr
 80073a8:	2000000c 	.word	0x2000000c
 80073ac:	ffff0208 	.word	0xffff0208

080073b0 <siscanf>:
 80073b0:	b40e      	push	{r1, r2, r3}
 80073b2:	b510      	push	{r4, lr}
 80073b4:	b09f      	sub	sp, #124	; 0x7c
 80073b6:	ac21      	add	r4, sp, #132	; 0x84
 80073b8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80073bc:	f854 2b04 	ldr.w	r2, [r4], #4
 80073c0:	9201      	str	r2, [sp, #4]
 80073c2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80073c6:	9004      	str	r0, [sp, #16]
 80073c8:	9008      	str	r0, [sp, #32]
 80073ca:	f7f8 ff21 	bl	8000210 <strlen>
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <siscanf+0x50>)
 80073d0:	9005      	str	r0, [sp, #20]
 80073d2:	9009      	str	r0, [sp, #36]	; 0x24
 80073d4:	930d      	str	r3, [sp, #52]	; 0x34
 80073d6:	480b      	ldr	r0, [pc, #44]	; (8007404 <siscanf+0x54>)
 80073d8:	9a01      	ldr	r2, [sp, #4]
 80073da:	6800      	ldr	r0, [r0, #0]
 80073dc:	9403      	str	r4, [sp, #12]
 80073de:	2300      	movs	r3, #0
 80073e0:	9311      	str	r3, [sp, #68]	; 0x44
 80073e2:	9316      	str	r3, [sp, #88]	; 0x58
 80073e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80073ec:	a904      	add	r1, sp, #16
 80073ee:	4623      	mov	r3, r4
 80073f0:	f003 f8b8 	bl	800a564 <__ssvfiscanf_r>
 80073f4:	b01f      	add	sp, #124	; 0x7c
 80073f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073fa:	b003      	add	sp, #12
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	0800742b 	.word	0x0800742b
 8007404:	2000000c 	.word	0x2000000c

08007408 <__sread>:
 8007408:	b510      	push	{r4, lr}
 800740a:	460c      	mov	r4, r1
 800740c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007410:	f003 fb72 	bl	800aaf8 <_read_r>
 8007414:	2800      	cmp	r0, #0
 8007416:	bfab      	itete	ge
 8007418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800741a:	89a3      	ldrhlt	r3, [r4, #12]
 800741c:	181b      	addge	r3, r3, r0
 800741e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007422:	bfac      	ite	ge
 8007424:	6563      	strge	r3, [r4, #84]	; 0x54
 8007426:	81a3      	strhlt	r3, [r4, #12]
 8007428:	bd10      	pop	{r4, pc}

0800742a <__seofread>:
 800742a:	2000      	movs	r0, #0
 800742c:	4770      	bx	lr

0800742e <__swrite>:
 800742e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007432:	461f      	mov	r7, r3
 8007434:	898b      	ldrh	r3, [r1, #12]
 8007436:	05db      	lsls	r3, r3, #23
 8007438:	4605      	mov	r5, r0
 800743a:	460c      	mov	r4, r1
 800743c:	4616      	mov	r6, r2
 800743e:	d505      	bpl.n	800744c <__swrite+0x1e>
 8007440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007444:	2302      	movs	r3, #2
 8007446:	2200      	movs	r2, #0
 8007448:	f002 f8e4 	bl	8009614 <_lseek_r>
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007456:	81a3      	strh	r3, [r4, #12]
 8007458:	4632      	mov	r2, r6
 800745a:	463b      	mov	r3, r7
 800745c:	4628      	mov	r0, r5
 800745e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007462:	f000 bec5 	b.w	80081f0 <_write_r>

08007466 <__sseek>:
 8007466:	b510      	push	{r4, lr}
 8007468:	460c      	mov	r4, r1
 800746a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746e:	f002 f8d1 	bl	8009614 <_lseek_r>
 8007472:	1c43      	adds	r3, r0, #1
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	bf15      	itete	ne
 8007478:	6560      	strne	r0, [r4, #84]	; 0x54
 800747a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800747e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007482:	81a3      	strheq	r3, [r4, #12]
 8007484:	bf18      	it	ne
 8007486:	81a3      	strhne	r3, [r4, #12]
 8007488:	bd10      	pop	{r4, pc}

0800748a <__sclose>:
 800748a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748e:	f000 bec1 	b.w	8008214 <_close_r>

08007492 <sulp>:
 8007492:	b570      	push	{r4, r5, r6, lr}
 8007494:	4604      	mov	r4, r0
 8007496:	460d      	mov	r5, r1
 8007498:	ec45 4b10 	vmov	d0, r4, r5
 800749c:	4616      	mov	r6, r2
 800749e:	f002 fc65 	bl	8009d6c <__ulp>
 80074a2:	ec51 0b10 	vmov	r0, r1, d0
 80074a6:	b17e      	cbz	r6, 80074c8 <sulp+0x36>
 80074a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80074ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	dd09      	ble.n	80074c8 <sulp+0x36>
 80074b4:	051b      	lsls	r3, r3, #20
 80074b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80074ba:	2400      	movs	r4, #0
 80074bc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80074c0:	4622      	mov	r2, r4
 80074c2:	462b      	mov	r3, r5
 80074c4:	f7f9 f8b8 	bl	8000638 <__aeabi_dmul>
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	0000      	movs	r0, r0
 80074cc:	0000      	movs	r0, r0
	...

080074d0 <_strtod_l>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	ed2d 8b02 	vpush	{d8}
 80074d8:	b09d      	sub	sp, #116	; 0x74
 80074da:	461f      	mov	r7, r3
 80074dc:	2300      	movs	r3, #0
 80074de:	9318      	str	r3, [sp, #96]	; 0x60
 80074e0:	4ba2      	ldr	r3, [pc, #648]	; (800776c <_strtod_l+0x29c>)
 80074e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	9305      	str	r3, [sp, #20]
 80074e8:	4604      	mov	r4, r0
 80074ea:	4618      	mov	r0, r3
 80074ec:	4688      	mov	r8, r1
 80074ee:	f7f8 fe8f 	bl	8000210 <strlen>
 80074f2:	f04f 0a00 	mov.w	sl, #0
 80074f6:	4605      	mov	r5, r0
 80074f8:	f04f 0b00 	mov.w	fp, #0
 80074fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	2a2b      	cmp	r2, #43	; 0x2b
 8007506:	d04e      	beq.n	80075a6 <_strtod_l+0xd6>
 8007508:	d83b      	bhi.n	8007582 <_strtod_l+0xb2>
 800750a:	2a0d      	cmp	r2, #13
 800750c:	d834      	bhi.n	8007578 <_strtod_l+0xa8>
 800750e:	2a08      	cmp	r2, #8
 8007510:	d834      	bhi.n	800757c <_strtod_l+0xac>
 8007512:	2a00      	cmp	r2, #0
 8007514:	d03e      	beq.n	8007594 <_strtod_l+0xc4>
 8007516:	2300      	movs	r3, #0
 8007518:	930a      	str	r3, [sp, #40]	; 0x28
 800751a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800751c:	7833      	ldrb	r3, [r6, #0]
 800751e:	2b30      	cmp	r3, #48	; 0x30
 8007520:	f040 80b0 	bne.w	8007684 <_strtod_l+0x1b4>
 8007524:	7873      	ldrb	r3, [r6, #1]
 8007526:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800752a:	2b58      	cmp	r3, #88	; 0x58
 800752c:	d168      	bne.n	8007600 <_strtod_l+0x130>
 800752e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	ab18      	add	r3, sp, #96	; 0x60
 8007534:	9702      	str	r7, [sp, #8]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	4a8d      	ldr	r2, [pc, #564]	; (8007770 <_strtod_l+0x2a0>)
 800753a:	ab19      	add	r3, sp, #100	; 0x64
 800753c:	a917      	add	r1, sp, #92	; 0x5c
 800753e:	4620      	mov	r0, r4
 8007540:	f001 fd5c 	bl	8008ffc <__gethex>
 8007544:	f010 0707 	ands.w	r7, r0, #7
 8007548:	4605      	mov	r5, r0
 800754a:	d005      	beq.n	8007558 <_strtod_l+0x88>
 800754c:	2f06      	cmp	r7, #6
 800754e:	d12c      	bne.n	80075aa <_strtod_l+0xda>
 8007550:	3601      	adds	r6, #1
 8007552:	2300      	movs	r3, #0
 8007554:	9617      	str	r6, [sp, #92]	; 0x5c
 8007556:	930a      	str	r3, [sp, #40]	; 0x28
 8007558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800755a:	2b00      	cmp	r3, #0
 800755c:	f040 8590 	bne.w	8008080 <_strtod_l+0xbb0>
 8007560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007562:	b1eb      	cbz	r3, 80075a0 <_strtod_l+0xd0>
 8007564:	4652      	mov	r2, sl
 8007566:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800756a:	ec43 2b10 	vmov	d0, r2, r3
 800756e:	b01d      	add	sp, #116	; 0x74
 8007570:	ecbd 8b02 	vpop	{d8}
 8007574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007578:	2a20      	cmp	r2, #32
 800757a:	d1cc      	bne.n	8007516 <_strtod_l+0x46>
 800757c:	3301      	adds	r3, #1
 800757e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007580:	e7be      	b.n	8007500 <_strtod_l+0x30>
 8007582:	2a2d      	cmp	r2, #45	; 0x2d
 8007584:	d1c7      	bne.n	8007516 <_strtod_l+0x46>
 8007586:	2201      	movs	r2, #1
 8007588:	920a      	str	r2, [sp, #40]	; 0x28
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	9217      	str	r2, [sp, #92]	; 0x5c
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1c2      	bne.n	800751a <_strtod_l+0x4a>
 8007594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007596:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800759a:	2b00      	cmp	r3, #0
 800759c:	f040 856e 	bne.w	800807c <_strtod_l+0xbac>
 80075a0:	4652      	mov	r2, sl
 80075a2:	465b      	mov	r3, fp
 80075a4:	e7e1      	b.n	800756a <_strtod_l+0x9a>
 80075a6:	2200      	movs	r2, #0
 80075a8:	e7ee      	b.n	8007588 <_strtod_l+0xb8>
 80075aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80075ac:	b13a      	cbz	r2, 80075be <_strtod_l+0xee>
 80075ae:	2135      	movs	r1, #53	; 0x35
 80075b0:	a81a      	add	r0, sp, #104	; 0x68
 80075b2:	f002 fce6 	bl	8009f82 <__copybits>
 80075b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075b8:	4620      	mov	r0, r4
 80075ba:	f002 f8a5 	bl	8009708 <_Bfree>
 80075be:	3f01      	subs	r7, #1
 80075c0:	2f04      	cmp	r7, #4
 80075c2:	d806      	bhi.n	80075d2 <_strtod_l+0x102>
 80075c4:	e8df f007 	tbb	[pc, r7]
 80075c8:	1714030a 	.word	0x1714030a
 80075cc:	0a          	.byte	0x0a
 80075cd:	00          	.byte	0x00
 80075ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80075d2:	0728      	lsls	r0, r5, #28
 80075d4:	d5c0      	bpl.n	8007558 <_strtod_l+0x88>
 80075d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80075da:	e7bd      	b.n	8007558 <_strtod_l+0x88>
 80075dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80075e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80075ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80075ee:	e7f0      	b.n	80075d2 <_strtod_l+0x102>
 80075f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007774 <_strtod_l+0x2a4>
 80075f4:	e7ed      	b.n	80075d2 <_strtod_l+0x102>
 80075f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80075fa:	f04f 3aff 	mov.w	sl, #4294967295
 80075fe:	e7e8      	b.n	80075d2 <_strtod_l+0x102>
 8007600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	9217      	str	r2, [sp, #92]	; 0x5c
 8007606:	785b      	ldrb	r3, [r3, #1]
 8007608:	2b30      	cmp	r3, #48	; 0x30
 800760a:	d0f9      	beq.n	8007600 <_strtod_l+0x130>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0a3      	beq.n	8007558 <_strtod_l+0x88>
 8007610:	2301      	movs	r3, #1
 8007612:	f04f 0900 	mov.w	r9, #0
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800761a:	9308      	str	r3, [sp, #32]
 800761c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007620:	464f      	mov	r7, r9
 8007622:	220a      	movs	r2, #10
 8007624:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007626:	7806      	ldrb	r6, [r0, #0]
 8007628:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800762c:	b2d9      	uxtb	r1, r3
 800762e:	2909      	cmp	r1, #9
 8007630:	d92a      	bls.n	8007688 <_strtod_l+0x1b8>
 8007632:	9905      	ldr	r1, [sp, #20]
 8007634:	462a      	mov	r2, r5
 8007636:	f003 fac3 	bl	800abc0 <strncmp>
 800763a:	b398      	cbz	r0, 80076a4 <_strtod_l+0x1d4>
 800763c:	2000      	movs	r0, #0
 800763e:	4632      	mov	r2, r6
 8007640:	463d      	mov	r5, r7
 8007642:	9005      	str	r0, [sp, #20]
 8007644:	4603      	mov	r3, r0
 8007646:	2a65      	cmp	r2, #101	; 0x65
 8007648:	d001      	beq.n	800764e <_strtod_l+0x17e>
 800764a:	2a45      	cmp	r2, #69	; 0x45
 800764c:	d118      	bne.n	8007680 <_strtod_l+0x1b0>
 800764e:	b91d      	cbnz	r5, 8007658 <_strtod_l+0x188>
 8007650:	9a04      	ldr	r2, [sp, #16]
 8007652:	4302      	orrs	r2, r0
 8007654:	d09e      	beq.n	8007594 <_strtod_l+0xc4>
 8007656:	2500      	movs	r5, #0
 8007658:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800765c:	f108 0201 	add.w	r2, r8, #1
 8007660:	9217      	str	r2, [sp, #92]	; 0x5c
 8007662:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007666:	2a2b      	cmp	r2, #43	; 0x2b
 8007668:	d075      	beq.n	8007756 <_strtod_l+0x286>
 800766a:	2a2d      	cmp	r2, #45	; 0x2d
 800766c:	d07b      	beq.n	8007766 <_strtod_l+0x296>
 800766e:	f04f 0c00 	mov.w	ip, #0
 8007672:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007676:	2909      	cmp	r1, #9
 8007678:	f240 8082 	bls.w	8007780 <_strtod_l+0x2b0>
 800767c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007680:	2600      	movs	r6, #0
 8007682:	e09d      	b.n	80077c0 <_strtod_l+0x2f0>
 8007684:	2300      	movs	r3, #0
 8007686:	e7c4      	b.n	8007612 <_strtod_l+0x142>
 8007688:	2f08      	cmp	r7, #8
 800768a:	bfd8      	it	le
 800768c:	9907      	ldrle	r1, [sp, #28]
 800768e:	f100 0001 	add.w	r0, r0, #1
 8007692:	bfda      	itte	le
 8007694:	fb02 3301 	mlale	r3, r2, r1, r3
 8007698:	9307      	strle	r3, [sp, #28]
 800769a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800769e:	3701      	adds	r7, #1
 80076a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80076a2:	e7bf      	b.n	8007624 <_strtod_l+0x154>
 80076a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076a6:	195a      	adds	r2, r3, r5
 80076a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80076aa:	5d5a      	ldrb	r2, [r3, r5]
 80076ac:	2f00      	cmp	r7, #0
 80076ae:	d037      	beq.n	8007720 <_strtod_l+0x250>
 80076b0:	9005      	str	r0, [sp, #20]
 80076b2:	463d      	mov	r5, r7
 80076b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80076b8:	2b09      	cmp	r3, #9
 80076ba:	d912      	bls.n	80076e2 <_strtod_l+0x212>
 80076bc:	2301      	movs	r3, #1
 80076be:	e7c2      	b.n	8007646 <_strtod_l+0x176>
 80076c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80076c6:	785a      	ldrb	r2, [r3, #1]
 80076c8:	3001      	adds	r0, #1
 80076ca:	2a30      	cmp	r2, #48	; 0x30
 80076cc:	d0f8      	beq.n	80076c0 <_strtod_l+0x1f0>
 80076ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	f200 84d9 	bhi.w	800808a <_strtod_l+0xbba>
 80076d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076da:	9005      	str	r0, [sp, #20]
 80076dc:	2000      	movs	r0, #0
 80076de:	9308      	str	r3, [sp, #32]
 80076e0:	4605      	mov	r5, r0
 80076e2:	3a30      	subs	r2, #48	; 0x30
 80076e4:	f100 0301 	add.w	r3, r0, #1
 80076e8:	d014      	beq.n	8007714 <_strtod_l+0x244>
 80076ea:	9905      	ldr	r1, [sp, #20]
 80076ec:	4419      	add	r1, r3
 80076ee:	9105      	str	r1, [sp, #20]
 80076f0:	462b      	mov	r3, r5
 80076f2:	eb00 0e05 	add.w	lr, r0, r5
 80076f6:	210a      	movs	r1, #10
 80076f8:	4573      	cmp	r3, lr
 80076fa:	d113      	bne.n	8007724 <_strtod_l+0x254>
 80076fc:	182b      	adds	r3, r5, r0
 80076fe:	2b08      	cmp	r3, #8
 8007700:	f105 0501 	add.w	r5, r5, #1
 8007704:	4405      	add	r5, r0
 8007706:	dc1c      	bgt.n	8007742 <_strtod_l+0x272>
 8007708:	9907      	ldr	r1, [sp, #28]
 800770a:	230a      	movs	r3, #10
 800770c:	fb03 2301 	mla	r3, r3, r1, r2
 8007710:	9307      	str	r3, [sp, #28]
 8007712:	2300      	movs	r3, #0
 8007714:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007716:	1c51      	adds	r1, r2, #1
 8007718:	9117      	str	r1, [sp, #92]	; 0x5c
 800771a:	7852      	ldrb	r2, [r2, #1]
 800771c:	4618      	mov	r0, r3
 800771e:	e7c9      	b.n	80076b4 <_strtod_l+0x1e4>
 8007720:	4638      	mov	r0, r7
 8007722:	e7d2      	b.n	80076ca <_strtod_l+0x1fa>
 8007724:	2b08      	cmp	r3, #8
 8007726:	dc04      	bgt.n	8007732 <_strtod_l+0x262>
 8007728:	9e07      	ldr	r6, [sp, #28]
 800772a:	434e      	muls	r6, r1
 800772c:	9607      	str	r6, [sp, #28]
 800772e:	3301      	adds	r3, #1
 8007730:	e7e2      	b.n	80076f8 <_strtod_l+0x228>
 8007732:	f103 0c01 	add.w	ip, r3, #1
 8007736:	f1bc 0f10 	cmp.w	ip, #16
 800773a:	bfd8      	it	le
 800773c:	fb01 f909 	mulle.w	r9, r1, r9
 8007740:	e7f5      	b.n	800772e <_strtod_l+0x25e>
 8007742:	2d10      	cmp	r5, #16
 8007744:	bfdc      	itt	le
 8007746:	230a      	movle	r3, #10
 8007748:	fb03 2909 	mlale	r9, r3, r9, r2
 800774c:	e7e1      	b.n	8007712 <_strtod_l+0x242>
 800774e:	2300      	movs	r3, #0
 8007750:	9305      	str	r3, [sp, #20]
 8007752:	2301      	movs	r3, #1
 8007754:	e77c      	b.n	8007650 <_strtod_l+0x180>
 8007756:	f04f 0c00 	mov.w	ip, #0
 800775a:	f108 0202 	add.w	r2, r8, #2
 800775e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007760:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007764:	e785      	b.n	8007672 <_strtod_l+0x1a2>
 8007766:	f04f 0c01 	mov.w	ip, #1
 800776a:	e7f6      	b.n	800775a <_strtod_l+0x28a>
 800776c:	0800bac0 	.word	0x0800bac0
 8007770:	0800b874 	.word	0x0800b874
 8007774:	7ff00000 	.word	0x7ff00000
 8007778:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800777a:	1c51      	adds	r1, r2, #1
 800777c:	9117      	str	r1, [sp, #92]	; 0x5c
 800777e:	7852      	ldrb	r2, [r2, #1]
 8007780:	2a30      	cmp	r2, #48	; 0x30
 8007782:	d0f9      	beq.n	8007778 <_strtod_l+0x2a8>
 8007784:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007788:	2908      	cmp	r1, #8
 800778a:	f63f af79 	bhi.w	8007680 <_strtod_l+0x1b0>
 800778e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007792:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007794:	9206      	str	r2, [sp, #24]
 8007796:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007798:	1c51      	adds	r1, r2, #1
 800779a:	9117      	str	r1, [sp, #92]	; 0x5c
 800779c:	7852      	ldrb	r2, [r2, #1]
 800779e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80077a2:	2e09      	cmp	r6, #9
 80077a4:	d937      	bls.n	8007816 <_strtod_l+0x346>
 80077a6:	9e06      	ldr	r6, [sp, #24]
 80077a8:	1b89      	subs	r1, r1, r6
 80077aa:	2908      	cmp	r1, #8
 80077ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80077b0:	dc02      	bgt.n	80077b8 <_strtod_l+0x2e8>
 80077b2:	4576      	cmp	r6, lr
 80077b4:	bfa8      	it	ge
 80077b6:	4676      	movge	r6, lr
 80077b8:	f1bc 0f00 	cmp.w	ip, #0
 80077bc:	d000      	beq.n	80077c0 <_strtod_l+0x2f0>
 80077be:	4276      	negs	r6, r6
 80077c0:	2d00      	cmp	r5, #0
 80077c2:	d14d      	bne.n	8007860 <_strtod_l+0x390>
 80077c4:	9904      	ldr	r1, [sp, #16]
 80077c6:	4301      	orrs	r1, r0
 80077c8:	f47f aec6 	bne.w	8007558 <_strtod_l+0x88>
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f47f aee1 	bne.w	8007594 <_strtod_l+0xc4>
 80077d2:	2a69      	cmp	r2, #105	; 0x69
 80077d4:	d027      	beq.n	8007826 <_strtod_l+0x356>
 80077d6:	dc24      	bgt.n	8007822 <_strtod_l+0x352>
 80077d8:	2a49      	cmp	r2, #73	; 0x49
 80077da:	d024      	beq.n	8007826 <_strtod_l+0x356>
 80077dc:	2a4e      	cmp	r2, #78	; 0x4e
 80077de:	f47f aed9 	bne.w	8007594 <_strtod_l+0xc4>
 80077e2:	499f      	ldr	r1, [pc, #636]	; (8007a60 <_strtod_l+0x590>)
 80077e4:	a817      	add	r0, sp, #92	; 0x5c
 80077e6:	f001 fe61 	bl	80094ac <__match>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	f43f aed2 	beq.w	8007594 <_strtod_l+0xc4>
 80077f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b28      	cmp	r3, #40	; 0x28
 80077f6:	d12d      	bne.n	8007854 <_strtod_l+0x384>
 80077f8:	499a      	ldr	r1, [pc, #616]	; (8007a64 <_strtod_l+0x594>)
 80077fa:	aa1a      	add	r2, sp, #104	; 0x68
 80077fc:	a817      	add	r0, sp, #92	; 0x5c
 80077fe:	f001 fe69 	bl	80094d4 <__hexnan>
 8007802:	2805      	cmp	r0, #5
 8007804:	d126      	bne.n	8007854 <_strtod_l+0x384>
 8007806:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007808:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800780c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007810:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007814:	e6a0      	b.n	8007558 <_strtod_l+0x88>
 8007816:	210a      	movs	r1, #10
 8007818:	fb01 2e0e 	mla	lr, r1, lr, r2
 800781c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007820:	e7b9      	b.n	8007796 <_strtod_l+0x2c6>
 8007822:	2a6e      	cmp	r2, #110	; 0x6e
 8007824:	e7db      	b.n	80077de <_strtod_l+0x30e>
 8007826:	4990      	ldr	r1, [pc, #576]	; (8007a68 <_strtod_l+0x598>)
 8007828:	a817      	add	r0, sp, #92	; 0x5c
 800782a:	f001 fe3f 	bl	80094ac <__match>
 800782e:	2800      	cmp	r0, #0
 8007830:	f43f aeb0 	beq.w	8007594 <_strtod_l+0xc4>
 8007834:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007836:	498d      	ldr	r1, [pc, #564]	; (8007a6c <_strtod_l+0x59c>)
 8007838:	3b01      	subs	r3, #1
 800783a:	a817      	add	r0, sp, #92	; 0x5c
 800783c:	9317      	str	r3, [sp, #92]	; 0x5c
 800783e:	f001 fe35 	bl	80094ac <__match>
 8007842:	b910      	cbnz	r0, 800784a <_strtod_l+0x37a>
 8007844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007846:	3301      	adds	r3, #1
 8007848:	9317      	str	r3, [sp, #92]	; 0x5c
 800784a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007a7c <_strtod_l+0x5ac>
 800784e:	f04f 0a00 	mov.w	sl, #0
 8007852:	e681      	b.n	8007558 <_strtod_l+0x88>
 8007854:	4886      	ldr	r0, [pc, #536]	; (8007a70 <_strtod_l+0x5a0>)
 8007856:	f003 f963 	bl	800ab20 <nan>
 800785a:	ec5b ab10 	vmov	sl, fp, d0
 800785e:	e67b      	b.n	8007558 <_strtod_l+0x88>
 8007860:	9b05      	ldr	r3, [sp, #20]
 8007862:	9807      	ldr	r0, [sp, #28]
 8007864:	1af3      	subs	r3, r6, r3
 8007866:	2f00      	cmp	r7, #0
 8007868:	bf08      	it	eq
 800786a:	462f      	moveq	r7, r5
 800786c:	2d10      	cmp	r5, #16
 800786e:	9306      	str	r3, [sp, #24]
 8007870:	46a8      	mov	r8, r5
 8007872:	bfa8      	it	ge
 8007874:	f04f 0810 	movge.w	r8, #16
 8007878:	f7f8 fe64 	bl	8000544 <__aeabi_ui2d>
 800787c:	2d09      	cmp	r5, #9
 800787e:	4682      	mov	sl, r0
 8007880:	468b      	mov	fp, r1
 8007882:	dd13      	ble.n	80078ac <_strtod_l+0x3dc>
 8007884:	4b7b      	ldr	r3, [pc, #492]	; (8007a74 <_strtod_l+0x5a4>)
 8007886:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800788a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800788e:	f7f8 fed3 	bl	8000638 <__aeabi_dmul>
 8007892:	4682      	mov	sl, r0
 8007894:	4648      	mov	r0, r9
 8007896:	468b      	mov	fp, r1
 8007898:	f7f8 fe54 	bl	8000544 <__aeabi_ui2d>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4650      	mov	r0, sl
 80078a2:	4659      	mov	r1, fp
 80078a4:	f7f8 fd12 	bl	80002cc <__adddf3>
 80078a8:	4682      	mov	sl, r0
 80078aa:	468b      	mov	fp, r1
 80078ac:	2d0f      	cmp	r5, #15
 80078ae:	dc38      	bgt.n	8007922 <_strtod_l+0x452>
 80078b0:	9b06      	ldr	r3, [sp, #24]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f43f ae50 	beq.w	8007558 <_strtod_l+0x88>
 80078b8:	dd24      	ble.n	8007904 <_strtod_l+0x434>
 80078ba:	2b16      	cmp	r3, #22
 80078bc:	dc0b      	bgt.n	80078d6 <_strtod_l+0x406>
 80078be:	496d      	ldr	r1, [pc, #436]	; (8007a74 <_strtod_l+0x5a4>)
 80078c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078c8:	4652      	mov	r2, sl
 80078ca:	465b      	mov	r3, fp
 80078cc:	f7f8 feb4 	bl	8000638 <__aeabi_dmul>
 80078d0:	4682      	mov	sl, r0
 80078d2:	468b      	mov	fp, r1
 80078d4:	e640      	b.n	8007558 <_strtod_l+0x88>
 80078d6:	9a06      	ldr	r2, [sp, #24]
 80078d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80078dc:	4293      	cmp	r3, r2
 80078de:	db20      	blt.n	8007922 <_strtod_l+0x452>
 80078e0:	4c64      	ldr	r4, [pc, #400]	; (8007a74 <_strtod_l+0x5a4>)
 80078e2:	f1c5 050f 	rsb	r5, r5, #15
 80078e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078ea:	4652      	mov	r2, sl
 80078ec:	465b      	mov	r3, fp
 80078ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f2:	f7f8 fea1 	bl	8000638 <__aeabi_dmul>
 80078f6:	9b06      	ldr	r3, [sp, #24]
 80078f8:	1b5d      	subs	r5, r3, r5
 80078fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80078fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007902:	e7e3      	b.n	80078cc <_strtod_l+0x3fc>
 8007904:	9b06      	ldr	r3, [sp, #24]
 8007906:	3316      	adds	r3, #22
 8007908:	db0b      	blt.n	8007922 <_strtod_l+0x452>
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	1b9e      	subs	r6, r3, r6
 800790e:	4b59      	ldr	r3, [pc, #356]	; (8007a74 <_strtod_l+0x5a4>)
 8007910:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007914:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007918:	4650      	mov	r0, sl
 800791a:	4659      	mov	r1, fp
 800791c:	f7f8 ffb6 	bl	800088c <__aeabi_ddiv>
 8007920:	e7d6      	b.n	80078d0 <_strtod_l+0x400>
 8007922:	9b06      	ldr	r3, [sp, #24]
 8007924:	eba5 0808 	sub.w	r8, r5, r8
 8007928:	4498      	add	r8, r3
 800792a:	f1b8 0f00 	cmp.w	r8, #0
 800792e:	dd74      	ble.n	8007a1a <_strtod_l+0x54a>
 8007930:	f018 030f 	ands.w	r3, r8, #15
 8007934:	d00a      	beq.n	800794c <_strtod_l+0x47c>
 8007936:	494f      	ldr	r1, [pc, #316]	; (8007a74 <_strtod_l+0x5a4>)
 8007938:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800793c:	4652      	mov	r2, sl
 800793e:	465b      	mov	r3, fp
 8007940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007944:	f7f8 fe78 	bl	8000638 <__aeabi_dmul>
 8007948:	4682      	mov	sl, r0
 800794a:	468b      	mov	fp, r1
 800794c:	f038 080f 	bics.w	r8, r8, #15
 8007950:	d04f      	beq.n	80079f2 <_strtod_l+0x522>
 8007952:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007956:	dd22      	ble.n	800799e <_strtod_l+0x4ce>
 8007958:	2500      	movs	r5, #0
 800795a:	462e      	mov	r6, r5
 800795c:	9507      	str	r5, [sp, #28]
 800795e:	9505      	str	r5, [sp, #20]
 8007960:	2322      	movs	r3, #34	; 0x22
 8007962:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007a7c <_strtod_l+0x5ac>
 8007966:	6023      	str	r3, [r4, #0]
 8007968:	f04f 0a00 	mov.w	sl, #0
 800796c:	9b07      	ldr	r3, [sp, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f43f adf2 	beq.w	8007558 <_strtod_l+0x88>
 8007974:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007976:	4620      	mov	r0, r4
 8007978:	f001 fec6 	bl	8009708 <_Bfree>
 800797c:	9905      	ldr	r1, [sp, #20]
 800797e:	4620      	mov	r0, r4
 8007980:	f001 fec2 	bl	8009708 <_Bfree>
 8007984:	4631      	mov	r1, r6
 8007986:	4620      	mov	r0, r4
 8007988:	f001 febe 	bl	8009708 <_Bfree>
 800798c:	9907      	ldr	r1, [sp, #28]
 800798e:	4620      	mov	r0, r4
 8007990:	f001 feba 	bl	8009708 <_Bfree>
 8007994:	4629      	mov	r1, r5
 8007996:	4620      	mov	r0, r4
 8007998:	f001 feb6 	bl	8009708 <_Bfree>
 800799c:	e5dc      	b.n	8007558 <_strtod_l+0x88>
 800799e:	4b36      	ldr	r3, [pc, #216]	; (8007a78 <_strtod_l+0x5a8>)
 80079a0:	9304      	str	r3, [sp, #16]
 80079a2:	2300      	movs	r3, #0
 80079a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80079a8:	4650      	mov	r0, sl
 80079aa:	4659      	mov	r1, fp
 80079ac:	4699      	mov	r9, r3
 80079ae:	f1b8 0f01 	cmp.w	r8, #1
 80079b2:	dc21      	bgt.n	80079f8 <_strtod_l+0x528>
 80079b4:	b10b      	cbz	r3, 80079ba <_strtod_l+0x4ea>
 80079b6:	4682      	mov	sl, r0
 80079b8:	468b      	mov	fp, r1
 80079ba:	4b2f      	ldr	r3, [pc, #188]	; (8007a78 <_strtod_l+0x5a8>)
 80079bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80079c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80079c4:	4652      	mov	r2, sl
 80079c6:	465b      	mov	r3, fp
 80079c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80079cc:	f7f8 fe34 	bl	8000638 <__aeabi_dmul>
 80079d0:	4b2a      	ldr	r3, [pc, #168]	; (8007a7c <_strtod_l+0x5ac>)
 80079d2:	460a      	mov	r2, r1
 80079d4:	400b      	ands	r3, r1
 80079d6:	492a      	ldr	r1, [pc, #168]	; (8007a80 <_strtod_l+0x5b0>)
 80079d8:	428b      	cmp	r3, r1
 80079da:	4682      	mov	sl, r0
 80079dc:	d8bc      	bhi.n	8007958 <_strtod_l+0x488>
 80079de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80079e2:	428b      	cmp	r3, r1
 80079e4:	bf86      	itte	hi
 80079e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007a84 <_strtod_l+0x5b4>
 80079ea:	f04f 3aff 	movhi.w	sl, #4294967295
 80079ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80079f2:	2300      	movs	r3, #0
 80079f4:	9304      	str	r3, [sp, #16]
 80079f6:	e084      	b.n	8007b02 <_strtod_l+0x632>
 80079f8:	f018 0f01 	tst.w	r8, #1
 80079fc:	d005      	beq.n	8007a0a <_strtod_l+0x53a>
 80079fe:	9b04      	ldr	r3, [sp, #16]
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fe18 	bl	8000638 <__aeabi_dmul>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	9a04      	ldr	r2, [sp, #16]
 8007a0c:	3208      	adds	r2, #8
 8007a0e:	f109 0901 	add.w	r9, r9, #1
 8007a12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a16:	9204      	str	r2, [sp, #16]
 8007a18:	e7c9      	b.n	80079ae <_strtod_l+0x4de>
 8007a1a:	d0ea      	beq.n	80079f2 <_strtod_l+0x522>
 8007a1c:	f1c8 0800 	rsb	r8, r8, #0
 8007a20:	f018 020f 	ands.w	r2, r8, #15
 8007a24:	d00a      	beq.n	8007a3c <_strtod_l+0x56c>
 8007a26:	4b13      	ldr	r3, [pc, #76]	; (8007a74 <_strtod_l+0x5a4>)
 8007a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a2c:	4650      	mov	r0, sl
 8007a2e:	4659      	mov	r1, fp
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	f7f8 ff2a 	bl	800088c <__aeabi_ddiv>
 8007a38:	4682      	mov	sl, r0
 8007a3a:	468b      	mov	fp, r1
 8007a3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007a40:	d0d7      	beq.n	80079f2 <_strtod_l+0x522>
 8007a42:	f1b8 0f1f 	cmp.w	r8, #31
 8007a46:	dd1f      	ble.n	8007a88 <_strtod_l+0x5b8>
 8007a48:	2500      	movs	r5, #0
 8007a4a:	462e      	mov	r6, r5
 8007a4c:	9507      	str	r5, [sp, #28]
 8007a4e:	9505      	str	r5, [sp, #20]
 8007a50:	2322      	movs	r3, #34	; 0x22
 8007a52:	f04f 0a00 	mov.w	sl, #0
 8007a56:	f04f 0b00 	mov.w	fp, #0
 8007a5a:	6023      	str	r3, [r4, #0]
 8007a5c:	e786      	b.n	800796c <_strtod_l+0x49c>
 8007a5e:	bf00      	nop
 8007a60:	0800b849 	.word	0x0800b849
 8007a64:	0800b888 	.word	0x0800b888
 8007a68:	0800b841 	.word	0x0800b841
 8007a6c:	0800b9cc 	.word	0x0800b9cc
 8007a70:	0800bc93 	.word	0x0800bc93
 8007a74:	0800bb58 	.word	0x0800bb58
 8007a78:	0800bb30 	.word	0x0800bb30
 8007a7c:	7ff00000 	.word	0x7ff00000
 8007a80:	7ca00000 	.word	0x7ca00000
 8007a84:	7fefffff 	.word	0x7fefffff
 8007a88:	f018 0310 	ands.w	r3, r8, #16
 8007a8c:	bf18      	it	ne
 8007a8e:	236a      	movne	r3, #106	; 0x6a
 8007a90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007e40 <_strtod_l+0x970>
 8007a94:	9304      	str	r3, [sp, #16]
 8007a96:	4650      	mov	r0, sl
 8007a98:	4659      	mov	r1, fp
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f018 0f01 	tst.w	r8, #1
 8007aa0:	d004      	beq.n	8007aac <_strtod_l+0x5dc>
 8007aa2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007aa6:	f7f8 fdc7 	bl	8000638 <__aeabi_dmul>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007ab0:	f109 0908 	add.w	r9, r9, #8
 8007ab4:	d1f2      	bne.n	8007a9c <_strtod_l+0x5cc>
 8007ab6:	b10b      	cbz	r3, 8007abc <_strtod_l+0x5ec>
 8007ab8:	4682      	mov	sl, r0
 8007aba:	468b      	mov	fp, r1
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	b1c3      	cbz	r3, 8007af2 <_strtod_l+0x622>
 8007ac0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007ac4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	4659      	mov	r1, fp
 8007acc:	dd11      	ble.n	8007af2 <_strtod_l+0x622>
 8007ace:	2b1f      	cmp	r3, #31
 8007ad0:	f340 8124 	ble.w	8007d1c <_strtod_l+0x84c>
 8007ad4:	2b34      	cmp	r3, #52	; 0x34
 8007ad6:	bfde      	ittt	le
 8007ad8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007adc:	f04f 33ff 	movle.w	r3, #4294967295
 8007ae0:	fa03 f202 	lslle.w	r2, r3, r2
 8007ae4:	f04f 0a00 	mov.w	sl, #0
 8007ae8:	bfcc      	ite	gt
 8007aea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007aee:	ea02 0b01 	andle.w	fp, r2, r1
 8007af2:	2200      	movs	r2, #0
 8007af4:	2300      	movs	r3, #0
 8007af6:	4650      	mov	r0, sl
 8007af8:	4659      	mov	r1, fp
 8007afa:	f7f9 f805 	bl	8000b08 <__aeabi_dcmpeq>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d1a2      	bne.n	8007a48 <_strtod_l+0x578>
 8007b02:	9b07      	ldr	r3, [sp, #28]
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	9908      	ldr	r1, [sp, #32]
 8007b08:	462b      	mov	r3, r5
 8007b0a:	463a      	mov	r2, r7
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f001 fe63 	bl	80097d8 <__s2b>
 8007b12:	9007      	str	r0, [sp, #28]
 8007b14:	2800      	cmp	r0, #0
 8007b16:	f43f af1f 	beq.w	8007958 <_strtod_l+0x488>
 8007b1a:	9b05      	ldr	r3, [sp, #20]
 8007b1c:	1b9e      	subs	r6, r3, r6
 8007b1e:	9b06      	ldr	r3, [sp, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bfb4      	ite	lt
 8007b24:	4633      	movlt	r3, r6
 8007b26:	2300      	movge	r3, #0
 8007b28:	930c      	str	r3, [sp, #48]	; 0x30
 8007b2a:	9b06      	ldr	r3, [sp, #24]
 8007b2c:	2500      	movs	r5, #0
 8007b2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b32:	9312      	str	r3, [sp, #72]	; 0x48
 8007b34:	462e      	mov	r6, r5
 8007b36:	9b07      	ldr	r3, [sp, #28]
 8007b38:	4620      	mov	r0, r4
 8007b3a:	6859      	ldr	r1, [r3, #4]
 8007b3c:	f001 fda4 	bl	8009688 <_Balloc>
 8007b40:	9005      	str	r0, [sp, #20]
 8007b42:	2800      	cmp	r0, #0
 8007b44:	f43f af0c 	beq.w	8007960 <_strtod_l+0x490>
 8007b48:	9b07      	ldr	r3, [sp, #28]
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	3202      	adds	r2, #2
 8007b4e:	f103 010c 	add.w	r1, r3, #12
 8007b52:	0092      	lsls	r2, r2, #2
 8007b54:	300c      	adds	r0, #12
 8007b56:	f001 fd89 	bl	800966c <memcpy>
 8007b5a:	ec4b ab10 	vmov	d0, sl, fp
 8007b5e:	aa1a      	add	r2, sp, #104	; 0x68
 8007b60:	a919      	add	r1, sp, #100	; 0x64
 8007b62:	4620      	mov	r0, r4
 8007b64:	f002 f97e 	bl	8009e64 <__d2b>
 8007b68:	ec4b ab18 	vmov	d8, sl, fp
 8007b6c:	9018      	str	r0, [sp, #96]	; 0x60
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	f43f aef6 	beq.w	8007960 <_strtod_l+0x490>
 8007b74:	2101      	movs	r1, #1
 8007b76:	4620      	mov	r0, r4
 8007b78:	f001 fec8 	bl	800990c <__i2b>
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f43f aeee 	beq.w	8007960 <_strtod_l+0x490>
 8007b84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b86:	9904      	ldr	r1, [sp, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	bfab      	itete	ge
 8007b8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007b8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b96:	bfac      	ite	ge
 8007b98:	eb03 0902 	addge.w	r9, r3, r2
 8007b9c:	1ad7      	sublt	r7, r2, r3
 8007b9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ba0:	eba3 0801 	sub.w	r8, r3, r1
 8007ba4:	4490      	add	r8, r2
 8007ba6:	4ba1      	ldr	r3, [pc, #644]	; (8007e2c <_strtod_l+0x95c>)
 8007ba8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bac:	4598      	cmp	r8, r3
 8007bae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007bb2:	f280 80c7 	bge.w	8007d44 <_strtod_l+0x874>
 8007bb6:	eba3 0308 	sub.w	r3, r3, r8
 8007bba:	2b1f      	cmp	r3, #31
 8007bbc:	eba2 0203 	sub.w	r2, r2, r3
 8007bc0:	f04f 0101 	mov.w	r1, #1
 8007bc4:	f300 80b1 	bgt.w	8007d2a <_strtod_l+0x85a>
 8007bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8007bce:	2300      	movs	r3, #0
 8007bd0:	9308      	str	r3, [sp, #32]
 8007bd2:	eb09 0802 	add.w	r8, r9, r2
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	45c1      	cmp	r9, r8
 8007bda:	4417      	add	r7, r2
 8007bdc:	441f      	add	r7, r3
 8007bde:	464b      	mov	r3, r9
 8007be0:	bfa8      	it	ge
 8007be2:	4643      	movge	r3, r8
 8007be4:	42bb      	cmp	r3, r7
 8007be6:	bfa8      	it	ge
 8007be8:	463b      	movge	r3, r7
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bfc2      	ittt	gt
 8007bee:	eba8 0803 	subgt.w	r8, r8, r3
 8007bf2:	1aff      	subgt	r7, r7, r3
 8007bf4:	eba9 0903 	subgt.w	r9, r9, r3
 8007bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	dd17      	ble.n	8007c2e <_strtod_l+0x75e>
 8007bfe:	4631      	mov	r1, r6
 8007c00:	461a      	mov	r2, r3
 8007c02:	4620      	mov	r0, r4
 8007c04:	f001 ff42 	bl	8009a8c <__pow5mult>
 8007c08:	4606      	mov	r6, r0
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	f43f aea8 	beq.w	8007960 <_strtod_l+0x490>
 8007c10:	4601      	mov	r1, r0
 8007c12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c14:	4620      	mov	r0, r4
 8007c16:	f001 fe8f 	bl	8009938 <__multiply>
 8007c1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f43f ae9f 	beq.w	8007960 <_strtod_l+0x490>
 8007c22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c24:	4620      	mov	r0, r4
 8007c26:	f001 fd6f 	bl	8009708 <_Bfree>
 8007c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c2c:	9318      	str	r3, [sp, #96]	; 0x60
 8007c2e:	f1b8 0f00 	cmp.w	r8, #0
 8007c32:	f300 808c 	bgt.w	8007d4e <_strtod_l+0x87e>
 8007c36:	9b06      	ldr	r3, [sp, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	dd08      	ble.n	8007c4e <_strtod_l+0x77e>
 8007c3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c3e:	9905      	ldr	r1, [sp, #20]
 8007c40:	4620      	mov	r0, r4
 8007c42:	f001 ff23 	bl	8009a8c <__pow5mult>
 8007c46:	9005      	str	r0, [sp, #20]
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f43f ae89 	beq.w	8007960 <_strtod_l+0x490>
 8007c4e:	2f00      	cmp	r7, #0
 8007c50:	dd08      	ble.n	8007c64 <_strtod_l+0x794>
 8007c52:	9905      	ldr	r1, [sp, #20]
 8007c54:	463a      	mov	r2, r7
 8007c56:	4620      	mov	r0, r4
 8007c58:	f001 ff72 	bl	8009b40 <__lshift>
 8007c5c:	9005      	str	r0, [sp, #20]
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f43f ae7e 	beq.w	8007960 <_strtod_l+0x490>
 8007c64:	f1b9 0f00 	cmp.w	r9, #0
 8007c68:	dd08      	ble.n	8007c7c <_strtod_l+0x7ac>
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	464a      	mov	r2, r9
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f001 ff66 	bl	8009b40 <__lshift>
 8007c74:	4606      	mov	r6, r0
 8007c76:	2800      	cmp	r0, #0
 8007c78:	f43f ae72 	beq.w	8007960 <_strtod_l+0x490>
 8007c7c:	9a05      	ldr	r2, [sp, #20]
 8007c7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c80:	4620      	mov	r0, r4
 8007c82:	f001 ffe9 	bl	8009c58 <__mdiff>
 8007c86:	4605      	mov	r5, r0
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	f43f ae69 	beq.w	8007960 <_strtod_l+0x490>
 8007c8e:	68c3      	ldr	r3, [r0, #12]
 8007c90:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c92:	2300      	movs	r3, #0
 8007c94:	60c3      	str	r3, [r0, #12]
 8007c96:	4631      	mov	r1, r6
 8007c98:	f001 ffc2 	bl	8009c20 <__mcmp>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	da60      	bge.n	8007d62 <_strtod_l+0x892>
 8007ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ca6:	f040 8082 	bne.w	8007dae <_strtod_l+0x8de>
 8007caa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d17d      	bne.n	8007dae <_strtod_l+0x8de>
 8007cb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cb6:	0d1b      	lsrs	r3, r3, #20
 8007cb8:	051b      	lsls	r3, r3, #20
 8007cba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007cbe:	d976      	bls.n	8007dae <_strtod_l+0x8de>
 8007cc0:	696b      	ldr	r3, [r5, #20]
 8007cc2:	b913      	cbnz	r3, 8007cca <_strtod_l+0x7fa>
 8007cc4:	692b      	ldr	r3, [r5, #16]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	dd71      	ble.n	8007dae <_strtod_l+0x8de>
 8007cca:	4629      	mov	r1, r5
 8007ccc:	2201      	movs	r2, #1
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f001 ff36 	bl	8009b40 <__lshift>
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	f001 ffa2 	bl	8009c20 <__mcmp>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	dd66      	ble.n	8007dae <_strtod_l+0x8de>
 8007ce0:	9904      	ldr	r1, [sp, #16]
 8007ce2:	4a53      	ldr	r2, [pc, #332]	; (8007e30 <_strtod_l+0x960>)
 8007ce4:	465b      	mov	r3, fp
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	f000 8081 	beq.w	8007dee <_strtod_l+0x91e>
 8007cec:	ea02 010b 	and.w	r1, r2, fp
 8007cf0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007cf4:	dc7b      	bgt.n	8007dee <_strtod_l+0x91e>
 8007cf6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007cfa:	f77f aea9 	ble.w	8007a50 <_strtod_l+0x580>
 8007cfe:	4b4d      	ldr	r3, [pc, #308]	; (8007e34 <_strtod_l+0x964>)
 8007d00:	4650      	mov	r0, sl
 8007d02:	4659      	mov	r1, fp
 8007d04:	2200      	movs	r2, #0
 8007d06:	f7f8 fc97 	bl	8000638 <__aeabi_dmul>
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4303      	orrs	r3, r0
 8007d0e:	bf08      	it	eq
 8007d10:	2322      	moveq	r3, #34	; 0x22
 8007d12:	4682      	mov	sl, r0
 8007d14:	468b      	mov	fp, r1
 8007d16:	bf08      	it	eq
 8007d18:	6023      	streq	r3, [r4, #0]
 8007d1a:	e62b      	b.n	8007974 <_strtod_l+0x4a4>
 8007d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	ea03 0a0a 	and.w	sl, r3, sl
 8007d28:	e6e3      	b.n	8007af2 <_strtod_l+0x622>
 8007d2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007d2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007d32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007d36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007d3a:	fa01 f308 	lsl.w	r3, r1, r8
 8007d3e:	9308      	str	r3, [sp, #32]
 8007d40:	910d      	str	r1, [sp, #52]	; 0x34
 8007d42:	e746      	b.n	8007bd2 <_strtod_l+0x702>
 8007d44:	2300      	movs	r3, #0
 8007d46:	9308      	str	r3, [sp, #32]
 8007d48:	2301      	movs	r3, #1
 8007d4a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d4c:	e741      	b.n	8007bd2 <_strtod_l+0x702>
 8007d4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d50:	4642      	mov	r2, r8
 8007d52:	4620      	mov	r0, r4
 8007d54:	f001 fef4 	bl	8009b40 <__lshift>
 8007d58:	9018      	str	r0, [sp, #96]	; 0x60
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f47f af6b 	bne.w	8007c36 <_strtod_l+0x766>
 8007d60:	e5fe      	b.n	8007960 <_strtod_l+0x490>
 8007d62:	465f      	mov	r7, fp
 8007d64:	d16e      	bne.n	8007e44 <_strtod_l+0x974>
 8007d66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d6c:	b342      	cbz	r2, 8007dc0 <_strtod_l+0x8f0>
 8007d6e:	4a32      	ldr	r2, [pc, #200]	; (8007e38 <_strtod_l+0x968>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d128      	bne.n	8007dc6 <_strtod_l+0x8f6>
 8007d74:	9b04      	ldr	r3, [sp, #16]
 8007d76:	4651      	mov	r1, sl
 8007d78:	b1eb      	cbz	r3, 8007db6 <_strtod_l+0x8e6>
 8007d7a:	4b2d      	ldr	r3, [pc, #180]	; (8007e30 <_strtod_l+0x960>)
 8007d7c:	403b      	ands	r3, r7
 8007d7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295
 8007d86:	d819      	bhi.n	8007dbc <_strtod_l+0x8ec>
 8007d88:	0d1b      	lsrs	r3, r3, #20
 8007d8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	4299      	cmp	r1, r3
 8007d94:	d117      	bne.n	8007dc6 <_strtod_l+0x8f6>
 8007d96:	4b29      	ldr	r3, [pc, #164]	; (8007e3c <_strtod_l+0x96c>)
 8007d98:	429f      	cmp	r7, r3
 8007d9a:	d102      	bne.n	8007da2 <_strtod_l+0x8d2>
 8007d9c:	3101      	adds	r1, #1
 8007d9e:	f43f addf 	beq.w	8007960 <_strtod_l+0x490>
 8007da2:	4b23      	ldr	r3, [pc, #140]	; (8007e30 <_strtod_l+0x960>)
 8007da4:	403b      	ands	r3, r7
 8007da6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007daa:	f04f 0a00 	mov.w	sl, #0
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1a4      	bne.n	8007cfe <_strtod_l+0x82e>
 8007db4:	e5de      	b.n	8007974 <_strtod_l+0x4a4>
 8007db6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dba:	e7ea      	b.n	8007d92 <_strtod_l+0x8c2>
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	e7e8      	b.n	8007d92 <_strtod_l+0x8c2>
 8007dc0:	ea53 030a 	orrs.w	r3, r3, sl
 8007dc4:	d08c      	beq.n	8007ce0 <_strtod_l+0x810>
 8007dc6:	9b08      	ldr	r3, [sp, #32]
 8007dc8:	b1db      	cbz	r3, 8007e02 <_strtod_l+0x932>
 8007dca:	423b      	tst	r3, r7
 8007dcc:	d0ef      	beq.n	8007dae <_strtod_l+0x8de>
 8007dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd0:	9a04      	ldr	r2, [sp, #16]
 8007dd2:	4650      	mov	r0, sl
 8007dd4:	4659      	mov	r1, fp
 8007dd6:	b1c3      	cbz	r3, 8007e0a <_strtod_l+0x93a>
 8007dd8:	f7ff fb5b 	bl	8007492 <sulp>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	ec51 0b18 	vmov	r0, r1, d8
 8007de4:	f7f8 fa72 	bl	80002cc <__adddf3>
 8007de8:	4682      	mov	sl, r0
 8007dea:	468b      	mov	fp, r1
 8007dec:	e7df      	b.n	8007dae <_strtod_l+0x8de>
 8007dee:	4013      	ands	r3, r2
 8007df0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007df4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007df8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007dfc:	f04f 3aff 	mov.w	sl, #4294967295
 8007e00:	e7d5      	b.n	8007dae <_strtod_l+0x8de>
 8007e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e04:	ea13 0f0a 	tst.w	r3, sl
 8007e08:	e7e0      	b.n	8007dcc <_strtod_l+0x8fc>
 8007e0a:	f7ff fb42 	bl	8007492 <sulp>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	ec51 0b18 	vmov	r0, r1, d8
 8007e16:	f7f8 fa57 	bl	80002c8 <__aeabi_dsub>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4682      	mov	sl, r0
 8007e20:	468b      	mov	fp, r1
 8007e22:	f7f8 fe71 	bl	8000b08 <__aeabi_dcmpeq>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d0c1      	beq.n	8007dae <_strtod_l+0x8de>
 8007e2a:	e611      	b.n	8007a50 <_strtod_l+0x580>
 8007e2c:	fffffc02 	.word	0xfffffc02
 8007e30:	7ff00000 	.word	0x7ff00000
 8007e34:	39500000 	.word	0x39500000
 8007e38:	000fffff 	.word	0x000fffff
 8007e3c:	7fefffff 	.word	0x7fefffff
 8007e40:	0800b8a0 	.word	0x0800b8a0
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	f002 f868 	bl	8009f1c <__ratio>
 8007e4c:	ec59 8b10 	vmov	r8, r9, d0
 8007e50:	ee10 0a10 	vmov	r0, s0
 8007e54:	2200      	movs	r2, #0
 8007e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	f7f8 fe68 	bl	8000b30 <__aeabi_dcmple>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d07a      	beq.n	8007f5a <_strtod_l+0xa8a>
 8007e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d04a      	beq.n	8007f00 <_strtod_l+0xa30>
 8007e6a:	4b95      	ldr	r3, [pc, #596]	; (80080c0 <_strtod_l+0xbf0>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80080c0 <_strtod_l+0xbf0>
 8007e76:	f04f 0800 	mov.w	r8, #0
 8007e7a:	4b92      	ldr	r3, [pc, #584]	; (80080c4 <_strtod_l+0xbf4>)
 8007e7c:	403b      	ands	r3, r7
 8007e7e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e82:	4b91      	ldr	r3, [pc, #580]	; (80080c8 <_strtod_l+0xbf8>)
 8007e84:	429a      	cmp	r2, r3
 8007e86:	f040 80b0 	bne.w	8007fea <_strtod_l+0xb1a>
 8007e8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e92:	ec4b ab10 	vmov	d0, sl, fp
 8007e96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e9a:	f001 ff67 	bl	8009d6c <__ulp>
 8007e9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ea2:	ec53 2b10 	vmov	r2, r3, d0
 8007ea6:	f7f8 fbc7 	bl	8000638 <__aeabi_dmul>
 8007eaa:	4652      	mov	r2, sl
 8007eac:	465b      	mov	r3, fp
 8007eae:	f7f8 fa0d 	bl	80002cc <__adddf3>
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4983      	ldr	r1, [pc, #524]	; (80080c4 <_strtod_l+0xbf4>)
 8007eb6:	4a85      	ldr	r2, [pc, #532]	; (80080cc <_strtod_l+0xbfc>)
 8007eb8:	4019      	ands	r1, r3
 8007eba:	4291      	cmp	r1, r2
 8007ebc:	4682      	mov	sl, r0
 8007ebe:	d960      	bls.n	8007f82 <_strtod_l+0xab2>
 8007ec0:	ee18 3a90 	vmov	r3, s17
 8007ec4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d104      	bne.n	8007ed6 <_strtod_l+0xa06>
 8007ecc:	ee18 3a10 	vmov	r3, s16
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	f43f ad45 	beq.w	8007960 <_strtod_l+0x490>
 8007ed6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80080d8 <_strtod_l+0xc08>
 8007eda:	f04f 3aff 	mov.w	sl, #4294967295
 8007ede:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f001 fc11 	bl	8009708 <_Bfree>
 8007ee6:	9905      	ldr	r1, [sp, #20]
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f001 fc0d 	bl	8009708 <_Bfree>
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f001 fc09 	bl	8009708 <_Bfree>
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f001 fc05 	bl	8009708 <_Bfree>
 8007efe:	e61a      	b.n	8007b36 <_strtod_l+0x666>
 8007f00:	f1ba 0f00 	cmp.w	sl, #0
 8007f04:	d11b      	bne.n	8007f3e <_strtod_l+0xa6e>
 8007f06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f0a:	b9f3      	cbnz	r3, 8007f4a <_strtod_l+0xa7a>
 8007f0c:	4b6c      	ldr	r3, [pc, #432]	; (80080c0 <_strtod_l+0xbf0>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 fe02 	bl	8000b1c <__aeabi_dcmplt>
 8007f18:	b9d0      	cbnz	r0, 8007f50 <_strtod_l+0xa80>
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	4b6c      	ldr	r3, [pc, #432]	; (80080d0 <_strtod_l+0xc00>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	f7f8 fb89 	bl	8000638 <__aeabi_dmul>
 8007f26:	4680      	mov	r8, r0
 8007f28:	4689      	mov	r9, r1
 8007f2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007f32:	9315      	str	r3, [sp, #84]	; 0x54
 8007f34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f3c:	e79d      	b.n	8007e7a <_strtod_l+0x9aa>
 8007f3e:	f1ba 0f01 	cmp.w	sl, #1
 8007f42:	d102      	bne.n	8007f4a <_strtod_l+0xa7a>
 8007f44:	2f00      	cmp	r7, #0
 8007f46:	f43f ad83 	beq.w	8007a50 <_strtod_l+0x580>
 8007f4a:	4b62      	ldr	r3, [pc, #392]	; (80080d4 <_strtod_l+0xc04>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	e78e      	b.n	8007e6e <_strtod_l+0x99e>
 8007f50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80080d0 <_strtod_l+0xc00>
 8007f54:	f04f 0800 	mov.w	r8, #0
 8007f58:	e7e7      	b.n	8007f2a <_strtod_l+0xa5a>
 8007f5a:	4b5d      	ldr	r3, [pc, #372]	; (80080d0 <_strtod_l+0xc00>)
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	4649      	mov	r1, r9
 8007f60:	2200      	movs	r2, #0
 8007f62:	f7f8 fb69 	bl	8000638 <__aeabi_dmul>
 8007f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f68:	4680      	mov	r8, r0
 8007f6a:	4689      	mov	r9, r1
 8007f6c:	b933      	cbnz	r3, 8007f7c <_strtod_l+0xaac>
 8007f6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f72:	900e      	str	r0, [sp, #56]	; 0x38
 8007f74:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f7a:	e7dd      	b.n	8007f38 <_strtod_l+0xa68>
 8007f7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007f80:	e7f9      	b.n	8007f76 <_strtod_l+0xaa6>
 8007f82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1a8      	bne.n	8007ede <_strtod_l+0xa0e>
 8007f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f92:	0d1b      	lsrs	r3, r3, #20
 8007f94:	051b      	lsls	r3, r3, #20
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d1a1      	bne.n	8007ede <_strtod_l+0xa0e>
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 feab 	bl	8000cf8 <__aeabi_d2lz>
 8007fa2:	f7f8 fb1b 	bl	80005dc <__aeabi_l2d>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	f7f8 f98b 	bl	80002c8 <__aeabi_dsub>
 8007fb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fb8:	ea43 030a 	orr.w	r3, r3, sl
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	4680      	mov	r8, r0
 8007fc0:	4689      	mov	r9, r1
 8007fc2:	d055      	beq.n	8008070 <_strtod_l+0xba0>
 8007fc4:	a336      	add	r3, pc, #216	; (adr r3, 80080a0 <_strtod_l+0xbd0>)
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f7f8 fda7 	bl	8000b1c <__aeabi_dcmplt>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f47f acd0 	bne.w	8007974 <_strtod_l+0x4a4>
 8007fd4:	a334      	add	r3, pc, #208	; (adr r3, 80080a8 <_strtod_l+0xbd8>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	4640      	mov	r0, r8
 8007fdc:	4649      	mov	r1, r9
 8007fde:	f7f8 fdbb 	bl	8000b58 <__aeabi_dcmpgt>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	f43f af7b 	beq.w	8007ede <_strtod_l+0xa0e>
 8007fe8:	e4c4      	b.n	8007974 <_strtod_l+0x4a4>
 8007fea:	9b04      	ldr	r3, [sp, #16]
 8007fec:	b333      	cbz	r3, 800803c <_strtod_l+0xb6c>
 8007fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ff4:	d822      	bhi.n	800803c <_strtod_l+0xb6c>
 8007ff6:	a32e      	add	r3, pc, #184	; (adr r3, 80080b0 <_strtod_l+0xbe0>)
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	4649      	mov	r1, r9
 8008000:	f7f8 fd96 	bl	8000b30 <__aeabi_dcmple>
 8008004:	b1a0      	cbz	r0, 8008030 <_strtod_l+0xb60>
 8008006:	4649      	mov	r1, r9
 8008008:	4640      	mov	r0, r8
 800800a:	f7f8 fded 	bl	8000be8 <__aeabi_d2uiz>
 800800e:	2801      	cmp	r0, #1
 8008010:	bf38      	it	cc
 8008012:	2001      	movcc	r0, #1
 8008014:	f7f8 fa96 	bl	8000544 <__aeabi_ui2d>
 8008018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800801a:	4680      	mov	r8, r0
 800801c:	4689      	mov	r9, r1
 800801e:	bb23      	cbnz	r3, 800806a <_strtod_l+0xb9a>
 8008020:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008024:	9010      	str	r0, [sp, #64]	; 0x40
 8008026:	9311      	str	r3, [sp, #68]	; 0x44
 8008028:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800802c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008034:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008038:	1a9b      	subs	r3, r3, r2
 800803a:	9309      	str	r3, [sp, #36]	; 0x24
 800803c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008040:	eeb0 0a48 	vmov.f32	s0, s16
 8008044:	eef0 0a68 	vmov.f32	s1, s17
 8008048:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800804c:	f001 fe8e 	bl	8009d6c <__ulp>
 8008050:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008054:	ec53 2b10 	vmov	r2, r3, d0
 8008058:	f7f8 faee 	bl	8000638 <__aeabi_dmul>
 800805c:	ec53 2b18 	vmov	r2, r3, d8
 8008060:	f7f8 f934 	bl	80002cc <__adddf3>
 8008064:	4682      	mov	sl, r0
 8008066:	468b      	mov	fp, r1
 8008068:	e78d      	b.n	8007f86 <_strtod_l+0xab6>
 800806a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800806e:	e7db      	b.n	8008028 <_strtod_l+0xb58>
 8008070:	a311      	add	r3, pc, #68	; (adr r3, 80080b8 <_strtod_l+0xbe8>)
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	f7f8 fd51 	bl	8000b1c <__aeabi_dcmplt>
 800807a:	e7b2      	b.n	8007fe2 <_strtod_l+0xb12>
 800807c:	2300      	movs	r3, #0
 800807e:	930a      	str	r3, [sp, #40]	; 0x28
 8008080:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	f7ff ba6b 	b.w	8007560 <_strtod_l+0x90>
 800808a:	2a65      	cmp	r2, #101	; 0x65
 800808c:	f43f ab5f 	beq.w	800774e <_strtod_l+0x27e>
 8008090:	2a45      	cmp	r2, #69	; 0x45
 8008092:	f43f ab5c 	beq.w	800774e <_strtod_l+0x27e>
 8008096:	2301      	movs	r3, #1
 8008098:	f7ff bb94 	b.w	80077c4 <_strtod_l+0x2f4>
 800809c:	f3af 8000 	nop.w
 80080a0:	94a03595 	.word	0x94a03595
 80080a4:	3fdfffff 	.word	0x3fdfffff
 80080a8:	35afe535 	.word	0x35afe535
 80080ac:	3fe00000 	.word	0x3fe00000
 80080b0:	ffc00000 	.word	0xffc00000
 80080b4:	41dfffff 	.word	0x41dfffff
 80080b8:	94a03595 	.word	0x94a03595
 80080bc:	3fcfffff 	.word	0x3fcfffff
 80080c0:	3ff00000 	.word	0x3ff00000
 80080c4:	7ff00000 	.word	0x7ff00000
 80080c8:	7fe00000 	.word	0x7fe00000
 80080cc:	7c9fffff 	.word	0x7c9fffff
 80080d0:	3fe00000 	.word	0x3fe00000
 80080d4:	bff00000 	.word	0xbff00000
 80080d8:	7fefffff 	.word	0x7fefffff

080080dc <_strtod_r>:
 80080dc:	4b01      	ldr	r3, [pc, #4]	; (80080e4 <_strtod_r+0x8>)
 80080de:	f7ff b9f7 	b.w	80074d0 <_strtod_l>
 80080e2:	bf00      	nop
 80080e4:	20000074 	.word	0x20000074

080080e8 <_strtol_l.constprop.0>:
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ee:	d001      	beq.n	80080f4 <_strtol_l.constprop.0+0xc>
 80080f0:	2b24      	cmp	r3, #36	; 0x24
 80080f2:	d906      	bls.n	8008102 <_strtol_l.constprop.0+0x1a>
 80080f4:	f7fe fa8a 	bl	800660c <__errno>
 80080f8:	2316      	movs	r3, #22
 80080fa:	6003      	str	r3, [r0, #0]
 80080fc:	2000      	movs	r0, #0
 80080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008102:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80081e8 <_strtol_l.constprop.0+0x100>
 8008106:	460d      	mov	r5, r1
 8008108:	462e      	mov	r6, r5
 800810a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800810e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008112:	f017 0708 	ands.w	r7, r7, #8
 8008116:	d1f7      	bne.n	8008108 <_strtol_l.constprop.0+0x20>
 8008118:	2c2d      	cmp	r4, #45	; 0x2d
 800811a:	d132      	bne.n	8008182 <_strtol_l.constprop.0+0x9a>
 800811c:	782c      	ldrb	r4, [r5, #0]
 800811e:	2701      	movs	r7, #1
 8008120:	1cb5      	adds	r5, r6, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d05b      	beq.n	80081de <_strtol_l.constprop.0+0xf6>
 8008126:	2b10      	cmp	r3, #16
 8008128:	d109      	bne.n	800813e <_strtol_l.constprop.0+0x56>
 800812a:	2c30      	cmp	r4, #48	; 0x30
 800812c:	d107      	bne.n	800813e <_strtol_l.constprop.0+0x56>
 800812e:	782c      	ldrb	r4, [r5, #0]
 8008130:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008134:	2c58      	cmp	r4, #88	; 0x58
 8008136:	d14d      	bne.n	80081d4 <_strtol_l.constprop.0+0xec>
 8008138:	786c      	ldrb	r4, [r5, #1]
 800813a:	2310      	movs	r3, #16
 800813c:	3502      	adds	r5, #2
 800813e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008142:	f108 38ff 	add.w	r8, r8, #4294967295
 8008146:	f04f 0c00 	mov.w	ip, #0
 800814a:	fbb8 f9f3 	udiv	r9, r8, r3
 800814e:	4666      	mov	r6, ip
 8008150:	fb03 8a19 	mls	sl, r3, r9, r8
 8008154:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008158:	f1be 0f09 	cmp.w	lr, #9
 800815c:	d816      	bhi.n	800818c <_strtol_l.constprop.0+0xa4>
 800815e:	4674      	mov	r4, lr
 8008160:	42a3      	cmp	r3, r4
 8008162:	dd24      	ble.n	80081ae <_strtol_l.constprop.0+0xc6>
 8008164:	f1bc 0f00 	cmp.w	ip, #0
 8008168:	db1e      	blt.n	80081a8 <_strtol_l.constprop.0+0xc0>
 800816a:	45b1      	cmp	r9, r6
 800816c:	d31c      	bcc.n	80081a8 <_strtol_l.constprop.0+0xc0>
 800816e:	d101      	bne.n	8008174 <_strtol_l.constprop.0+0x8c>
 8008170:	45a2      	cmp	sl, r4
 8008172:	db19      	blt.n	80081a8 <_strtol_l.constprop.0+0xc0>
 8008174:	fb06 4603 	mla	r6, r6, r3, r4
 8008178:	f04f 0c01 	mov.w	ip, #1
 800817c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008180:	e7e8      	b.n	8008154 <_strtol_l.constprop.0+0x6c>
 8008182:	2c2b      	cmp	r4, #43	; 0x2b
 8008184:	bf04      	itt	eq
 8008186:	782c      	ldrbeq	r4, [r5, #0]
 8008188:	1cb5      	addeq	r5, r6, #2
 800818a:	e7ca      	b.n	8008122 <_strtol_l.constprop.0+0x3a>
 800818c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008190:	f1be 0f19 	cmp.w	lr, #25
 8008194:	d801      	bhi.n	800819a <_strtol_l.constprop.0+0xb2>
 8008196:	3c37      	subs	r4, #55	; 0x37
 8008198:	e7e2      	b.n	8008160 <_strtol_l.constprop.0+0x78>
 800819a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800819e:	f1be 0f19 	cmp.w	lr, #25
 80081a2:	d804      	bhi.n	80081ae <_strtol_l.constprop.0+0xc6>
 80081a4:	3c57      	subs	r4, #87	; 0x57
 80081a6:	e7db      	b.n	8008160 <_strtol_l.constprop.0+0x78>
 80081a8:	f04f 3cff 	mov.w	ip, #4294967295
 80081ac:	e7e6      	b.n	800817c <_strtol_l.constprop.0+0x94>
 80081ae:	f1bc 0f00 	cmp.w	ip, #0
 80081b2:	da05      	bge.n	80081c0 <_strtol_l.constprop.0+0xd8>
 80081b4:	2322      	movs	r3, #34	; 0x22
 80081b6:	6003      	str	r3, [r0, #0]
 80081b8:	4646      	mov	r6, r8
 80081ba:	b942      	cbnz	r2, 80081ce <_strtol_l.constprop.0+0xe6>
 80081bc:	4630      	mov	r0, r6
 80081be:	e79e      	b.n	80080fe <_strtol_l.constprop.0+0x16>
 80081c0:	b107      	cbz	r7, 80081c4 <_strtol_l.constprop.0+0xdc>
 80081c2:	4276      	negs	r6, r6
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	d0f9      	beq.n	80081bc <_strtol_l.constprop.0+0xd4>
 80081c8:	f1bc 0f00 	cmp.w	ip, #0
 80081cc:	d000      	beq.n	80081d0 <_strtol_l.constprop.0+0xe8>
 80081ce:	1e69      	subs	r1, r5, #1
 80081d0:	6011      	str	r1, [r2, #0]
 80081d2:	e7f3      	b.n	80081bc <_strtol_l.constprop.0+0xd4>
 80081d4:	2430      	movs	r4, #48	; 0x30
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1b1      	bne.n	800813e <_strtol_l.constprop.0+0x56>
 80081da:	2308      	movs	r3, #8
 80081dc:	e7af      	b.n	800813e <_strtol_l.constprop.0+0x56>
 80081de:	2c30      	cmp	r4, #48	; 0x30
 80081e0:	d0a5      	beq.n	800812e <_strtol_l.constprop.0+0x46>
 80081e2:	230a      	movs	r3, #10
 80081e4:	e7ab      	b.n	800813e <_strtol_l.constprop.0+0x56>
 80081e6:	bf00      	nop
 80081e8:	0800b8c9 	.word	0x0800b8c9

080081ec <_strtol_r>:
 80081ec:	f7ff bf7c 	b.w	80080e8 <_strtol_l.constprop.0>

080081f0 <_write_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d07      	ldr	r5, [pc, #28]	; (8008210 <_write_r+0x20>)
 80081f4:	4604      	mov	r4, r0
 80081f6:	4608      	mov	r0, r1
 80081f8:	4611      	mov	r1, r2
 80081fa:	2200      	movs	r2, #0
 80081fc:	602a      	str	r2, [r5, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	f7f9 fde5 	bl	8001dce <_write>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_write_r+0x1e>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_write_r+0x1e>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	200003e4 	.word	0x200003e4

08008214 <_close_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d06      	ldr	r5, [pc, #24]	; (8008230 <_close_r+0x1c>)
 8008218:	2300      	movs	r3, #0
 800821a:	4604      	mov	r4, r0
 800821c:	4608      	mov	r0, r1
 800821e:	602b      	str	r3, [r5, #0]
 8008220:	f7f9 fdf1 	bl	8001e06 <_close>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_close_r+0x1a>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_close_r+0x1a>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	200003e4 	.word	0x200003e4

08008234 <quorem>:
 8008234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	6903      	ldr	r3, [r0, #16]
 800823a:	690c      	ldr	r4, [r1, #16]
 800823c:	42a3      	cmp	r3, r4
 800823e:	4607      	mov	r7, r0
 8008240:	f2c0 8081 	blt.w	8008346 <quorem+0x112>
 8008244:	3c01      	subs	r4, #1
 8008246:	f101 0814 	add.w	r8, r1, #20
 800824a:	f100 0514 	add.w	r5, r0, #20
 800824e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800825c:	3301      	adds	r3, #1
 800825e:	429a      	cmp	r2, r3
 8008260:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008268:	fbb2 f6f3 	udiv	r6, r2, r3
 800826c:	d331      	bcc.n	80082d2 <quorem+0x9e>
 800826e:	f04f 0e00 	mov.w	lr, #0
 8008272:	4640      	mov	r0, r8
 8008274:	46ac      	mov	ip, r5
 8008276:	46f2      	mov	sl, lr
 8008278:	f850 2b04 	ldr.w	r2, [r0], #4
 800827c:	b293      	uxth	r3, r2
 800827e:	fb06 e303 	mla	r3, r6, r3, lr
 8008282:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008286:	b29b      	uxth	r3, r3
 8008288:	ebaa 0303 	sub.w	r3, sl, r3
 800828c:	f8dc a000 	ldr.w	sl, [ip]
 8008290:	0c12      	lsrs	r2, r2, #16
 8008292:	fa13 f38a 	uxtah	r3, r3, sl
 8008296:	fb06 e202 	mla	r2, r6, r2, lr
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	9b00      	ldr	r3, [sp, #0]
 800829e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082a2:	b292      	uxth	r2, r2
 80082a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80082b0:	4581      	cmp	r9, r0
 80082b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b6:	f84c 3b04 	str.w	r3, [ip], #4
 80082ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082be:	d2db      	bcs.n	8008278 <quorem+0x44>
 80082c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80082c4:	b92b      	cbnz	r3, 80082d2 <quorem+0x9e>
 80082c6:	9b01      	ldr	r3, [sp, #4]
 80082c8:	3b04      	subs	r3, #4
 80082ca:	429d      	cmp	r5, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	d32e      	bcc.n	800832e <quorem+0xfa>
 80082d0:	613c      	str	r4, [r7, #16]
 80082d2:	4638      	mov	r0, r7
 80082d4:	f001 fca4 	bl	8009c20 <__mcmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	db24      	blt.n	8008326 <quorem+0xf2>
 80082dc:	3601      	adds	r6, #1
 80082de:	4628      	mov	r0, r5
 80082e0:	f04f 0c00 	mov.w	ip, #0
 80082e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80082e8:	f8d0 e000 	ldr.w	lr, [r0]
 80082ec:	b293      	uxth	r3, r2
 80082ee:	ebac 0303 	sub.w	r3, ip, r3
 80082f2:	0c12      	lsrs	r2, r2, #16
 80082f4:	fa13 f38e 	uxtah	r3, r3, lr
 80082f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008300:	b29b      	uxth	r3, r3
 8008302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008306:	45c1      	cmp	r9, r8
 8008308:	f840 3b04 	str.w	r3, [r0], #4
 800830c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008310:	d2e8      	bcs.n	80082e4 <quorem+0xb0>
 8008312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800831a:	b922      	cbnz	r2, 8008326 <quorem+0xf2>
 800831c:	3b04      	subs	r3, #4
 800831e:	429d      	cmp	r5, r3
 8008320:	461a      	mov	r2, r3
 8008322:	d30a      	bcc.n	800833a <quorem+0x106>
 8008324:	613c      	str	r4, [r7, #16]
 8008326:	4630      	mov	r0, r6
 8008328:	b003      	add	sp, #12
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	3b04      	subs	r3, #4
 8008332:	2a00      	cmp	r2, #0
 8008334:	d1cc      	bne.n	80082d0 <quorem+0x9c>
 8008336:	3c01      	subs	r4, #1
 8008338:	e7c7      	b.n	80082ca <quorem+0x96>
 800833a:	6812      	ldr	r2, [r2, #0]
 800833c:	3b04      	subs	r3, #4
 800833e:	2a00      	cmp	r2, #0
 8008340:	d1f0      	bne.n	8008324 <quorem+0xf0>
 8008342:	3c01      	subs	r4, #1
 8008344:	e7eb      	b.n	800831e <quorem+0xea>
 8008346:	2000      	movs	r0, #0
 8008348:	e7ee      	b.n	8008328 <quorem+0xf4>
 800834a:	0000      	movs	r0, r0
 800834c:	0000      	movs	r0, r0
	...

08008350 <_dtoa_r>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	ed2d 8b04 	vpush	{d8-d9}
 8008358:	ec57 6b10 	vmov	r6, r7, d0
 800835c:	b093      	sub	sp, #76	; 0x4c
 800835e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008364:	9106      	str	r1, [sp, #24]
 8008366:	ee10 aa10 	vmov	sl, s0
 800836a:	4604      	mov	r4, r0
 800836c:	9209      	str	r2, [sp, #36]	; 0x24
 800836e:	930c      	str	r3, [sp, #48]	; 0x30
 8008370:	46bb      	mov	fp, r7
 8008372:	b975      	cbnz	r5, 8008392 <_dtoa_r+0x42>
 8008374:	2010      	movs	r0, #16
 8008376:	f001 f95f 	bl	8009638 <malloc>
 800837a:	4602      	mov	r2, r0
 800837c:	6260      	str	r0, [r4, #36]	; 0x24
 800837e:	b920      	cbnz	r0, 800838a <_dtoa_r+0x3a>
 8008380:	4ba7      	ldr	r3, [pc, #668]	; (8008620 <_dtoa_r+0x2d0>)
 8008382:	21ea      	movs	r1, #234	; 0xea
 8008384:	48a7      	ldr	r0, [pc, #668]	; (8008624 <_dtoa_r+0x2d4>)
 8008386:	f002 fceb 	bl	800ad60 <__assert_func>
 800838a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800838e:	6005      	str	r5, [r0, #0]
 8008390:	60c5      	str	r5, [r0, #12]
 8008392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008394:	6819      	ldr	r1, [r3, #0]
 8008396:	b151      	cbz	r1, 80083ae <_dtoa_r+0x5e>
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	604a      	str	r2, [r1, #4]
 800839c:	2301      	movs	r3, #1
 800839e:	4093      	lsls	r3, r2
 80083a0:	608b      	str	r3, [r1, #8]
 80083a2:	4620      	mov	r0, r4
 80083a4:	f001 f9b0 	bl	8009708 <_Bfree>
 80083a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	1e3b      	subs	r3, r7, #0
 80083b0:	bfaa      	itet	ge
 80083b2:	2300      	movge	r3, #0
 80083b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80083b8:	f8c8 3000 	strge.w	r3, [r8]
 80083bc:	4b9a      	ldr	r3, [pc, #616]	; (8008628 <_dtoa_r+0x2d8>)
 80083be:	bfbc      	itt	lt
 80083c0:	2201      	movlt	r2, #1
 80083c2:	f8c8 2000 	strlt.w	r2, [r8]
 80083c6:	ea33 030b 	bics.w	r3, r3, fp
 80083ca:	d11b      	bne.n	8008404 <_dtoa_r+0xb4>
 80083cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083d8:	4333      	orrs	r3, r6
 80083da:	f000 8592 	beq.w	8008f02 <_dtoa_r+0xbb2>
 80083de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e0:	b963      	cbnz	r3, 80083fc <_dtoa_r+0xac>
 80083e2:	4b92      	ldr	r3, [pc, #584]	; (800862c <_dtoa_r+0x2dc>)
 80083e4:	e022      	b.n	800842c <_dtoa_r+0xdc>
 80083e6:	4b92      	ldr	r3, [pc, #584]	; (8008630 <_dtoa_r+0x2e0>)
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	3308      	adds	r3, #8
 80083ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	9801      	ldr	r0, [sp, #4]
 80083f2:	b013      	add	sp, #76	; 0x4c
 80083f4:	ecbd 8b04 	vpop	{d8-d9}
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fc:	4b8b      	ldr	r3, [pc, #556]	; (800862c <_dtoa_r+0x2dc>)
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	3303      	adds	r3, #3
 8008402:	e7f3      	b.n	80083ec <_dtoa_r+0x9c>
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	4650      	mov	r0, sl
 800840a:	4659      	mov	r1, fp
 800840c:	f7f8 fb7c 	bl	8000b08 <__aeabi_dcmpeq>
 8008410:	ec4b ab19 	vmov	d9, sl, fp
 8008414:	4680      	mov	r8, r0
 8008416:	b158      	cbz	r0, 8008430 <_dtoa_r+0xe0>
 8008418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800841a:	2301      	movs	r3, #1
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 856b 	beq.w	8008efc <_dtoa_r+0xbac>
 8008426:	4883      	ldr	r0, [pc, #524]	; (8008634 <_dtoa_r+0x2e4>)
 8008428:	6018      	str	r0, [r3, #0]
 800842a:	1e43      	subs	r3, r0, #1
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	e7df      	b.n	80083f0 <_dtoa_r+0xa0>
 8008430:	ec4b ab10 	vmov	d0, sl, fp
 8008434:	aa10      	add	r2, sp, #64	; 0x40
 8008436:	a911      	add	r1, sp, #68	; 0x44
 8008438:	4620      	mov	r0, r4
 800843a:	f001 fd13 	bl	8009e64 <__d2b>
 800843e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008442:	ee08 0a10 	vmov	s16, r0
 8008446:	2d00      	cmp	r5, #0
 8008448:	f000 8084 	beq.w	8008554 <_dtoa_r+0x204>
 800844c:	ee19 3a90 	vmov	r3, s19
 8008450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008458:	4656      	mov	r6, sl
 800845a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800845e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008466:	4b74      	ldr	r3, [pc, #464]	; (8008638 <_dtoa_r+0x2e8>)
 8008468:	2200      	movs	r2, #0
 800846a:	4630      	mov	r0, r6
 800846c:	4639      	mov	r1, r7
 800846e:	f7f7 ff2b 	bl	80002c8 <__aeabi_dsub>
 8008472:	a365      	add	r3, pc, #404	; (adr r3, 8008608 <_dtoa_r+0x2b8>)
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f7f8 f8de 	bl	8000638 <__aeabi_dmul>
 800847c:	a364      	add	r3, pc, #400	; (adr r3, 8008610 <_dtoa_r+0x2c0>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f7 ff23 	bl	80002cc <__adddf3>
 8008486:	4606      	mov	r6, r0
 8008488:	4628      	mov	r0, r5
 800848a:	460f      	mov	r7, r1
 800848c:	f7f8 f86a 	bl	8000564 <__aeabi_i2d>
 8008490:	a361      	add	r3, pc, #388	; (adr r3, 8008618 <_dtoa_r+0x2c8>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f8 f8cf 	bl	8000638 <__aeabi_dmul>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f7 ff13 	bl	80002cc <__adddf3>
 80084a6:	4606      	mov	r6, r0
 80084a8:	460f      	mov	r7, r1
 80084aa:	f7f8 fb75 	bl	8000b98 <__aeabi_d2iz>
 80084ae:	2200      	movs	r2, #0
 80084b0:	9000      	str	r0, [sp, #0]
 80084b2:	2300      	movs	r3, #0
 80084b4:	4630      	mov	r0, r6
 80084b6:	4639      	mov	r1, r7
 80084b8:	f7f8 fb30 	bl	8000b1c <__aeabi_dcmplt>
 80084bc:	b150      	cbz	r0, 80084d4 <_dtoa_r+0x184>
 80084be:	9800      	ldr	r0, [sp, #0]
 80084c0:	f7f8 f850 	bl	8000564 <__aeabi_i2d>
 80084c4:	4632      	mov	r2, r6
 80084c6:	463b      	mov	r3, r7
 80084c8:	f7f8 fb1e 	bl	8000b08 <__aeabi_dcmpeq>
 80084cc:	b910      	cbnz	r0, 80084d4 <_dtoa_r+0x184>
 80084ce:	9b00      	ldr	r3, [sp, #0]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	9b00      	ldr	r3, [sp, #0]
 80084d6:	2b16      	cmp	r3, #22
 80084d8:	d85a      	bhi.n	8008590 <_dtoa_r+0x240>
 80084da:	9a00      	ldr	r2, [sp, #0]
 80084dc:	4b57      	ldr	r3, [pc, #348]	; (800863c <_dtoa_r+0x2ec>)
 80084de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	ec51 0b19 	vmov	r0, r1, d9
 80084ea:	f7f8 fb17 	bl	8000b1c <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d050      	beq.n	8008594 <_dtoa_r+0x244>
 80084f2:	9b00      	ldr	r3, [sp, #0]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	2300      	movs	r3, #0
 80084fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80084fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084fe:	1b5d      	subs	r5, r3, r5
 8008500:	1e6b      	subs	r3, r5, #1
 8008502:	9305      	str	r3, [sp, #20]
 8008504:	bf45      	ittet	mi
 8008506:	f1c5 0301 	rsbmi	r3, r5, #1
 800850a:	9304      	strmi	r3, [sp, #16]
 800850c:	2300      	movpl	r3, #0
 800850e:	2300      	movmi	r3, #0
 8008510:	bf4c      	ite	mi
 8008512:	9305      	strmi	r3, [sp, #20]
 8008514:	9304      	strpl	r3, [sp, #16]
 8008516:	9b00      	ldr	r3, [sp, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	db3d      	blt.n	8008598 <_dtoa_r+0x248>
 800851c:	9b05      	ldr	r3, [sp, #20]
 800851e:	9a00      	ldr	r2, [sp, #0]
 8008520:	920a      	str	r2, [sp, #40]	; 0x28
 8008522:	4413      	add	r3, r2
 8008524:	9305      	str	r3, [sp, #20]
 8008526:	2300      	movs	r3, #0
 8008528:	9307      	str	r3, [sp, #28]
 800852a:	9b06      	ldr	r3, [sp, #24]
 800852c:	2b09      	cmp	r3, #9
 800852e:	f200 8089 	bhi.w	8008644 <_dtoa_r+0x2f4>
 8008532:	2b05      	cmp	r3, #5
 8008534:	bfc4      	itt	gt
 8008536:	3b04      	subgt	r3, #4
 8008538:	9306      	strgt	r3, [sp, #24]
 800853a:	9b06      	ldr	r3, [sp, #24]
 800853c:	f1a3 0302 	sub.w	r3, r3, #2
 8008540:	bfcc      	ite	gt
 8008542:	2500      	movgt	r5, #0
 8008544:	2501      	movle	r5, #1
 8008546:	2b03      	cmp	r3, #3
 8008548:	f200 8087 	bhi.w	800865a <_dtoa_r+0x30a>
 800854c:	e8df f003 	tbb	[pc, r3]
 8008550:	59383a2d 	.word	0x59383a2d
 8008554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008558:	441d      	add	r5, r3
 800855a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800855e:	2b20      	cmp	r3, #32
 8008560:	bfc1      	itttt	gt
 8008562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800856a:	fa0b f303 	lslgt.w	r3, fp, r3
 800856e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008572:	bfda      	itte	le
 8008574:	f1c3 0320 	rsble	r3, r3, #32
 8008578:	fa06 f003 	lslle.w	r0, r6, r3
 800857c:	4318      	orrgt	r0, r3
 800857e:	f7f7 ffe1 	bl	8000544 <__aeabi_ui2d>
 8008582:	2301      	movs	r3, #1
 8008584:	4606      	mov	r6, r0
 8008586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800858a:	3d01      	subs	r5, #1
 800858c:	930e      	str	r3, [sp, #56]	; 0x38
 800858e:	e76a      	b.n	8008466 <_dtoa_r+0x116>
 8008590:	2301      	movs	r3, #1
 8008592:	e7b2      	b.n	80084fa <_dtoa_r+0x1aa>
 8008594:	900b      	str	r0, [sp, #44]	; 0x2c
 8008596:	e7b1      	b.n	80084fc <_dtoa_r+0x1ac>
 8008598:	9b04      	ldr	r3, [sp, #16]
 800859a:	9a00      	ldr	r2, [sp, #0]
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	4253      	negs	r3, r2
 80085a2:	9307      	str	r3, [sp, #28]
 80085a4:	2300      	movs	r3, #0
 80085a6:	930a      	str	r3, [sp, #40]	; 0x28
 80085a8:	e7bf      	b.n	800852a <_dtoa_r+0x1da>
 80085aa:	2300      	movs	r3, #0
 80085ac:	9308      	str	r3, [sp, #32]
 80085ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dc55      	bgt.n	8008660 <_dtoa_r+0x310>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085ba:	461a      	mov	r2, r3
 80085bc:	9209      	str	r2, [sp, #36]	; 0x24
 80085be:	e00c      	b.n	80085da <_dtoa_r+0x28a>
 80085c0:	2301      	movs	r3, #1
 80085c2:	e7f3      	b.n	80085ac <_dtoa_r+0x25c>
 80085c4:	2300      	movs	r3, #0
 80085c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085c8:	9308      	str	r3, [sp, #32]
 80085ca:	9b00      	ldr	r3, [sp, #0]
 80085cc:	4413      	add	r3, r2
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	3301      	adds	r3, #1
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	9303      	str	r3, [sp, #12]
 80085d6:	bfb8      	it	lt
 80085d8:	2301      	movlt	r3, #1
 80085da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085dc:	2200      	movs	r2, #0
 80085de:	6042      	str	r2, [r0, #4]
 80085e0:	2204      	movs	r2, #4
 80085e2:	f102 0614 	add.w	r6, r2, #20
 80085e6:	429e      	cmp	r6, r3
 80085e8:	6841      	ldr	r1, [r0, #4]
 80085ea:	d93d      	bls.n	8008668 <_dtoa_r+0x318>
 80085ec:	4620      	mov	r0, r4
 80085ee:	f001 f84b 	bl	8009688 <_Balloc>
 80085f2:	9001      	str	r0, [sp, #4]
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d13b      	bne.n	8008670 <_dtoa_r+0x320>
 80085f8:	4b11      	ldr	r3, [pc, #68]	; (8008640 <_dtoa_r+0x2f0>)
 80085fa:	4602      	mov	r2, r0
 80085fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008600:	e6c0      	b.n	8008384 <_dtoa_r+0x34>
 8008602:	2301      	movs	r3, #1
 8008604:	e7df      	b.n	80085c6 <_dtoa_r+0x276>
 8008606:	bf00      	nop
 8008608:	636f4361 	.word	0x636f4361
 800860c:	3fd287a7 	.word	0x3fd287a7
 8008610:	8b60c8b3 	.word	0x8b60c8b3
 8008614:	3fc68a28 	.word	0x3fc68a28
 8008618:	509f79fb 	.word	0x509f79fb
 800861c:	3fd34413 	.word	0x3fd34413
 8008620:	0800b9d6 	.word	0x0800b9d6
 8008624:	0800b9ed 	.word	0x0800b9ed
 8008628:	7ff00000 	.word	0x7ff00000
 800862c:	0800b9d2 	.word	0x0800b9d2
 8008630:	0800b9c9 	.word	0x0800b9c9
 8008634:	0800bc42 	.word	0x0800bc42
 8008638:	3ff80000 	.word	0x3ff80000
 800863c:	0800bb58 	.word	0x0800bb58
 8008640:	0800ba48 	.word	0x0800ba48
 8008644:	2501      	movs	r5, #1
 8008646:	2300      	movs	r3, #0
 8008648:	9306      	str	r3, [sp, #24]
 800864a:	9508      	str	r5, [sp, #32]
 800864c:	f04f 33ff 	mov.w	r3, #4294967295
 8008650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008654:	2200      	movs	r2, #0
 8008656:	2312      	movs	r3, #18
 8008658:	e7b0      	b.n	80085bc <_dtoa_r+0x26c>
 800865a:	2301      	movs	r3, #1
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	e7f5      	b.n	800864c <_dtoa_r+0x2fc>
 8008660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008666:	e7b8      	b.n	80085da <_dtoa_r+0x28a>
 8008668:	3101      	adds	r1, #1
 800866a:	6041      	str	r1, [r0, #4]
 800866c:	0052      	lsls	r2, r2, #1
 800866e:	e7b8      	b.n	80085e2 <_dtoa_r+0x292>
 8008670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008672:	9a01      	ldr	r2, [sp, #4]
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	2b0e      	cmp	r3, #14
 800867a:	f200 809d 	bhi.w	80087b8 <_dtoa_r+0x468>
 800867e:	2d00      	cmp	r5, #0
 8008680:	f000 809a 	beq.w	80087b8 <_dtoa_r+0x468>
 8008684:	9b00      	ldr	r3, [sp, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	dd32      	ble.n	80086f0 <_dtoa_r+0x3a0>
 800868a:	4ab7      	ldr	r2, [pc, #732]	; (8008968 <_dtoa_r+0x618>)
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008698:	9b00      	ldr	r3, [sp, #0]
 800869a:	05d8      	lsls	r0, r3, #23
 800869c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80086a0:	d516      	bpl.n	80086d0 <_dtoa_r+0x380>
 80086a2:	4bb2      	ldr	r3, [pc, #712]	; (800896c <_dtoa_r+0x61c>)
 80086a4:	ec51 0b19 	vmov	r0, r1, d9
 80086a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086ac:	f7f8 f8ee 	bl	800088c <__aeabi_ddiv>
 80086b0:	f007 070f 	and.w	r7, r7, #15
 80086b4:	4682      	mov	sl, r0
 80086b6:	468b      	mov	fp, r1
 80086b8:	2503      	movs	r5, #3
 80086ba:	4eac      	ldr	r6, [pc, #688]	; (800896c <_dtoa_r+0x61c>)
 80086bc:	b957      	cbnz	r7, 80086d4 <_dtoa_r+0x384>
 80086be:	4642      	mov	r2, r8
 80086c0:	464b      	mov	r3, r9
 80086c2:	4650      	mov	r0, sl
 80086c4:	4659      	mov	r1, fp
 80086c6:	f7f8 f8e1 	bl	800088c <__aeabi_ddiv>
 80086ca:	4682      	mov	sl, r0
 80086cc:	468b      	mov	fp, r1
 80086ce:	e028      	b.n	8008722 <_dtoa_r+0x3d2>
 80086d0:	2502      	movs	r5, #2
 80086d2:	e7f2      	b.n	80086ba <_dtoa_r+0x36a>
 80086d4:	07f9      	lsls	r1, r7, #31
 80086d6:	d508      	bpl.n	80086ea <_dtoa_r+0x39a>
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086e0:	f7f7 ffaa 	bl	8000638 <__aeabi_dmul>
 80086e4:	3501      	adds	r5, #1
 80086e6:	4680      	mov	r8, r0
 80086e8:	4689      	mov	r9, r1
 80086ea:	107f      	asrs	r7, r7, #1
 80086ec:	3608      	adds	r6, #8
 80086ee:	e7e5      	b.n	80086bc <_dtoa_r+0x36c>
 80086f0:	f000 809b 	beq.w	800882a <_dtoa_r+0x4da>
 80086f4:	9b00      	ldr	r3, [sp, #0]
 80086f6:	4f9d      	ldr	r7, [pc, #628]	; (800896c <_dtoa_r+0x61c>)
 80086f8:	425e      	negs	r6, r3
 80086fa:	4b9b      	ldr	r3, [pc, #620]	; (8008968 <_dtoa_r+0x618>)
 80086fc:	f006 020f 	and.w	r2, r6, #15
 8008700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	ec51 0b19 	vmov	r0, r1, d9
 800870c:	f7f7 ff94 	bl	8000638 <__aeabi_dmul>
 8008710:	1136      	asrs	r6, r6, #4
 8008712:	4682      	mov	sl, r0
 8008714:	468b      	mov	fp, r1
 8008716:	2300      	movs	r3, #0
 8008718:	2502      	movs	r5, #2
 800871a:	2e00      	cmp	r6, #0
 800871c:	d17a      	bne.n	8008814 <_dtoa_r+0x4c4>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1d3      	bne.n	80086ca <_dtoa_r+0x37a>
 8008722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8082 	beq.w	800882e <_dtoa_r+0x4de>
 800872a:	4b91      	ldr	r3, [pc, #580]	; (8008970 <_dtoa_r+0x620>)
 800872c:	2200      	movs	r2, #0
 800872e:	4650      	mov	r0, sl
 8008730:	4659      	mov	r1, fp
 8008732:	f7f8 f9f3 	bl	8000b1c <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	d079      	beq.n	800882e <_dtoa_r+0x4de>
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d076      	beq.n	800882e <_dtoa_r+0x4de>
 8008740:	9b02      	ldr	r3, [sp, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	dd36      	ble.n	80087b4 <_dtoa_r+0x464>
 8008746:	9b00      	ldr	r3, [sp, #0]
 8008748:	4650      	mov	r0, sl
 800874a:	4659      	mov	r1, fp
 800874c:	1e5f      	subs	r7, r3, #1
 800874e:	2200      	movs	r2, #0
 8008750:	4b88      	ldr	r3, [pc, #544]	; (8008974 <_dtoa_r+0x624>)
 8008752:	f7f7 ff71 	bl	8000638 <__aeabi_dmul>
 8008756:	9e02      	ldr	r6, [sp, #8]
 8008758:	4682      	mov	sl, r0
 800875a:	468b      	mov	fp, r1
 800875c:	3501      	adds	r5, #1
 800875e:	4628      	mov	r0, r5
 8008760:	f7f7 ff00 	bl	8000564 <__aeabi_i2d>
 8008764:	4652      	mov	r2, sl
 8008766:	465b      	mov	r3, fp
 8008768:	f7f7 ff66 	bl	8000638 <__aeabi_dmul>
 800876c:	4b82      	ldr	r3, [pc, #520]	; (8008978 <_dtoa_r+0x628>)
 800876e:	2200      	movs	r2, #0
 8008770:	f7f7 fdac 	bl	80002cc <__adddf3>
 8008774:	46d0      	mov	r8, sl
 8008776:	46d9      	mov	r9, fp
 8008778:	4682      	mov	sl, r0
 800877a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800877e:	2e00      	cmp	r6, #0
 8008780:	d158      	bne.n	8008834 <_dtoa_r+0x4e4>
 8008782:	4b7e      	ldr	r3, [pc, #504]	; (800897c <_dtoa_r+0x62c>)
 8008784:	2200      	movs	r2, #0
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f7 fd9d 	bl	80002c8 <__aeabi_dsub>
 800878e:	4652      	mov	r2, sl
 8008790:	465b      	mov	r3, fp
 8008792:	4680      	mov	r8, r0
 8008794:	4689      	mov	r9, r1
 8008796:	f7f8 f9df 	bl	8000b58 <__aeabi_dcmpgt>
 800879a:	2800      	cmp	r0, #0
 800879c:	f040 8295 	bne.w	8008cca <_dtoa_r+0x97a>
 80087a0:	4652      	mov	r2, sl
 80087a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087a6:	4640      	mov	r0, r8
 80087a8:	4649      	mov	r1, r9
 80087aa:	f7f8 f9b7 	bl	8000b1c <__aeabi_dcmplt>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f040 8289 	bne.w	8008cc6 <_dtoa_r+0x976>
 80087b4:	ec5b ab19 	vmov	sl, fp, d9
 80087b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f2c0 8148 	blt.w	8008a50 <_dtoa_r+0x700>
 80087c0:	9a00      	ldr	r2, [sp, #0]
 80087c2:	2a0e      	cmp	r2, #14
 80087c4:	f300 8144 	bgt.w	8008a50 <_dtoa_r+0x700>
 80087c8:	4b67      	ldr	r3, [pc, #412]	; (8008968 <_dtoa_r+0x618>)
 80087ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f280 80d5 	bge.w	8008984 <_dtoa_r+0x634>
 80087da:	9b03      	ldr	r3, [sp, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f300 80d1 	bgt.w	8008984 <_dtoa_r+0x634>
 80087e2:	f040 826f 	bne.w	8008cc4 <_dtoa_r+0x974>
 80087e6:	4b65      	ldr	r3, [pc, #404]	; (800897c <_dtoa_r+0x62c>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	f7f7 ff23 	bl	8000638 <__aeabi_dmul>
 80087f2:	4652      	mov	r2, sl
 80087f4:	465b      	mov	r3, fp
 80087f6:	f7f8 f9a5 	bl	8000b44 <__aeabi_dcmpge>
 80087fa:	9e03      	ldr	r6, [sp, #12]
 80087fc:	4637      	mov	r7, r6
 80087fe:	2800      	cmp	r0, #0
 8008800:	f040 8245 	bne.w	8008c8e <_dtoa_r+0x93e>
 8008804:	9d01      	ldr	r5, [sp, #4]
 8008806:	2331      	movs	r3, #49	; 0x31
 8008808:	f805 3b01 	strb.w	r3, [r5], #1
 800880c:	9b00      	ldr	r3, [sp, #0]
 800880e:	3301      	adds	r3, #1
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	e240      	b.n	8008c96 <_dtoa_r+0x946>
 8008814:	07f2      	lsls	r2, r6, #31
 8008816:	d505      	bpl.n	8008824 <_dtoa_r+0x4d4>
 8008818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800881c:	f7f7 ff0c 	bl	8000638 <__aeabi_dmul>
 8008820:	3501      	adds	r5, #1
 8008822:	2301      	movs	r3, #1
 8008824:	1076      	asrs	r6, r6, #1
 8008826:	3708      	adds	r7, #8
 8008828:	e777      	b.n	800871a <_dtoa_r+0x3ca>
 800882a:	2502      	movs	r5, #2
 800882c:	e779      	b.n	8008722 <_dtoa_r+0x3d2>
 800882e:	9f00      	ldr	r7, [sp, #0]
 8008830:	9e03      	ldr	r6, [sp, #12]
 8008832:	e794      	b.n	800875e <_dtoa_r+0x40e>
 8008834:	9901      	ldr	r1, [sp, #4]
 8008836:	4b4c      	ldr	r3, [pc, #304]	; (8008968 <_dtoa_r+0x618>)
 8008838:	4431      	add	r1, r6
 800883a:	910d      	str	r1, [sp, #52]	; 0x34
 800883c:	9908      	ldr	r1, [sp, #32]
 800883e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008846:	2900      	cmp	r1, #0
 8008848:	d043      	beq.n	80088d2 <_dtoa_r+0x582>
 800884a:	494d      	ldr	r1, [pc, #308]	; (8008980 <_dtoa_r+0x630>)
 800884c:	2000      	movs	r0, #0
 800884e:	f7f8 f81d 	bl	800088c <__aeabi_ddiv>
 8008852:	4652      	mov	r2, sl
 8008854:	465b      	mov	r3, fp
 8008856:	f7f7 fd37 	bl	80002c8 <__aeabi_dsub>
 800885a:	9d01      	ldr	r5, [sp, #4]
 800885c:	4682      	mov	sl, r0
 800885e:	468b      	mov	fp, r1
 8008860:	4649      	mov	r1, r9
 8008862:	4640      	mov	r0, r8
 8008864:	f7f8 f998 	bl	8000b98 <__aeabi_d2iz>
 8008868:	4606      	mov	r6, r0
 800886a:	f7f7 fe7b 	bl	8000564 <__aeabi_i2d>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4640      	mov	r0, r8
 8008874:	4649      	mov	r1, r9
 8008876:	f7f7 fd27 	bl	80002c8 <__aeabi_dsub>
 800887a:	3630      	adds	r6, #48	; 0x30
 800887c:	f805 6b01 	strb.w	r6, [r5], #1
 8008880:	4652      	mov	r2, sl
 8008882:	465b      	mov	r3, fp
 8008884:	4680      	mov	r8, r0
 8008886:	4689      	mov	r9, r1
 8008888:	f7f8 f948 	bl	8000b1c <__aeabi_dcmplt>
 800888c:	2800      	cmp	r0, #0
 800888e:	d163      	bne.n	8008958 <_dtoa_r+0x608>
 8008890:	4642      	mov	r2, r8
 8008892:	464b      	mov	r3, r9
 8008894:	4936      	ldr	r1, [pc, #216]	; (8008970 <_dtoa_r+0x620>)
 8008896:	2000      	movs	r0, #0
 8008898:	f7f7 fd16 	bl	80002c8 <__aeabi_dsub>
 800889c:	4652      	mov	r2, sl
 800889e:	465b      	mov	r3, fp
 80088a0:	f7f8 f93c 	bl	8000b1c <__aeabi_dcmplt>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f040 80b5 	bne.w	8008a14 <_dtoa_r+0x6c4>
 80088aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ac:	429d      	cmp	r5, r3
 80088ae:	d081      	beq.n	80087b4 <_dtoa_r+0x464>
 80088b0:	4b30      	ldr	r3, [pc, #192]	; (8008974 <_dtoa_r+0x624>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	4650      	mov	r0, sl
 80088b6:	4659      	mov	r1, fp
 80088b8:	f7f7 febe 	bl	8000638 <__aeabi_dmul>
 80088bc:	4b2d      	ldr	r3, [pc, #180]	; (8008974 <_dtoa_r+0x624>)
 80088be:	4682      	mov	sl, r0
 80088c0:	468b      	mov	fp, r1
 80088c2:	4640      	mov	r0, r8
 80088c4:	4649      	mov	r1, r9
 80088c6:	2200      	movs	r2, #0
 80088c8:	f7f7 feb6 	bl	8000638 <__aeabi_dmul>
 80088cc:	4680      	mov	r8, r0
 80088ce:	4689      	mov	r9, r1
 80088d0:	e7c6      	b.n	8008860 <_dtoa_r+0x510>
 80088d2:	4650      	mov	r0, sl
 80088d4:	4659      	mov	r1, fp
 80088d6:	f7f7 feaf 	bl	8000638 <__aeabi_dmul>
 80088da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088dc:	9d01      	ldr	r5, [sp, #4]
 80088de:	930f      	str	r3, [sp, #60]	; 0x3c
 80088e0:	4682      	mov	sl, r0
 80088e2:	468b      	mov	fp, r1
 80088e4:	4649      	mov	r1, r9
 80088e6:	4640      	mov	r0, r8
 80088e8:	f7f8 f956 	bl	8000b98 <__aeabi_d2iz>
 80088ec:	4606      	mov	r6, r0
 80088ee:	f7f7 fe39 	bl	8000564 <__aeabi_i2d>
 80088f2:	3630      	adds	r6, #48	; 0x30
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4640      	mov	r0, r8
 80088fa:	4649      	mov	r1, r9
 80088fc:	f7f7 fce4 	bl	80002c8 <__aeabi_dsub>
 8008900:	f805 6b01 	strb.w	r6, [r5], #1
 8008904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008906:	429d      	cmp	r5, r3
 8008908:	4680      	mov	r8, r0
 800890a:	4689      	mov	r9, r1
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	d124      	bne.n	800895c <_dtoa_r+0x60c>
 8008912:	4b1b      	ldr	r3, [pc, #108]	; (8008980 <_dtoa_r+0x630>)
 8008914:	4650      	mov	r0, sl
 8008916:	4659      	mov	r1, fp
 8008918:	f7f7 fcd8 	bl	80002cc <__adddf3>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4640      	mov	r0, r8
 8008922:	4649      	mov	r1, r9
 8008924:	f7f8 f918 	bl	8000b58 <__aeabi_dcmpgt>
 8008928:	2800      	cmp	r0, #0
 800892a:	d173      	bne.n	8008a14 <_dtoa_r+0x6c4>
 800892c:	4652      	mov	r2, sl
 800892e:	465b      	mov	r3, fp
 8008930:	4913      	ldr	r1, [pc, #76]	; (8008980 <_dtoa_r+0x630>)
 8008932:	2000      	movs	r0, #0
 8008934:	f7f7 fcc8 	bl	80002c8 <__aeabi_dsub>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4640      	mov	r0, r8
 800893e:	4649      	mov	r1, r9
 8008940:	f7f8 f8ec 	bl	8000b1c <__aeabi_dcmplt>
 8008944:	2800      	cmp	r0, #0
 8008946:	f43f af35 	beq.w	80087b4 <_dtoa_r+0x464>
 800894a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800894c:	1e6b      	subs	r3, r5, #1
 800894e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008954:	2b30      	cmp	r3, #48	; 0x30
 8008956:	d0f8      	beq.n	800894a <_dtoa_r+0x5fa>
 8008958:	9700      	str	r7, [sp, #0]
 800895a:	e049      	b.n	80089f0 <_dtoa_r+0x6a0>
 800895c:	4b05      	ldr	r3, [pc, #20]	; (8008974 <_dtoa_r+0x624>)
 800895e:	f7f7 fe6b 	bl	8000638 <__aeabi_dmul>
 8008962:	4680      	mov	r8, r0
 8008964:	4689      	mov	r9, r1
 8008966:	e7bd      	b.n	80088e4 <_dtoa_r+0x594>
 8008968:	0800bb58 	.word	0x0800bb58
 800896c:	0800bb30 	.word	0x0800bb30
 8008970:	3ff00000 	.word	0x3ff00000
 8008974:	40240000 	.word	0x40240000
 8008978:	401c0000 	.word	0x401c0000
 800897c:	40140000 	.word	0x40140000
 8008980:	3fe00000 	.word	0x3fe00000
 8008984:	9d01      	ldr	r5, [sp, #4]
 8008986:	4656      	mov	r6, sl
 8008988:	465f      	mov	r7, fp
 800898a:	4642      	mov	r2, r8
 800898c:	464b      	mov	r3, r9
 800898e:	4630      	mov	r0, r6
 8008990:	4639      	mov	r1, r7
 8008992:	f7f7 ff7b 	bl	800088c <__aeabi_ddiv>
 8008996:	f7f8 f8ff 	bl	8000b98 <__aeabi_d2iz>
 800899a:	4682      	mov	sl, r0
 800899c:	f7f7 fde2 	bl	8000564 <__aeabi_i2d>
 80089a0:	4642      	mov	r2, r8
 80089a2:	464b      	mov	r3, r9
 80089a4:	f7f7 fe48 	bl	8000638 <__aeabi_dmul>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4630      	mov	r0, r6
 80089ae:	4639      	mov	r1, r7
 80089b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80089b4:	f7f7 fc88 	bl	80002c8 <__aeabi_dsub>
 80089b8:	f805 6b01 	strb.w	r6, [r5], #1
 80089bc:	9e01      	ldr	r6, [sp, #4]
 80089be:	9f03      	ldr	r7, [sp, #12]
 80089c0:	1bae      	subs	r6, r5, r6
 80089c2:	42b7      	cmp	r7, r6
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	d135      	bne.n	8008a36 <_dtoa_r+0x6e6>
 80089ca:	f7f7 fc7f 	bl	80002cc <__adddf3>
 80089ce:	4642      	mov	r2, r8
 80089d0:	464b      	mov	r3, r9
 80089d2:	4606      	mov	r6, r0
 80089d4:	460f      	mov	r7, r1
 80089d6:	f7f8 f8bf 	bl	8000b58 <__aeabi_dcmpgt>
 80089da:	b9d0      	cbnz	r0, 8008a12 <_dtoa_r+0x6c2>
 80089dc:	4642      	mov	r2, r8
 80089de:	464b      	mov	r3, r9
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f8 f890 	bl	8000b08 <__aeabi_dcmpeq>
 80089e8:	b110      	cbz	r0, 80089f0 <_dtoa_r+0x6a0>
 80089ea:	f01a 0f01 	tst.w	sl, #1
 80089ee:	d110      	bne.n	8008a12 <_dtoa_r+0x6c2>
 80089f0:	4620      	mov	r0, r4
 80089f2:	ee18 1a10 	vmov	r1, s16
 80089f6:	f000 fe87 	bl	8009708 <_Bfree>
 80089fa:	2300      	movs	r3, #0
 80089fc:	9800      	ldr	r0, [sp, #0]
 80089fe:	702b      	strb	r3, [r5, #0]
 8008a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a02:	3001      	adds	r0, #1
 8008a04:	6018      	str	r0, [r3, #0]
 8008a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f43f acf1 	beq.w	80083f0 <_dtoa_r+0xa0>
 8008a0e:	601d      	str	r5, [r3, #0]
 8008a10:	e4ee      	b.n	80083f0 <_dtoa_r+0xa0>
 8008a12:	9f00      	ldr	r7, [sp, #0]
 8008a14:	462b      	mov	r3, r5
 8008a16:	461d      	mov	r5, r3
 8008a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a1c:	2a39      	cmp	r2, #57	; 0x39
 8008a1e:	d106      	bne.n	8008a2e <_dtoa_r+0x6de>
 8008a20:	9a01      	ldr	r2, [sp, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d1f7      	bne.n	8008a16 <_dtoa_r+0x6c6>
 8008a26:	9901      	ldr	r1, [sp, #4]
 8008a28:	2230      	movs	r2, #48	; 0x30
 8008a2a:	3701      	adds	r7, #1
 8008a2c:	700a      	strb	r2, [r1, #0]
 8008a2e:	781a      	ldrb	r2, [r3, #0]
 8008a30:	3201      	adds	r2, #1
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	e790      	b.n	8008958 <_dtoa_r+0x608>
 8008a36:	4ba6      	ldr	r3, [pc, #664]	; (8008cd0 <_dtoa_r+0x980>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f7f7 fdfd 	bl	8000638 <__aeabi_dmul>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2300      	movs	r3, #0
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	f7f8 f85f 	bl	8000b08 <__aeabi_dcmpeq>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d09d      	beq.n	800898a <_dtoa_r+0x63a>
 8008a4e:	e7cf      	b.n	80089f0 <_dtoa_r+0x6a0>
 8008a50:	9a08      	ldr	r2, [sp, #32]
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	f000 80d7 	beq.w	8008c06 <_dtoa_r+0x8b6>
 8008a58:	9a06      	ldr	r2, [sp, #24]
 8008a5a:	2a01      	cmp	r2, #1
 8008a5c:	f300 80ba 	bgt.w	8008bd4 <_dtoa_r+0x884>
 8008a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	f000 80b2 	beq.w	8008bcc <_dtoa_r+0x87c>
 8008a68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a6c:	9e07      	ldr	r6, [sp, #28]
 8008a6e:	9d04      	ldr	r5, [sp, #16]
 8008a70:	9a04      	ldr	r2, [sp, #16]
 8008a72:	441a      	add	r2, r3
 8008a74:	9204      	str	r2, [sp, #16]
 8008a76:	9a05      	ldr	r2, [sp, #20]
 8008a78:	2101      	movs	r1, #1
 8008a7a:	441a      	add	r2, r3
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	9205      	str	r2, [sp, #20]
 8008a80:	f000 ff44 	bl	800990c <__i2b>
 8008a84:	4607      	mov	r7, r0
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	dd0c      	ble.n	8008aa4 <_dtoa_r+0x754>
 8008a8a:	9b05      	ldr	r3, [sp, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	dd09      	ble.n	8008aa4 <_dtoa_r+0x754>
 8008a90:	42ab      	cmp	r3, r5
 8008a92:	9a04      	ldr	r2, [sp, #16]
 8008a94:	bfa8      	it	ge
 8008a96:	462b      	movge	r3, r5
 8008a98:	1ad2      	subs	r2, r2, r3
 8008a9a:	9204      	str	r2, [sp, #16]
 8008a9c:	9a05      	ldr	r2, [sp, #20]
 8008a9e:	1aed      	subs	r5, r5, r3
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	9305      	str	r3, [sp, #20]
 8008aa4:	9b07      	ldr	r3, [sp, #28]
 8008aa6:	b31b      	cbz	r3, 8008af0 <_dtoa_r+0x7a0>
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 80af 	beq.w	8008c0e <_dtoa_r+0x8be>
 8008ab0:	2e00      	cmp	r6, #0
 8008ab2:	dd13      	ble.n	8008adc <_dtoa_r+0x78c>
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 ffe7 	bl	8009a8c <__pow5mult>
 8008abe:	ee18 2a10 	vmov	r2, s16
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 ff36 	bl	8009938 <__multiply>
 8008acc:	ee18 1a10 	vmov	r1, s16
 8008ad0:	4680      	mov	r8, r0
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 fe18 	bl	8009708 <_Bfree>
 8008ad8:	ee08 8a10 	vmov	s16, r8
 8008adc:	9b07      	ldr	r3, [sp, #28]
 8008ade:	1b9a      	subs	r2, r3, r6
 8008ae0:	d006      	beq.n	8008af0 <_dtoa_r+0x7a0>
 8008ae2:	ee18 1a10 	vmov	r1, s16
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 ffd0 	bl	8009a8c <__pow5mult>
 8008aec:	ee08 0a10 	vmov	s16, r0
 8008af0:	2101      	movs	r1, #1
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 ff0a 	bl	800990c <__i2b>
 8008af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	4606      	mov	r6, r0
 8008afe:	f340 8088 	ble.w	8008c12 <_dtoa_r+0x8c2>
 8008b02:	461a      	mov	r2, r3
 8008b04:	4601      	mov	r1, r0
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 ffc0 	bl	8009a8c <__pow5mult>
 8008b0c:	9b06      	ldr	r3, [sp, #24]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	4606      	mov	r6, r0
 8008b12:	f340 8081 	ble.w	8008c18 <_dtoa_r+0x8c8>
 8008b16:	f04f 0800 	mov.w	r8, #0
 8008b1a:	6933      	ldr	r3, [r6, #16]
 8008b1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b20:	6918      	ldr	r0, [r3, #16]
 8008b22:	f000 fea3 	bl	800986c <__hi0bits>
 8008b26:	f1c0 0020 	rsb	r0, r0, #32
 8008b2a:	9b05      	ldr	r3, [sp, #20]
 8008b2c:	4418      	add	r0, r3
 8008b2e:	f010 001f 	ands.w	r0, r0, #31
 8008b32:	f000 8092 	beq.w	8008c5a <_dtoa_r+0x90a>
 8008b36:	f1c0 0320 	rsb	r3, r0, #32
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	f340 808a 	ble.w	8008c54 <_dtoa_r+0x904>
 8008b40:	f1c0 001c 	rsb	r0, r0, #28
 8008b44:	9b04      	ldr	r3, [sp, #16]
 8008b46:	4403      	add	r3, r0
 8008b48:	9304      	str	r3, [sp, #16]
 8008b4a:	9b05      	ldr	r3, [sp, #20]
 8008b4c:	4403      	add	r3, r0
 8008b4e:	4405      	add	r5, r0
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	9b04      	ldr	r3, [sp, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dd07      	ble.n	8008b68 <_dtoa_r+0x818>
 8008b58:	ee18 1a10 	vmov	r1, s16
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 ffee 	bl	8009b40 <__lshift>
 8008b64:	ee08 0a10 	vmov	s16, r0
 8008b68:	9b05      	ldr	r3, [sp, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dd05      	ble.n	8008b7a <_dtoa_r+0x82a>
 8008b6e:	4631      	mov	r1, r6
 8008b70:	461a      	mov	r2, r3
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 ffe4 	bl	8009b40 <__lshift>
 8008b78:	4606      	mov	r6, r0
 8008b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d06e      	beq.n	8008c5e <_dtoa_r+0x90e>
 8008b80:	ee18 0a10 	vmov	r0, s16
 8008b84:	4631      	mov	r1, r6
 8008b86:	f001 f84b 	bl	8009c20 <__mcmp>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	da67      	bge.n	8008c5e <_dtoa_r+0x90e>
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	ee18 1a10 	vmov	r1, s16
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	220a      	movs	r2, #10
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 fdd5 	bl	800974c <__multadd>
 8008ba2:	9b08      	ldr	r3, [sp, #32]
 8008ba4:	ee08 0a10 	vmov	s16, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 81b1 	beq.w	8008f10 <_dtoa_r+0xbc0>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f000 fdc9 	bl	800974c <__multadd>
 8008bba:	9b02      	ldr	r3, [sp, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	4607      	mov	r7, r0
 8008bc0:	f300 808e 	bgt.w	8008ce0 <_dtoa_r+0x990>
 8008bc4:	9b06      	ldr	r3, [sp, #24]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	dc51      	bgt.n	8008c6e <_dtoa_r+0x91e>
 8008bca:	e089      	b.n	8008ce0 <_dtoa_r+0x990>
 8008bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bd2:	e74b      	b.n	8008a6c <_dtoa_r+0x71c>
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	1e5e      	subs	r6, r3, #1
 8008bd8:	9b07      	ldr	r3, [sp, #28]
 8008bda:	42b3      	cmp	r3, r6
 8008bdc:	bfbf      	itttt	lt
 8008bde:	9b07      	ldrlt	r3, [sp, #28]
 8008be0:	9607      	strlt	r6, [sp, #28]
 8008be2:	1af2      	sublt	r2, r6, r3
 8008be4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008be6:	bfb6      	itet	lt
 8008be8:	189b      	addlt	r3, r3, r2
 8008bea:	1b9e      	subge	r6, r3, r6
 8008bec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008bee:	9b03      	ldr	r3, [sp, #12]
 8008bf0:	bfb8      	it	lt
 8008bf2:	2600      	movlt	r6, #0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfb7      	itett	lt
 8008bf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008bfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008c00:	1a9d      	sublt	r5, r3, r2
 8008c02:	2300      	movlt	r3, #0
 8008c04:	e734      	b.n	8008a70 <_dtoa_r+0x720>
 8008c06:	9e07      	ldr	r6, [sp, #28]
 8008c08:	9d04      	ldr	r5, [sp, #16]
 8008c0a:	9f08      	ldr	r7, [sp, #32]
 8008c0c:	e73b      	b.n	8008a86 <_dtoa_r+0x736>
 8008c0e:	9a07      	ldr	r2, [sp, #28]
 8008c10:	e767      	b.n	8008ae2 <_dtoa_r+0x792>
 8008c12:	9b06      	ldr	r3, [sp, #24]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	dc18      	bgt.n	8008c4a <_dtoa_r+0x8fa>
 8008c18:	f1ba 0f00 	cmp.w	sl, #0
 8008c1c:	d115      	bne.n	8008c4a <_dtoa_r+0x8fa>
 8008c1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c22:	b993      	cbnz	r3, 8008c4a <_dtoa_r+0x8fa>
 8008c24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c28:	0d1b      	lsrs	r3, r3, #20
 8008c2a:	051b      	lsls	r3, r3, #20
 8008c2c:	b183      	cbz	r3, 8008c50 <_dtoa_r+0x900>
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	3301      	adds	r3, #1
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	9b05      	ldr	r3, [sp, #20]
 8008c36:	3301      	adds	r3, #1
 8008c38:	9305      	str	r3, [sp, #20]
 8008c3a:	f04f 0801 	mov.w	r8, #1
 8008c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f47f af6a 	bne.w	8008b1a <_dtoa_r+0x7ca>
 8008c46:	2001      	movs	r0, #1
 8008c48:	e76f      	b.n	8008b2a <_dtoa_r+0x7da>
 8008c4a:	f04f 0800 	mov.w	r8, #0
 8008c4e:	e7f6      	b.n	8008c3e <_dtoa_r+0x8ee>
 8008c50:	4698      	mov	r8, r3
 8008c52:	e7f4      	b.n	8008c3e <_dtoa_r+0x8ee>
 8008c54:	f43f af7d 	beq.w	8008b52 <_dtoa_r+0x802>
 8008c58:	4618      	mov	r0, r3
 8008c5a:	301c      	adds	r0, #28
 8008c5c:	e772      	b.n	8008b44 <_dtoa_r+0x7f4>
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc37      	bgt.n	8008cd4 <_dtoa_r+0x984>
 8008c64:	9b06      	ldr	r3, [sp, #24]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	dd34      	ble.n	8008cd4 <_dtoa_r+0x984>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	9302      	str	r3, [sp, #8]
 8008c6e:	9b02      	ldr	r3, [sp, #8]
 8008c70:	b96b      	cbnz	r3, 8008c8e <_dtoa_r+0x93e>
 8008c72:	4631      	mov	r1, r6
 8008c74:	2205      	movs	r2, #5
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fd68 	bl	800974c <__multadd>
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	4606      	mov	r6, r0
 8008c80:	ee18 0a10 	vmov	r0, s16
 8008c84:	f000 ffcc 	bl	8009c20 <__mcmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	f73f adbb 	bgt.w	8008804 <_dtoa_r+0x4b4>
 8008c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c90:	9d01      	ldr	r5, [sp, #4]
 8008c92:	43db      	mvns	r3, r3
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	f04f 0800 	mov.w	r8, #0
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 fd33 	bl	8009708 <_Bfree>
 8008ca2:	2f00      	cmp	r7, #0
 8008ca4:	f43f aea4 	beq.w	80089f0 <_dtoa_r+0x6a0>
 8008ca8:	f1b8 0f00 	cmp.w	r8, #0
 8008cac:	d005      	beq.n	8008cba <_dtoa_r+0x96a>
 8008cae:	45b8      	cmp	r8, r7
 8008cb0:	d003      	beq.n	8008cba <_dtoa_r+0x96a>
 8008cb2:	4641      	mov	r1, r8
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fd27 	bl	8009708 <_Bfree>
 8008cba:	4639      	mov	r1, r7
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f000 fd23 	bl	8009708 <_Bfree>
 8008cc2:	e695      	b.n	80089f0 <_dtoa_r+0x6a0>
 8008cc4:	2600      	movs	r6, #0
 8008cc6:	4637      	mov	r7, r6
 8008cc8:	e7e1      	b.n	8008c8e <_dtoa_r+0x93e>
 8008cca:	9700      	str	r7, [sp, #0]
 8008ccc:	4637      	mov	r7, r6
 8008cce:	e599      	b.n	8008804 <_dtoa_r+0x4b4>
 8008cd0:	40240000 	.word	0x40240000
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80ca 	beq.w	8008e70 <_dtoa_r+0xb20>
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	9302      	str	r3, [sp, #8]
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	dd05      	ble.n	8008cf0 <_dtoa_r+0x9a0>
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	462a      	mov	r2, r5
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 ff29 	bl	8009b40 <__lshift>
 8008cee:	4607      	mov	r7, r0
 8008cf0:	f1b8 0f00 	cmp.w	r8, #0
 8008cf4:	d05b      	beq.n	8008dae <_dtoa_r+0xa5e>
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f000 fcc5 	bl	8009688 <_Balloc>
 8008cfe:	4605      	mov	r5, r0
 8008d00:	b928      	cbnz	r0, 8008d0e <_dtoa_r+0x9be>
 8008d02:	4b87      	ldr	r3, [pc, #540]	; (8008f20 <_dtoa_r+0xbd0>)
 8008d04:	4602      	mov	r2, r0
 8008d06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d0a:	f7ff bb3b 	b.w	8008384 <_dtoa_r+0x34>
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	3202      	adds	r2, #2
 8008d12:	0092      	lsls	r2, r2, #2
 8008d14:	f107 010c 	add.w	r1, r7, #12
 8008d18:	300c      	adds	r0, #12
 8008d1a:	f000 fca7 	bl	800966c <memcpy>
 8008d1e:	2201      	movs	r2, #1
 8008d20:	4629      	mov	r1, r5
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 ff0c 	bl	8009b40 <__lshift>
 8008d28:	9b01      	ldr	r3, [sp, #4]
 8008d2a:	f103 0901 	add.w	r9, r3, #1
 8008d2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	9305      	str	r3, [sp, #20]
 8008d36:	f00a 0301 	and.w	r3, sl, #1
 8008d3a:	46b8      	mov	r8, r7
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	4607      	mov	r7, r0
 8008d40:	4631      	mov	r1, r6
 8008d42:	ee18 0a10 	vmov	r0, s16
 8008d46:	f7ff fa75 	bl	8008234 <quorem>
 8008d4a:	4641      	mov	r1, r8
 8008d4c:	9002      	str	r0, [sp, #8]
 8008d4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d52:	ee18 0a10 	vmov	r0, s16
 8008d56:	f000 ff63 	bl	8009c20 <__mcmp>
 8008d5a:	463a      	mov	r2, r7
 8008d5c:	9003      	str	r0, [sp, #12]
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 ff79 	bl	8009c58 <__mdiff>
 8008d66:	68c2      	ldr	r2, [r0, #12]
 8008d68:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	bb02      	cbnz	r2, 8008db2 <_dtoa_r+0xa62>
 8008d70:	4601      	mov	r1, r0
 8008d72:	ee18 0a10 	vmov	r0, s16
 8008d76:	f000 ff53 	bl	8009c20 <__mcmp>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4620      	mov	r0, r4
 8008d80:	9207      	str	r2, [sp, #28]
 8008d82:	f000 fcc1 	bl	8009708 <_Bfree>
 8008d86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d8a:	ea43 0102 	orr.w	r1, r3, r2
 8008d8e:	9b04      	ldr	r3, [sp, #16]
 8008d90:	430b      	orrs	r3, r1
 8008d92:	464d      	mov	r5, r9
 8008d94:	d10f      	bne.n	8008db6 <_dtoa_r+0xa66>
 8008d96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d9a:	d02a      	beq.n	8008df2 <_dtoa_r+0xaa2>
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	dd02      	ble.n	8008da8 <_dtoa_r+0xa58>
 8008da2:	9b02      	ldr	r3, [sp, #8]
 8008da4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008da8:	f88b a000 	strb.w	sl, [fp]
 8008dac:	e775      	b.n	8008c9a <_dtoa_r+0x94a>
 8008dae:	4638      	mov	r0, r7
 8008db0:	e7ba      	b.n	8008d28 <_dtoa_r+0x9d8>
 8008db2:	2201      	movs	r2, #1
 8008db4:	e7e2      	b.n	8008d7c <_dtoa_r+0xa2c>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	db04      	blt.n	8008dc6 <_dtoa_r+0xa76>
 8008dbc:	9906      	ldr	r1, [sp, #24]
 8008dbe:	430b      	orrs	r3, r1
 8008dc0:	9904      	ldr	r1, [sp, #16]
 8008dc2:	430b      	orrs	r3, r1
 8008dc4:	d122      	bne.n	8008e0c <_dtoa_r+0xabc>
 8008dc6:	2a00      	cmp	r2, #0
 8008dc8:	ddee      	ble.n	8008da8 <_dtoa_r+0xa58>
 8008dca:	ee18 1a10 	vmov	r1, s16
 8008dce:	2201      	movs	r2, #1
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 feb5 	bl	8009b40 <__lshift>
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	ee08 0a10 	vmov	s16, r0
 8008ddc:	f000 ff20 	bl	8009c20 <__mcmp>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	dc03      	bgt.n	8008dec <_dtoa_r+0xa9c>
 8008de4:	d1e0      	bne.n	8008da8 <_dtoa_r+0xa58>
 8008de6:	f01a 0f01 	tst.w	sl, #1
 8008dea:	d0dd      	beq.n	8008da8 <_dtoa_r+0xa58>
 8008dec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008df0:	d1d7      	bne.n	8008da2 <_dtoa_r+0xa52>
 8008df2:	2339      	movs	r3, #57	; 0x39
 8008df4:	f88b 3000 	strb.w	r3, [fp]
 8008df8:	462b      	mov	r3, r5
 8008dfa:	461d      	mov	r5, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e02:	2a39      	cmp	r2, #57	; 0x39
 8008e04:	d071      	beq.n	8008eea <_dtoa_r+0xb9a>
 8008e06:	3201      	adds	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	e746      	b.n	8008c9a <_dtoa_r+0x94a>
 8008e0c:	2a00      	cmp	r2, #0
 8008e0e:	dd07      	ble.n	8008e20 <_dtoa_r+0xad0>
 8008e10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e14:	d0ed      	beq.n	8008df2 <_dtoa_r+0xaa2>
 8008e16:	f10a 0301 	add.w	r3, sl, #1
 8008e1a:	f88b 3000 	strb.w	r3, [fp]
 8008e1e:	e73c      	b.n	8008c9a <_dtoa_r+0x94a>
 8008e20:	9b05      	ldr	r3, [sp, #20]
 8008e22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e26:	4599      	cmp	r9, r3
 8008e28:	d047      	beq.n	8008eba <_dtoa_r+0xb6a>
 8008e2a:	ee18 1a10 	vmov	r1, s16
 8008e2e:	2300      	movs	r3, #0
 8008e30:	220a      	movs	r2, #10
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fc8a 	bl	800974c <__multadd>
 8008e38:	45b8      	cmp	r8, r7
 8008e3a:	ee08 0a10 	vmov	s16, r0
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	f04f 020a 	mov.w	r2, #10
 8008e46:	4641      	mov	r1, r8
 8008e48:	4620      	mov	r0, r4
 8008e4a:	d106      	bne.n	8008e5a <_dtoa_r+0xb0a>
 8008e4c:	f000 fc7e 	bl	800974c <__multadd>
 8008e50:	4680      	mov	r8, r0
 8008e52:	4607      	mov	r7, r0
 8008e54:	f109 0901 	add.w	r9, r9, #1
 8008e58:	e772      	b.n	8008d40 <_dtoa_r+0x9f0>
 8008e5a:	f000 fc77 	bl	800974c <__multadd>
 8008e5e:	4639      	mov	r1, r7
 8008e60:	4680      	mov	r8, r0
 8008e62:	2300      	movs	r3, #0
 8008e64:	220a      	movs	r2, #10
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 fc70 	bl	800974c <__multadd>
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	e7f1      	b.n	8008e54 <_dtoa_r+0xb04>
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	9302      	str	r3, [sp, #8]
 8008e74:	9d01      	ldr	r5, [sp, #4]
 8008e76:	ee18 0a10 	vmov	r0, s16
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	f7ff f9da 	bl	8008234 <quorem>
 8008e80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	f805 ab01 	strb.w	sl, [r5], #1
 8008e8a:	1aea      	subs	r2, r5, r3
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	dd09      	ble.n	8008ea6 <_dtoa_r+0xb56>
 8008e92:	ee18 1a10 	vmov	r1, s16
 8008e96:	2300      	movs	r3, #0
 8008e98:	220a      	movs	r2, #10
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 fc56 	bl	800974c <__multadd>
 8008ea0:	ee08 0a10 	vmov	s16, r0
 8008ea4:	e7e7      	b.n	8008e76 <_dtoa_r+0xb26>
 8008ea6:	9b02      	ldr	r3, [sp, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bfc8      	it	gt
 8008eac:	461d      	movgt	r5, r3
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	bfd8      	it	le
 8008eb2:	2501      	movle	r5, #1
 8008eb4:	441d      	add	r5, r3
 8008eb6:	f04f 0800 	mov.w	r8, #0
 8008eba:	ee18 1a10 	vmov	r1, s16
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fe3d 	bl	8009b40 <__lshift>
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	ee08 0a10 	vmov	s16, r0
 8008ecc:	f000 fea8 	bl	8009c20 <__mcmp>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	dc91      	bgt.n	8008df8 <_dtoa_r+0xaa8>
 8008ed4:	d102      	bne.n	8008edc <_dtoa_r+0xb8c>
 8008ed6:	f01a 0f01 	tst.w	sl, #1
 8008eda:	d18d      	bne.n	8008df8 <_dtoa_r+0xaa8>
 8008edc:	462b      	mov	r3, r5
 8008ede:	461d      	mov	r5, r3
 8008ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ee4:	2a30      	cmp	r2, #48	; 0x30
 8008ee6:	d0fa      	beq.n	8008ede <_dtoa_r+0xb8e>
 8008ee8:	e6d7      	b.n	8008c9a <_dtoa_r+0x94a>
 8008eea:	9a01      	ldr	r2, [sp, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d184      	bne.n	8008dfa <_dtoa_r+0xaaa>
 8008ef0:	9b00      	ldr	r3, [sp, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	2331      	movs	r3, #49	; 0x31
 8008ef8:	7013      	strb	r3, [r2, #0]
 8008efa:	e6ce      	b.n	8008c9a <_dtoa_r+0x94a>
 8008efc:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <_dtoa_r+0xbd4>)
 8008efe:	f7ff ba95 	b.w	800842c <_dtoa_r+0xdc>
 8008f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f47f aa6e 	bne.w	80083e6 <_dtoa_r+0x96>
 8008f0a:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <_dtoa_r+0xbd8>)
 8008f0c:	f7ff ba8e 	b.w	800842c <_dtoa_r+0xdc>
 8008f10:	9b02      	ldr	r3, [sp, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	dcae      	bgt.n	8008e74 <_dtoa_r+0xb24>
 8008f16:	9b06      	ldr	r3, [sp, #24]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	f73f aea8 	bgt.w	8008c6e <_dtoa_r+0x91e>
 8008f1e:	e7a9      	b.n	8008e74 <_dtoa_r+0xb24>
 8008f20:	0800ba48 	.word	0x0800ba48
 8008f24:	0800bc41 	.word	0x0800bc41
 8008f28:	0800b9c9 	.word	0x0800b9c9

08008f2c <rshift>:
 8008f2c:	6903      	ldr	r3, [r0, #16]
 8008f2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008f32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f3a:	f100 0414 	add.w	r4, r0, #20
 8008f3e:	dd45      	ble.n	8008fcc <rshift+0xa0>
 8008f40:	f011 011f 	ands.w	r1, r1, #31
 8008f44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f4c:	d10c      	bne.n	8008f68 <rshift+0x3c>
 8008f4e:	f100 0710 	add.w	r7, r0, #16
 8008f52:	4629      	mov	r1, r5
 8008f54:	42b1      	cmp	r1, r6
 8008f56:	d334      	bcc.n	8008fc2 <rshift+0x96>
 8008f58:	1a9b      	subs	r3, r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	1eea      	subs	r2, r5, #3
 8008f5e:	4296      	cmp	r6, r2
 8008f60:	bf38      	it	cc
 8008f62:	2300      	movcc	r3, #0
 8008f64:	4423      	add	r3, r4
 8008f66:	e015      	b.n	8008f94 <rshift+0x68>
 8008f68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f6c:	f1c1 0820 	rsb	r8, r1, #32
 8008f70:	40cf      	lsrs	r7, r1
 8008f72:	f105 0e04 	add.w	lr, r5, #4
 8008f76:	46a1      	mov	r9, r4
 8008f78:	4576      	cmp	r6, lr
 8008f7a:	46f4      	mov	ip, lr
 8008f7c:	d815      	bhi.n	8008faa <rshift+0x7e>
 8008f7e:	1a9a      	subs	r2, r3, r2
 8008f80:	0092      	lsls	r2, r2, #2
 8008f82:	3a04      	subs	r2, #4
 8008f84:	3501      	adds	r5, #1
 8008f86:	42ae      	cmp	r6, r5
 8008f88:	bf38      	it	cc
 8008f8a:	2200      	movcc	r2, #0
 8008f8c:	18a3      	adds	r3, r4, r2
 8008f8e:	50a7      	str	r7, [r4, r2]
 8008f90:	b107      	cbz	r7, 8008f94 <rshift+0x68>
 8008f92:	3304      	adds	r3, #4
 8008f94:	1b1a      	subs	r2, r3, r4
 8008f96:	42a3      	cmp	r3, r4
 8008f98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f9c:	bf08      	it	eq
 8008f9e:	2300      	moveq	r3, #0
 8008fa0:	6102      	str	r2, [r0, #16]
 8008fa2:	bf08      	it	eq
 8008fa4:	6143      	streq	r3, [r0, #20]
 8008fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008faa:	f8dc c000 	ldr.w	ip, [ip]
 8008fae:	fa0c fc08 	lsl.w	ip, ip, r8
 8008fb2:	ea4c 0707 	orr.w	r7, ip, r7
 8008fb6:	f849 7b04 	str.w	r7, [r9], #4
 8008fba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fbe:	40cf      	lsrs	r7, r1
 8008fc0:	e7da      	b.n	8008f78 <rshift+0x4c>
 8008fc2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008fc6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008fca:	e7c3      	b.n	8008f54 <rshift+0x28>
 8008fcc:	4623      	mov	r3, r4
 8008fce:	e7e1      	b.n	8008f94 <rshift+0x68>

08008fd0 <__hexdig_fun>:
 8008fd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008fd4:	2b09      	cmp	r3, #9
 8008fd6:	d802      	bhi.n	8008fde <__hexdig_fun+0xe>
 8008fd8:	3820      	subs	r0, #32
 8008fda:	b2c0      	uxtb	r0, r0
 8008fdc:	4770      	bx	lr
 8008fde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008fe2:	2b05      	cmp	r3, #5
 8008fe4:	d801      	bhi.n	8008fea <__hexdig_fun+0x1a>
 8008fe6:	3847      	subs	r0, #71	; 0x47
 8008fe8:	e7f7      	b.n	8008fda <__hexdig_fun+0xa>
 8008fea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008fee:	2b05      	cmp	r3, #5
 8008ff0:	d801      	bhi.n	8008ff6 <__hexdig_fun+0x26>
 8008ff2:	3827      	subs	r0, #39	; 0x27
 8008ff4:	e7f1      	b.n	8008fda <__hexdig_fun+0xa>
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	4770      	bx	lr
	...

08008ffc <__gethex>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	ed2d 8b02 	vpush	{d8}
 8009004:	b089      	sub	sp, #36	; 0x24
 8009006:	ee08 0a10 	vmov	s16, r0
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	4bb4      	ldr	r3, [pc, #720]	; (80092e0 <__gethex+0x2e4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	4618      	mov	r0, r3
 8009014:	468b      	mov	fp, r1
 8009016:	4690      	mov	r8, r2
 8009018:	f7f7 f8fa 	bl	8000210 <strlen>
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	f8db 2000 	ldr.w	r2, [fp]
 8009022:	4403      	add	r3, r0
 8009024:	4682      	mov	sl, r0
 8009026:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800902a:	9305      	str	r3, [sp, #20]
 800902c:	1c93      	adds	r3, r2, #2
 800902e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009032:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009036:	32fe      	adds	r2, #254	; 0xfe
 8009038:	18d1      	adds	r1, r2, r3
 800903a:	461f      	mov	r7, r3
 800903c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009040:	9100      	str	r1, [sp, #0]
 8009042:	2830      	cmp	r0, #48	; 0x30
 8009044:	d0f8      	beq.n	8009038 <__gethex+0x3c>
 8009046:	f7ff ffc3 	bl	8008fd0 <__hexdig_fun>
 800904a:	4604      	mov	r4, r0
 800904c:	2800      	cmp	r0, #0
 800904e:	d13a      	bne.n	80090c6 <__gethex+0xca>
 8009050:	9901      	ldr	r1, [sp, #4]
 8009052:	4652      	mov	r2, sl
 8009054:	4638      	mov	r0, r7
 8009056:	f001 fdb3 	bl	800abc0 <strncmp>
 800905a:	4605      	mov	r5, r0
 800905c:	2800      	cmp	r0, #0
 800905e:	d168      	bne.n	8009132 <__gethex+0x136>
 8009060:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009064:	eb07 060a 	add.w	r6, r7, sl
 8009068:	f7ff ffb2 	bl	8008fd0 <__hexdig_fun>
 800906c:	2800      	cmp	r0, #0
 800906e:	d062      	beq.n	8009136 <__gethex+0x13a>
 8009070:	4633      	mov	r3, r6
 8009072:	7818      	ldrb	r0, [r3, #0]
 8009074:	2830      	cmp	r0, #48	; 0x30
 8009076:	461f      	mov	r7, r3
 8009078:	f103 0301 	add.w	r3, r3, #1
 800907c:	d0f9      	beq.n	8009072 <__gethex+0x76>
 800907e:	f7ff ffa7 	bl	8008fd0 <__hexdig_fun>
 8009082:	2301      	movs	r3, #1
 8009084:	fab0 f480 	clz	r4, r0
 8009088:	0964      	lsrs	r4, r4, #5
 800908a:	4635      	mov	r5, r6
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	463a      	mov	r2, r7
 8009090:	4616      	mov	r6, r2
 8009092:	3201      	adds	r2, #1
 8009094:	7830      	ldrb	r0, [r6, #0]
 8009096:	f7ff ff9b 	bl	8008fd0 <__hexdig_fun>
 800909a:	2800      	cmp	r0, #0
 800909c:	d1f8      	bne.n	8009090 <__gethex+0x94>
 800909e:	9901      	ldr	r1, [sp, #4]
 80090a0:	4652      	mov	r2, sl
 80090a2:	4630      	mov	r0, r6
 80090a4:	f001 fd8c 	bl	800abc0 <strncmp>
 80090a8:	b980      	cbnz	r0, 80090cc <__gethex+0xd0>
 80090aa:	b94d      	cbnz	r5, 80090c0 <__gethex+0xc4>
 80090ac:	eb06 050a 	add.w	r5, r6, sl
 80090b0:	462a      	mov	r2, r5
 80090b2:	4616      	mov	r6, r2
 80090b4:	3201      	adds	r2, #1
 80090b6:	7830      	ldrb	r0, [r6, #0]
 80090b8:	f7ff ff8a 	bl	8008fd0 <__hexdig_fun>
 80090bc:	2800      	cmp	r0, #0
 80090be:	d1f8      	bne.n	80090b2 <__gethex+0xb6>
 80090c0:	1bad      	subs	r5, r5, r6
 80090c2:	00ad      	lsls	r5, r5, #2
 80090c4:	e004      	b.n	80090d0 <__gethex+0xd4>
 80090c6:	2400      	movs	r4, #0
 80090c8:	4625      	mov	r5, r4
 80090ca:	e7e0      	b.n	800908e <__gethex+0x92>
 80090cc:	2d00      	cmp	r5, #0
 80090ce:	d1f7      	bne.n	80090c0 <__gethex+0xc4>
 80090d0:	7833      	ldrb	r3, [r6, #0]
 80090d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090d6:	2b50      	cmp	r3, #80	; 0x50
 80090d8:	d13b      	bne.n	8009152 <__gethex+0x156>
 80090da:	7873      	ldrb	r3, [r6, #1]
 80090dc:	2b2b      	cmp	r3, #43	; 0x2b
 80090de:	d02c      	beq.n	800913a <__gethex+0x13e>
 80090e0:	2b2d      	cmp	r3, #45	; 0x2d
 80090e2:	d02e      	beq.n	8009142 <__gethex+0x146>
 80090e4:	1c71      	adds	r1, r6, #1
 80090e6:	f04f 0900 	mov.w	r9, #0
 80090ea:	7808      	ldrb	r0, [r1, #0]
 80090ec:	f7ff ff70 	bl	8008fd0 <__hexdig_fun>
 80090f0:	1e43      	subs	r3, r0, #1
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b18      	cmp	r3, #24
 80090f6:	d82c      	bhi.n	8009152 <__gethex+0x156>
 80090f8:	f1a0 0210 	sub.w	r2, r0, #16
 80090fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009100:	f7ff ff66 	bl	8008fd0 <__hexdig_fun>
 8009104:	1e43      	subs	r3, r0, #1
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b18      	cmp	r3, #24
 800910a:	d91d      	bls.n	8009148 <__gethex+0x14c>
 800910c:	f1b9 0f00 	cmp.w	r9, #0
 8009110:	d000      	beq.n	8009114 <__gethex+0x118>
 8009112:	4252      	negs	r2, r2
 8009114:	4415      	add	r5, r2
 8009116:	f8cb 1000 	str.w	r1, [fp]
 800911a:	b1e4      	cbz	r4, 8009156 <__gethex+0x15a>
 800911c:	9b00      	ldr	r3, [sp, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	bf14      	ite	ne
 8009122:	2700      	movne	r7, #0
 8009124:	2706      	moveq	r7, #6
 8009126:	4638      	mov	r0, r7
 8009128:	b009      	add	sp, #36	; 0x24
 800912a:	ecbd 8b02 	vpop	{d8}
 800912e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009132:	463e      	mov	r6, r7
 8009134:	4625      	mov	r5, r4
 8009136:	2401      	movs	r4, #1
 8009138:	e7ca      	b.n	80090d0 <__gethex+0xd4>
 800913a:	f04f 0900 	mov.w	r9, #0
 800913e:	1cb1      	adds	r1, r6, #2
 8009140:	e7d3      	b.n	80090ea <__gethex+0xee>
 8009142:	f04f 0901 	mov.w	r9, #1
 8009146:	e7fa      	b.n	800913e <__gethex+0x142>
 8009148:	230a      	movs	r3, #10
 800914a:	fb03 0202 	mla	r2, r3, r2, r0
 800914e:	3a10      	subs	r2, #16
 8009150:	e7d4      	b.n	80090fc <__gethex+0x100>
 8009152:	4631      	mov	r1, r6
 8009154:	e7df      	b.n	8009116 <__gethex+0x11a>
 8009156:	1bf3      	subs	r3, r6, r7
 8009158:	3b01      	subs	r3, #1
 800915a:	4621      	mov	r1, r4
 800915c:	2b07      	cmp	r3, #7
 800915e:	dc0b      	bgt.n	8009178 <__gethex+0x17c>
 8009160:	ee18 0a10 	vmov	r0, s16
 8009164:	f000 fa90 	bl	8009688 <_Balloc>
 8009168:	4604      	mov	r4, r0
 800916a:	b940      	cbnz	r0, 800917e <__gethex+0x182>
 800916c:	4b5d      	ldr	r3, [pc, #372]	; (80092e4 <__gethex+0x2e8>)
 800916e:	4602      	mov	r2, r0
 8009170:	21de      	movs	r1, #222	; 0xde
 8009172:	485d      	ldr	r0, [pc, #372]	; (80092e8 <__gethex+0x2ec>)
 8009174:	f001 fdf4 	bl	800ad60 <__assert_func>
 8009178:	3101      	adds	r1, #1
 800917a:	105b      	asrs	r3, r3, #1
 800917c:	e7ee      	b.n	800915c <__gethex+0x160>
 800917e:	f100 0914 	add.w	r9, r0, #20
 8009182:	f04f 0b00 	mov.w	fp, #0
 8009186:	f1ca 0301 	rsb	r3, sl, #1
 800918a:	f8cd 9008 	str.w	r9, [sp, #8]
 800918e:	f8cd b000 	str.w	fp, [sp]
 8009192:	9306      	str	r3, [sp, #24]
 8009194:	42b7      	cmp	r7, r6
 8009196:	d340      	bcc.n	800921a <__gethex+0x21e>
 8009198:	9802      	ldr	r0, [sp, #8]
 800919a:	9b00      	ldr	r3, [sp, #0]
 800919c:	f840 3b04 	str.w	r3, [r0], #4
 80091a0:	eba0 0009 	sub.w	r0, r0, r9
 80091a4:	1080      	asrs	r0, r0, #2
 80091a6:	0146      	lsls	r6, r0, #5
 80091a8:	6120      	str	r0, [r4, #16]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fb5e 	bl	800986c <__hi0bits>
 80091b0:	1a30      	subs	r0, r6, r0
 80091b2:	f8d8 6000 	ldr.w	r6, [r8]
 80091b6:	42b0      	cmp	r0, r6
 80091b8:	dd63      	ble.n	8009282 <__gethex+0x286>
 80091ba:	1b87      	subs	r7, r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 ff02 	bl	8009fc8 <__any_on>
 80091c4:	4682      	mov	sl, r0
 80091c6:	b1a8      	cbz	r0, 80091f4 <__gethex+0x1f8>
 80091c8:	1e7b      	subs	r3, r7, #1
 80091ca:	1159      	asrs	r1, r3, #5
 80091cc:	f003 021f 	and.w	r2, r3, #31
 80091d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80091d4:	f04f 0a01 	mov.w	sl, #1
 80091d8:	fa0a f202 	lsl.w	r2, sl, r2
 80091dc:	420a      	tst	r2, r1
 80091de:	d009      	beq.n	80091f4 <__gethex+0x1f8>
 80091e0:	4553      	cmp	r3, sl
 80091e2:	dd05      	ble.n	80091f0 <__gethex+0x1f4>
 80091e4:	1eb9      	subs	r1, r7, #2
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 feee 	bl	8009fc8 <__any_on>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d145      	bne.n	800927c <__gethex+0x280>
 80091f0:	f04f 0a02 	mov.w	sl, #2
 80091f4:	4639      	mov	r1, r7
 80091f6:	4620      	mov	r0, r4
 80091f8:	f7ff fe98 	bl	8008f2c <rshift>
 80091fc:	443d      	add	r5, r7
 80091fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009202:	42ab      	cmp	r3, r5
 8009204:	da4c      	bge.n	80092a0 <__gethex+0x2a4>
 8009206:	ee18 0a10 	vmov	r0, s16
 800920a:	4621      	mov	r1, r4
 800920c:	f000 fa7c 	bl	8009708 <_Bfree>
 8009210:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009212:	2300      	movs	r3, #0
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	27a3      	movs	r7, #163	; 0xa3
 8009218:	e785      	b.n	8009126 <__gethex+0x12a>
 800921a:	1e73      	subs	r3, r6, #1
 800921c:	9a05      	ldr	r2, [sp, #20]
 800921e:	9303      	str	r3, [sp, #12]
 8009220:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009224:	4293      	cmp	r3, r2
 8009226:	d019      	beq.n	800925c <__gethex+0x260>
 8009228:	f1bb 0f20 	cmp.w	fp, #32
 800922c:	d107      	bne.n	800923e <__gethex+0x242>
 800922e:	9b02      	ldr	r3, [sp, #8]
 8009230:	9a00      	ldr	r2, [sp, #0]
 8009232:	f843 2b04 	str.w	r2, [r3], #4
 8009236:	9302      	str	r3, [sp, #8]
 8009238:	2300      	movs	r3, #0
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	469b      	mov	fp, r3
 800923e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009242:	f7ff fec5 	bl	8008fd0 <__hexdig_fun>
 8009246:	9b00      	ldr	r3, [sp, #0]
 8009248:	f000 000f 	and.w	r0, r0, #15
 800924c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009250:	4303      	orrs	r3, r0
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	f10b 0b04 	add.w	fp, fp, #4
 8009258:	9b03      	ldr	r3, [sp, #12]
 800925a:	e00d      	b.n	8009278 <__gethex+0x27c>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	9a06      	ldr	r2, [sp, #24]
 8009260:	4413      	add	r3, r2
 8009262:	42bb      	cmp	r3, r7
 8009264:	d3e0      	bcc.n	8009228 <__gethex+0x22c>
 8009266:	4618      	mov	r0, r3
 8009268:	9901      	ldr	r1, [sp, #4]
 800926a:	9307      	str	r3, [sp, #28]
 800926c:	4652      	mov	r2, sl
 800926e:	f001 fca7 	bl	800abc0 <strncmp>
 8009272:	9b07      	ldr	r3, [sp, #28]
 8009274:	2800      	cmp	r0, #0
 8009276:	d1d7      	bne.n	8009228 <__gethex+0x22c>
 8009278:	461e      	mov	r6, r3
 800927a:	e78b      	b.n	8009194 <__gethex+0x198>
 800927c:	f04f 0a03 	mov.w	sl, #3
 8009280:	e7b8      	b.n	80091f4 <__gethex+0x1f8>
 8009282:	da0a      	bge.n	800929a <__gethex+0x29e>
 8009284:	1a37      	subs	r7, r6, r0
 8009286:	4621      	mov	r1, r4
 8009288:	ee18 0a10 	vmov	r0, s16
 800928c:	463a      	mov	r2, r7
 800928e:	f000 fc57 	bl	8009b40 <__lshift>
 8009292:	1bed      	subs	r5, r5, r7
 8009294:	4604      	mov	r4, r0
 8009296:	f100 0914 	add.w	r9, r0, #20
 800929a:	f04f 0a00 	mov.w	sl, #0
 800929e:	e7ae      	b.n	80091fe <__gethex+0x202>
 80092a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80092a4:	42a8      	cmp	r0, r5
 80092a6:	dd72      	ble.n	800938e <__gethex+0x392>
 80092a8:	1b45      	subs	r5, r0, r5
 80092aa:	42ae      	cmp	r6, r5
 80092ac:	dc36      	bgt.n	800931c <__gethex+0x320>
 80092ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d02a      	beq.n	800930c <__gethex+0x310>
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d02c      	beq.n	8009314 <__gethex+0x318>
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d11c      	bne.n	80092f8 <__gethex+0x2fc>
 80092be:	42ae      	cmp	r6, r5
 80092c0:	d11a      	bne.n	80092f8 <__gethex+0x2fc>
 80092c2:	2e01      	cmp	r6, #1
 80092c4:	d112      	bne.n	80092ec <__gethex+0x2f0>
 80092c6:	9a04      	ldr	r2, [sp, #16]
 80092c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	2301      	movs	r3, #1
 80092d0:	6123      	str	r3, [r4, #16]
 80092d2:	f8c9 3000 	str.w	r3, [r9]
 80092d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092d8:	2762      	movs	r7, #98	; 0x62
 80092da:	601c      	str	r4, [r3, #0]
 80092dc:	e723      	b.n	8009126 <__gethex+0x12a>
 80092de:	bf00      	nop
 80092e0:	0800bac0 	.word	0x0800bac0
 80092e4:	0800ba48 	.word	0x0800ba48
 80092e8:	0800ba59 	.word	0x0800ba59
 80092ec:	1e71      	subs	r1, r6, #1
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 fe6a 	bl	8009fc8 <__any_on>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d1e6      	bne.n	80092c6 <__gethex+0x2ca>
 80092f8:	ee18 0a10 	vmov	r0, s16
 80092fc:	4621      	mov	r1, r4
 80092fe:	f000 fa03 	bl	8009708 <_Bfree>
 8009302:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009304:	2300      	movs	r3, #0
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	2750      	movs	r7, #80	; 0x50
 800930a:	e70c      	b.n	8009126 <__gethex+0x12a>
 800930c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f2      	bne.n	80092f8 <__gethex+0x2fc>
 8009312:	e7d8      	b.n	80092c6 <__gethex+0x2ca>
 8009314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1d5      	bne.n	80092c6 <__gethex+0x2ca>
 800931a:	e7ed      	b.n	80092f8 <__gethex+0x2fc>
 800931c:	1e6f      	subs	r7, r5, #1
 800931e:	f1ba 0f00 	cmp.w	sl, #0
 8009322:	d131      	bne.n	8009388 <__gethex+0x38c>
 8009324:	b127      	cbz	r7, 8009330 <__gethex+0x334>
 8009326:	4639      	mov	r1, r7
 8009328:	4620      	mov	r0, r4
 800932a:	f000 fe4d 	bl	8009fc8 <__any_on>
 800932e:	4682      	mov	sl, r0
 8009330:	117b      	asrs	r3, r7, #5
 8009332:	2101      	movs	r1, #1
 8009334:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009338:	f007 071f 	and.w	r7, r7, #31
 800933c:	fa01 f707 	lsl.w	r7, r1, r7
 8009340:	421f      	tst	r7, r3
 8009342:	4629      	mov	r1, r5
 8009344:	4620      	mov	r0, r4
 8009346:	bf18      	it	ne
 8009348:	f04a 0a02 	orrne.w	sl, sl, #2
 800934c:	1b76      	subs	r6, r6, r5
 800934e:	f7ff fded 	bl	8008f2c <rshift>
 8009352:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009356:	2702      	movs	r7, #2
 8009358:	f1ba 0f00 	cmp.w	sl, #0
 800935c:	d048      	beq.n	80093f0 <__gethex+0x3f4>
 800935e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009362:	2b02      	cmp	r3, #2
 8009364:	d015      	beq.n	8009392 <__gethex+0x396>
 8009366:	2b03      	cmp	r3, #3
 8009368:	d017      	beq.n	800939a <__gethex+0x39e>
 800936a:	2b01      	cmp	r3, #1
 800936c:	d109      	bne.n	8009382 <__gethex+0x386>
 800936e:	f01a 0f02 	tst.w	sl, #2
 8009372:	d006      	beq.n	8009382 <__gethex+0x386>
 8009374:	f8d9 0000 	ldr.w	r0, [r9]
 8009378:	ea4a 0a00 	orr.w	sl, sl, r0
 800937c:	f01a 0f01 	tst.w	sl, #1
 8009380:	d10e      	bne.n	80093a0 <__gethex+0x3a4>
 8009382:	f047 0710 	orr.w	r7, r7, #16
 8009386:	e033      	b.n	80093f0 <__gethex+0x3f4>
 8009388:	f04f 0a01 	mov.w	sl, #1
 800938c:	e7d0      	b.n	8009330 <__gethex+0x334>
 800938e:	2701      	movs	r7, #1
 8009390:	e7e2      	b.n	8009358 <__gethex+0x35c>
 8009392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009394:	f1c3 0301 	rsb	r3, r3, #1
 8009398:	9315      	str	r3, [sp, #84]	; 0x54
 800939a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800939c:	2b00      	cmp	r3, #0
 800939e:	d0f0      	beq.n	8009382 <__gethex+0x386>
 80093a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80093a4:	f104 0314 	add.w	r3, r4, #20
 80093a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80093ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80093b0:	f04f 0c00 	mov.w	ip, #0
 80093b4:	4618      	mov	r0, r3
 80093b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 80093be:	d01c      	beq.n	80093fa <__gethex+0x3fe>
 80093c0:	3201      	adds	r2, #1
 80093c2:	6002      	str	r2, [r0, #0]
 80093c4:	2f02      	cmp	r7, #2
 80093c6:	f104 0314 	add.w	r3, r4, #20
 80093ca:	d13f      	bne.n	800944c <__gethex+0x450>
 80093cc:	f8d8 2000 	ldr.w	r2, [r8]
 80093d0:	3a01      	subs	r2, #1
 80093d2:	42b2      	cmp	r2, r6
 80093d4:	d10a      	bne.n	80093ec <__gethex+0x3f0>
 80093d6:	1171      	asrs	r1, r6, #5
 80093d8:	2201      	movs	r2, #1
 80093da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093de:	f006 061f 	and.w	r6, r6, #31
 80093e2:	fa02 f606 	lsl.w	r6, r2, r6
 80093e6:	421e      	tst	r6, r3
 80093e8:	bf18      	it	ne
 80093ea:	4617      	movne	r7, r2
 80093ec:	f047 0720 	orr.w	r7, r7, #32
 80093f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093f2:	601c      	str	r4, [r3, #0]
 80093f4:	9b04      	ldr	r3, [sp, #16]
 80093f6:	601d      	str	r5, [r3, #0]
 80093f8:	e695      	b.n	8009126 <__gethex+0x12a>
 80093fa:	4299      	cmp	r1, r3
 80093fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009400:	d8d8      	bhi.n	80093b4 <__gethex+0x3b8>
 8009402:	68a3      	ldr	r3, [r4, #8]
 8009404:	459b      	cmp	fp, r3
 8009406:	db19      	blt.n	800943c <__gethex+0x440>
 8009408:	6861      	ldr	r1, [r4, #4]
 800940a:	ee18 0a10 	vmov	r0, s16
 800940e:	3101      	adds	r1, #1
 8009410:	f000 f93a 	bl	8009688 <_Balloc>
 8009414:	4681      	mov	r9, r0
 8009416:	b918      	cbnz	r0, 8009420 <__gethex+0x424>
 8009418:	4b1a      	ldr	r3, [pc, #104]	; (8009484 <__gethex+0x488>)
 800941a:	4602      	mov	r2, r0
 800941c:	2184      	movs	r1, #132	; 0x84
 800941e:	e6a8      	b.n	8009172 <__gethex+0x176>
 8009420:	6922      	ldr	r2, [r4, #16]
 8009422:	3202      	adds	r2, #2
 8009424:	f104 010c 	add.w	r1, r4, #12
 8009428:	0092      	lsls	r2, r2, #2
 800942a:	300c      	adds	r0, #12
 800942c:	f000 f91e 	bl	800966c <memcpy>
 8009430:	4621      	mov	r1, r4
 8009432:	ee18 0a10 	vmov	r0, s16
 8009436:	f000 f967 	bl	8009708 <_Bfree>
 800943a:	464c      	mov	r4, r9
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009444:	6122      	str	r2, [r4, #16]
 8009446:	2201      	movs	r2, #1
 8009448:	615a      	str	r2, [r3, #20]
 800944a:	e7bb      	b.n	80093c4 <__gethex+0x3c8>
 800944c:	6922      	ldr	r2, [r4, #16]
 800944e:	455a      	cmp	r2, fp
 8009450:	dd0b      	ble.n	800946a <__gethex+0x46e>
 8009452:	2101      	movs	r1, #1
 8009454:	4620      	mov	r0, r4
 8009456:	f7ff fd69 	bl	8008f2c <rshift>
 800945a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800945e:	3501      	adds	r5, #1
 8009460:	42ab      	cmp	r3, r5
 8009462:	f6ff aed0 	blt.w	8009206 <__gethex+0x20a>
 8009466:	2701      	movs	r7, #1
 8009468:	e7c0      	b.n	80093ec <__gethex+0x3f0>
 800946a:	f016 061f 	ands.w	r6, r6, #31
 800946e:	d0fa      	beq.n	8009466 <__gethex+0x46a>
 8009470:	4453      	add	r3, sl
 8009472:	f1c6 0620 	rsb	r6, r6, #32
 8009476:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800947a:	f000 f9f7 	bl	800986c <__hi0bits>
 800947e:	42b0      	cmp	r0, r6
 8009480:	dbe7      	blt.n	8009452 <__gethex+0x456>
 8009482:	e7f0      	b.n	8009466 <__gethex+0x46a>
 8009484:	0800ba48 	.word	0x0800ba48

08009488 <L_shift>:
 8009488:	f1c2 0208 	rsb	r2, r2, #8
 800948c:	0092      	lsls	r2, r2, #2
 800948e:	b570      	push	{r4, r5, r6, lr}
 8009490:	f1c2 0620 	rsb	r6, r2, #32
 8009494:	6843      	ldr	r3, [r0, #4]
 8009496:	6804      	ldr	r4, [r0, #0]
 8009498:	fa03 f506 	lsl.w	r5, r3, r6
 800949c:	432c      	orrs	r4, r5
 800949e:	40d3      	lsrs	r3, r2
 80094a0:	6004      	str	r4, [r0, #0]
 80094a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80094a6:	4288      	cmp	r0, r1
 80094a8:	d3f4      	bcc.n	8009494 <L_shift+0xc>
 80094aa:	bd70      	pop	{r4, r5, r6, pc}

080094ac <__match>:
 80094ac:	b530      	push	{r4, r5, lr}
 80094ae:	6803      	ldr	r3, [r0, #0]
 80094b0:	3301      	adds	r3, #1
 80094b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094b6:	b914      	cbnz	r4, 80094be <__match+0x12>
 80094b8:	6003      	str	r3, [r0, #0]
 80094ba:	2001      	movs	r0, #1
 80094bc:	bd30      	pop	{r4, r5, pc}
 80094be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80094c6:	2d19      	cmp	r5, #25
 80094c8:	bf98      	it	ls
 80094ca:	3220      	addls	r2, #32
 80094cc:	42a2      	cmp	r2, r4
 80094ce:	d0f0      	beq.n	80094b2 <__match+0x6>
 80094d0:	2000      	movs	r0, #0
 80094d2:	e7f3      	b.n	80094bc <__match+0x10>

080094d4 <__hexnan>:
 80094d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d8:	680b      	ldr	r3, [r1, #0]
 80094da:	115e      	asrs	r6, r3, #5
 80094dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80094e0:	f013 031f 	ands.w	r3, r3, #31
 80094e4:	b087      	sub	sp, #28
 80094e6:	bf18      	it	ne
 80094e8:	3604      	addne	r6, #4
 80094ea:	2500      	movs	r5, #0
 80094ec:	1f37      	subs	r7, r6, #4
 80094ee:	4690      	mov	r8, r2
 80094f0:	6802      	ldr	r2, [r0, #0]
 80094f2:	9301      	str	r3, [sp, #4]
 80094f4:	4682      	mov	sl, r0
 80094f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80094fa:	46b9      	mov	r9, r7
 80094fc:	463c      	mov	r4, r7
 80094fe:	9502      	str	r5, [sp, #8]
 8009500:	46ab      	mov	fp, r5
 8009502:	7851      	ldrb	r1, [r2, #1]
 8009504:	1c53      	adds	r3, r2, #1
 8009506:	9303      	str	r3, [sp, #12]
 8009508:	b341      	cbz	r1, 800955c <__hexnan+0x88>
 800950a:	4608      	mov	r0, r1
 800950c:	9205      	str	r2, [sp, #20]
 800950e:	9104      	str	r1, [sp, #16]
 8009510:	f7ff fd5e 	bl	8008fd0 <__hexdig_fun>
 8009514:	2800      	cmp	r0, #0
 8009516:	d14f      	bne.n	80095b8 <__hexnan+0xe4>
 8009518:	9904      	ldr	r1, [sp, #16]
 800951a:	9a05      	ldr	r2, [sp, #20]
 800951c:	2920      	cmp	r1, #32
 800951e:	d818      	bhi.n	8009552 <__hexnan+0x7e>
 8009520:	9b02      	ldr	r3, [sp, #8]
 8009522:	459b      	cmp	fp, r3
 8009524:	dd13      	ble.n	800954e <__hexnan+0x7a>
 8009526:	454c      	cmp	r4, r9
 8009528:	d206      	bcs.n	8009538 <__hexnan+0x64>
 800952a:	2d07      	cmp	r5, #7
 800952c:	dc04      	bgt.n	8009538 <__hexnan+0x64>
 800952e:	462a      	mov	r2, r5
 8009530:	4649      	mov	r1, r9
 8009532:	4620      	mov	r0, r4
 8009534:	f7ff ffa8 	bl	8009488 <L_shift>
 8009538:	4544      	cmp	r4, r8
 800953a:	d950      	bls.n	80095de <__hexnan+0x10a>
 800953c:	2300      	movs	r3, #0
 800953e:	f1a4 0904 	sub.w	r9, r4, #4
 8009542:	f844 3c04 	str.w	r3, [r4, #-4]
 8009546:	f8cd b008 	str.w	fp, [sp, #8]
 800954a:	464c      	mov	r4, r9
 800954c:	461d      	mov	r5, r3
 800954e:	9a03      	ldr	r2, [sp, #12]
 8009550:	e7d7      	b.n	8009502 <__hexnan+0x2e>
 8009552:	2929      	cmp	r1, #41	; 0x29
 8009554:	d156      	bne.n	8009604 <__hexnan+0x130>
 8009556:	3202      	adds	r2, #2
 8009558:	f8ca 2000 	str.w	r2, [sl]
 800955c:	f1bb 0f00 	cmp.w	fp, #0
 8009560:	d050      	beq.n	8009604 <__hexnan+0x130>
 8009562:	454c      	cmp	r4, r9
 8009564:	d206      	bcs.n	8009574 <__hexnan+0xa0>
 8009566:	2d07      	cmp	r5, #7
 8009568:	dc04      	bgt.n	8009574 <__hexnan+0xa0>
 800956a:	462a      	mov	r2, r5
 800956c:	4649      	mov	r1, r9
 800956e:	4620      	mov	r0, r4
 8009570:	f7ff ff8a 	bl	8009488 <L_shift>
 8009574:	4544      	cmp	r4, r8
 8009576:	d934      	bls.n	80095e2 <__hexnan+0x10e>
 8009578:	f1a8 0204 	sub.w	r2, r8, #4
 800957c:	4623      	mov	r3, r4
 800957e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009582:	f842 1f04 	str.w	r1, [r2, #4]!
 8009586:	429f      	cmp	r7, r3
 8009588:	d2f9      	bcs.n	800957e <__hexnan+0xaa>
 800958a:	1b3b      	subs	r3, r7, r4
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	3304      	adds	r3, #4
 8009592:	3401      	adds	r4, #1
 8009594:	3e03      	subs	r6, #3
 8009596:	42b4      	cmp	r4, r6
 8009598:	bf88      	it	hi
 800959a:	2304      	movhi	r3, #4
 800959c:	4443      	add	r3, r8
 800959e:	2200      	movs	r2, #0
 80095a0:	f843 2b04 	str.w	r2, [r3], #4
 80095a4:	429f      	cmp	r7, r3
 80095a6:	d2fb      	bcs.n	80095a0 <__hexnan+0xcc>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	b91b      	cbnz	r3, 80095b4 <__hexnan+0xe0>
 80095ac:	4547      	cmp	r7, r8
 80095ae:	d127      	bne.n	8009600 <__hexnan+0x12c>
 80095b0:	2301      	movs	r3, #1
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	2005      	movs	r0, #5
 80095b6:	e026      	b.n	8009606 <__hexnan+0x132>
 80095b8:	3501      	adds	r5, #1
 80095ba:	2d08      	cmp	r5, #8
 80095bc:	f10b 0b01 	add.w	fp, fp, #1
 80095c0:	dd06      	ble.n	80095d0 <__hexnan+0xfc>
 80095c2:	4544      	cmp	r4, r8
 80095c4:	d9c3      	bls.n	800954e <__hexnan+0x7a>
 80095c6:	2300      	movs	r3, #0
 80095c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80095cc:	2501      	movs	r5, #1
 80095ce:	3c04      	subs	r4, #4
 80095d0:	6822      	ldr	r2, [r4, #0]
 80095d2:	f000 000f 	and.w	r0, r0, #15
 80095d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80095da:	6022      	str	r2, [r4, #0]
 80095dc:	e7b7      	b.n	800954e <__hexnan+0x7a>
 80095de:	2508      	movs	r5, #8
 80095e0:	e7b5      	b.n	800954e <__hexnan+0x7a>
 80095e2:	9b01      	ldr	r3, [sp, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0df      	beq.n	80095a8 <__hexnan+0xd4>
 80095e8:	f04f 32ff 	mov.w	r2, #4294967295
 80095ec:	f1c3 0320 	rsb	r3, r3, #32
 80095f0:	fa22 f303 	lsr.w	r3, r2, r3
 80095f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095f8:	401a      	ands	r2, r3
 80095fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80095fe:	e7d3      	b.n	80095a8 <__hexnan+0xd4>
 8009600:	3f04      	subs	r7, #4
 8009602:	e7d1      	b.n	80095a8 <__hexnan+0xd4>
 8009604:	2004      	movs	r0, #4
 8009606:	b007      	add	sp, #28
 8009608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800960c <_localeconv_r>:
 800960c:	4800      	ldr	r0, [pc, #0]	; (8009610 <_localeconv_r+0x4>)
 800960e:	4770      	bx	lr
 8009610:	20000164 	.word	0x20000164

08009614 <_lseek_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d07      	ldr	r5, [pc, #28]	; (8009634 <_lseek_r+0x20>)
 8009618:	4604      	mov	r4, r0
 800961a:	4608      	mov	r0, r1
 800961c:	4611      	mov	r1, r2
 800961e:	2200      	movs	r2, #0
 8009620:	602a      	str	r2, [r5, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	f7f8 fc16 	bl	8001e54 <_lseek>
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d102      	bne.n	8009632 <_lseek_r+0x1e>
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	b103      	cbz	r3, 8009632 <_lseek_r+0x1e>
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	200003e4 	.word	0x200003e4

08009638 <malloc>:
 8009638:	4b02      	ldr	r3, [pc, #8]	; (8009644 <malloc+0xc>)
 800963a:	4601      	mov	r1, r0
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f000 bd67 	b.w	800a110 <_malloc_r>
 8009642:	bf00      	nop
 8009644:	2000000c 	.word	0x2000000c

08009648 <__ascii_mbtowc>:
 8009648:	b082      	sub	sp, #8
 800964a:	b901      	cbnz	r1, 800964e <__ascii_mbtowc+0x6>
 800964c:	a901      	add	r1, sp, #4
 800964e:	b142      	cbz	r2, 8009662 <__ascii_mbtowc+0x1a>
 8009650:	b14b      	cbz	r3, 8009666 <__ascii_mbtowc+0x1e>
 8009652:	7813      	ldrb	r3, [r2, #0]
 8009654:	600b      	str	r3, [r1, #0]
 8009656:	7812      	ldrb	r2, [r2, #0]
 8009658:	1e10      	subs	r0, r2, #0
 800965a:	bf18      	it	ne
 800965c:	2001      	movne	r0, #1
 800965e:	b002      	add	sp, #8
 8009660:	4770      	bx	lr
 8009662:	4610      	mov	r0, r2
 8009664:	e7fb      	b.n	800965e <__ascii_mbtowc+0x16>
 8009666:	f06f 0001 	mvn.w	r0, #1
 800966a:	e7f8      	b.n	800965e <__ascii_mbtowc+0x16>

0800966c <memcpy>:
 800966c:	440a      	add	r2, r1
 800966e:	4291      	cmp	r1, r2
 8009670:	f100 33ff 	add.w	r3, r0, #4294967295
 8009674:	d100      	bne.n	8009678 <memcpy+0xc>
 8009676:	4770      	bx	lr
 8009678:	b510      	push	{r4, lr}
 800967a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800967e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009682:	4291      	cmp	r1, r2
 8009684:	d1f9      	bne.n	800967a <memcpy+0xe>
 8009686:	bd10      	pop	{r4, pc}

08009688 <_Balloc>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800968c:	4604      	mov	r4, r0
 800968e:	460d      	mov	r5, r1
 8009690:	b976      	cbnz	r6, 80096b0 <_Balloc+0x28>
 8009692:	2010      	movs	r0, #16
 8009694:	f7ff ffd0 	bl	8009638 <malloc>
 8009698:	4602      	mov	r2, r0
 800969a:	6260      	str	r0, [r4, #36]	; 0x24
 800969c:	b920      	cbnz	r0, 80096a8 <_Balloc+0x20>
 800969e:	4b18      	ldr	r3, [pc, #96]	; (8009700 <_Balloc+0x78>)
 80096a0:	4818      	ldr	r0, [pc, #96]	; (8009704 <_Balloc+0x7c>)
 80096a2:	2166      	movs	r1, #102	; 0x66
 80096a4:	f001 fb5c 	bl	800ad60 <__assert_func>
 80096a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096ac:	6006      	str	r6, [r0, #0]
 80096ae:	60c6      	str	r6, [r0, #12]
 80096b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096b2:	68f3      	ldr	r3, [r6, #12]
 80096b4:	b183      	cbz	r3, 80096d8 <_Balloc+0x50>
 80096b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096be:	b9b8      	cbnz	r0, 80096f0 <_Balloc+0x68>
 80096c0:	2101      	movs	r1, #1
 80096c2:	fa01 f605 	lsl.w	r6, r1, r5
 80096c6:	1d72      	adds	r2, r6, #5
 80096c8:	0092      	lsls	r2, r2, #2
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 fc9d 	bl	800a00a <_calloc_r>
 80096d0:	b160      	cbz	r0, 80096ec <_Balloc+0x64>
 80096d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096d6:	e00e      	b.n	80096f6 <_Balloc+0x6e>
 80096d8:	2221      	movs	r2, #33	; 0x21
 80096da:	2104      	movs	r1, #4
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 fc94 	bl	800a00a <_calloc_r>
 80096e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096e4:	60f0      	str	r0, [r6, #12]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e4      	bne.n	80096b6 <_Balloc+0x2e>
 80096ec:	2000      	movs	r0, #0
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
 80096f0:	6802      	ldr	r2, [r0, #0]
 80096f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096f6:	2300      	movs	r3, #0
 80096f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096fc:	e7f7      	b.n	80096ee <_Balloc+0x66>
 80096fe:	bf00      	nop
 8009700:	0800b9d6 	.word	0x0800b9d6
 8009704:	0800bad4 	.word	0x0800bad4

08009708 <_Bfree>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800970c:	4605      	mov	r5, r0
 800970e:	460c      	mov	r4, r1
 8009710:	b976      	cbnz	r6, 8009730 <_Bfree+0x28>
 8009712:	2010      	movs	r0, #16
 8009714:	f7ff ff90 	bl	8009638 <malloc>
 8009718:	4602      	mov	r2, r0
 800971a:	6268      	str	r0, [r5, #36]	; 0x24
 800971c:	b920      	cbnz	r0, 8009728 <_Bfree+0x20>
 800971e:	4b09      	ldr	r3, [pc, #36]	; (8009744 <_Bfree+0x3c>)
 8009720:	4809      	ldr	r0, [pc, #36]	; (8009748 <_Bfree+0x40>)
 8009722:	218a      	movs	r1, #138	; 0x8a
 8009724:	f001 fb1c 	bl	800ad60 <__assert_func>
 8009728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800972c:	6006      	str	r6, [r0, #0]
 800972e:	60c6      	str	r6, [r0, #12]
 8009730:	b13c      	cbz	r4, 8009742 <_Bfree+0x3a>
 8009732:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009734:	6862      	ldr	r2, [r4, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800973c:	6021      	str	r1, [r4, #0]
 800973e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009742:	bd70      	pop	{r4, r5, r6, pc}
 8009744:	0800b9d6 	.word	0x0800b9d6
 8009748:	0800bad4 	.word	0x0800bad4

0800974c <__multadd>:
 800974c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009750:	690d      	ldr	r5, [r1, #16]
 8009752:	4607      	mov	r7, r0
 8009754:	460c      	mov	r4, r1
 8009756:	461e      	mov	r6, r3
 8009758:	f101 0c14 	add.w	ip, r1, #20
 800975c:	2000      	movs	r0, #0
 800975e:	f8dc 3000 	ldr.w	r3, [ip]
 8009762:	b299      	uxth	r1, r3
 8009764:	fb02 6101 	mla	r1, r2, r1, r6
 8009768:	0c1e      	lsrs	r6, r3, #16
 800976a:	0c0b      	lsrs	r3, r1, #16
 800976c:	fb02 3306 	mla	r3, r2, r6, r3
 8009770:	b289      	uxth	r1, r1
 8009772:	3001      	adds	r0, #1
 8009774:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009778:	4285      	cmp	r5, r0
 800977a:	f84c 1b04 	str.w	r1, [ip], #4
 800977e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009782:	dcec      	bgt.n	800975e <__multadd+0x12>
 8009784:	b30e      	cbz	r6, 80097ca <__multadd+0x7e>
 8009786:	68a3      	ldr	r3, [r4, #8]
 8009788:	42ab      	cmp	r3, r5
 800978a:	dc19      	bgt.n	80097c0 <__multadd+0x74>
 800978c:	6861      	ldr	r1, [r4, #4]
 800978e:	4638      	mov	r0, r7
 8009790:	3101      	adds	r1, #1
 8009792:	f7ff ff79 	bl	8009688 <_Balloc>
 8009796:	4680      	mov	r8, r0
 8009798:	b928      	cbnz	r0, 80097a6 <__multadd+0x5a>
 800979a:	4602      	mov	r2, r0
 800979c:	4b0c      	ldr	r3, [pc, #48]	; (80097d0 <__multadd+0x84>)
 800979e:	480d      	ldr	r0, [pc, #52]	; (80097d4 <__multadd+0x88>)
 80097a0:	21b5      	movs	r1, #181	; 0xb5
 80097a2:	f001 fadd 	bl	800ad60 <__assert_func>
 80097a6:	6922      	ldr	r2, [r4, #16]
 80097a8:	3202      	adds	r2, #2
 80097aa:	f104 010c 	add.w	r1, r4, #12
 80097ae:	0092      	lsls	r2, r2, #2
 80097b0:	300c      	adds	r0, #12
 80097b2:	f7ff ff5b 	bl	800966c <memcpy>
 80097b6:	4621      	mov	r1, r4
 80097b8:	4638      	mov	r0, r7
 80097ba:	f7ff ffa5 	bl	8009708 <_Bfree>
 80097be:	4644      	mov	r4, r8
 80097c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097c4:	3501      	adds	r5, #1
 80097c6:	615e      	str	r6, [r3, #20]
 80097c8:	6125      	str	r5, [r4, #16]
 80097ca:	4620      	mov	r0, r4
 80097cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d0:	0800ba48 	.word	0x0800ba48
 80097d4:	0800bad4 	.word	0x0800bad4

080097d8 <__s2b>:
 80097d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097dc:	460c      	mov	r4, r1
 80097de:	4615      	mov	r5, r2
 80097e0:	461f      	mov	r7, r3
 80097e2:	2209      	movs	r2, #9
 80097e4:	3308      	adds	r3, #8
 80097e6:	4606      	mov	r6, r0
 80097e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80097ec:	2100      	movs	r1, #0
 80097ee:	2201      	movs	r2, #1
 80097f0:	429a      	cmp	r2, r3
 80097f2:	db09      	blt.n	8009808 <__s2b+0x30>
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff ff47 	bl	8009688 <_Balloc>
 80097fa:	b940      	cbnz	r0, 800980e <__s2b+0x36>
 80097fc:	4602      	mov	r2, r0
 80097fe:	4b19      	ldr	r3, [pc, #100]	; (8009864 <__s2b+0x8c>)
 8009800:	4819      	ldr	r0, [pc, #100]	; (8009868 <__s2b+0x90>)
 8009802:	21ce      	movs	r1, #206	; 0xce
 8009804:	f001 faac 	bl	800ad60 <__assert_func>
 8009808:	0052      	lsls	r2, r2, #1
 800980a:	3101      	adds	r1, #1
 800980c:	e7f0      	b.n	80097f0 <__s2b+0x18>
 800980e:	9b08      	ldr	r3, [sp, #32]
 8009810:	6143      	str	r3, [r0, #20]
 8009812:	2d09      	cmp	r5, #9
 8009814:	f04f 0301 	mov.w	r3, #1
 8009818:	6103      	str	r3, [r0, #16]
 800981a:	dd16      	ble.n	800984a <__s2b+0x72>
 800981c:	f104 0909 	add.w	r9, r4, #9
 8009820:	46c8      	mov	r8, r9
 8009822:	442c      	add	r4, r5
 8009824:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009828:	4601      	mov	r1, r0
 800982a:	3b30      	subs	r3, #48	; 0x30
 800982c:	220a      	movs	r2, #10
 800982e:	4630      	mov	r0, r6
 8009830:	f7ff ff8c 	bl	800974c <__multadd>
 8009834:	45a0      	cmp	r8, r4
 8009836:	d1f5      	bne.n	8009824 <__s2b+0x4c>
 8009838:	f1a5 0408 	sub.w	r4, r5, #8
 800983c:	444c      	add	r4, r9
 800983e:	1b2d      	subs	r5, r5, r4
 8009840:	1963      	adds	r3, r4, r5
 8009842:	42bb      	cmp	r3, r7
 8009844:	db04      	blt.n	8009850 <__s2b+0x78>
 8009846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800984a:	340a      	adds	r4, #10
 800984c:	2509      	movs	r5, #9
 800984e:	e7f6      	b.n	800983e <__s2b+0x66>
 8009850:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009854:	4601      	mov	r1, r0
 8009856:	3b30      	subs	r3, #48	; 0x30
 8009858:	220a      	movs	r2, #10
 800985a:	4630      	mov	r0, r6
 800985c:	f7ff ff76 	bl	800974c <__multadd>
 8009860:	e7ee      	b.n	8009840 <__s2b+0x68>
 8009862:	bf00      	nop
 8009864:	0800ba48 	.word	0x0800ba48
 8009868:	0800bad4 	.word	0x0800bad4

0800986c <__hi0bits>:
 800986c:	0c03      	lsrs	r3, r0, #16
 800986e:	041b      	lsls	r3, r3, #16
 8009870:	b9d3      	cbnz	r3, 80098a8 <__hi0bits+0x3c>
 8009872:	0400      	lsls	r0, r0, #16
 8009874:	2310      	movs	r3, #16
 8009876:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800987a:	bf04      	itt	eq
 800987c:	0200      	lsleq	r0, r0, #8
 800987e:	3308      	addeq	r3, #8
 8009880:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009884:	bf04      	itt	eq
 8009886:	0100      	lsleq	r0, r0, #4
 8009888:	3304      	addeq	r3, #4
 800988a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800988e:	bf04      	itt	eq
 8009890:	0080      	lsleq	r0, r0, #2
 8009892:	3302      	addeq	r3, #2
 8009894:	2800      	cmp	r0, #0
 8009896:	db05      	blt.n	80098a4 <__hi0bits+0x38>
 8009898:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800989c:	f103 0301 	add.w	r3, r3, #1
 80098a0:	bf08      	it	eq
 80098a2:	2320      	moveq	r3, #32
 80098a4:	4618      	mov	r0, r3
 80098a6:	4770      	bx	lr
 80098a8:	2300      	movs	r3, #0
 80098aa:	e7e4      	b.n	8009876 <__hi0bits+0xa>

080098ac <__lo0bits>:
 80098ac:	6803      	ldr	r3, [r0, #0]
 80098ae:	f013 0207 	ands.w	r2, r3, #7
 80098b2:	4601      	mov	r1, r0
 80098b4:	d00b      	beq.n	80098ce <__lo0bits+0x22>
 80098b6:	07da      	lsls	r2, r3, #31
 80098b8:	d423      	bmi.n	8009902 <__lo0bits+0x56>
 80098ba:	0798      	lsls	r0, r3, #30
 80098bc:	bf49      	itett	mi
 80098be:	085b      	lsrmi	r3, r3, #1
 80098c0:	089b      	lsrpl	r3, r3, #2
 80098c2:	2001      	movmi	r0, #1
 80098c4:	600b      	strmi	r3, [r1, #0]
 80098c6:	bf5c      	itt	pl
 80098c8:	600b      	strpl	r3, [r1, #0]
 80098ca:	2002      	movpl	r0, #2
 80098cc:	4770      	bx	lr
 80098ce:	b298      	uxth	r0, r3
 80098d0:	b9a8      	cbnz	r0, 80098fe <__lo0bits+0x52>
 80098d2:	0c1b      	lsrs	r3, r3, #16
 80098d4:	2010      	movs	r0, #16
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	b90a      	cbnz	r2, 80098de <__lo0bits+0x32>
 80098da:	3008      	adds	r0, #8
 80098dc:	0a1b      	lsrs	r3, r3, #8
 80098de:	071a      	lsls	r2, r3, #28
 80098e0:	bf04      	itt	eq
 80098e2:	091b      	lsreq	r3, r3, #4
 80098e4:	3004      	addeq	r0, #4
 80098e6:	079a      	lsls	r2, r3, #30
 80098e8:	bf04      	itt	eq
 80098ea:	089b      	lsreq	r3, r3, #2
 80098ec:	3002      	addeq	r0, #2
 80098ee:	07da      	lsls	r2, r3, #31
 80098f0:	d403      	bmi.n	80098fa <__lo0bits+0x4e>
 80098f2:	085b      	lsrs	r3, r3, #1
 80098f4:	f100 0001 	add.w	r0, r0, #1
 80098f8:	d005      	beq.n	8009906 <__lo0bits+0x5a>
 80098fa:	600b      	str	r3, [r1, #0]
 80098fc:	4770      	bx	lr
 80098fe:	4610      	mov	r0, r2
 8009900:	e7e9      	b.n	80098d6 <__lo0bits+0x2a>
 8009902:	2000      	movs	r0, #0
 8009904:	4770      	bx	lr
 8009906:	2020      	movs	r0, #32
 8009908:	4770      	bx	lr
	...

0800990c <__i2b>:
 800990c:	b510      	push	{r4, lr}
 800990e:	460c      	mov	r4, r1
 8009910:	2101      	movs	r1, #1
 8009912:	f7ff feb9 	bl	8009688 <_Balloc>
 8009916:	4602      	mov	r2, r0
 8009918:	b928      	cbnz	r0, 8009926 <__i2b+0x1a>
 800991a:	4b05      	ldr	r3, [pc, #20]	; (8009930 <__i2b+0x24>)
 800991c:	4805      	ldr	r0, [pc, #20]	; (8009934 <__i2b+0x28>)
 800991e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009922:	f001 fa1d 	bl	800ad60 <__assert_func>
 8009926:	2301      	movs	r3, #1
 8009928:	6144      	str	r4, [r0, #20]
 800992a:	6103      	str	r3, [r0, #16]
 800992c:	bd10      	pop	{r4, pc}
 800992e:	bf00      	nop
 8009930:	0800ba48 	.word	0x0800ba48
 8009934:	0800bad4 	.word	0x0800bad4

08009938 <__multiply>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	4691      	mov	r9, r2
 800993e:	690a      	ldr	r2, [r1, #16]
 8009940:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009944:	429a      	cmp	r2, r3
 8009946:	bfb8      	it	lt
 8009948:	460b      	movlt	r3, r1
 800994a:	460c      	mov	r4, r1
 800994c:	bfbc      	itt	lt
 800994e:	464c      	movlt	r4, r9
 8009950:	4699      	movlt	r9, r3
 8009952:	6927      	ldr	r7, [r4, #16]
 8009954:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009958:	68a3      	ldr	r3, [r4, #8]
 800995a:	6861      	ldr	r1, [r4, #4]
 800995c:	eb07 060a 	add.w	r6, r7, sl
 8009960:	42b3      	cmp	r3, r6
 8009962:	b085      	sub	sp, #20
 8009964:	bfb8      	it	lt
 8009966:	3101      	addlt	r1, #1
 8009968:	f7ff fe8e 	bl	8009688 <_Balloc>
 800996c:	b930      	cbnz	r0, 800997c <__multiply+0x44>
 800996e:	4602      	mov	r2, r0
 8009970:	4b44      	ldr	r3, [pc, #272]	; (8009a84 <__multiply+0x14c>)
 8009972:	4845      	ldr	r0, [pc, #276]	; (8009a88 <__multiply+0x150>)
 8009974:	f240 115d 	movw	r1, #349	; 0x15d
 8009978:	f001 f9f2 	bl	800ad60 <__assert_func>
 800997c:	f100 0514 	add.w	r5, r0, #20
 8009980:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009984:	462b      	mov	r3, r5
 8009986:	2200      	movs	r2, #0
 8009988:	4543      	cmp	r3, r8
 800998a:	d321      	bcc.n	80099d0 <__multiply+0x98>
 800998c:	f104 0314 	add.w	r3, r4, #20
 8009990:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009994:	f109 0314 	add.w	r3, r9, #20
 8009998:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800999c:	9202      	str	r2, [sp, #8]
 800999e:	1b3a      	subs	r2, r7, r4
 80099a0:	3a15      	subs	r2, #21
 80099a2:	f022 0203 	bic.w	r2, r2, #3
 80099a6:	3204      	adds	r2, #4
 80099a8:	f104 0115 	add.w	r1, r4, #21
 80099ac:	428f      	cmp	r7, r1
 80099ae:	bf38      	it	cc
 80099b0:	2204      	movcc	r2, #4
 80099b2:	9201      	str	r2, [sp, #4]
 80099b4:	9a02      	ldr	r2, [sp, #8]
 80099b6:	9303      	str	r3, [sp, #12]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d80c      	bhi.n	80099d6 <__multiply+0x9e>
 80099bc:	2e00      	cmp	r6, #0
 80099be:	dd03      	ble.n	80099c8 <__multiply+0x90>
 80099c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d05a      	beq.n	8009a7e <__multiply+0x146>
 80099c8:	6106      	str	r6, [r0, #16]
 80099ca:	b005      	add	sp, #20
 80099cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d0:	f843 2b04 	str.w	r2, [r3], #4
 80099d4:	e7d8      	b.n	8009988 <__multiply+0x50>
 80099d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80099da:	f1ba 0f00 	cmp.w	sl, #0
 80099de:	d024      	beq.n	8009a2a <__multiply+0xf2>
 80099e0:	f104 0e14 	add.w	lr, r4, #20
 80099e4:	46a9      	mov	r9, r5
 80099e6:	f04f 0c00 	mov.w	ip, #0
 80099ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099ee:	f8d9 1000 	ldr.w	r1, [r9]
 80099f2:	fa1f fb82 	uxth.w	fp, r2
 80099f6:	b289      	uxth	r1, r1
 80099f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80099fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009a00:	f8d9 2000 	ldr.w	r2, [r9]
 8009a04:	4461      	add	r1, ip
 8009a06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009a0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a12:	b289      	uxth	r1, r1
 8009a14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a18:	4577      	cmp	r7, lr
 8009a1a:	f849 1b04 	str.w	r1, [r9], #4
 8009a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a22:	d8e2      	bhi.n	80099ea <__multiply+0xb2>
 8009a24:	9a01      	ldr	r2, [sp, #4]
 8009a26:	f845 c002 	str.w	ip, [r5, r2]
 8009a2a:	9a03      	ldr	r2, [sp, #12]
 8009a2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a30:	3304      	adds	r3, #4
 8009a32:	f1b9 0f00 	cmp.w	r9, #0
 8009a36:	d020      	beq.n	8009a7a <__multiply+0x142>
 8009a38:	6829      	ldr	r1, [r5, #0]
 8009a3a:	f104 0c14 	add.w	ip, r4, #20
 8009a3e:	46ae      	mov	lr, r5
 8009a40:	f04f 0a00 	mov.w	sl, #0
 8009a44:	f8bc b000 	ldrh.w	fp, [ip]
 8009a48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a4c:	fb09 220b 	mla	r2, r9, fp, r2
 8009a50:	4492      	add	sl, r2
 8009a52:	b289      	uxth	r1, r1
 8009a54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009a58:	f84e 1b04 	str.w	r1, [lr], #4
 8009a5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009a60:	f8be 1000 	ldrh.w	r1, [lr]
 8009a64:	0c12      	lsrs	r2, r2, #16
 8009a66:	fb09 1102 	mla	r1, r9, r2, r1
 8009a6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009a6e:	4567      	cmp	r7, ip
 8009a70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a74:	d8e6      	bhi.n	8009a44 <__multiply+0x10c>
 8009a76:	9a01      	ldr	r2, [sp, #4]
 8009a78:	50a9      	str	r1, [r5, r2]
 8009a7a:	3504      	adds	r5, #4
 8009a7c:	e79a      	b.n	80099b4 <__multiply+0x7c>
 8009a7e:	3e01      	subs	r6, #1
 8009a80:	e79c      	b.n	80099bc <__multiply+0x84>
 8009a82:	bf00      	nop
 8009a84:	0800ba48 	.word	0x0800ba48
 8009a88:	0800bad4 	.word	0x0800bad4

08009a8c <__pow5mult>:
 8009a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a90:	4615      	mov	r5, r2
 8009a92:	f012 0203 	ands.w	r2, r2, #3
 8009a96:	4606      	mov	r6, r0
 8009a98:	460f      	mov	r7, r1
 8009a9a:	d007      	beq.n	8009aac <__pow5mult+0x20>
 8009a9c:	4c25      	ldr	r4, [pc, #148]	; (8009b34 <__pow5mult+0xa8>)
 8009a9e:	3a01      	subs	r2, #1
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aa6:	f7ff fe51 	bl	800974c <__multadd>
 8009aaa:	4607      	mov	r7, r0
 8009aac:	10ad      	asrs	r5, r5, #2
 8009aae:	d03d      	beq.n	8009b2c <__pow5mult+0xa0>
 8009ab0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ab2:	b97c      	cbnz	r4, 8009ad4 <__pow5mult+0x48>
 8009ab4:	2010      	movs	r0, #16
 8009ab6:	f7ff fdbf 	bl	8009638 <malloc>
 8009aba:	4602      	mov	r2, r0
 8009abc:	6270      	str	r0, [r6, #36]	; 0x24
 8009abe:	b928      	cbnz	r0, 8009acc <__pow5mult+0x40>
 8009ac0:	4b1d      	ldr	r3, [pc, #116]	; (8009b38 <__pow5mult+0xac>)
 8009ac2:	481e      	ldr	r0, [pc, #120]	; (8009b3c <__pow5mult+0xb0>)
 8009ac4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ac8:	f001 f94a 	bl	800ad60 <__assert_func>
 8009acc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ad0:	6004      	str	r4, [r0, #0]
 8009ad2:	60c4      	str	r4, [r0, #12]
 8009ad4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009adc:	b94c      	cbnz	r4, 8009af2 <__pow5mult+0x66>
 8009ade:	f240 2171 	movw	r1, #625	; 0x271
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7ff ff12 	bl	800990c <__i2b>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aee:	4604      	mov	r4, r0
 8009af0:	6003      	str	r3, [r0, #0]
 8009af2:	f04f 0900 	mov.w	r9, #0
 8009af6:	07eb      	lsls	r3, r5, #31
 8009af8:	d50a      	bpl.n	8009b10 <__pow5mult+0x84>
 8009afa:	4639      	mov	r1, r7
 8009afc:	4622      	mov	r2, r4
 8009afe:	4630      	mov	r0, r6
 8009b00:	f7ff ff1a 	bl	8009938 <__multiply>
 8009b04:	4639      	mov	r1, r7
 8009b06:	4680      	mov	r8, r0
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7ff fdfd 	bl	8009708 <_Bfree>
 8009b0e:	4647      	mov	r7, r8
 8009b10:	106d      	asrs	r5, r5, #1
 8009b12:	d00b      	beq.n	8009b2c <__pow5mult+0xa0>
 8009b14:	6820      	ldr	r0, [r4, #0]
 8009b16:	b938      	cbnz	r0, 8009b28 <__pow5mult+0x9c>
 8009b18:	4622      	mov	r2, r4
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7ff ff0b 	bl	8009938 <__multiply>
 8009b22:	6020      	str	r0, [r4, #0]
 8009b24:	f8c0 9000 	str.w	r9, [r0]
 8009b28:	4604      	mov	r4, r0
 8009b2a:	e7e4      	b.n	8009af6 <__pow5mult+0x6a>
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b32:	bf00      	nop
 8009b34:	0800bc20 	.word	0x0800bc20
 8009b38:	0800b9d6 	.word	0x0800b9d6
 8009b3c:	0800bad4 	.word	0x0800bad4

08009b40 <__lshift>:
 8009b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b44:	460c      	mov	r4, r1
 8009b46:	6849      	ldr	r1, [r1, #4]
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	4607      	mov	r7, r0
 8009b52:	4691      	mov	r9, r2
 8009b54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b58:	f108 0601 	add.w	r6, r8, #1
 8009b5c:	42b3      	cmp	r3, r6
 8009b5e:	db0b      	blt.n	8009b78 <__lshift+0x38>
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7ff fd91 	bl	8009688 <_Balloc>
 8009b66:	4605      	mov	r5, r0
 8009b68:	b948      	cbnz	r0, 8009b7e <__lshift+0x3e>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	4b2a      	ldr	r3, [pc, #168]	; (8009c18 <__lshift+0xd8>)
 8009b6e:	482b      	ldr	r0, [pc, #172]	; (8009c1c <__lshift+0xdc>)
 8009b70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b74:	f001 f8f4 	bl	800ad60 <__assert_func>
 8009b78:	3101      	adds	r1, #1
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	e7ee      	b.n	8009b5c <__lshift+0x1c>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f100 0114 	add.w	r1, r0, #20
 8009b84:	f100 0210 	add.w	r2, r0, #16
 8009b88:	4618      	mov	r0, r3
 8009b8a:	4553      	cmp	r3, sl
 8009b8c:	db37      	blt.n	8009bfe <__lshift+0xbe>
 8009b8e:	6920      	ldr	r0, [r4, #16]
 8009b90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b94:	f104 0314 	add.w	r3, r4, #20
 8009b98:	f019 091f 	ands.w	r9, r9, #31
 8009b9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ba4:	d02f      	beq.n	8009c06 <__lshift+0xc6>
 8009ba6:	f1c9 0e20 	rsb	lr, r9, #32
 8009baa:	468a      	mov	sl, r1
 8009bac:	f04f 0c00 	mov.w	ip, #0
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	fa02 f209 	lsl.w	r2, r2, r9
 8009bb6:	ea42 020c 	orr.w	r2, r2, ip
 8009bba:	f84a 2b04 	str.w	r2, [sl], #4
 8009bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc2:	4298      	cmp	r0, r3
 8009bc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009bc8:	d8f2      	bhi.n	8009bb0 <__lshift+0x70>
 8009bca:	1b03      	subs	r3, r0, r4
 8009bcc:	3b15      	subs	r3, #21
 8009bce:	f023 0303 	bic.w	r3, r3, #3
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	f104 0215 	add.w	r2, r4, #21
 8009bd8:	4290      	cmp	r0, r2
 8009bda:	bf38      	it	cc
 8009bdc:	2304      	movcc	r3, #4
 8009bde:	f841 c003 	str.w	ip, [r1, r3]
 8009be2:	f1bc 0f00 	cmp.w	ip, #0
 8009be6:	d001      	beq.n	8009bec <__lshift+0xac>
 8009be8:	f108 0602 	add.w	r6, r8, #2
 8009bec:	3e01      	subs	r6, #1
 8009bee:	4638      	mov	r0, r7
 8009bf0:	612e      	str	r6, [r5, #16]
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	f7ff fd88 	bl	8009708 <_Bfree>
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c02:	3301      	adds	r3, #1
 8009c04:	e7c1      	b.n	8009b8a <__lshift+0x4a>
 8009c06:	3904      	subs	r1, #4
 8009c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c10:	4298      	cmp	r0, r3
 8009c12:	d8f9      	bhi.n	8009c08 <__lshift+0xc8>
 8009c14:	e7ea      	b.n	8009bec <__lshift+0xac>
 8009c16:	bf00      	nop
 8009c18:	0800ba48 	.word	0x0800ba48
 8009c1c:	0800bad4 	.word	0x0800bad4

08009c20 <__mcmp>:
 8009c20:	b530      	push	{r4, r5, lr}
 8009c22:	6902      	ldr	r2, [r0, #16]
 8009c24:	690c      	ldr	r4, [r1, #16]
 8009c26:	1b12      	subs	r2, r2, r4
 8009c28:	d10e      	bne.n	8009c48 <__mcmp+0x28>
 8009c2a:	f100 0314 	add.w	r3, r0, #20
 8009c2e:	3114      	adds	r1, #20
 8009c30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c40:	42a5      	cmp	r5, r4
 8009c42:	d003      	beq.n	8009c4c <__mcmp+0x2c>
 8009c44:	d305      	bcc.n	8009c52 <__mcmp+0x32>
 8009c46:	2201      	movs	r2, #1
 8009c48:	4610      	mov	r0, r2
 8009c4a:	bd30      	pop	{r4, r5, pc}
 8009c4c:	4283      	cmp	r3, r0
 8009c4e:	d3f3      	bcc.n	8009c38 <__mcmp+0x18>
 8009c50:	e7fa      	b.n	8009c48 <__mcmp+0x28>
 8009c52:	f04f 32ff 	mov.w	r2, #4294967295
 8009c56:	e7f7      	b.n	8009c48 <__mcmp+0x28>

08009c58 <__mdiff>:
 8009c58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	4606      	mov	r6, r0
 8009c60:	4611      	mov	r1, r2
 8009c62:	4620      	mov	r0, r4
 8009c64:	4690      	mov	r8, r2
 8009c66:	f7ff ffdb 	bl	8009c20 <__mcmp>
 8009c6a:	1e05      	subs	r5, r0, #0
 8009c6c:	d110      	bne.n	8009c90 <__mdiff+0x38>
 8009c6e:	4629      	mov	r1, r5
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7ff fd09 	bl	8009688 <_Balloc>
 8009c76:	b930      	cbnz	r0, 8009c86 <__mdiff+0x2e>
 8009c78:	4b3a      	ldr	r3, [pc, #232]	; (8009d64 <__mdiff+0x10c>)
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	f240 2132 	movw	r1, #562	; 0x232
 8009c80:	4839      	ldr	r0, [pc, #228]	; (8009d68 <__mdiff+0x110>)
 8009c82:	f001 f86d 	bl	800ad60 <__assert_func>
 8009c86:	2301      	movs	r3, #1
 8009c88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c90:	bfa4      	itt	ge
 8009c92:	4643      	movge	r3, r8
 8009c94:	46a0      	movge	r8, r4
 8009c96:	4630      	mov	r0, r6
 8009c98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c9c:	bfa6      	itte	ge
 8009c9e:	461c      	movge	r4, r3
 8009ca0:	2500      	movge	r5, #0
 8009ca2:	2501      	movlt	r5, #1
 8009ca4:	f7ff fcf0 	bl	8009688 <_Balloc>
 8009ca8:	b920      	cbnz	r0, 8009cb4 <__mdiff+0x5c>
 8009caa:	4b2e      	ldr	r3, [pc, #184]	; (8009d64 <__mdiff+0x10c>)
 8009cac:	4602      	mov	r2, r0
 8009cae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009cb2:	e7e5      	b.n	8009c80 <__mdiff+0x28>
 8009cb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009cb8:	6926      	ldr	r6, [r4, #16]
 8009cba:	60c5      	str	r5, [r0, #12]
 8009cbc:	f104 0914 	add.w	r9, r4, #20
 8009cc0:	f108 0514 	add.w	r5, r8, #20
 8009cc4:	f100 0e14 	add.w	lr, r0, #20
 8009cc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ccc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009cd0:	f108 0210 	add.w	r2, r8, #16
 8009cd4:	46f2      	mov	sl, lr
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ce0:	fa1f f883 	uxth.w	r8, r3
 8009ce4:	fa11 f18b 	uxtah	r1, r1, fp
 8009ce8:	0c1b      	lsrs	r3, r3, #16
 8009cea:	eba1 0808 	sub.w	r8, r1, r8
 8009cee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cf6:	fa1f f888 	uxth.w	r8, r8
 8009cfa:	1419      	asrs	r1, r3, #16
 8009cfc:	454e      	cmp	r6, r9
 8009cfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d02:	f84a 3b04 	str.w	r3, [sl], #4
 8009d06:	d8e7      	bhi.n	8009cd8 <__mdiff+0x80>
 8009d08:	1b33      	subs	r3, r6, r4
 8009d0a:	3b15      	subs	r3, #21
 8009d0c:	f023 0303 	bic.w	r3, r3, #3
 8009d10:	3304      	adds	r3, #4
 8009d12:	3415      	adds	r4, #21
 8009d14:	42a6      	cmp	r6, r4
 8009d16:	bf38      	it	cc
 8009d18:	2304      	movcc	r3, #4
 8009d1a:	441d      	add	r5, r3
 8009d1c:	4473      	add	r3, lr
 8009d1e:	469e      	mov	lr, r3
 8009d20:	462e      	mov	r6, r5
 8009d22:	4566      	cmp	r6, ip
 8009d24:	d30e      	bcc.n	8009d44 <__mdiff+0xec>
 8009d26:	f10c 0203 	add.w	r2, ip, #3
 8009d2a:	1b52      	subs	r2, r2, r5
 8009d2c:	f022 0203 	bic.w	r2, r2, #3
 8009d30:	3d03      	subs	r5, #3
 8009d32:	45ac      	cmp	ip, r5
 8009d34:	bf38      	it	cc
 8009d36:	2200      	movcc	r2, #0
 8009d38:	441a      	add	r2, r3
 8009d3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d3e:	b17b      	cbz	r3, 8009d60 <__mdiff+0x108>
 8009d40:	6107      	str	r7, [r0, #16]
 8009d42:	e7a3      	b.n	8009c8c <__mdiff+0x34>
 8009d44:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d48:	fa11 f288 	uxtah	r2, r1, r8
 8009d4c:	1414      	asrs	r4, r2, #16
 8009d4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d52:	b292      	uxth	r2, r2
 8009d54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d58:	f84e 2b04 	str.w	r2, [lr], #4
 8009d5c:	1421      	asrs	r1, r4, #16
 8009d5e:	e7e0      	b.n	8009d22 <__mdiff+0xca>
 8009d60:	3f01      	subs	r7, #1
 8009d62:	e7ea      	b.n	8009d3a <__mdiff+0xe2>
 8009d64:	0800ba48 	.word	0x0800ba48
 8009d68:	0800bad4 	.word	0x0800bad4

08009d6c <__ulp>:
 8009d6c:	b082      	sub	sp, #8
 8009d6e:	ed8d 0b00 	vstr	d0, [sp]
 8009d72:	9b01      	ldr	r3, [sp, #4]
 8009d74:	4912      	ldr	r1, [pc, #72]	; (8009dc0 <__ulp+0x54>)
 8009d76:	4019      	ands	r1, r3
 8009d78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009d7c:	2900      	cmp	r1, #0
 8009d7e:	dd05      	ble.n	8009d8c <__ulp+0x20>
 8009d80:	2200      	movs	r2, #0
 8009d82:	460b      	mov	r3, r1
 8009d84:	ec43 2b10 	vmov	d0, r2, r3
 8009d88:	b002      	add	sp, #8
 8009d8a:	4770      	bx	lr
 8009d8c:	4249      	negs	r1, r1
 8009d8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009d92:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009d96:	f04f 0200 	mov.w	r2, #0
 8009d9a:	f04f 0300 	mov.w	r3, #0
 8009d9e:	da04      	bge.n	8009daa <__ulp+0x3e>
 8009da0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009da4:	fa41 f300 	asr.w	r3, r1, r0
 8009da8:	e7ec      	b.n	8009d84 <__ulp+0x18>
 8009daa:	f1a0 0114 	sub.w	r1, r0, #20
 8009dae:	291e      	cmp	r1, #30
 8009db0:	bfda      	itte	le
 8009db2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009db6:	fa20 f101 	lsrle.w	r1, r0, r1
 8009dba:	2101      	movgt	r1, #1
 8009dbc:	460a      	mov	r2, r1
 8009dbe:	e7e1      	b.n	8009d84 <__ulp+0x18>
 8009dc0:	7ff00000 	.word	0x7ff00000

08009dc4 <__b2d>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	6905      	ldr	r5, [r0, #16]
 8009dc8:	f100 0714 	add.w	r7, r0, #20
 8009dcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009dd0:	1f2e      	subs	r6, r5, #4
 8009dd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f7ff fd48 	bl	800986c <__hi0bits>
 8009ddc:	f1c0 0320 	rsb	r3, r0, #32
 8009de0:	280a      	cmp	r0, #10
 8009de2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009e60 <__b2d+0x9c>
 8009de6:	600b      	str	r3, [r1, #0]
 8009de8:	dc14      	bgt.n	8009e14 <__b2d+0x50>
 8009dea:	f1c0 0e0b 	rsb	lr, r0, #11
 8009dee:	fa24 f10e 	lsr.w	r1, r4, lr
 8009df2:	42b7      	cmp	r7, r6
 8009df4:	ea41 030c 	orr.w	r3, r1, ip
 8009df8:	bf34      	ite	cc
 8009dfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009dfe:	2100      	movcs	r1, #0
 8009e00:	3015      	adds	r0, #21
 8009e02:	fa04 f000 	lsl.w	r0, r4, r0
 8009e06:	fa21 f10e 	lsr.w	r1, r1, lr
 8009e0a:	ea40 0201 	orr.w	r2, r0, r1
 8009e0e:	ec43 2b10 	vmov	d0, r2, r3
 8009e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e14:	42b7      	cmp	r7, r6
 8009e16:	bf3a      	itte	cc
 8009e18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009e20:	2100      	movcs	r1, #0
 8009e22:	380b      	subs	r0, #11
 8009e24:	d017      	beq.n	8009e56 <__b2d+0x92>
 8009e26:	f1c0 0c20 	rsb	ip, r0, #32
 8009e2a:	fa04 f500 	lsl.w	r5, r4, r0
 8009e2e:	42be      	cmp	r6, r7
 8009e30:	fa21 f40c 	lsr.w	r4, r1, ip
 8009e34:	ea45 0504 	orr.w	r5, r5, r4
 8009e38:	bf8c      	ite	hi
 8009e3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009e3e:	2400      	movls	r4, #0
 8009e40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009e44:	fa01 f000 	lsl.w	r0, r1, r0
 8009e48:	fa24 f40c 	lsr.w	r4, r4, ip
 8009e4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e50:	ea40 0204 	orr.w	r2, r0, r4
 8009e54:	e7db      	b.n	8009e0e <__b2d+0x4a>
 8009e56:	ea44 030c 	orr.w	r3, r4, ip
 8009e5a:	460a      	mov	r2, r1
 8009e5c:	e7d7      	b.n	8009e0e <__b2d+0x4a>
 8009e5e:	bf00      	nop
 8009e60:	3ff00000 	.word	0x3ff00000

08009e64 <__d2b>:
 8009e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e68:	4689      	mov	r9, r1
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	ec57 6b10 	vmov	r6, r7, d0
 8009e70:	4690      	mov	r8, r2
 8009e72:	f7ff fc09 	bl	8009688 <_Balloc>
 8009e76:	4604      	mov	r4, r0
 8009e78:	b930      	cbnz	r0, 8009e88 <__d2b+0x24>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	4b25      	ldr	r3, [pc, #148]	; (8009f14 <__d2b+0xb0>)
 8009e7e:	4826      	ldr	r0, [pc, #152]	; (8009f18 <__d2b+0xb4>)
 8009e80:	f240 310a 	movw	r1, #778	; 0x30a
 8009e84:	f000 ff6c 	bl	800ad60 <__assert_func>
 8009e88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e90:	bb35      	cbnz	r5, 8009ee0 <__d2b+0x7c>
 8009e92:	2e00      	cmp	r6, #0
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	d028      	beq.n	8009eea <__d2b+0x86>
 8009e98:	4668      	mov	r0, sp
 8009e9a:	9600      	str	r6, [sp, #0]
 8009e9c:	f7ff fd06 	bl	80098ac <__lo0bits>
 8009ea0:	9900      	ldr	r1, [sp, #0]
 8009ea2:	b300      	cbz	r0, 8009ee6 <__d2b+0x82>
 8009ea4:	9a01      	ldr	r2, [sp, #4]
 8009ea6:	f1c0 0320 	rsb	r3, r0, #32
 8009eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8009eae:	430b      	orrs	r3, r1
 8009eb0:	40c2      	lsrs	r2, r0
 8009eb2:	6163      	str	r3, [r4, #20]
 8009eb4:	9201      	str	r2, [sp, #4]
 8009eb6:	9b01      	ldr	r3, [sp, #4]
 8009eb8:	61a3      	str	r3, [r4, #24]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	bf14      	ite	ne
 8009ebe:	2202      	movne	r2, #2
 8009ec0:	2201      	moveq	r2, #1
 8009ec2:	6122      	str	r2, [r4, #16]
 8009ec4:	b1d5      	cbz	r5, 8009efc <__d2b+0x98>
 8009ec6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009eca:	4405      	add	r5, r0
 8009ecc:	f8c9 5000 	str.w	r5, [r9]
 8009ed0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ed4:	f8c8 0000 	str.w	r0, [r8]
 8009ed8:	4620      	mov	r0, r4
 8009eda:	b003      	add	sp, #12
 8009edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ee4:	e7d5      	b.n	8009e92 <__d2b+0x2e>
 8009ee6:	6161      	str	r1, [r4, #20]
 8009ee8:	e7e5      	b.n	8009eb6 <__d2b+0x52>
 8009eea:	a801      	add	r0, sp, #4
 8009eec:	f7ff fcde 	bl	80098ac <__lo0bits>
 8009ef0:	9b01      	ldr	r3, [sp, #4]
 8009ef2:	6163      	str	r3, [r4, #20]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	6122      	str	r2, [r4, #16]
 8009ef8:	3020      	adds	r0, #32
 8009efa:	e7e3      	b.n	8009ec4 <__d2b+0x60>
 8009efc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f04:	f8c9 0000 	str.w	r0, [r9]
 8009f08:	6918      	ldr	r0, [r3, #16]
 8009f0a:	f7ff fcaf 	bl	800986c <__hi0bits>
 8009f0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f12:	e7df      	b.n	8009ed4 <__d2b+0x70>
 8009f14:	0800ba48 	.word	0x0800ba48
 8009f18:	0800bad4 	.word	0x0800bad4

08009f1c <__ratio>:
 8009f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	4688      	mov	r8, r1
 8009f22:	4669      	mov	r1, sp
 8009f24:	4681      	mov	r9, r0
 8009f26:	f7ff ff4d 	bl	8009dc4 <__b2d>
 8009f2a:	a901      	add	r1, sp, #4
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	ec55 4b10 	vmov	r4, r5, d0
 8009f32:	f7ff ff47 	bl	8009dc4 <__b2d>
 8009f36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009f3e:	eba3 0c02 	sub.w	ip, r3, r2
 8009f42:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f46:	1a9b      	subs	r3, r3, r2
 8009f48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009f4c:	ec51 0b10 	vmov	r0, r1, d0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	bfd6      	itet	le
 8009f54:	460a      	movle	r2, r1
 8009f56:	462a      	movgt	r2, r5
 8009f58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f5c:	468b      	mov	fp, r1
 8009f5e:	462f      	mov	r7, r5
 8009f60:	bfd4      	ite	le
 8009f62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009f66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	ee10 2a10 	vmov	r2, s0
 8009f70:	465b      	mov	r3, fp
 8009f72:	4639      	mov	r1, r7
 8009f74:	f7f6 fc8a 	bl	800088c <__aeabi_ddiv>
 8009f78:	ec41 0b10 	vmov	d0, r0, r1
 8009f7c:	b003      	add	sp, #12
 8009f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f82 <__copybits>:
 8009f82:	3901      	subs	r1, #1
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	1149      	asrs	r1, r1, #5
 8009f88:	6914      	ldr	r4, [r2, #16]
 8009f8a:	3101      	adds	r1, #1
 8009f8c:	f102 0314 	add.w	r3, r2, #20
 8009f90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f98:	1f05      	subs	r5, r0, #4
 8009f9a:	42a3      	cmp	r3, r4
 8009f9c:	d30c      	bcc.n	8009fb8 <__copybits+0x36>
 8009f9e:	1aa3      	subs	r3, r4, r2
 8009fa0:	3b11      	subs	r3, #17
 8009fa2:	f023 0303 	bic.w	r3, r3, #3
 8009fa6:	3211      	adds	r2, #17
 8009fa8:	42a2      	cmp	r2, r4
 8009faa:	bf88      	it	hi
 8009fac:	2300      	movhi	r3, #0
 8009fae:	4418      	add	r0, r3
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	4288      	cmp	r0, r1
 8009fb4:	d305      	bcc.n	8009fc2 <__copybits+0x40>
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
 8009fb8:	f853 6b04 	ldr.w	r6, [r3], #4
 8009fbc:	f845 6f04 	str.w	r6, [r5, #4]!
 8009fc0:	e7eb      	b.n	8009f9a <__copybits+0x18>
 8009fc2:	f840 3b04 	str.w	r3, [r0], #4
 8009fc6:	e7f4      	b.n	8009fb2 <__copybits+0x30>

08009fc8 <__any_on>:
 8009fc8:	f100 0214 	add.w	r2, r0, #20
 8009fcc:	6900      	ldr	r0, [r0, #16]
 8009fce:	114b      	asrs	r3, r1, #5
 8009fd0:	4298      	cmp	r0, r3
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	db11      	blt.n	8009ffa <__any_on+0x32>
 8009fd6:	dd0a      	ble.n	8009fee <__any_on+0x26>
 8009fd8:	f011 011f 	ands.w	r1, r1, #31
 8009fdc:	d007      	beq.n	8009fee <__any_on+0x26>
 8009fde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009fe2:	fa24 f001 	lsr.w	r0, r4, r1
 8009fe6:	fa00 f101 	lsl.w	r1, r0, r1
 8009fea:	428c      	cmp	r4, r1
 8009fec:	d10b      	bne.n	800a006 <__any_on+0x3e>
 8009fee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d803      	bhi.n	8009ffe <__any_on+0x36>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	bd10      	pop	{r4, pc}
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	e7f7      	b.n	8009fee <__any_on+0x26>
 8009ffe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a002:	2900      	cmp	r1, #0
 800a004:	d0f5      	beq.n	8009ff2 <__any_on+0x2a>
 800a006:	2001      	movs	r0, #1
 800a008:	e7f6      	b.n	8009ff8 <__any_on+0x30>

0800a00a <_calloc_r>:
 800a00a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a00c:	fba1 2402 	umull	r2, r4, r1, r2
 800a010:	b94c      	cbnz	r4, 800a026 <_calloc_r+0x1c>
 800a012:	4611      	mov	r1, r2
 800a014:	9201      	str	r2, [sp, #4]
 800a016:	f000 f87b 	bl	800a110 <_malloc_r>
 800a01a:	9a01      	ldr	r2, [sp, #4]
 800a01c:	4605      	mov	r5, r0
 800a01e:	b930      	cbnz	r0, 800a02e <_calloc_r+0x24>
 800a020:	4628      	mov	r0, r5
 800a022:	b003      	add	sp, #12
 800a024:	bd30      	pop	{r4, r5, pc}
 800a026:	220c      	movs	r2, #12
 800a028:	6002      	str	r2, [r0, #0]
 800a02a:	2500      	movs	r5, #0
 800a02c:	e7f8      	b.n	800a020 <_calloc_r+0x16>
 800a02e:	4621      	mov	r1, r4
 800a030:	f7fc fb16 	bl	8006660 <memset>
 800a034:	e7f4      	b.n	800a020 <_calloc_r+0x16>
	...

0800a038 <_free_r>:
 800a038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a03a:	2900      	cmp	r1, #0
 800a03c:	d044      	beq.n	800a0c8 <_free_r+0x90>
 800a03e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a042:	9001      	str	r0, [sp, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	f1a1 0404 	sub.w	r4, r1, #4
 800a04a:	bfb8      	it	lt
 800a04c:	18e4      	addlt	r4, r4, r3
 800a04e:	f001 f88b 	bl	800b168 <__malloc_lock>
 800a052:	4a1e      	ldr	r2, [pc, #120]	; (800a0cc <_free_r+0x94>)
 800a054:	9801      	ldr	r0, [sp, #4]
 800a056:	6813      	ldr	r3, [r2, #0]
 800a058:	b933      	cbnz	r3, 800a068 <_free_r+0x30>
 800a05a:	6063      	str	r3, [r4, #4]
 800a05c:	6014      	str	r4, [r2, #0]
 800a05e:	b003      	add	sp, #12
 800a060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a064:	f001 b886 	b.w	800b174 <__malloc_unlock>
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d908      	bls.n	800a07e <_free_r+0x46>
 800a06c:	6825      	ldr	r5, [r4, #0]
 800a06e:	1961      	adds	r1, r4, r5
 800a070:	428b      	cmp	r3, r1
 800a072:	bf01      	itttt	eq
 800a074:	6819      	ldreq	r1, [r3, #0]
 800a076:	685b      	ldreq	r3, [r3, #4]
 800a078:	1949      	addeq	r1, r1, r5
 800a07a:	6021      	streq	r1, [r4, #0]
 800a07c:	e7ed      	b.n	800a05a <_free_r+0x22>
 800a07e:	461a      	mov	r2, r3
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	b10b      	cbz	r3, 800a088 <_free_r+0x50>
 800a084:	42a3      	cmp	r3, r4
 800a086:	d9fa      	bls.n	800a07e <_free_r+0x46>
 800a088:	6811      	ldr	r1, [r2, #0]
 800a08a:	1855      	adds	r5, r2, r1
 800a08c:	42a5      	cmp	r5, r4
 800a08e:	d10b      	bne.n	800a0a8 <_free_r+0x70>
 800a090:	6824      	ldr	r4, [r4, #0]
 800a092:	4421      	add	r1, r4
 800a094:	1854      	adds	r4, r2, r1
 800a096:	42a3      	cmp	r3, r4
 800a098:	6011      	str	r1, [r2, #0]
 800a09a:	d1e0      	bne.n	800a05e <_free_r+0x26>
 800a09c:	681c      	ldr	r4, [r3, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	6053      	str	r3, [r2, #4]
 800a0a2:	4421      	add	r1, r4
 800a0a4:	6011      	str	r1, [r2, #0]
 800a0a6:	e7da      	b.n	800a05e <_free_r+0x26>
 800a0a8:	d902      	bls.n	800a0b0 <_free_r+0x78>
 800a0aa:	230c      	movs	r3, #12
 800a0ac:	6003      	str	r3, [r0, #0]
 800a0ae:	e7d6      	b.n	800a05e <_free_r+0x26>
 800a0b0:	6825      	ldr	r5, [r4, #0]
 800a0b2:	1961      	adds	r1, r4, r5
 800a0b4:	428b      	cmp	r3, r1
 800a0b6:	bf04      	itt	eq
 800a0b8:	6819      	ldreq	r1, [r3, #0]
 800a0ba:	685b      	ldreq	r3, [r3, #4]
 800a0bc:	6063      	str	r3, [r4, #4]
 800a0be:	bf04      	itt	eq
 800a0c0:	1949      	addeq	r1, r1, r5
 800a0c2:	6021      	streq	r1, [r4, #0]
 800a0c4:	6054      	str	r4, [r2, #4]
 800a0c6:	e7ca      	b.n	800a05e <_free_r+0x26>
 800a0c8:	b003      	add	sp, #12
 800a0ca:	bd30      	pop	{r4, r5, pc}
 800a0cc:	200003dc 	.word	0x200003dc

0800a0d0 <sbrk_aligned>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	4e0e      	ldr	r6, [pc, #56]	; (800a10c <sbrk_aligned+0x3c>)
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	6831      	ldr	r1, [r6, #0]
 800a0d8:	4605      	mov	r5, r0
 800a0da:	b911      	cbnz	r1, 800a0e2 <sbrk_aligned+0x12>
 800a0dc:	f000 fd28 	bl	800ab30 <_sbrk_r>
 800a0e0:	6030      	str	r0, [r6, #0]
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	f000 fd23 	bl	800ab30 <_sbrk_r>
 800a0ea:	1c43      	adds	r3, r0, #1
 800a0ec:	d00a      	beq.n	800a104 <sbrk_aligned+0x34>
 800a0ee:	1cc4      	adds	r4, r0, #3
 800a0f0:	f024 0403 	bic.w	r4, r4, #3
 800a0f4:	42a0      	cmp	r0, r4
 800a0f6:	d007      	beq.n	800a108 <sbrk_aligned+0x38>
 800a0f8:	1a21      	subs	r1, r4, r0
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f000 fd18 	bl	800ab30 <_sbrk_r>
 800a100:	3001      	adds	r0, #1
 800a102:	d101      	bne.n	800a108 <sbrk_aligned+0x38>
 800a104:	f04f 34ff 	mov.w	r4, #4294967295
 800a108:	4620      	mov	r0, r4
 800a10a:	bd70      	pop	{r4, r5, r6, pc}
 800a10c:	200003e0 	.word	0x200003e0

0800a110 <_malloc_r>:
 800a110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a114:	1ccd      	adds	r5, r1, #3
 800a116:	f025 0503 	bic.w	r5, r5, #3
 800a11a:	3508      	adds	r5, #8
 800a11c:	2d0c      	cmp	r5, #12
 800a11e:	bf38      	it	cc
 800a120:	250c      	movcc	r5, #12
 800a122:	2d00      	cmp	r5, #0
 800a124:	4607      	mov	r7, r0
 800a126:	db01      	blt.n	800a12c <_malloc_r+0x1c>
 800a128:	42a9      	cmp	r1, r5
 800a12a:	d905      	bls.n	800a138 <_malloc_r+0x28>
 800a12c:	230c      	movs	r3, #12
 800a12e:	603b      	str	r3, [r7, #0]
 800a130:	2600      	movs	r6, #0
 800a132:	4630      	mov	r0, r6
 800a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a138:	4e2e      	ldr	r6, [pc, #184]	; (800a1f4 <_malloc_r+0xe4>)
 800a13a:	f001 f815 	bl	800b168 <__malloc_lock>
 800a13e:	6833      	ldr	r3, [r6, #0]
 800a140:	461c      	mov	r4, r3
 800a142:	bb34      	cbnz	r4, 800a192 <_malloc_r+0x82>
 800a144:	4629      	mov	r1, r5
 800a146:	4638      	mov	r0, r7
 800a148:	f7ff ffc2 	bl	800a0d0 <sbrk_aligned>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	4604      	mov	r4, r0
 800a150:	d14d      	bne.n	800a1ee <_malloc_r+0xde>
 800a152:	6834      	ldr	r4, [r6, #0]
 800a154:	4626      	mov	r6, r4
 800a156:	2e00      	cmp	r6, #0
 800a158:	d140      	bne.n	800a1dc <_malloc_r+0xcc>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	4631      	mov	r1, r6
 800a15e:	4638      	mov	r0, r7
 800a160:	eb04 0803 	add.w	r8, r4, r3
 800a164:	f000 fce4 	bl	800ab30 <_sbrk_r>
 800a168:	4580      	cmp	r8, r0
 800a16a:	d13a      	bne.n	800a1e2 <_malloc_r+0xd2>
 800a16c:	6821      	ldr	r1, [r4, #0]
 800a16e:	3503      	adds	r5, #3
 800a170:	1a6d      	subs	r5, r5, r1
 800a172:	f025 0503 	bic.w	r5, r5, #3
 800a176:	3508      	adds	r5, #8
 800a178:	2d0c      	cmp	r5, #12
 800a17a:	bf38      	it	cc
 800a17c:	250c      	movcc	r5, #12
 800a17e:	4629      	mov	r1, r5
 800a180:	4638      	mov	r0, r7
 800a182:	f7ff ffa5 	bl	800a0d0 <sbrk_aligned>
 800a186:	3001      	adds	r0, #1
 800a188:	d02b      	beq.n	800a1e2 <_malloc_r+0xd2>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	442b      	add	r3, r5
 800a18e:	6023      	str	r3, [r4, #0]
 800a190:	e00e      	b.n	800a1b0 <_malloc_r+0xa0>
 800a192:	6822      	ldr	r2, [r4, #0]
 800a194:	1b52      	subs	r2, r2, r5
 800a196:	d41e      	bmi.n	800a1d6 <_malloc_r+0xc6>
 800a198:	2a0b      	cmp	r2, #11
 800a19a:	d916      	bls.n	800a1ca <_malloc_r+0xba>
 800a19c:	1961      	adds	r1, r4, r5
 800a19e:	42a3      	cmp	r3, r4
 800a1a0:	6025      	str	r5, [r4, #0]
 800a1a2:	bf18      	it	ne
 800a1a4:	6059      	strne	r1, [r3, #4]
 800a1a6:	6863      	ldr	r3, [r4, #4]
 800a1a8:	bf08      	it	eq
 800a1aa:	6031      	streq	r1, [r6, #0]
 800a1ac:	5162      	str	r2, [r4, r5]
 800a1ae:	604b      	str	r3, [r1, #4]
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	f104 060b 	add.w	r6, r4, #11
 800a1b6:	f000 ffdd 	bl	800b174 <__malloc_unlock>
 800a1ba:	f026 0607 	bic.w	r6, r6, #7
 800a1be:	1d23      	adds	r3, r4, #4
 800a1c0:	1af2      	subs	r2, r6, r3
 800a1c2:	d0b6      	beq.n	800a132 <_malloc_r+0x22>
 800a1c4:	1b9b      	subs	r3, r3, r6
 800a1c6:	50a3      	str	r3, [r4, r2]
 800a1c8:	e7b3      	b.n	800a132 <_malloc_r+0x22>
 800a1ca:	6862      	ldr	r2, [r4, #4]
 800a1cc:	42a3      	cmp	r3, r4
 800a1ce:	bf0c      	ite	eq
 800a1d0:	6032      	streq	r2, [r6, #0]
 800a1d2:	605a      	strne	r2, [r3, #4]
 800a1d4:	e7ec      	b.n	800a1b0 <_malloc_r+0xa0>
 800a1d6:	4623      	mov	r3, r4
 800a1d8:	6864      	ldr	r4, [r4, #4]
 800a1da:	e7b2      	b.n	800a142 <_malloc_r+0x32>
 800a1dc:	4634      	mov	r4, r6
 800a1de:	6876      	ldr	r6, [r6, #4]
 800a1e0:	e7b9      	b.n	800a156 <_malloc_r+0x46>
 800a1e2:	230c      	movs	r3, #12
 800a1e4:	603b      	str	r3, [r7, #0]
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	f000 ffc4 	bl	800b174 <__malloc_unlock>
 800a1ec:	e7a1      	b.n	800a132 <_malloc_r+0x22>
 800a1ee:	6025      	str	r5, [r4, #0]
 800a1f0:	e7de      	b.n	800a1b0 <_malloc_r+0xa0>
 800a1f2:	bf00      	nop
 800a1f4:	200003dc 	.word	0x200003dc

0800a1f8 <__ssputs_r>:
 800a1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	688e      	ldr	r6, [r1, #8]
 800a1fe:	429e      	cmp	r6, r3
 800a200:	4682      	mov	sl, r0
 800a202:	460c      	mov	r4, r1
 800a204:	4690      	mov	r8, r2
 800a206:	461f      	mov	r7, r3
 800a208:	d838      	bhi.n	800a27c <__ssputs_r+0x84>
 800a20a:	898a      	ldrh	r2, [r1, #12]
 800a20c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a210:	d032      	beq.n	800a278 <__ssputs_r+0x80>
 800a212:	6825      	ldr	r5, [r4, #0]
 800a214:	6909      	ldr	r1, [r1, #16]
 800a216:	eba5 0901 	sub.w	r9, r5, r1
 800a21a:	6965      	ldr	r5, [r4, #20]
 800a21c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a220:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a224:	3301      	adds	r3, #1
 800a226:	444b      	add	r3, r9
 800a228:	106d      	asrs	r5, r5, #1
 800a22a:	429d      	cmp	r5, r3
 800a22c:	bf38      	it	cc
 800a22e:	461d      	movcc	r5, r3
 800a230:	0553      	lsls	r3, r2, #21
 800a232:	d531      	bpl.n	800a298 <__ssputs_r+0xa0>
 800a234:	4629      	mov	r1, r5
 800a236:	f7ff ff6b 	bl	800a110 <_malloc_r>
 800a23a:	4606      	mov	r6, r0
 800a23c:	b950      	cbnz	r0, 800a254 <__ssputs_r+0x5c>
 800a23e:	230c      	movs	r3, #12
 800a240:	f8ca 3000 	str.w	r3, [sl]
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295
 800a250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a254:	6921      	ldr	r1, [r4, #16]
 800a256:	464a      	mov	r2, r9
 800a258:	f7ff fa08 	bl	800966c <memcpy>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a266:	81a3      	strh	r3, [r4, #12]
 800a268:	6126      	str	r6, [r4, #16]
 800a26a:	6165      	str	r5, [r4, #20]
 800a26c:	444e      	add	r6, r9
 800a26e:	eba5 0509 	sub.w	r5, r5, r9
 800a272:	6026      	str	r6, [r4, #0]
 800a274:	60a5      	str	r5, [r4, #8]
 800a276:	463e      	mov	r6, r7
 800a278:	42be      	cmp	r6, r7
 800a27a:	d900      	bls.n	800a27e <__ssputs_r+0x86>
 800a27c:	463e      	mov	r6, r7
 800a27e:	6820      	ldr	r0, [r4, #0]
 800a280:	4632      	mov	r2, r6
 800a282:	4641      	mov	r1, r8
 800a284:	f000 ff56 	bl	800b134 <memmove>
 800a288:	68a3      	ldr	r3, [r4, #8]
 800a28a:	1b9b      	subs	r3, r3, r6
 800a28c:	60a3      	str	r3, [r4, #8]
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	4433      	add	r3, r6
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	2000      	movs	r0, #0
 800a296:	e7db      	b.n	800a250 <__ssputs_r+0x58>
 800a298:	462a      	mov	r2, r5
 800a29a:	f000 ff71 	bl	800b180 <_realloc_r>
 800a29e:	4606      	mov	r6, r0
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d1e1      	bne.n	800a268 <__ssputs_r+0x70>
 800a2a4:	6921      	ldr	r1, [r4, #16]
 800a2a6:	4650      	mov	r0, sl
 800a2a8:	f7ff fec6 	bl	800a038 <_free_r>
 800a2ac:	e7c7      	b.n	800a23e <__ssputs_r+0x46>
	...

0800a2b0 <_svfiprintf_r>:
 800a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	4698      	mov	r8, r3
 800a2b6:	898b      	ldrh	r3, [r1, #12]
 800a2b8:	061b      	lsls	r3, r3, #24
 800a2ba:	b09d      	sub	sp, #116	; 0x74
 800a2bc:	4607      	mov	r7, r0
 800a2be:	460d      	mov	r5, r1
 800a2c0:	4614      	mov	r4, r2
 800a2c2:	d50e      	bpl.n	800a2e2 <_svfiprintf_r+0x32>
 800a2c4:	690b      	ldr	r3, [r1, #16]
 800a2c6:	b963      	cbnz	r3, 800a2e2 <_svfiprintf_r+0x32>
 800a2c8:	2140      	movs	r1, #64	; 0x40
 800a2ca:	f7ff ff21 	bl	800a110 <_malloc_r>
 800a2ce:	6028      	str	r0, [r5, #0]
 800a2d0:	6128      	str	r0, [r5, #16]
 800a2d2:	b920      	cbnz	r0, 800a2de <_svfiprintf_r+0x2e>
 800a2d4:	230c      	movs	r3, #12
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2dc:	e0d1      	b.n	800a482 <_svfiprintf_r+0x1d2>
 800a2de:	2340      	movs	r3, #64	; 0x40
 800a2e0:	616b      	str	r3, [r5, #20]
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e6:	2320      	movs	r3, #32
 800a2e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2f0:	2330      	movs	r3, #48	; 0x30
 800a2f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a49c <_svfiprintf_r+0x1ec>
 800a2f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2fa:	f04f 0901 	mov.w	r9, #1
 800a2fe:	4623      	mov	r3, r4
 800a300:	469a      	mov	sl, r3
 800a302:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a306:	b10a      	cbz	r2, 800a30c <_svfiprintf_r+0x5c>
 800a308:	2a25      	cmp	r2, #37	; 0x25
 800a30a:	d1f9      	bne.n	800a300 <_svfiprintf_r+0x50>
 800a30c:	ebba 0b04 	subs.w	fp, sl, r4
 800a310:	d00b      	beq.n	800a32a <_svfiprintf_r+0x7a>
 800a312:	465b      	mov	r3, fp
 800a314:	4622      	mov	r2, r4
 800a316:	4629      	mov	r1, r5
 800a318:	4638      	mov	r0, r7
 800a31a:	f7ff ff6d 	bl	800a1f8 <__ssputs_r>
 800a31e:	3001      	adds	r0, #1
 800a320:	f000 80aa 	beq.w	800a478 <_svfiprintf_r+0x1c8>
 800a324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a326:	445a      	add	r2, fp
 800a328:	9209      	str	r2, [sp, #36]	; 0x24
 800a32a:	f89a 3000 	ldrb.w	r3, [sl]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 80a2 	beq.w	800a478 <_svfiprintf_r+0x1c8>
 800a334:	2300      	movs	r3, #0
 800a336:	f04f 32ff 	mov.w	r2, #4294967295
 800a33a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a33e:	f10a 0a01 	add.w	sl, sl, #1
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	9307      	str	r3, [sp, #28]
 800a346:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a34a:	931a      	str	r3, [sp, #104]	; 0x68
 800a34c:	4654      	mov	r4, sl
 800a34e:	2205      	movs	r2, #5
 800a350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a354:	4851      	ldr	r0, [pc, #324]	; (800a49c <_svfiprintf_r+0x1ec>)
 800a356:	f7f5 ff63 	bl	8000220 <memchr>
 800a35a:	9a04      	ldr	r2, [sp, #16]
 800a35c:	b9d8      	cbnz	r0, 800a396 <_svfiprintf_r+0xe6>
 800a35e:	06d0      	lsls	r0, r2, #27
 800a360:	bf44      	itt	mi
 800a362:	2320      	movmi	r3, #32
 800a364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a368:	0711      	lsls	r1, r2, #28
 800a36a:	bf44      	itt	mi
 800a36c:	232b      	movmi	r3, #43	; 0x2b
 800a36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a372:	f89a 3000 	ldrb.w	r3, [sl]
 800a376:	2b2a      	cmp	r3, #42	; 0x2a
 800a378:	d015      	beq.n	800a3a6 <_svfiprintf_r+0xf6>
 800a37a:	9a07      	ldr	r2, [sp, #28]
 800a37c:	4654      	mov	r4, sl
 800a37e:	2000      	movs	r0, #0
 800a380:	f04f 0c0a 	mov.w	ip, #10
 800a384:	4621      	mov	r1, r4
 800a386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a38a:	3b30      	subs	r3, #48	; 0x30
 800a38c:	2b09      	cmp	r3, #9
 800a38e:	d94e      	bls.n	800a42e <_svfiprintf_r+0x17e>
 800a390:	b1b0      	cbz	r0, 800a3c0 <_svfiprintf_r+0x110>
 800a392:	9207      	str	r2, [sp, #28]
 800a394:	e014      	b.n	800a3c0 <_svfiprintf_r+0x110>
 800a396:	eba0 0308 	sub.w	r3, r0, r8
 800a39a:	fa09 f303 	lsl.w	r3, r9, r3
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	9304      	str	r3, [sp, #16]
 800a3a2:	46a2      	mov	sl, r4
 800a3a4:	e7d2      	b.n	800a34c <_svfiprintf_r+0x9c>
 800a3a6:	9b03      	ldr	r3, [sp, #12]
 800a3a8:	1d19      	adds	r1, r3, #4
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	9103      	str	r1, [sp, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	bfbb      	ittet	lt
 800a3b2:	425b      	neglt	r3, r3
 800a3b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3b8:	9307      	strge	r3, [sp, #28]
 800a3ba:	9307      	strlt	r3, [sp, #28]
 800a3bc:	bfb8      	it	lt
 800a3be:	9204      	strlt	r2, [sp, #16]
 800a3c0:	7823      	ldrb	r3, [r4, #0]
 800a3c2:	2b2e      	cmp	r3, #46	; 0x2e
 800a3c4:	d10c      	bne.n	800a3e0 <_svfiprintf_r+0x130>
 800a3c6:	7863      	ldrb	r3, [r4, #1]
 800a3c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ca:	d135      	bne.n	800a438 <_svfiprintf_r+0x188>
 800a3cc:	9b03      	ldr	r3, [sp, #12]
 800a3ce:	1d1a      	adds	r2, r3, #4
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	9203      	str	r2, [sp, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfb8      	it	lt
 800a3d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3dc:	3402      	adds	r4, #2
 800a3de:	9305      	str	r3, [sp, #20]
 800a3e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4ac <_svfiprintf_r+0x1fc>
 800a3e4:	7821      	ldrb	r1, [r4, #0]
 800a3e6:	2203      	movs	r2, #3
 800a3e8:	4650      	mov	r0, sl
 800a3ea:	f7f5 ff19 	bl	8000220 <memchr>
 800a3ee:	b140      	cbz	r0, 800a402 <_svfiprintf_r+0x152>
 800a3f0:	2340      	movs	r3, #64	; 0x40
 800a3f2:	eba0 000a 	sub.w	r0, r0, sl
 800a3f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a3fa:	9b04      	ldr	r3, [sp, #16]
 800a3fc:	4303      	orrs	r3, r0
 800a3fe:	3401      	adds	r4, #1
 800a400:	9304      	str	r3, [sp, #16]
 800a402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a406:	4826      	ldr	r0, [pc, #152]	; (800a4a0 <_svfiprintf_r+0x1f0>)
 800a408:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a40c:	2206      	movs	r2, #6
 800a40e:	f7f5 ff07 	bl	8000220 <memchr>
 800a412:	2800      	cmp	r0, #0
 800a414:	d038      	beq.n	800a488 <_svfiprintf_r+0x1d8>
 800a416:	4b23      	ldr	r3, [pc, #140]	; (800a4a4 <_svfiprintf_r+0x1f4>)
 800a418:	bb1b      	cbnz	r3, 800a462 <_svfiprintf_r+0x1b2>
 800a41a:	9b03      	ldr	r3, [sp, #12]
 800a41c:	3307      	adds	r3, #7
 800a41e:	f023 0307 	bic.w	r3, r3, #7
 800a422:	3308      	adds	r3, #8
 800a424:	9303      	str	r3, [sp, #12]
 800a426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a428:	4433      	add	r3, r6
 800a42a:	9309      	str	r3, [sp, #36]	; 0x24
 800a42c:	e767      	b.n	800a2fe <_svfiprintf_r+0x4e>
 800a42e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a432:	460c      	mov	r4, r1
 800a434:	2001      	movs	r0, #1
 800a436:	e7a5      	b.n	800a384 <_svfiprintf_r+0xd4>
 800a438:	2300      	movs	r3, #0
 800a43a:	3401      	adds	r4, #1
 800a43c:	9305      	str	r3, [sp, #20]
 800a43e:	4619      	mov	r1, r3
 800a440:	f04f 0c0a 	mov.w	ip, #10
 800a444:	4620      	mov	r0, r4
 800a446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a44a:	3a30      	subs	r2, #48	; 0x30
 800a44c:	2a09      	cmp	r2, #9
 800a44e:	d903      	bls.n	800a458 <_svfiprintf_r+0x1a8>
 800a450:	2b00      	cmp	r3, #0
 800a452:	d0c5      	beq.n	800a3e0 <_svfiprintf_r+0x130>
 800a454:	9105      	str	r1, [sp, #20]
 800a456:	e7c3      	b.n	800a3e0 <_svfiprintf_r+0x130>
 800a458:	fb0c 2101 	mla	r1, ip, r1, r2
 800a45c:	4604      	mov	r4, r0
 800a45e:	2301      	movs	r3, #1
 800a460:	e7f0      	b.n	800a444 <_svfiprintf_r+0x194>
 800a462:	ab03      	add	r3, sp, #12
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	462a      	mov	r2, r5
 800a468:	4b0f      	ldr	r3, [pc, #60]	; (800a4a8 <_svfiprintf_r+0x1f8>)
 800a46a:	a904      	add	r1, sp, #16
 800a46c:	4638      	mov	r0, r7
 800a46e:	f7fc f99f 	bl	80067b0 <_printf_float>
 800a472:	1c42      	adds	r2, r0, #1
 800a474:	4606      	mov	r6, r0
 800a476:	d1d6      	bne.n	800a426 <_svfiprintf_r+0x176>
 800a478:	89ab      	ldrh	r3, [r5, #12]
 800a47a:	065b      	lsls	r3, r3, #25
 800a47c:	f53f af2c 	bmi.w	800a2d8 <_svfiprintf_r+0x28>
 800a480:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a482:	b01d      	add	sp, #116	; 0x74
 800a484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a488:	ab03      	add	r3, sp, #12
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	462a      	mov	r2, r5
 800a48e:	4b06      	ldr	r3, [pc, #24]	; (800a4a8 <_svfiprintf_r+0x1f8>)
 800a490:	a904      	add	r1, sp, #16
 800a492:	4638      	mov	r0, r7
 800a494:	f7fc fc30 	bl	8006cf8 <_printf_i>
 800a498:	e7eb      	b.n	800a472 <_svfiprintf_r+0x1c2>
 800a49a:	bf00      	nop
 800a49c:	0800bc2c 	.word	0x0800bc2c
 800a4a0:	0800bc36 	.word	0x0800bc36
 800a4a4:	080067b1 	.word	0x080067b1
 800a4a8:	0800a1f9 	.word	0x0800a1f9
 800a4ac:	0800bc32 	.word	0x0800bc32

0800a4b0 <_sungetc_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	1c4b      	adds	r3, r1, #1
 800a4b4:	4614      	mov	r4, r2
 800a4b6:	d103      	bne.n	800a4c0 <_sungetc_r+0x10>
 800a4b8:	f04f 35ff 	mov.w	r5, #4294967295
 800a4bc:	4628      	mov	r0, r5
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	8993      	ldrh	r3, [r2, #12]
 800a4c2:	f023 0320 	bic.w	r3, r3, #32
 800a4c6:	8193      	strh	r3, [r2, #12]
 800a4c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4ca:	6852      	ldr	r2, [r2, #4]
 800a4cc:	b2cd      	uxtb	r5, r1
 800a4ce:	b18b      	cbz	r3, 800a4f4 <_sungetc_r+0x44>
 800a4d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	dd08      	ble.n	800a4e8 <_sungetc_r+0x38>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	1e5a      	subs	r2, r3, #1
 800a4da:	6022      	str	r2, [r4, #0]
 800a4dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a4e0:	6863      	ldr	r3, [r4, #4]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	6063      	str	r3, [r4, #4]
 800a4e6:	e7e9      	b.n	800a4bc <_sungetc_r+0xc>
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	f000 fbf1 	bl	800acd0 <__submore>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d0f1      	beq.n	800a4d6 <_sungetc_r+0x26>
 800a4f2:	e7e1      	b.n	800a4b8 <_sungetc_r+0x8>
 800a4f4:	6921      	ldr	r1, [r4, #16]
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	b151      	cbz	r1, 800a510 <_sungetc_r+0x60>
 800a4fa:	4299      	cmp	r1, r3
 800a4fc:	d208      	bcs.n	800a510 <_sungetc_r+0x60>
 800a4fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a502:	42a9      	cmp	r1, r5
 800a504:	d104      	bne.n	800a510 <_sungetc_r+0x60>
 800a506:	3b01      	subs	r3, #1
 800a508:	3201      	adds	r2, #1
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	6062      	str	r2, [r4, #4]
 800a50e:	e7d5      	b.n	800a4bc <_sungetc_r+0xc>
 800a510:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a518:	6363      	str	r3, [r4, #52]	; 0x34
 800a51a:	2303      	movs	r3, #3
 800a51c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a51e:	4623      	mov	r3, r4
 800a520:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	2301      	movs	r3, #1
 800a528:	e7dc      	b.n	800a4e4 <_sungetc_r+0x34>

0800a52a <__ssrefill_r>:
 800a52a:	b510      	push	{r4, lr}
 800a52c:	460c      	mov	r4, r1
 800a52e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a530:	b169      	cbz	r1, 800a54e <__ssrefill_r+0x24>
 800a532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a536:	4299      	cmp	r1, r3
 800a538:	d001      	beq.n	800a53e <__ssrefill_r+0x14>
 800a53a:	f7ff fd7d 	bl	800a038 <_free_r>
 800a53e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a540:	6063      	str	r3, [r4, #4]
 800a542:	2000      	movs	r0, #0
 800a544:	6360      	str	r0, [r4, #52]	; 0x34
 800a546:	b113      	cbz	r3, 800a54e <__ssrefill_r+0x24>
 800a548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	bd10      	pop	{r4, pc}
 800a54e:	6923      	ldr	r3, [r4, #16]
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	2300      	movs	r3, #0
 800a554:	6063      	str	r3, [r4, #4]
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	f043 0320 	orr.w	r3, r3, #32
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	f04f 30ff 	mov.w	r0, #4294967295
 800a562:	e7f3      	b.n	800a54c <__ssrefill_r+0x22>

0800a564 <__ssvfiscanf_r>:
 800a564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a568:	460c      	mov	r4, r1
 800a56a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a56e:	2100      	movs	r1, #0
 800a570:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a574:	49a6      	ldr	r1, [pc, #664]	; (800a810 <__ssvfiscanf_r+0x2ac>)
 800a576:	91a0      	str	r1, [sp, #640]	; 0x280
 800a578:	f10d 0804 	add.w	r8, sp, #4
 800a57c:	49a5      	ldr	r1, [pc, #660]	; (800a814 <__ssvfiscanf_r+0x2b0>)
 800a57e:	4fa6      	ldr	r7, [pc, #664]	; (800a818 <__ssvfiscanf_r+0x2b4>)
 800a580:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a81c <__ssvfiscanf_r+0x2b8>
 800a584:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a588:	4606      	mov	r6, r0
 800a58a:	91a1      	str	r1, [sp, #644]	; 0x284
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	7813      	ldrb	r3, [r2, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 815a 	beq.w	800a84a <__ssvfiscanf_r+0x2e6>
 800a596:	5dd9      	ldrb	r1, [r3, r7]
 800a598:	f011 0108 	ands.w	r1, r1, #8
 800a59c:	f102 0501 	add.w	r5, r2, #1
 800a5a0:	d019      	beq.n	800a5d6 <__ssvfiscanf_r+0x72>
 800a5a2:	6863      	ldr	r3, [r4, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	dd0f      	ble.n	800a5c8 <__ssvfiscanf_r+0x64>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	5cba      	ldrb	r2, [r7, r2]
 800a5ae:	0712      	lsls	r2, r2, #28
 800a5b0:	d401      	bmi.n	800a5b6 <__ssvfiscanf_r+0x52>
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	e7eb      	b.n	800a58e <__ssvfiscanf_r+0x2a>
 800a5b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a5b8:	3201      	adds	r2, #1
 800a5ba:	9245      	str	r2, [sp, #276]	; 0x114
 800a5bc:	6862      	ldr	r2, [r4, #4]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	3a01      	subs	r2, #1
 800a5c2:	6062      	str	r2, [r4, #4]
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	e7ec      	b.n	800a5a2 <__ssvfiscanf_r+0x3e>
 800a5c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	4798      	blx	r3
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d0e9      	beq.n	800a5a8 <__ssvfiscanf_r+0x44>
 800a5d4:	e7ed      	b.n	800a5b2 <__ssvfiscanf_r+0x4e>
 800a5d6:	2b25      	cmp	r3, #37	; 0x25
 800a5d8:	d012      	beq.n	800a600 <__ssvfiscanf_r+0x9c>
 800a5da:	469a      	mov	sl, r3
 800a5dc:	6863      	ldr	r3, [r4, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f340 8091 	ble.w	800a706 <__ssvfiscanf_r+0x1a2>
 800a5e4:	6822      	ldr	r2, [r4, #0]
 800a5e6:	7813      	ldrb	r3, [r2, #0]
 800a5e8:	4553      	cmp	r3, sl
 800a5ea:	f040 812e 	bne.w	800a84a <__ssvfiscanf_r+0x2e6>
 800a5ee:	6863      	ldr	r3, [r4, #4]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	6063      	str	r3, [r4, #4]
 800a5f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a5f6:	3201      	adds	r2, #1
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	6022      	str	r2, [r4, #0]
 800a5fc:	9345      	str	r3, [sp, #276]	; 0x114
 800a5fe:	e7d8      	b.n	800a5b2 <__ssvfiscanf_r+0x4e>
 800a600:	9141      	str	r1, [sp, #260]	; 0x104
 800a602:	9143      	str	r1, [sp, #268]	; 0x10c
 800a604:	7853      	ldrb	r3, [r2, #1]
 800a606:	2b2a      	cmp	r3, #42	; 0x2a
 800a608:	bf02      	ittt	eq
 800a60a:	2310      	moveq	r3, #16
 800a60c:	1c95      	addeq	r5, r2, #2
 800a60e:	9341      	streq	r3, [sp, #260]	; 0x104
 800a610:	220a      	movs	r2, #10
 800a612:	46aa      	mov	sl, r5
 800a614:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a618:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a61c:	2b09      	cmp	r3, #9
 800a61e:	d91d      	bls.n	800a65c <__ssvfiscanf_r+0xf8>
 800a620:	487e      	ldr	r0, [pc, #504]	; (800a81c <__ssvfiscanf_r+0x2b8>)
 800a622:	2203      	movs	r2, #3
 800a624:	f7f5 fdfc 	bl	8000220 <memchr>
 800a628:	b140      	cbz	r0, 800a63c <__ssvfiscanf_r+0xd8>
 800a62a:	2301      	movs	r3, #1
 800a62c:	eba0 0009 	sub.w	r0, r0, r9
 800a630:	fa03 f000 	lsl.w	r0, r3, r0
 800a634:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a636:	4318      	orrs	r0, r3
 800a638:	9041      	str	r0, [sp, #260]	; 0x104
 800a63a:	4655      	mov	r5, sl
 800a63c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a640:	2b78      	cmp	r3, #120	; 0x78
 800a642:	d806      	bhi.n	800a652 <__ssvfiscanf_r+0xee>
 800a644:	2b57      	cmp	r3, #87	; 0x57
 800a646:	d810      	bhi.n	800a66a <__ssvfiscanf_r+0x106>
 800a648:	2b25      	cmp	r3, #37	; 0x25
 800a64a:	d0c6      	beq.n	800a5da <__ssvfiscanf_r+0x76>
 800a64c:	d856      	bhi.n	800a6fc <__ssvfiscanf_r+0x198>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d064      	beq.n	800a71c <__ssvfiscanf_r+0x1b8>
 800a652:	2303      	movs	r3, #3
 800a654:	9347      	str	r3, [sp, #284]	; 0x11c
 800a656:	230a      	movs	r3, #10
 800a658:	9342      	str	r3, [sp, #264]	; 0x108
 800a65a:	e071      	b.n	800a740 <__ssvfiscanf_r+0x1dc>
 800a65c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a65e:	fb02 1103 	mla	r1, r2, r3, r1
 800a662:	3930      	subs	r1, #48	; 0x30
 800a664:	9143      	str	r1, [sp, #268]	; 0x10c
 800a666:	4655      	mov	r5, sl
 800a668:	e7d3      	b.n	800a612 <__ssvfiscanf_r+0xae>
 800a66a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a66e:	2a20      	cmp	r2, #32
 800a670:	d8ef      	bhi.n	800a652 <__ssvfiscanf_r+0xee>
 800a672:	a101      	add	r1, pc, #4	; (adr r1, 800a678 <__ssvfiscanf_r+0x114>)
 800a674:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a678:	0800a72b 	.word	0x0800a72b
 800a67c:	0800a653 	.word	0x0800a653
 800a680:	0800a653 	.word	0x0800a653
 800a684:	0800a789 	.word	0x0800a789
 800a688:	0800a653 	.word	0x0800a653
 800a68c:	0800a653 	.word	0x0800a653
 800a690:	0800a653 	.word	0x0800a653
 800a694:	0800a653 	.word	0x0800a653
 800a698:	0800a653 	.word	0x0800a653
 800a69c:	0800a653 	.word	0x0800a653
 800a6a0:	0800a653 	.word	0x0800a653
 800a6a4:	0800a79f 	.word	0x0800a79f
 800a6a8:	0800a775 	.word	0x0800a775
 800a6ac:	0800a703 	.word	0x0800a703
 800a6b0:	0800a703 	.word	0x0800a703
 800a6b4:	0800a703 	.word	0x0800a703
 800a6b8:	0800a653 	.word	0x0800a653
 800a6bc:	0800a779 	.word	0x0800a779
 800a6c0:	0800a653 	.word	0x0800a653
 800a6c4:	0800a653 	.word	0x0800a653
 800a6c8:	0800a653 	.word	0x0800a653
 800a6cc:	0800a653 	.word	0x0800a653
 800a6d0:	0800a7af 	.word	0x0800a7af
 800a6d4:	0800a781 	.word	0x0800a781
 800a6d8:	0800a723 	.word	0x0800a723
 800a6dc:	0800a653 	.word	0x0800a653
 800a6e0:	0800a653 	.word	0x0800a653
 800a6e4:	0800a7ab 	.word	0x0800a7ab
 800a6e8:	0800a653 	.word	0x0800a653
 800a6ec:	0800a775 	.word	0x0800a775
 800a6f0:	0800a653 	.word	0x0800a653
 800a6f4:	0800a653 	.word	0x0800a653
 800a6f8:	0800a72b 	.word	0x0800a72b
 800a6fc:	3b45      	subs	r3, #69	; 0x45
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d8a7      	bhi.n	800a652 <__ssvfiscanf_r+0xee>
 800a702:	2305      	movs	r3, #5
 800a704:	e01b      	b.n	800a73e <__ssvfiscanf_r+0x1da>
 800a706:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a708:	4621      	mov	r1, r4
 800a70a:	4630      	mov	r0, r6
 800a70c:	4798      	blx	r3
 800a70e:	2800      	cmp	r0, #0
 800a710:	f43f af68 	beq.w	800a5e4 <__ssvfiscanf_r+0x80>
 800a714:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a716:	2800      	cmp	r0, #0
 800a718:	f040 808d 	bne.w	800a836 <__ssvfiscanf_r+0x2d2>
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295
 800a720:	e08f      	b.n	800a842 <__ssvfiscanf_r+0x2de>
 800a722:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a724:	f042 0220 	orr.w	r2, r2, #32
 800a728:	9241      	str	r2, [sp, #260]	; 0x104
 800a72a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a72c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a730:	9241      	str	r2, [sp, #260]	; 0x104
 800a732:	2210      	movs	r2, #16
 800a734:	2b6f      	cmp	r3, #111	; 0x6f
 800a736:	9242      	str	r2, [sp, #264]	; 0x108
 800a738:	bf34      	ite	cc
 800a73a:	2303      	movcc	r3, #3
 800a73c:	2304      	movcs	r3, #4
 800a73e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a740:	6863      	ldr	r3, [r4, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	dd42      	ble.n	800a7cc <__ssvfiscanf_r+0x268>
 800a746:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a748:	0659      	lsls	r1, r3, #25
 800a74a:	d404      	bmi.n	800a756 <__ssvfiscanf_r+0x1f2>
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	781a      	ldrb	r2, [r3, #0]
 800a750:	5cba      	ldrb	r2, [r7, r2]
 800a752:	0712      	lsls	r2, r2, #28
 800a754:	d441      	bmi.n	800a7da <__ssvfiscanf_r+0x276>
 800a756:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a758:	2b02      	cmp	r3, #2
 800a75a:	dc50      	bgt.n	800a7fe <__ssvfiscanf_r+0x29a>
 800a75c:	466b      	mov	r3, sp
 800a75e:	4622      	mov	r2, r4
 800a760:	a941      	add	r1, sp, #260	; 0x104
 800a762:	4630      	mov	r0, r6
 800a764:	f000 f876 	bl	800a854 <_scanf_chars>
 800a768:	2801      	cmp	r0, #1
 800a76a:	d06e      	beq.n	800a84a <__ssvfiscanf_r+0x2e6>
 800a76c:	2802      	cmp	r0, #2
 800a76e:	f47f af20 	bne.w	800a5b2 <__ssvfiscanf_r+0x4e>
 800a772:	e7cf      	b.n	800a714 <__ssvfiscanf_r+0x1b0>
 800a774:	220a      	movs	r2, #10
 800a776:	e7dd      	b.n	800a734 <__ssvfiscanf_r+0x1d0>
 800a778:	2300      	movs	r3, #0
 800a77a:	9342      	str	r3, [sp, #264]	; 0x108
 800a77c:	2303      	movs	r3, #3
 800a77e:	e7de      	b.n	800a73e <__ssvfiscanf_r+0x1da>
 800a780:	2308      	movs	r3, #8
 800a782:	9342      	str	r3, [sp, #264]	; 0x108
 800a784:	2304      	movs	r3, #4
 800a786:	e7da      	b.n	800a73e <__ssvfiscanf_r+0x1da>
 800a788:	4629      	mov	r1, r5
 800a78a:	4640      	mov	r0, r8
 800a78c:	f000 f9e0 	bl	800ab50 <__sccl>
 800a790:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a796:	9341      	str	r3, [sp, #260]	; 0x104
 800a798:	4605      	mov	r5, r0
 800a79a:	2301      	movs	r3, #1
 800a79c:	e7cf      	b.n	800a73e <__ssvfiscanf_r+0x1da>
 800a79e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a4:	9341      	str	r3, [sp, #260]	; 0x104
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e7c9      	b.n	800a73e <__ssvfiscanf_r+0x1da>
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	e7c7      	b.n	800a73e <__ssvfiscanf_r+0x1da>
 800a7ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a7b0:	06c3      	lsls	r3, r0, #27
 800a7b2:	f53f aefe 	bmi.w	800a5b2 <__ssvfiscanf_r+0x4e>
 800a7b6:	9b00      	ldr	r3, [sp, #0]
 800a7b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a7ba:	1d19      	adds	r1, r3, #4
 800a7bc:	9100      	str	r1, [sp, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f010 0f01 	tst.w	r0, #1
 800a7c4:	bf14      	ite	ne
 800a7c6:	801a      	strhne	r2, [r3, #0]
 800a7c8:	601a      	streq	r2, [r3, #0]
 800a7ca:	e6f2      	b.n	800a5b2 <__ssvfiscanf_r+0x4e>
 800a7cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4798      	blx	r3
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d0b6      	beq.n	800a746 <__ssvfiscanf_r+0x1e2>
 800a7d8:	e79c      	b.n	800a714 <__ssvfiscanf_r+0x1b0>
 800a7da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a7dc:	3201      	adds	r2, #1
 800a7de:	9245      	str	r2, [sp, #276]	; 0x114
 800a7e0:	6862      	ldr	r2, [r4, #4]
 800a7e2:	3a01      	subs	r2, #1
 800a7e4:	2a00      	cmp	r2, #0
 800a7e6:	6062      	str	r2, [r4, #4]
 800a7e8:	dd02      	ble.n	800a7f0 <__ssvfiscanf_r+0x28c>
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	6023      	str	r3, [r4, #0]
 800a7ee:	e7ad      	b.n	800a74c <__ssvfiscanf_r+0x1e8>
 800a7f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a7f2:	4621      	mov	r1, r4
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	4798      	blx	r3
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d0a7      	beq.n	800a74c <__ssvfiscanf_r+0x1e8>
 800a7fc:	e78a      	b.n	800a714 <__ssvfiscanf_r+0x1b0>
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	dc0e      	bgt.n	800a820 <__ssvfiscanf_r+0x2bc>
 800a802:	466b      	mov	r3, sp
 800a804:	4622      	mov	r2, r4
 800a806:	a941      	add	r1, sp, #260	; 0x104
 800a808:	4630      	mov	r0, r6
 800a80a:	f000 f87d 	bl	800a908 <_scanf_i>
 800a80e:	e7ab      	b.n	800a768 <__ssvfiscanf_r+0x204>
 800a810:	0800a4b1 	.word	0x0800a4b1
 800a814:	0800a52b 	.word	0x0800a52b
 800a818:	0800b8c9 	.word	0x0800b8c9
 800a81c:	0800bc32 	.word	0x0800bc32
 800a820:	4b0b      	ldr	r3, [pc, #44]	; (800a850 <__ssvfiscanf_r+0x2ec>)
 800a822:	2b00      	cmp	r3, #0
 800a824:	f43f aec5 	beq.w	800a5b2 <__ssvfiscanf_r+0x4e>
 800a828:	466b      	mov	r3, sp
 800a82a:	4622      	mov	r2, r4
 800a82c:	a941      	add	r1, sp, #260	; 0x104
 800a82e:	4630      	mov	r0, r6
 800a830:	f7fc fb88 	bl	8006f44 <_scanf_float>
 800a834:	e798      	b.n	800a768 <__ssvfiscanf_r+0x204>
 800a836:	89a3      	ldrh	r3, [r4, #12]
 800a838:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a83c:	bf18      	it	ne
 800a83e:	f04f 30ff 	movne.w	r0, #4294967295
 800a842:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a84c:	e7f9      	b.n	800a842 <__ssvfiscanf_r+0x2de>
 800a84e:	bf00      	nop
 800a850:	08006f45 	.word	0x08006f45

0800a854 <_scanf_chars>:
 800a854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a858:	4615      	mov	r5, r2
 800a85a:	688a      	ldr	r2, [r1, #8]
 800a85c:	4680      	mov	r8, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	b932      	cbnz	r2, 800a870 <_scanf_chars+0x1c>
 800a862:	698a      	ldr	r2, [r1, #24]
 800a864:	2a00      	cmp	r2, #0
 800a866:	bf0c      	ite	eq
 800a868:	2201      	moveq	r2, #1
 800a86a:	f04f 32ff 	movne.w	r2, #4294967295
 800a86e:	608a      	str	r2, [r1, #8]
 800a870:	6822      	ldr	r2, [r4, #0]
 800a872:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a904 <_scanf_chars+0xb0>
 800a876:	06d1      	lsls	r1, r2, #27
 800a878:	bf5f      	itttt	pl
 800a87a:	681a      	ldrpl	r2, [r3, #0]
 800a87c:	1d11      	addpl	r1, r2, #4
 800a87e:	6019      	strpl	r1, [r3, #0]
 800a880:	6816      	ldrpl	r6, [r2, #0]
 800a882:	2700      	movs	r7, #0
 800a884:	69a0      	ldr	r0, [r4, #24]
 800a886:	b188      	cbz	r0, 800a8ac <_scanf_chars+0x58>
 800a888:	2801      	cmp	r0, #1
 800a88a:	d107      	bne.n	800a89c <_scanf_chars+0x48>
 800a88c:	682a      	ldr	r2, [r5, #0]
 800a88e:	7811      	ldrb	r1, [r2, #0]
 800a890:	6962      	ldr	r2, [r4, #20]
 800a892:	5c52      	ldrb	r2, [r2, r1]
 800a894:	b952      	cbnz	r2, 800a8ac <_scanf_chars+0x58>
 800a896:	2f00      	cmp	r7, #0
 800a898:	d031      	beq.n	800a8fe <_scanf_chars+0xaa>
 800a89a:	e022      	b.n	800a8e2 <_scanf_chars+0x8e>
 800a89c:	2802      	cmp	r0, #2
 800a89e:	d120      	bne.n	800a8e2 <_scanf_chars+0x8e>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a8a8:	071b      	lsls	r3, r3, #28
 800a8aa:	d41a      	bmi.n	800a8e2 <_scanf_chars+0x8e>
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	06da      	lsls	r2, r3, #27
 800a8b0:	bf5e      	ittt	pl
 800a8b2:	682b      	ldrpl	r3, [r5, #0]
 800a8b4:	781b      	ldrbpl	r3, [r3, #0]
 800a8b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a8ba:	682a      	ldr	r2, [r5, #0]
 800a8bc:	686b      	ldr	r3, [r5, #4]
 800a8be:	3201      	adds	r2, #1
 800a8c0:	602a      	str	r2, [r5, #0]
 800a8c2:	68a2      	ldr	r2, [r4, #8]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	3a01      	subs	r2, #1
 800a8c8:	606b      	str	r3, [r5, #4]
 800a8ca:	3701      	adds	r7, #1
 800a8cc:	60a2      	str	r2, [r4, #8]
 800a8ce:	b142      	cbz	r2, 800a8e2 <_scanf_chars+0x8e>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	dcd7      	bgt.n	800a884 <_scanf_chars+0x30>
 800a8d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4640      	mov	r0, r8
 800a8dc:	4798      	blx	r3
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d0d0      	beq.n	800a884 <_scanf_chars+0x30>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	f013 0310 	ands.w	r3, r3, #16
 800a8e8:	d105      	bne.n	800a8f6 <_scanf_chars+0xa2>
 800a8ea:	68e2      	ldr	r2, [r4, #12]
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	60e2      	str	r2, [r4, #12]
 800a8f0:	69a2      	ldr	r2, [r4, #24]
 800a8f2:	b102      	cbz	r2, 800a8f6 <_scanf_chars+0xa2>
 800a8f4:	7033      	strb	r3, [r6, #0]
 800a8f6:	6923      	ldr	r3, [r4, #16]
 800a8f8:	443b      	add	r3, r7
 800a8fa:	6123      	str	r3, [r4, #16]
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a902:	bf00      	nop
 800a904:	0800b8c9 	.word	0x0800b8c9

0800a908 <_scanf_i>:
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	4698      	mov	r8, r3
 800a90e:	4b76      	ldr	r3, [pc, #472]	; (800aae8 <_scanf_i+0x1e0>)
 800a910:	460c      	mov	r4, r1
 800a912:	4682      	mov	sl, r0
 800a914:	4616      	mov	r6, r2
 800a916:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a91a:	b087      	sub	sp, #28
 800a91c:	ab03      	add	r3, sp, #12
 800a91e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a922:	4b72      	ldr	r3, [pc, #456]	; (800aaec <_scanf_i+0x1e4>)
 800a924:	69a1      	ldr	r1, [r4, #24]
 800a926:	4a72      	ldr	r2, [pc, #456]	; (800aaf0 <_scanf_i+0x1e8>)
 800a928:	2903      	cmp	r1, #3
 800a92a:	bf18      	it	ne
 800a92c:	461a      	movne	r2, r3
 800a92e:	68a3      	ldr	r3, [r4, #8]
 800a930:	9201      	str	r2, [sp, #4]
 800a932:	1e5a      	subs	r2, r3, #1
 800a934:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a938:	bf88      	it	hi
 800a93a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a93e:	4627      	mov	r7, r4
 800a940:	bf82      	ittt	hi
 800a942:	eb03 0905 	addhi.w	r9, r3, r5
 800a946:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a94a:	60a3      	strhi	r3, [r4, #8]
 800a94c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a950:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a954:	bf98      	it	ls
 800a956:	f04f 0900 	movls.w	r9, #0
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	463d      	mov	r5, r7
 800a95e:	f04f 0b00 	mov.w	fp, #0
 800a962:	6831      	ldr	r1, [r6, #0]
 800a964:	ab03      	add	r3, sp, #12
 800a966:	7809      	ldrb	r1, [r1, #0]
 800a968:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a96c:	2202      	movs	r2, #2
 800a96e:	f7f5 fc57 	bl	8000220 <memchr>
 800a972:	b328      	cbz	r0, 800a9c0 <_scanf_i+0xb8>
 800a974:	f1bb 0f01 	cmp.w	fp, #1
 800a978:	d159      	bne.n	800aa2e <_scanf_i+0x126>
 800a97a:	6862      	ldr	r2, [r4, #4]
 800a97c:	b92a      	cbnz	r2, 800a98a <_scanf_i+0x82>
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	2308      	movs	r3, #8
 800a982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a986:	6063      	str	r3, [r4, #4]
 800a988:	6022      	str	r2, [r4, #0]
 800a98a:	6822      	ldr	r2, [r4, #0]
 800a98c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a990:	6022      	str	r2, [r4, #0]
 800a992:	68a2      	ldr	r2, [r4, #8]
 800a994:	1e51      	subs	r1, r2, #1
 800a996:	60a1      	str	r1, [r4, #8]
 800a998:	b192      	cbz	r2, 800a9c0 <_scanf_i+0xb8>
 800a99a:	6832      	ldr	r2, [r6, #0]
 800a99c:	1c51      	adds	r1, r2, #1
 800a99e:	6031      	str	r1, [r6, #0]
 800a9a0:	7812      	ldrb	r2, [r2, #0]
 800a9a2:	f805 2b01 	strb.w	r2, [r5], #1
 800a9a6:	6872      	ldr	r2, [r6, #4]
 800a9a8:	3a01      	subs	r2, #1
 800a9aa:	2a00      	cmp	r2, #0
 800a9ac:	6072      	str	r2, [r6, #4]
 800a9ae:	dc07      	bgt.n	800a9c0 <_scanf_i+0xb8>
 800a9b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4650      	mov	r0, sl
 800a9b8:	4790      	blx	r2
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	f040 8085 	bne.w	800aaca <_scanf_i+0x1c2>
 800a9c0:	f10b 0b01 	add.w	fp, fp, #1
 800a9c4:	f1bb 0f03 	cmp.w	fp, #3
 800a9c8:	d1cb      	bne.n	800a962 <_scanf_i+0x5a>
 800a9ca:	6863      	ldr	r3, [r4, #4]
 800a9cc:	b90b      	cbnz	r3, 800a9d2 <_scanf_i+0xca>
 800a9ce:	230a      	movs	r3, #10
 800a9d0:	6063      	str	r3, [r4, #4]
 800a9d2:	6863      	ldr	r3, [r4, #4]
 800a9d4:	4947      	ldr	r1, [pc, #284]	; (800aaf4 <_scanf_i+0x1ec>)
 800a9d6:	6960      	ldr	r0, [r4, #20]
 800a9d8:	1ac9      	subs	r1, r1, r3
 800a9da:	f000 f8b9 	bl	800ab50 <__sccl>
 800a9de:	f04f 0b00 	mov.w	fp, #0
 800a9e2:	68a3      	ldr	r3, [r4, #8]
 800a9e4:	6822      	ldr	r2, [r4, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d03d      	beq.n	800aa66 <_scanf_i+0x15e>
 800a9ea:	6831      	ldr	r1, [r6, #0]
 800a9ec:	6960      	ldr	r0, [r4, #20]
 800a9ee:	f891 c000 	ldrb.w	ip, [r1]
 800a9f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d035      	beq.n	800aa66 <_scanf_i+0x15e>
 800a9fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a9fe:	d124      	bne.n	800aa4a <_scanf_i+0x142>
 800aa00:	0510      	lsls	r0, r2, #20
 800aa02:	d522      	bpl.n	800aa4a <_scanf_i+0x142>
 800aa04:	f10b 0b01 	add.w	fp, fp, #1
 800aa08:	f1b9 0f00 	cmp.w	r9, #0
 800aa0c:	d003      	beq.n	800aa16 <_scanf_i+0x10e>
 800aa0e:	3301      	adds	r3, #1
 800aa10:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa14:	60a3      	str	r3, [r4, #8]
 800aa16:	6873      	ldr	r3, [r6, #4]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	6073      	str	r3, [r6, #4]
 800aa1e:	dd1b      	ble.n	800aa58 <_scanf_i+0x150>
 800aa20:	6833      	ldr	r3, [r6, #0]
 800aa22:	3301      	adds	r3, #1
 800aa24:	6033      	str	r3, [r6, #0]
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	60a3      	str	r3, [r4, #8]
 800aa2c:	e7d9      	b.n	800a9e2 <_scanf_i+0xda>
 800aa2e:	f1bb 0f02 	cmp.w	fp, #2
 800aa32:	d1ae      	bne.n	800a992 <_scanf_i+0x8a>
 800aa34:	6822      	ldr	r2, [r4, #0]
 800aa36:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800aa3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800aa3e:	d1bf      	bne.n	800a9c0 <_scanf_i+0xb8>
 800aa40:	2310      	movs	r3, #16
 800aa42:	6063      	str	r3, [r4, #4]
 800aa44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa48:	e7a2      	b.n	800a990 <_scanf_i+0x88>
 800aa4a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800aa4e:	6022      	str	r2, [r4, #0]
 800aa50:	780b      	ldrb	r3, [r1, #0]
 800aa52:	f805 3b01 	strb.w	r3, [r5], #1
 800aa56:	e7de      	b.n	800aa16 <_scanf_i+0x10e>
 800aa58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4650      	mov	r0, sl
 800aa60:	4798      	blx	r3
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d0df      	beq.n	800aa26 <_scanf_i+0x11e>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	05db      	lsls	r3, r3, #23
 800aa6a:	d50d      	bpl.n	800aa88 <_scanf_i+0x180>
 800aa6c:	42bd      	cmp	r5, r7
 800aa6e:	d909      	bls.n	800aa84 <_scanf_i+0x17c>
 800aa70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aa74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa78:	4632      	mov	r2, r6
 800aa7a:	4650      	mov	r0, sl
 800aa7c:	4798      	blx	r3
 800aa7e:	f105 39ff 	add.w	r9, r5, #4294967295
 800aa82:	464d      	mov	r5, r9
 800aa84:	42bd      	cmp	r5, r7
 800aa86:	d02d      	beq.n	800aae4 <_scanf_i+0x1dc>
 800aa88:	6822      	ldr	r2, [r4, #0]
 800aa8a:	f012 0210 	ands.w	r2, r2, #16
 800aa8e:	d113      	bne.n	800aab8 <_scanf_i+0x1b0>
 800aa90:	702a      	strb	r2, [r5, #0]
 800aa92:	6863      	ldr	r3, [r4, #4]
 800aa94:	9e01      	ldr	r6, [sp, #4]
 800aa96:	4639      	mov	r1, r7
 800aa98:	4650      	mov	r0, sl
 800aa9a:	47b0      	blx	r6
 800aa9c:	6821      	ldr	r1, [r4, #0]
 800aa9e:	f8d8 3000 	ldr.w	r3, [r8]
 800aaa2:	f011 0f20 	tst.w	r1, #32
 800aaa6:	d013      	beq.n	800aad0 <_scanf_i+0x1c8>
 800aaa8:	1d1a      	adds	r2, r3, #4
 800aaaa:	f8c8 2000 	str.w	r2, [r8]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6018      	str	r0, [r3, #0]
 800aab2:	68e3      	ldr	r3, [r4, #12]
 800aab4:	3301      	adds	r3, #1
 800aab6:	60e3      	str	r3, [r4, #12]
 800aab8:	1bed      	subs	r5, r5, r7
 800aaba:	44ab      	add	fp, r5
 800aabc:	6925      	ldr	r5, [r4, #16]
 800aabe:	445d      	add	r5, fp
 800aac0:	6125      	str	r5, [r4, #16]
 800aac2:	2000      	movs	r0, #0
 800aac4:	b007      	add	sp, #28
 800aac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaca:	f04f 0b00 	mov.w	fp, #0
 800aace:	e7ca      	b.n	800aa66 <_scanf_i+0x15e>
 800aad0:	1d1a      	adds	r2, r3, #4
 800aad2:	f8c8 2000 	str.w	r2, [r8]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f011 0f01 	tst.w	r1, #1
 800aadc:	bf14      	ite	ne
 800aade:	8018      	strhne	r0, [r3, #0]
 800aae0:	6018      	streq	r0, [r3, #0]
 800aae2:	e7e6      	b.n	800aab2 <_scanf_i+0x1aa>
 800aae4:	2001      	movs	r0, #1
 800aae6:	e7ed      	b.n	800aac4 <_scanf_i+0x1bc>
 800aae8:	0800b814 	.word	0x0800b814
 800aaec:	0800accd 	.word	0x0800accd
 800aaf0:	080081ed 	.word	0x080081ed
 800aaf4:	0800bc56 	.word	0x0800bc56

0800aaf8 <_read_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4d07      	ldr	r5, [pc, #28]	; (800ab18 <_read_r+0x20>)
 800aafc:	4604      	mov	r4, r0
 800aafe:	4608      	mov	r0, r1
 800ab00:	4611      	mov	r1, r2
 800ab02:	2200      	movs	r2, #0
 800ab04:	602a      	str	r2, [r5, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	f7f7 f944 	bl	8001d94 <_read>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d102      	bne.n	800ab16 <_read_r+0x1e>
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	b103      	cbz	r3, 800ab16 <_read_r+0x1e>
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	200003e4 	.word	0x200003e4
 800ab1c:	00000000 	.word	0x00000000

0800ab20 <nan>:
 800ab20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab28 <nan+0x8>
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	00000000 	.word	0x00000000
 800ab2c:	7ff80000 	.word	0x7ff80000

0800ab30 <_sbrk_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d06      	ldr	r5, [pc, #24]	; (800ab4c <_sbrk_r+0x1c>)
 800ab34:	2300      	movs	r3, #0
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	602b      	str	r3, [r5, #0]
 800ab3c:	f7f7 f998 	bl	8001e70 <_sbrk>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_sbrk_r+0x1a>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_sbrk_r+0x1a>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	200003e4 	.word	0x200003e4

0800ab50 <__sccl>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	780b      	ldrb	r3, [r1, #0]
 800ab54:	4604      	mov	r4, r0
 800ab56:	2b5e      	cmp	r3, #94	; 0x5e
 800ab58:	bf0b      	itete	eq
 800ab5a:	784b      	ldrbeq	r3, [r1, #1]
 800ab5c:	1c48      	addne	r0, r1, #1
 800ab5e:	1c88      	addeq	r0, r1, #2
 800ab60:	2200      	movne	r2, #0
 800ab62:	bf08      	it	eq
 800ab64:	2201      	moveq	r2, #1
 800ab66:	1e61      	subs	r1, r4, #1
 800ab68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ab6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ab70:	42a9      	cmp	r1, r5
 800ab72:	d1fb      	bne.n	800ab6c <__sccl+0x1c>
 800ab74:	b90b      	cbnz	r3, 800ab7a <__sccl+0x2a>
 800ab76:	3801      	subs	r0, #1
 800ab78:	bd70      	pop	{r4, r5, r6, pc}
 800ab7a:	f082 0201 	eor.w	r2, r2, #1
 800ab7e:	54e2      	strb	r2, [r4, r3]
 800ab80:	4605      	mov	r5, r0
 800ab82:	4628      	mov	r0, r5
 800ab84:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ab88:	292d      	cmp	r1, #45	; 0x2d
 800ab8a:	d006      	beq.n	800ab9a <__sccl+0x4a>
 800ab8c:	295d      	cmp	r1, #93	; 0x5d
 800ab8e:	d0f3      	beq.n	800ab78 <__sccl+0x28>
 800ab90:	b909      	cbnz	r1, 800ab96 <__sccl+0x46>
 800ab92:	4628      	mov	r0, r5
 800ab94:	e7f0      	b.n	800ab78 <__sccl+0x28>
 800ab96:	460b      	mov	r3, r1
 800ab98:	e7f1      	b.n	800ab7e <__sccl+0x2e>
 800ab9a:	786e      	ldrb	r6, [r5, #1]
 800ab9c:	2e5d      	cmp	r6, #93	; 0x5d
 800ab9e:	d0fa      	beq.n	800ab96 <__sccl+0x46>
 800aba0:	42b3      	cmp	r3, r6
 800aba2:	dcf8      	bgt.n	800ab96 <__sccl+0x46>
 800aba4:	3502      	adds	r5, #2
 800aba6:	4619      	mov	r1, r3
 800aba8:	3101      	adds	r1, #1
 800abaa:	428e      	cmp	r6, r1
 800abac:	5462      	strb	r2, [r4, r1]
 800abae:	dcfb      	bgt.n	800aba8 <__sccl+0x58>
 800abb0:	1af1      	subs	r1, r6, r3
 800abb2:	3901      	subs	r1, #1
 800abb4:	1c58      	adds	r0, r3, #1
 800abb6:	42b3      	cmp	r3, r6
 800abb8:	bfa8      	it	ge
 800abba:	2100      	movge	r1, #0
 800abbc:	1843      	adds	r3, r0, r1
 800abbe:	e7e0      	b.n	800ab82 <__sccl+0x32>

0800abc0 <strncmp>:
 800abc0:	b510      	push	{r4, lr}
 800abc2:	b17a      	cbz	r2, 800abe4 <strncmp+0x24>
 800abc4:	4603      	mov	r3, r0
 800abc6:	3901      	subs	r1, #1
 800abc8:	1884      	adds	r4, r0, r2
 800abca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800abce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800abd2:	4290      	cmp	r0, r2
 800abd4:	d101      	bne.n	800abda <strncmp+0x1a>
 800abd6:	42a3      	cmp	r3, r4
 800abd8:	d101      	bne.n	800abde <strncmp+0x1e>
 800abda:	1a80      	subs	r0, r0, r2
 800abdc:	bd10      	pop	{r4, pc}
 800abde:	2800      	cmp	r0, #0
 800abe0:	d1f3      	bne.n	800abca <strncmp+0xa>
 800abe2:	e7fa      	b.n	800abda <strncmp+0x1a>
 800abe4:	4610      	mov	r0, r2
 800abe6:	e7f9      	b.n	800abdc <strncmp+0x1c>

0800abe8 <_strtoul_l.constprop.0>:
 800abe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abec:	4f36      	ldr	r7, [pc, #216]	; (800acc8 <_strtoul_l.constprop.0+0xe0>)
 800abee:	4686      	mov	lr, r0
 800abf0:	460d      	mov	r5, r1
 800abf2:	4628      	mov	r0, r5
 800abf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abf8:	5de6      	ldrb	r6, [r4, r7]
 800abfa:	f016 0608 	ands.w	r6, r6, #8
 800abfe:	d1f8      	bne.n	800abf2 <_strtoul_l.constprop.0+0xa>
 800ac00:	2c2d      	cmp	r4, #45	; 0x2d
 800ac02:	d12f      	bne.n	800ac64 <_strtoul_l.constprop.0+0x7c>
 800ac04:	782c      	ldrb	r4, [r5, #0]
 800ac06:	2601      	movs	r6, #1
 800ac08:	1c85      	adds	r5, r0, #2
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d057      	beq.n	800acbe <_strtoul_l.constprop.0+0xd6>
 800ac0e:	2b10      	cmp	r3, #16
 800ac10:	d109      	bne.n	800ac26 <_strtoul_l.constprop.0+0x3e>
 800ac12:	2c30      	cmp	r4, #48	; 0x30
 800ac14:	d107      	bne.n	800ac26 <_strtoul_l.constprop.0+0x3e>
 800ac16:	7828      	ldrb	r0, [r5, #0]
 800ac18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ac1c:	2858      	cmp	r0, #88	; 0x58
 800ac1e:	d149      	bne.n	800acb4 <_strtoul_l.constprop.0+0xcc>
 800ac20:	786c      	ldrb	r4, [r5, #1]
 800ac22:	2310      	movs	r3, #16
 800ac24:	3502      	adds	r5, #2
 800ac26:	f04f 38ff 	mov.w	r8, #4294967295
 800ac2a:	2700      	movs	r7, #0
 800ac2c:	fbb8 f8f3 	udiv	r8, r8, r3
 800ac30:	fb03 f908 	mul.w	r9, r3, r8
 800ac34:	ea6f 0909 	mvn.w	r9, r9
 800ac38:	4638      	mov	r0, r7
 800ac3a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ac3e:	f1bc 0f09 	cmp.w	ip, #9
 800ac42:	d814      	bhi.n	800ac6e <_strtoul_l.constprop.0+0x86>
 800ac44:	4664      	mov	r4, ip
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	dd22      	ble.n	800ac90 <_strtoul_l.constprop.0+0xa8>
 800ac4a:	2f00      	cmp	r7, #0
 800ac4c:	db1d      	blt.n	800ac8a <_strtoul_l.constprop.0+0xa2>
 800ac4e:	4580      	cmp	r8, r0
 800ac50:	d31b      	bcc.n	800ac8a <_strtoul_l.constprop.0+0xa2>
 800ac52:	d101      	bne.n	800ac58 <_strtoul_l.constprop.0+0x70>
 800ac54:	45a1      	cmp	r9, r4
 800ac56:	db18      	blt.n	800ac8a <_strtoul_l.constprop.0+0xa2>
 800ac58:	fb00 4003 	mla	r0, r0, r3, r4
 800ac5c:	2701      	movs	r7, #1
 800ac5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac62:	e7ea      	b.n	800ac3a <_strtoul_l.constprop.0+0x52>
 800ac64:	2c2b      	cmp	r4, #43	; 0x2b
 800ac66:	bf04      	itt	eq
 800ac68:	782c      	ldrbeq	r4, [r5, #0]
 800ac6a:	1c85      	addeq	r5, r0, #2
 800ac6c:	e7cd      	b.n	800ac0a <_strtoul_l.constprop.0+0x22>
 800ac6e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ac72:	f1bc 0f19 	cmp.w	ip, #25
 800ac76:	d801      	bhi.n	800ac7c <_strtoul_l.constprop.0+0x94>
 800ac78:	3c37      	subs	r4, #55	; 0x37
 800ac7a:	e7e4      	b.n	800ac46 <_strtoul_l.constprop.0+0x5e>
 800ac7c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ac80:	f1bc 0f19 	cmp.w	ip, #25
 800ac84:	d804      	bhi.n	800ac90 <_strtoul_l.constprop.0+0xa8>
 800ac86:	3c57      	subs	r4, #87	; 0x57
 800ac88:	e7dd      	b.n	800ac46 <_strtoul_l.constprop.0+0x5e>
 800ac8a:	f04f 37ff 	mov.w	r7, #4294967295
 800ac8e:	e7e6      	b.n	800ac5e <_strtoul_l.constprop.0+0x76>
 800ac90:	2f00      	cmp	r7, #0
 800ac92:	da07      	bge.n	800aca4 <_strtoul_l.constprop.0+0xbc>
 800ac94:	2322      	movs	r3, #34	; 0x22
 800ac96:	f8ce 3000 	str.w	r3, [lr]
 800ac9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9e:	b932      	cbnz	r2, 800acae <_strtoul_l.constprop.0+0xc6>
 800aca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aca4:	b106      	cbz	r6, 800aca8 <_strtoul_l.constprop.0+0xc0>
 800aca6:	4240      	negs	r0, r0
 800aca8:	2a00      	cmp	r2, #0
 800acaa:	d0f9      	beq.n	800aca0 <_strtoul_l.constprop.0+0xb8>
 800acac:	b107      	cbz	r7, 800acb0 <_strtoul_l.constprop.0+0xc8>
 800acae:	1e69      	subs	r1, r5, #1
 800acb0:	6011      	str	r1, [r2, #0]
 800acb2:	e7f5      	b.n	800aca0 <_strtoul_l.constprop.0+0xb8>
 800acb4:	2430      	movs	r4, #48	; 0x30
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1b5      	bne.n	800ac26 <_strtoul_l.constprop.0+0x3e>
 800acba:	2308      	movs	r3, #8
 800acbc:	e7b3      	b.n	800ac26 <_strtoul_l.constprop.0+0x3e>
 800acbe:	2c30      	cmp	r4, #48	; 0x30
 800acc0:	d0a9      	beq.n	800ac16 <_strtoul_l.constprop.0+0x2e>
 800acc2:	230a      	movs	r3, #10
 800acc4:	e7af      	b.n	800ac26 <_strtoul_l.constprop.0+0x3e>
 800acc6:	bf00      	nop
 800acc8:	0800b8c9 	.word	0x0800b8c9

0800accc <_strtoul_r>:
 800accc:	f7ff bf8c 	b.w	800abe8 <_strtoul_l.constprop.0>

0800acd0 <__submore>:
 800acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd4:	460c      	mov	r4, r1
 800acd6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800acd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acdc:	4299      	cmp	r1, r3
 800acde:	d11d      	bne.n	800ad1c <__submore+0x4c>
 800ace0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ace4:	f7ff fa14 	bl	800a110 <_malloc_r>
 800ace8:	b918      	cbnz	r0, 800acf2 <__submore+0x22>
 800acea:	f04f 30ff 	mov.w	r0, #4294967295
 800acee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf6:	63a3      	str	r3, [r4, #56]	; 0x38
 800acf8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800acfc:	6360      	str	r0, [r4, #52]	; 0x34
 800acfe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ad02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ad06:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ad0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ad0e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ad12:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ad16:	6020      	str	r0, [r4, #0]
 800ad18:	2000      	movs	r0, #0
 800ad1a:	e7e8      	b.n	800acee <__submore+0x1e>
 800ad1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ad1e:	0077      	lsls	r7, r6, #1
 800ad20:	463a      	mov	r2, r7
 800ad22:	f000 fa2d 	bl	800b180 <_realloc_r>
 800ad26:	4605      	mov	r5, r0
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d0de      	beq.n	800acea <__submore+0x1a>
 800ad2c:	eb00 0806 	add.w	r8, r0, r6
 800ad30:	4601      	mov	r1, r0
 800ad32:	4632      	mov	r2, r6
 800ad34:	4640      	mov	r0, r8
 800ad36:	f7fe fc99 	bl	800966c <memcpy>
 800ad3a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ad3e:	f8c4 8000 	str.w	r8, [r4]
 800ad42:	e7e9      	b.n	800ad18 <__submore+0x48>

0800ad44 <__ascii_wctomb>:
 800ad44:	b149      	cbz	r1, 800ad5a <__ascii_wctomb+0x16>
 800ad46:	2aff      	cmp	r2, #255	; 0xff
 800ad48:	bf85      	ittet	hi
 800ad4a:	238a      	movhi	r3, #138	; 0x8a
 800ad4c:	6003      	strhi	r3, [r0, #0]
 800ad4e:	700a      	strbls	r2, [r1, #0]
 800ad50:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad54:	bf98      	it	ls
 800ad56:	2001      	movls	r0, #1
 800ad58:	4770      	bx	lr
 800ad5a:	4608      	mov	r0, r1
 800ad5c:	4770      	bx	lr
	...

0800ad60 <__assert_func>:
 800ad60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad62:	4614      	mov	r4, r2
 800ad64:	461a      	mov	r2, r3
 800ad66:	4b09      	ldr	r3, [pc, #36]	; (800ad8c <__assert_func+0x2c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	68d8      	ldr	r0, [r3, #12]
 800ad6e:	b14c      	cbz	r4, 800ad84 <__assert_func+0x24>
 800ad70:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <__assert_func+0x30>)
 800ad72:	9100      	str	r1, [sp, #0]
 800ad74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad78:	4906      	ldr	r1, [pc, #24]	; (800ad94 <__assert_func+0x34>)
 800ad7a:	462b      	mov	r3, r5
 800ad7c:	f000 f9a6 	bl	800b0cc <fiprintf>
 800ad80:	f000 fc46 	bl	800b610 <abort>
 800ad84:	4b04      	ldr	r3, [pc, #16]	; (800ad98 <__assert_func+0x38>)
 800ad86:	461c      	mov	r4, r3
 800ad88:	e7f3      	b.n	800ad72 <__assert_func+0x12>
 800ad8a:	bf00      	nop
 800ad8c:	2000000c 	.word	0x2000000c
 800ad90:	0800bc58 	.word	0x0800bc58
 800ad94:	0800bc65 	.word	0x0800bc65
 800ad98:	0800bc93 	.word	0x0800bc93

0800ad9c <__sflush_r>:
 800ad9c:	898a      	ldrh	r2, [r1, #12]
 800ad9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada2:	4605      	mov	r5, r0
 800ada4:	0710      	lsls	r0, r2, #28
 800ada6:	460c      	mov	r4, r1
 800ada8:	d458      	bmi.n	800ae5c <__sflush_r+0xc0>
 800adaa:	684b      	ldr	r3, [r1, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	dc05      	bgt.n	800adbc <__sflush_r+0x20>
 800adb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	dc02      	bgt.n	800adbc <__sflush_r+0x20>
 800adb6:	2000      	movs	r0, #0
 800adb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adbe:	2e00      	cmp	r6, #0
 800adc0:	d0f9      	beq.n	800adb6 <__sflush_r+0x1a>
 800adc2:	2300      	movs	r3, #0
 800adc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adc8:	682f      	ldr	r7, [r5, #0]
 800adca:	602b      	str	r3, [r5, #0]
 800adcc:	d032      	beq.n	800ae34 <__sflush_r+0x98>
 800adce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	075a      	lsls	r2, r3, #29
 800add4:	d505      	bpl.n	800ade2 <__sflush_r+0x46>
 800add6:	6863      	ldr	r3, [r4, #4]
 800add8:	1ac0      	subs	r0, r0, r3
 800adda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800addc:	b10b      	cbz	r3, 800ade2 <__sflush_r+0x46>
 800adde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ade0:	1ac0      	subs	r0, r0, r3
 800ade2:	2300      	movs	r3, #0
 800ade4:	4602      	mov	r2, r0
 800ade6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ade8:	6a21      	ldr	r1, [r4, #32]
 800adea:	4628      	mov	r0, r5
 800adec:	47b0      	blx	r6
 800adee:	1c43      	adds	r3, r0, #1
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	d106      	bne.n	800ae02 <__sflush_r+0x66>
 800adf4:	6829      	ldr	r1, [r5, #0]
 800adf6:	291d      	cmp	r1, #29
 800adf8:	d82c      	bhi.n	800ae54 <__sflush_r+0xb8>
 800adfa:	4a2a      	ldr	r2, [pc, #168]	; (800aea4 <__sflush_r+0x108>)
 800adfc:	40ca      	lsrs	r2, r1
 800adfe:	07d6      	lsls	r6, r2, #31
 800ae00:	d528      	bpl.n	800ae54 <__sflush_r+0xb8>
 800ae02:	2200      	movs	r2, #0
 800ae04:	6062      	str	r2, [r4, #4]
 800ae06:	04d9      	lsls	r1, r3, #19
 800ae08:	6922      	ldr	r2, [r4, #16]
 800ae0a:	6022      	str	r2, [r4, #0]
 800ae0c:	d504      	bpl.n	800ae18 <__sflush_r+0x7c>
 800ae0e:	1c42      	adds	r2, r0, #1
 800ae10:	d101      	bne.n	800ae16 <__sflush_r+0x7a>
 800ae12:	682b      	ldr	r3, [r5, #0]
 800ae14:	b903      	cbnz	r3, 800ae18 <__sflush_r+0x7c>
 800ae16:	6560      	str	r0, [r4, #84]	; 0x54
 800ae18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae1a:	602f      	str	r7, [r5, #0]
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	d0ca      	beq.n	800adb6 <__sflush_r+0x1a>
 800ae20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae24:	4299      	cmp	r1, r3
 800ae26:	d002      	beq.n	800ae2e <__sflush_r+0x92>
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f7ff f905 	bl	800a038 <_free_r>
 800ae2e:	2000      	movs	r0, #0
 800ae30:	6360      	str	r0, [r4, #52]	; 0x34
 800ae32:	e7c1      	b.n	800adb8 <__sflush_r+0x1c>
 800ae34:	6a21      	ldr	r1, [r4, #32]
 800ae36:	2301      	movs	r3, #1
 800ae38:	4628      	mov	r0, r5
 800ae3a:	47b0      	blx	r6
 800ae3c:	1c41      	adds	r1, r0, #1
 800ae3e:	d1c7      	bne.n	800add0 <__sflush_r+0x34>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d0c4      	beq.n	800add0 <__sflush_r+0x34>
 800ae46:	2b1d      	cmp	r3, #29
 800ae48:	d001      	beq.n	800ae4e <__sflush_r+0xb2>
 800ae4a:	2b16      	cmp	r3, #22
 800ae4c:	d101      	bne.n	800ae52 <__sflush_r+0xb6>
 800ae4e:	602f      	str	r7, [r5, #0]
 800ae50:	e7b1      	b.n	800adb6 <__sflush_r+0x1a>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae58:	81a3      	strh	r3, [r4, #12]
 800ae5a:	e7ad      	b.n	800adb8 <__sflush_r+0x1c>
 800ae5c:	690f      	ldr	r7, [r1, #16]
 800ae5e:	2f00      	cmp	r7, #0
 800ae60:	d0a9      	beq.n	800adb6 <__sflush_r+0x1a>
 800ae62:	0793      	lsls	r3, r2, #30
 800ae64:	680e      	ldr	r6, [r1, #0]
 800ae66:	bf08      	it	eq
 800ae68:	694b      	ldreq	r3, [r1, #20]
 800ae6a:	600f      	str	r7, [r1, #0]
 800ae6c:	bf18      	it	ne
 800ae6e:	2300      	movne	r3, #0
 800ae70:	eba6 0807 	sub.w	r8, r6, r7
 800ae74:	608b      	str	r3, [r1, #8]
 800ae76:	f1b8 0f00 	cmp.w	r8, #0
 800ae7a:	dd9c      	ble.n	800adb6 <__sflush_r+0x1a>
 800ae7c:	6a21      	ldr	r1, [r4, #32]
 800ae7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae80:	4643      	mov	r3, r8
 800ae82:	463a      	mov	r2, r7
 800ae84:	4628      	mov	r0, r5
 800ae86:	47b0      	blx	r6
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	dc06      	bgt.n	800ae9a <__sflush_r+0xfe>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	e78e      	b.n	800adb8 <__sflush_r+0x1c>
 800ae9a:	4407      	add	r7, r0
 800ae9c:	eba8 0800 	sub.w	r8, r8, r0
 800aea0:	e7e9      	b.n	800ae76 <__sflush_r+0xda>
 800aea2:	bf00      	nop
 800aea4:	20400001 	.word	0x20400001

0800aea8 <_fflush_r>:
 800aea8:	b538      	push	{r3, r4, r5, lr}
 800aeaa:	690b      	ldr	r3, [r1, #16]
 800aeac:	4605      	mov	r5, r0
 800aeae:	460c      	mov	r4, r1
 800aeb0:	b913      	cbnz	r3, 800aeb8 <_fflush_r+0x10>
 800aeb2:	2500      	movs	r5, #0
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	b118      	cbz	r0, 800aec2 <_fflush_r+0x1a>
 800aeba:	6983      	ldr	r3, [r0, #24]
 800aebc:	b90b      	cbnz	r3, 800aec2 <_fflush_r+0x1a>
 800aebe:	f000 f887 	bl	800afd0 <__sinit>
 800aec2:	4b14      	ldr	r3, [pc, #80]	; (800af14 <_fflush_r+0x6c>)
 800aec4:	429c      	cmp	r4, r3
 800aec6:	d11b      	bne.n	800af00 <_fflush_r+0x58>
 800aec8:	686c      	ldr	r4, [r5, #4]
 800aeca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0ef      	beq.n	800aeb2 <_fflush_r+0xa>
 800aed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aed4:	07d0      	lsls	r0, r2, #31
 800aed6:	d404      	bmi.n	800aee2 <_fflush_r+0x3a>
 800aed8:	0599      	lsls	r1, r3, #22
 800aeda:	d402      	bmi.n	800aee2 <_fflush_r+0x3a>
 800aedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aede:	f000 f927 	bl	800b130 <__retarget_lock_acquire_recursive>
 800aee2:	4628      	mov	r0, r5
 800aee4:	4621      	mov	r1, r4
 800aee6:	f7ff ff59 	bl	800ad9c <__sflush_r>
 800aeea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeec:	07da      	lsls	r2, r3, #31
 800aeee:	4605      	mov	r5, r0
 800aef0:	d4e0      	bmi.n	800aeb4 <_fflush_r+0xc>
 800aef2:	89a3      	ldrh	r3, [r4, #12]
 800aef4:	059b      	lsls	r3, r3, #22
 800aef6:	d4dd      	bmi.n	800aeb4 <_fflush_r+0xc>
 800aef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aefa:	f000 f91a 	bl	800b132 <__retarget_lock_release_recursive>
 800aefe:	e7d9      	b.n	800aeb4 <_fflush_r+0xc>
 800af00:	4b05      	ldr	r3, [pc, #20]	; (800af18 <_fflush_r+0x70>)
 800af02:	429c      	cmp	r4, r3
 800af04:	d101      	bne.n	800af0a <_fflush_r+0x62>
 800af06:	68ac      	ldr	r4, [r5, #8]
 800af08:	e7df      	b.n	800aeca <_fflush_r+0x22>
 800af0a:	4b04      	ldr	r3, [pc, #16]	; (800af1c <_fflush_r+0x74>)
 800af0c:	429c      	cmp	r4, r3
 800af0e:	bf08      	it	eq
 800af10:	68ec      	ldreq	r4, [r5, #12]
 800af12:	e7da      	b.n	800aeca <_fflush_r+0x22>
 800af14:	0800bcb4 	.word	0x0800bcb4
 800af18:	0800bcd4 	.word	0x0800bcd4
 800af1c:	0800bc94 	.word	0x0800bc94

0800af20 <std>:
 800af20:	2300      	movs	r3, #0
 800af22:	b510      	push	{r4, lr}
 800af24:	4604      	mov	r4, r0
 800af26:	e9c0 3300 	strd	r3, r3, [r0]
 800af2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af2e:	6083      	str	r3, [r0, #8]
 800af30:	8181      	strh	r1, [r0, #12]
 800af32:	6643      	str	r3, [r0, #100]	; 0x64
 800af34:	81c2      	strh	r2, [r0, #14]
 800af36:	6183      	str	r3, [r0, #24]
 800af38:	4619      	mov	r1, r3
 800af3a:	2208      	movs	r2, #8
 800af3c:	305c      	adds	r0, #92	; 0x5c
 800af3e:	f7fb fb8f 	bl	8006660 <memset>
 800af42:	4b05      	ldr	r3, [pc, #20]	; (800af58 <std+0x38>)
 800af44:	6263      	str	r3, [r4, #36]	; 0x24
 800af46:	4b05      	ldr	r3, [pc, #20]	; (800af5c <std+0x3c>)
 800af48:	62a3      	str	r3, [r4, #40]	; 0x28
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <std+0x40>)
 800af4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af4e:	4b05      	ldr	r3, [pc, #20]	; (800af64 <std+0x44>)
 800af50:	6224      	str	r4, [r4, #32]
 800af52:	6323      	str	r3, [r4, #48]	; 0x30
 800af54:	bd10      	pop	{r4, pc}
 800af56:	bf00      	nop
 800af58:	08007409 	.word	0x08007409
 800af5c:	0800742f 	.word	0x0800742f
 800af60:	08007467 	.word	0x08007467
 800af64:	0800748b 	.word	0x0800748b

0800af68 <_cleanup_r>:
 800af68:	4901      	ldr	r1, [pc, #4]	; (800af70 <_cleanup_r+0x8>)
 800af6a:	f000 b8c1 	b.w	800b0f0 <_fwalk_reent>
 800af6e:	bf00      	nop
 800af70:	0800aea9 	.word	0x0800aea9

0800af74 <__sfmoreglue>:
 800af74:	b570      	push	{r4, r5, r6, lr}
 800af76:	2268      	movs	r2, #104	; 0x68
 800af78:	1e4d      	subs	r5, r1, #1
 800af7a:	4355      	muls	r5, r2
 800af7c:	460e      	mov	r6, r1
 800af7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af82:	f7ff f8c5 	bl	800a110 <_malloc_r>
 800af86:	4604      	mov	r4, r0
 800af88:	b140      	cbz	r0, 800af9c <__sfmoreglue+0x28>
 800af8a:	2100      	movs	r1, #0
 800af8c:	e9c0 1600 	strd	r1, r6, [r0]
 800af90:	300c      	adds	r0, #12
 800af92:	60a0      	str	r0, [r4, #8]
 800af94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af98:	f7fb fb62 	bl	8006660 <memset>
 800af9c:	4620      	mov	r0, r4
 800af9e:	bd70      	pop	{r4, r5, r6, pc}

0800afa0 <__sfp_lock_acquire>:
 800afa0:	4801      	ldr	r0, [pc, #4]	; (800afa8 <__sfp_lock_acquire+0x8>)
 800afa2:	f000 b8c5 	b.w	800b130 <__retarget_lock_acquire_recursive>
 800afa6:	bf00      	nop
 800afa8:	200003e9 	.word	0x200003e9

0800afac <__sfp_lock_release>:
 800afac:	4801      	ldr	r0, [pc, #4]	; (800afb4 <__sfp_lock_release+0x8>)
 800afae:	f000 b8c0 	b.w	800b132 <__retarget_lock_release_recursive>
 800afb2:	bf00      	nop
 800afb4:	200003e9 	.word	0x200003e9

0800afb8 <__sinit_lock_acquire>:
 800afb8:	4801      	ldr	r0, [pc, #4]	; (800afc0 <__sinit_lock_acquire+0x8>)
 800afba:	f000 b8b9 	b.w	800b130 <__retarget_lock_acquire_recursive>
 800afbe:	bf00      	nop
 800afc0:	200003ea 	.word	0x200003ea

0800afc4 <__sinit_lock_release>:
 800afc4:	4801      	ldr	r0, [pc, #4]	; (800afcc <__sinit_lock_release+0x8>)
 800afc6:	f000 b8b4 	b.w	800b132 <__retarget_lock_release_recursive>
 800afca:	bf00      	nop
 800afcc:	200003ea 	.word	0x200003ea

0800afd0 <__sinit>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	4604      	mov	r4, r0
 800afd4:	f7ff fff0 	bl	800afb8 <__sinit_lock_acquire>
 800afd8:	69a3      	ldr	r3, [r4, #24]
 800afda:	b11b      	cbz	r3, 800afe4 <__sinit+0x14>
 800afdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afe0:	f7ff bff0 	b.w	800afc4 <__sinit_lock_release>
 800afe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afe8:	6523      	str	r3, [r4, #80]	; 0x50
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <__sinit+0x68>)
 800afec:	4a13      	ldr	r2, [pc, #76]	; (800b03c <__sinit+0x6c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aff2:	42a3      	cmp	r3, r4
 800aff4:	bf04      	itt	eq
 800aff6:	2301      	moveq	r3, #1
 800aff8:	61a3      	streq	r3, [r4, #24]
 800affa:	4620      	mov	r0, r4
 800affc:	f000 f820 	bl	800b040 <__sfp>
 800b000:	6060      	str	r0, [r4, #4]
 800b002:	4620      	mov	r0, r4
 800b004:	f000 f81c 	bl	800b040 <__sfp>
 800b008:	60a0      	str	r0, [r4, #8]
 800b00a:	4620      	mov	r0, r4
 800b00c:	f000 f818 	bl	800b040 <__sfp>
 800b010:	2200      	movs	r2, #0
 800b012:	60e0      	str	r0, [r4, #12]
 800b014:	2104      	movs	r1, #4
 800b016:	6860      	ldr	r0, [r4, #4]
 800b018:	f7ff ff82 	bl	800af20 <std>
 800b01c:	68a0      	ldr	r0, [r4, #8]
 800b01e:	2201      	movs	r2, #1
 800b020:	2109      	movs	r1, #9
 800b022:	f7ff ff7d 	bl	800af20 <std>
 800b026:	68e0      	ldr	r0, [r4, #12]
 800b028:	2202      	movs	r2, #2
 800b02a:	2112      	movs	r1, #18
 800b02c:	f7ff ff78 	bl	800af20 <std>
 800b030:	2301      	movs	r3, #1
 800b032:	61a3      	str	r3, [r4, #24]
 800b034:	e7d2      	b.n	800afdc <__sinit+0xc>
 800b036:	bf00      	nop
 800b038:	0800b838 	.word	0x0800b838
 800b03c:	0800af69 	.word	0x0800af69

0800b040 <__sfp>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	4607      	mov	r7, r0
 800b044:	f7ff ffac 	bl	800afa0 <__sfp_lock_acquire>
 800b048:	4b1e      	ldr	r3, [pc, #120]	; (800b0c4 <__sfp+0x84>)
 800b04a:	681e      	ldr	r6, [r3, #0]
 800b04c:	69b3      	ldr	r3, [r6, #24]
 800b04e:	b913      	cbnz	r3, 800b056 <__sfp+0x16>
 800b050:	4630      	mov	r0, r6
 800b052:	f7ff ffbd 	bl	800afd0 <__sinit>
 800b056:	3648      	adds	r6, #72	; 0x48
 800b058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	d503      	bpl.n	800b068 <__sfp+0x28>
 800b060:	6833      	ldr	r3, [r6, #0]
 800b062:	b30b      	cbz	r3, 800b0a8 <__sfp+0x68>
 800b064:	6836      	ldr	r6, [r6, #0]
 800b066:	e7f7      	b.n	800b058 <__sfp+0x18>
 800b068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b06c:	b9d5      	cbnz	r5, 800b0a4 <__sfp+0x64>
 800b06e:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <__sfp+0x88>)
 800b070:	60e3      	str	r3, [r4, #12]
 800b072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b076:	6665      	str	r5, [r4, #100]	; 0x64
 800b078:	f000 f859 	bl	800b12e <__retarget_lock_init_recursive>
 800b07c:	f7ff ff96 	bl	800afac <__sfp_lock_release>
 800b080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b088:	6025      	str	r5, [r4, #0]
 800b08a:	61a5      	str	r5, [r4, #24]
 800b08c:	2208      	movs	r2, #8
 800b08e:	4629      	mov	r1, r5
 800b090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b094:	f7fb fae4 	bl	8006660 <memset>
 800b098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b09c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a4:	3468      	adds	r4, #104	; 0x68
 800b0a6:	e7d9      	b.n	800b05c <__sfp+0x1c>
 800b0a8:	2104      	movs	r1, #4
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	f7ff ff62 	bl	800af74 <__sfmoreglue>
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	6030      	str	r0, [r6, #0]
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d1d5      	bne.n	800b064 <__sfp+0x24>
 800b0b8:	f7ff ff78 	bl	800afac <__sfp_lock_release>
 800b0bc:	230c      	movs	r3, #12
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	e7ee      	b.n	800b0a0 <__sfp+0x60>
 800b0c2:	bf00      	nop
 800b0c4:	0800b838 	.word	0x0800b838
 800b0c8:	ffff0001 	.word	0xffff0001

0800b0cc <fiprintf>:
 800b0cc:	b40e      	push	{r1, r2, r3}
 800b0ce:	b503      	push	{r0, r1, lr}
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	ab03      	add	r3, sp, #12
 800b0d4:	4805      	ldr	r0, [pc, #20]	; (800b0ec <fiprintf+0x20>)
 800b0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0da:	6800      	ldr	r0, [r0, #0]
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	f000 f8a7 	bl	800b230 <_vfiprintf_r>
 800b0e2:	b002      	add	sp, #8
 800b0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0e8:	b003      	add	sp, #12
 800b0ea:	4770      	bx	lr
 800b0ec:	2000000c 	.word	0x2000000c

0800b0f0 <_fwalk_reent>:
 800b0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	4688      	mov	r8, r1
 800b0f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0fc:	2700      	movs	r7, #0
 800b0fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b102:	f1b9 0901 	subs.w	r9, r9, #1
 800b106:	d505      	bpl.n	800b114 <_fwalk_reent+0x24>
 800b108:	6824      	ldr	r4, [r4, #0]
 800b10a:	2c00      	cmp	r4, #0
 800b10c:	d1f7      	bne.n	800b0fe <_fwalk_reent+0xe>
 800b10e:	4638      	mov	r0, r7
 800b110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b114:	89ab      	ldrh	r3, [r5, #12]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d907      	bls.n	800b12a <_fwalk_reent+0x3a>
 800b11a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b11e:	3301      	adds	r3, #1
 800b120:	d003      	beq.n	800b12a <_fwalk_reent+0x3a>
 800b122:	4629      	mov	r1, r5
 800b124:	4630      	mov	r0, r6
 800b126:	47c0      	blx	r8
 800b128:	4307      	orrs	r7, r0
 800b12a:	3568      	adds	r5, #104	; 0x68
 800b12c:	e7e9      	b.n	800b102 <_fwalk_reent+0x12>

0800b12e <__retarget_lock_init_recursive>:
 800b12e:	4770      	bx	lr

0800b130 <__retarget_lock_acquire_recursive>:
 800b130:	4770      	bx	lr

0800b132 <__retarget_lock_release_recursive>:
 800b132:	4770      	bx	lr

0800b134 <memmove>:
 800b134:	4288      	cmp	r0, r1
 800b136:	b510      	push	{r4, lr}
 800b138:	eb01 0402 	add.w	r4, r1, r2
 800b13c:	d902      	bls.n	800b144 <memmove+0x10>
 800b13e:	4284      	cmp	r4, r0
 800b140:	4623      	mov	r3, r4
 800b142:	d807      	bhi.n	800b154 <memmove+0x20>
 800b144:	1e43      	subs	r3, r0, #1
 800b146:	42a1      	cmp	r1, r4
 800b148:	d008      	beq.n	800b15c <memmove+0x28>
 800b14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b152:	e7f8      	b.n	800b146 <memmove+0x12>
 800b154:	4402      	add	r2, r0
 800b156:	4601      	mov	r1, r0
 800b158:	428a      	cmp	r2, r1
 800b15a:	d100      	bne.n	800b15e <memmove+0x2a>
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b166:	e7f7      	b.n	800b158 <memmove+0x24>

0800b168 <__malloc_lock>:
 800b168:	4801      	ldr	r0, [pc, #4]	; (800b170 <__malloc_lock+0x8>)
 800b16a:	f7ff bfe1 	b.w	800b130 <__retarget_lock_acquire_recursive>
 800b16e:	bf00      	nop
 800b170:	200003e8 	.word	0x200003e8

0800b174 <__malloc_unlock>:
 800b174:	4801      	ldr	r0, [pc, #4]	; (800b17c <__malloc_unlock+0x8>)
 800b176:	f7ff bfdc 	b.w	800b132 <__retarget_lock_release_recursive>
 800b17a:	bf00      	nop
 800b17c:	200003e8 	.word	0x200003e8

0800b180 <_realloc_r>:
 800b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b184:	4680      	mov	r8, r0
 800b186:	4614      	mov	r4, r2
 800b188:	460e      	mov	r6, r1
 800b18a:	b921      	cbnz	r1, 800b196 <_realloc_r+0x16>
 800b18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b190:	4611      	mov	r1, r2
 800b192:	f7fe bfbd 	b.w	800a110 <_malloc_r>
 800b196:	b92a      	cbnz	r2, 800b1a4 <_realloc_r+0x24>
 800b198:	f7fe ff4e 	bl	800a038 <_free_r>
 800b19c:	4625      	mov	r5, r4
 800b19e:	4628      	mov	r0, r5
 800b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a4:	f000 faa0 	bl	800b6e8 <_malloc_usable_size_r>
 800b1a8:	4284      	cmp	r4, r0
 800b1aa:	4607      	mov	r7, r0
 800b1ac:	d802      	bhi.n	800b1b4 <_realloc_r+0x34>
 800b1ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1b2:	d812      	bhi.n	800b1da <_realloc_r+0x5a>
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	4640      	mov	r0, r8
 800b1b8:	f7fe ffaa 	bl	800a110 <_malloc_r>
 800b1bc:	4605      	mov	r5, r0
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d0ed      	beq.n	800b19e <_realloc_r+0x1e>
 800b1c2:	42bc      	cmp	r4, r7
 800b1c4:	4622      	mov	r2, r4
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	bf28      	it	cs
 800b1ca:	463a      	movcs	r2, r7
 800b1cc:	f7fe fa4e 	bl	800966c <memcpy>
 800b1d0:	4631      	mov	r1, r6
 800b1d2:	4640      	mov	r0, r8
 800b1d4:	f7fe ff30 	bl	800a038 <_free_r>
 800b1d8:	e7e1      	b.n	800b19e <_realloc_r+0x1e>
 800b1da:	4635      	mov	r5, r6
 800b1dc:	e7df      	b.n	800b19e <_realloc_r+0x1e>

0800b1de <__sfputc_r>:
 800b1de:	6893      	ldr	r3, [r2, #8]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	b410      	push	{r4}
 800b1e6:	6093      	str	r3, [r2, #8]
 800b1e8:	da08      	bge.n	800b1fc <__sfputc_r+0x1e>
 800b1ea:	6994      	ldr	r4, [r2, #24]
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	db01      	blt.n	800b1f4 <__sfputc_r+0x16>
 800b1f0:	290a      	cmp	r1, #10
 800b1f2:	d103      	bne.n	800b1fc <__sfputc_r+0x1e>
 800b1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1f8:	f000 b94a 	b.w	800b490 <__swbuf_r>
 800b1fc:	6813      	ldr	r3, [r2, #0]
 800b1fe:	1c58      	adds	r0, r3, #1
 800b200:	6010      	str	r0, [r2, #0]
 800b202:	7019      	strb	r1, [r3, #0]
 800b204:	4608      	mov	r0, r1
 800b206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <__sfputs_r>:
 800b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20e:	4606      	mov	r6, r0
 800b210:	460f      	mov	r7, r1
 800b212:	4614      	mov	r4, r2
 800b214:	18d5      	adds	r5, r2, r3
 800b216:	42ac      	cmp	r4, r5
 800b218:	d101      	bne.n	800b21e <__sfputs_r+0x12>
 800b21a:	2000      	movs	r0, #0
 800b21c:	e007      	b.n	800b22e <__sfputs_r+0x22>
 800b21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b222:	463a      	mov	r2, r7
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff ffda 	bl	800b1de <__sfputc_r>
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	d1f3      	bne.n	800b216 <__sfputs_r+0xa>
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b230 <_vfiprintf_r>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	460d      	mov	r5, r1
 800b236:	b09d      	sub	sp, #116	; 0x74
 800b238:	4614      	mov	r4, r2
 800b23a:	4698      	mov	r8, r3
 800b23c:	4606      	mov	r6, r0
 800b23e:	b118      	cbz	r0, 800b248 <_vfiprintf_r+0x18>
 800b240:	6983      	ldr	r3, [r0, #24]
 800b242:	b90b      	cbnz	r3, 800b248 <_vfiprintf_r+0x18>
 800b244:	f7ff fec4 	bl	800afd0 <__sinit>
 800b248:	4b89      	ldr	r3, [pc, #548]	; (800b470 <_vfiprintf_r+0x240>)
 800b24a:	429d      	cmp	r5, r3
 800b24c:	d11b      	bne.n	800b286 <_vfiprintf_r+0x56>
 800b24e:	6875      	ldr	r5, [r6, #4]
 800b250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b252:	07d9      	lsls	r1, r3, #31
 800b254:	d405      	bmi.n	800b262 <_vfiprintf_r+0x32>
 800b256:	89ab      	ldrh	r3, [r5, #12]
 800b258:	059a      	lsls	r2, r3, #22
 800b25a:	d402      	bmi.n	800b262 <_vfiprintf_r+0x32>
 800b25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b25e:	f7ff ff67 	bl	800b130 <__retarget_lock_acquire_recursive>
 800b262:	89ab      	ldrh	r3, [r5, #12]
 800b264:	071b      	lsls	r3, r3, #28
 800b266:	d501      	bpl.n	800b26c <_vfiprintf_r+0x3c>
 800b268:	692b      	ldr	r3, [r5, #16]
 800b26a:	b9eb      	cbnz	r3, 800b2a8 <_vfiprintf_r+0x78>
 800b26c:	4629      	mov	r1, r5
 800b26e:	4630      	mov	r0, r6
 800b270:	f000 f960 	bl	800b534 <__swsetup_r>
 800b274:	b1c0      	cbz	r0, 800b2a8 <_vfiprintf_r+0x78>
 800b276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b278:	07dc      	lsls	r4, r3, #31
 800b27a:	d50e      	bpl.n	800b29a <_vfiprintf_r+0x6a>
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	b01d      	add	sp, #116	; 0x74
 800b282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b286:	4b7b      	ldr	r3, [pc, #492]	; (800b474 <_vfiprintf_r+0x244>)
 800b288:	429d      	cmp	r5, r3
 800b28a:	d101      	bne.n	800b290 <_vfiprintf_r+0x60>
 800b28c:	68b5      	ldr	r5, [r6, #8]
 800b28e:	e7df      	b.n	800b250 <_vfiprintf_r+0x20>
 800b290:	4b79      	ldr	r3, [pc, #484]	; (800b478 <_vfiprintf_r+0x248>)
 800b292:	429d      	cmp	r5, r3
 800b294:	bf08      	it	eq
 800b296:	68f5      	ldreq	r5, [r6, #12]
 800b298:	e7da      	b.n	800b250 <_vfiprintf_r+0x20>
 800b29a:	89ab      	ldrh	r3, [r5, #12]
 800b29c:	0598      	lsls	r0, r3, #22
 800b29e:	d4ed      	bmi.n	800b27c <_vfiprintf_r+0x4c>
 800b2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2a2:	f7ff ff46 	bl	800b132 <__retarget_lock_release_recursive>
 800b2a6:	e7e9      	b.n	800b27c <_vfiprintf_r+0x4c>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ac:	2320      	movs	r3, #32
 800b2ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2b6:	2330      	movs	r3, #48	; 0x30
 800b2b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b47c <_vfiprintf_r+0x24c>
 800b2bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2c0:	f04f 0901 	mov.w	r9, #1
 800b2c4:	4623      	mov	r3, r4
 800b2c6:	469a      	mov	sl, r3
 800b2c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2cc:	b10a      	cbz	r2, 800b2d2 <_vfiprintf_r+0xa2>
 800b2ce:	2a25      	cmp	r2, #37	; 0x25
 800b2d0:	d1f9      	bne.n	800b2c6 <_vfiprintf_r+0x96>
 800b2d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b2d6:	d00b      	beq.n	800b2f0 <_vfiprintf_r+0xc0>
 800b2d8:	465b      	mov	r3, fp
 800b2da:	4622      	mov	r2, r4
 800b2dc:	4629      	mov	r1, r5
 800b2de:	4630      	mov	r0, r6
 800b2e0:	f7ff ff94 	bl	800b20c <__sfputs_r>
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	f000 80aa 	beq.w	800b43e <_vfiprintf_r+0x20e>
 800b2ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ec:	445a      	add	r2, fp
 800b2ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f000 80a2 	beq.w	800b43e <_vfiprintf_r+0x20e>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b304:	f10a 0a01 	add.w	sl, sl, #1
 800b308:	9304      	str	r3, [sp, #16]
 800b30a:	9307      	str	r3, [sp, #28]
 800b30c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b310:	931a      	str	r3, [sp, #104]	; 0x68
 800b312:	4654      	mov	r4, sl
 800b314:	2205      	movs	r2, #5
 800b316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b31a:	4858      	ldr	r0, [pc, #352]	; (800b47c <_vfiprintf_r+0x24c>)
 800b31c:	f7f4 ff80 	bl	8000220 <memchr>
 800b320:	9a04      	ldr	r2, [sp, #16]
 800b322:	b9d8      	cbnz	r0, 800b35c <_vfiprintf_r+0x12c>
 800b324:	06d1      	lsls	r1, r2, #27
 800b326:	bf44      	itt	mi
 800b328:	2320      	movmi	r3, #32
 800b32a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b32e:	0713      	lsls	r3, r2, #28
 800b330:	bf44      	itt	mi
 800b332:	232b      	movmi	r3, #43	; 0x2b
 800b334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b338:	f89a 3000 	ldrb.w	r3, [sl]
 800b33c:	2b2a      	cmp	r3, #42	; 0x2a
 800b33e:	d015      	beq.n	800b36c <_vfiprintf_r+0x13c>
 800b340:	9a07      	ldr	r2, [sp, #28]
 800b342:	4654      	mov	r4, sl
 800b344:	2000      	movs	r0, #0
 800b346:	f04f 0c0a 	mov.w	ip, #10
 800b34a:	4621      	mov	r1, r4
 800b34c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b350:	3b30      	subs	r3, #48	; 0x30
 800b352:	2b09      	cmp	r3, #9
 800b354:	d94e      	bls.n	800b3f4 <_vfiprintf_r+0x1c4>
 800b356:	b1b0      	cbz	r0, 800b386 <_vfiprintf_r+0x156>
 800b358:	9207      	str	r2, [sp, #28]
 800b35a:	e014      	b.n	800b386 <_vfiprintf_r+0x156>
 800b35c:	eba0 0308 	sub.w	r3, r0, r8
 800b360:	fa09 f303 	lsl.w	r3, r9, r3
 800b364:	4313      	orrs	r3, r2
 800b366:	9304      	str	r3, [sp, #16]
 800b368:	46a2      	mov	sl, r4
 800b36a:	e7d2      	b.n	800b312 <_vfiprintf_r+0xe2>
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	1d19      	adds	r1, r3, #4
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	9103      	str	r1, [sp, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	bfbb      	ittet	lt
 800b378:	425b      	neglt	r3, r3
 800b37a:	f042 0202 	orrlt.w	r2, r2, #2
 800b37e:	9307      	strge	r3, [sp, #28]
 800b380:	9307      	strlt	r3, [sp, #28]
 800b382:	bfb8      	it	lt
 800b384:	9204      	strlt	r2, [sp, #16]
 800b386:	7823      	ldrb	r3, [r4, #0]
 800b388:	2b2e      	cmp	r3, #46	; 0x2e
 800b38a:	d10c      	bne.n	800b3a6 <_vfiprintf_r+0x176>
 800b38c:	7863      	ldrb	r3, [r4, #1]
 800b38e:	2b2a      	cmp	r3, #42	; 0x2a
 800b390:	d135      	bne.n	800b3fe <_vfiprintf_r+0x1ce>
 800b392:	9b03      	ldr	r3, [sp, #12]
 800b394:	1d1a      	adds	r2, r3, #4
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	9203      	str	r2, [sp, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	bfb8      	it	lt
 800b39e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3a2:	3402      	adds	r4, #2
 800b3a4:	9305      	str	r3, [sp, #20]
 800b3a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b48c <_vfiprintf_r+0x25c>
 800b3aa:	7821      	ldrb	r1, [r4, #0]
 800b3ac:	2203      	movs	r2, #3
 800b3ae:	4650      	mov	r0, sl
 800b3b0:	f7f4 ff36 	bl	8000220 <memchr>
 800b3b4:	b140      	cbz	r0, 800b3c8 <_vfiprintf_r+0x198>
 800b3b6:	2340      	movs	r3, #64	; 0x40
 800b3b8:	eba0 000a 	sub.w	r0, r0, sl
 800b3bc:	fa03 f000 	lsl.w	r0, r3, r0
 800b3c0:	9b04      	ldr	r3, [sp, #16]
 800b3c2:	4303      	orrs	r3, r0
 800b3c4:	3401      	adds	r4, #1
 800b3c6:	9304      	str	r3, [sp, #16]
 800b3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3cc:	482c      	ldr	r0, [pc, #176]	; (800b480 <_vfiprintf_r+0x250>)
 800b3ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3d2:	2206      	movs	r2, #6
 800b3d4:	f7f4 ff24 	bl	8000220 <memchr>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d03f      	beq.n	800b45c <_vfiprintf_r+0x22c>
 800b3dc:	4b29      	ldr	r3, [pc, #164]	; (800b484 <_vfiprintf_r+0x254>)
 800b3de:	bb1b      	cbnz	r3, 800b428 <_vfiprintf_r+0x1f8>
 800b3e0:	9b03      	ldr	r3, [sp, #12]
 800b3e2:	3307      	adds	r3, #7
 800b3e4:	f023 0307 	bic.w	r3, r3, #7
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	9303      	str	r3, [sp, #12]
 800b3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ee:	443b      	add	r3, r7
 800b3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f2:	e767      	b.n	800b2c4 <_vfiprintf_r+0x94>
 800b3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	2001      	movs	r0, #1
 800b3fc:	e7a5      	b.n	800b34a <_vfiprintf_r+0x11a>
 800b3fe:	2300      	movs	r3, #0
 800b400:	3401      	adds	r4, #1
 800b402:	9305      	str	r3, [sp, #20]
 800b404:	4619      	mov	r1, r3
 800b406:	f04f 0c0a 	mov.w	ip, #10
 800b40a:	4620      	mov	r0, r4
 800b40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b410:	3a30      	subs	r2, #48	; 0x30
 800b412:	2a09      	cmp	r2, #9
 800b414:	d903      	bls.n	800b41e <_vfiprintf_r+0x1ee>
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0c5      	beq.n	800b3a6 <_vfiprintf_r+0x176>
 800b41a:	9105      	str	r1, [sp, #20]
 800b41c:	e7c3      	b.n	800b3a6 <_vfiprintf_r+0x176>
 800b41e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b422:	4604      	mov	r4, r0
 800b424:	2301      	movs	r3, #1
 800b426:	e7f0      	b.n	800b40a <_vfiprintf_r+0x1da>
 800b428:	ab03      	add	r3, sp, #12
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	462a      	mov	r2, r5
 800b42e:	4b16      	ldr	r3, [pc, #88]	; (800b488 <_vfiprintf_r+0x258>)
 800b430:	a904      	add	r1, sp, #16
 800b432:	4630      	mov	r0, r6
 800b434:	f7fb f9bc 	bl	80067b0 <_printf_float>
 800b438:	4607      	mov	r7, r0
 800b43a:	1c78      	adds	r0, r7, #1
 800b43c:	d1d6      	bne.n	800b3ec <_vfiprintf_r+0x1bc>
 800b43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b440:	07d9      	lsls	r1, r3, #31
 800b442:	d405      	bmi.n	800b450 <_vfiprintf_r+0x220>
 800b444:	89ab      	ldrh	r3, [r5, #12]
 800b446:	059a      	lsls	r2, r3, #22
 800b448:	d402      	bmi.n	800b450 <_vfiprintf_r+0x220>
 800b44a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b44c:	f7ff fe71 	bl	800b132 <__retarget_lock_release_recursive>
 800b450:	89ab      	ldrh	r3, [r5, #12]
 800b452:	065b      	lsls	r3, r3, #25
 800b454:	f53f af12 	bmi.w	800b27c <_vfiprintf_r+0x4c>
 800b458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b45a:	e711      	b.n	800b280 <_vfiprintf_r+0x50>
 800b45c:	ab03      	add	r3, sp, #12
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	462a      	mov	r2, r5
 800b462:	4b09      	ldr	r3, [pc, #36]	; (800b488 <_vfiprintf_r+0x258>)
 800b464:	a904      	add	r1, sp, #16
 800b466:	4630      	mov	r0, r6
 800b468:	f7fb fc46 	bl	8006cf8 <_printf_i>
 800b46c:	e7e4      	b.n	800b438 <_vfiprintf_r+0x208>
 800b46e:	bf00      	nop
 800b470:	0800bcb4 	.word	0x0800bcb4
 800b474:	0800bcd4 	.word	0x0800bcd4
 800b478:	0800bc94 	.word	0x0800bc94
 800b47c:	0800bc2c 	.word	0x0800bc2c
 800b480:	0800bc36 	.word	0x0800bc36
 800b484:	080067b1 	.word	0x080067b1
 800b488:	0800b20d 	.word	0x0800b20d
 800b48c:	0800bc32 	.word	0x0800bc32

0800b490 <__swbuf_r>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	460e      	mov	r6, r1
 800b494:	4614      	mov	r4, r2
 800b496:	4605      	mov	r5, r0
 800b498:	b118      	cbz	r0, 800b4a2 <__swbuf_r+0x12>
 800b49a:	6983      	ldr	r3, [r0, #24]
 800b49c:	b90b      	cbnz	r3, 800b4a2 <__swbuf_r+0x12>
 800b49e:	f7ff fd97 	bl	800afd0 <__sinit>
 800b4a2:	4b21      	ldr	r3, [pc, #132]	; (800b528 <__swbuf_r+0x98>)
 800b4a4:	429c      	cmp	r4, r3
 800b4a6:	d12b      	bne.n	800b500 <__swbuf_r+0x70>
 800b4a8:	686c      	ldr	r4, [r5, #4]
 800b4aa:	69a3      	ldr	r3, [r4, #24]
 800b4ac:	60a3      	str	r3, [r4, #8]
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	071a      	lsls	r2, r3, #28
 800b4b2:	d52f      	bpl.n	800b514 <__swbuf_r+0x84>
 800b4b4:	6923      	ldr	r3, [r4, #16]
 800b4b6:	b36b      	cbz	r3, 800b514 <__swbuf_r+0x84>
 800b4b8:	6923      	ldr	r3, [r4, #16]
 800b4ba:	6820      	ldr	r0, [r4, #0]
 800b4bc:	1ac0      	subs	r0, r0, r3
 800b4be:	6963      	ldr	r3, [r4, #20]
 800b4c0:	b2f6      	uxtb	r6, r6
 800b4c2:	4283      	cmp	r3, r0
 800b4c4:	4637      	mov	r7, r6
 800b4c6:	dc04      	bgt.n	800b4d2 <__swbuf_r+0x42>
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	f7ff fcec 	bl	800aea8 <_fflush_r>
 800b4d0:	bb30      	cbnz	r0, 800b520 <__swbuf_r+0x90>
 800b4d2:	68a3      	ldr	r3, [r4, #8]
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	60a3      	str	r3, [r4, #8]
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	6022      	str	r2, [r4, #0]
 800b4de:	701e      	strb	r6, [r3, #0]
 800b4e0:	6963      	ldr	r3, [r4, #20]
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	4283      	cmp	r3, r0
 800b4e6:	d004      	beq.n	800b4f2 <__swbuf_r+0x62>
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	07db      	lsls	r3, r3, #31
 800b4ec:	d506      	bpl.n	800b4fc <__swbuf_r+0x6c>
 800b4ee:	2e0a      	cmp	r6, #10
 800b4f0:	d104      	bne.n	800b4fc <__swbuf_r+0x6c>
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f7ff fcd7 	bl	800aea8 <_fflush_r>
 800b4fa:	b988      	cbnz	r0, 800b520 <__swbuf_r+0x90>
 800b4fc:	4638      	mov	r0, r7
 800b4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b500:	4b0a      	ldr	r3, [pc, #40]	; (800b52c <__swbuf_r+0x9c>)
 800b502:	429c      	cmp	r4, r3
 800b504:	d101      	bne.n	800b50a <__swbuf_r+0x7a>
 800b506:	68ac      	ldr	r4, [r5, #8]
 800b508:	e7cf      	b.n	800b4aa <__swbuf_r+0x1a>
 800b50a:	4b09      	ldr	r3, [pc, #36]	; (800b530 <__swbuf_r+0xa0>)
 800b50c:	429c      	cmp	r4, r3
 800b50e:	bf08      	it	eq
 800b510:	68ec      	ldreq	r4, [r5, #12]
 800b512:	e7ca      	b.n	800b4aa <__swbuf_r+0x1a>
 800b514:	4621      	mov	r1, r4
 800b516:	4628      	mov	r0, r5
 800b518:	f000 f80c 	bl	800b534 <__swsetup_r>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d0cb      	beq.n	800b4b8 <__swbuf_r+0x28>
 800b520:	f04f 37ff 	mov.w	r7, #4294967295
 800b524:	e7ea      	b.n	800b4fc <__swbuf_r+0x6c>
 800b526:	bf00      	nop
 800b528:	0800bcb4 	.word	0x0800bcb4
 800b52c:	0800bcd4 	.word	0x0800bcd4
 800b530:	0800bc94 	.word	0x0800bc94

0800b534 <__swsetup_r>:
 800b534:	4b32      	ldr	r3, [pc, #200]	; (800b600 <__swsetup_r+0xcc>)
 800b536:	b570      	push	{r4, r5, r6, lr}
 800b538:	681d      	ldr	r5, [r3, #0]
 800b53a:	4606      	mov	r6, r0
 800b53c:	460c      	mov	r4, r1
 800b53e:	b125      	cbz	r5, 800b54a <__swsetup_r+0x16>
 800b540:	69ab      	ldr	r3, [r5, #24]
 800b542:	b913      	cbnz	r3, 800b54a <__swsetup_r+0x16>
 800b544:	4628      	mov	r0, r5
 800b546:	f7ff fd43 	bl	800afd0 <__sinit>
 800b54a:	4b2e      	ldr	r3, [pc, #184]	; (800b604 <__swsetup_r+0xd0>)
 800b54c:	429c      	cmp	r4, r3
 800b54e:	d10f      	bne.n	800b570 <__swsetup_r+0x3c>
 800b550:	686c      	ldr	r4, [r5, #4]
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b558:	0719      	lsls	r1, r3, #28
 800b55a:	d42c      	bmi.n	800b5b6 <__swsetup_r+0x82>
 800b55c:	06dd      	lsls	r5, r3, #27
 800b55e:	d411      	bmi.n	800b584 <__swsetup_r+0x50>
 800b560:	2309      	movs	r3, #9
 800b562:	6033      	str	r3, [r6, #0]
 800b564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b568:	81a3      	strh	r3, [r4, #12]
 800b56a:	f04f 30ff 	mov.w	r0, #4294967295
 800b56e:	e03e      	b.n	800b5ee <__swsetup_r+0xba>
 800b570:	4b25      	ldr	r3, [pc, #148]	; (800b608 <__swsetup_r+0xd4>)
 800b572:	429c      	cmp	r4, r3
 800b574:	d101      	bne.n	800b57a <__swsetup_r+0x46>
 800b576:	68ac      	ldr	r4, [r5, #8]
 800b578:	e7eb      	b.n	800b552 <__swsetup_r+0x1e>
 800b57a:	4b24      	ldr	r3, [pc, #144]	; (800b60c <__swsetup_r+0xd8>)
 800b57c:	429c      	cmp	r4, r3
 800b57e:	bf08      	it	eq
 800b580:	68ec      	ldreq	r4, [r5, #12]
 800b582:	e7e6      	b.n	800b552 <__swsetup_r+0x1e>
 800b584:	0758      	lsls	r0, r3, #29
 800b586:	d512      	bpl.n	800b5ae <__swsetup_r+0x7a>
 800b588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b58a:	b141      	cbz	r1, 800b59e <__swsetup_r+0x6a>
 800b58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b590:	4299      	cmp	r1, r3
 800b592:	d002      	beq.n	800b59a <__swsetup_r+0x66>
 800b594:	4630      	mov	r0, r6
 800b596:	f7fe fd4f 	bl	800a038 <_free_r>
 800b59a:	2300      	movs	r3, #0
 800b59c:	6363      	str	r3, [r4, #52]	; 0x34
 800b59e:	89a3      	ldrh	r3, [r4, #12]
 800b5a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5a4:	81a3      	strh	r3, [r4, #12]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	6063      	str	r3, [r4, #4]
 800b5aa:	6923      	ldr	r3, [r4, #16]
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	f043 0308 	orr.w	r3, r3, #8
 800b5b4:	81a3      	strh	r3, [r4, #12]
 800b5b6:	6923      	ldr	r3, [r4, #16]
 800b5b8:	b94b      	cbnz	r3, 800b5ce <__swsetup_r+0x9a>
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5c4:	d003      	beq.n	800b5ce <__swsetup_r+0x9a>
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f000 f84d 	bl	800b668 <__smakebuf_r>
 800b5ce:	89a0      	ldrh	r0, [r4, #12]
 800b5d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5d4:	f010 0301 	ands.w	r3, r0, #1
 800b5d8:	d00a      	beq.n	800b5f0 <__swsetup_r+0xbc>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60a3      	str	r3, [r4, #8]
 800b5de:	6963      	ldr	r3, [r4, #20]
 800b5e0:	425b      	negs	r3, r3
 800b5e2:	61a3      	str	r3, [r4, #24]
 800b5e4:	6923      	ldr	r3, [r4, #16]
 800b5e6:	b943      	cbnz	r3, 800b5fa <__swsetup_r+0xc6>
 800b5e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5ec:	d1ba      	bne.n	800b564 <__swsetup_r+0x30>
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	0781      	lsls	r1, r0, #30
 800b5f2:	bf58      	it	pl
 800b5f4:	6963      	ldrpl	r3, [r4, #20]
 800b5f6:	60a3      	str	r3, [r4, #8]
 800b5f8:	e7f4      	b.n	800b5e4 <__swsetup_r+0xb0>
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	e7f7      	b.n	800b5ee <__swsetup_r+0xba>
 800b5fe:	bf00      	nop
 800b600:	2000000c 	.word	0x2000000c
 800b604:	0800bcb4 	.word	0x0800bcb4
 800b608:	0800bcd4 	.word	0x0800bcd4
 800b60c:	0800bc94 	.word	0x0800bc94

0800b610 <abort>:
 800b610:	b508      	push	{r3, lr}
 800b612:	2006      	movs	r0, #6
 800b614:	f000 f898 	bl	800b748 <raise>
 800b618:	2001      	movs	r0, #1
 800b61a:	f7f6 fbb1 	bl	8001d80 <_exit>

0800b61e <__swhatbuf_r>:
 800b61e:	b570      	push	{r4, r5, r6, lr}
 800b620:	460e      	mov	r6, r1
 800b622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b626:	2900      	cmp	r1, #0
 800b628:	b096      	sub	sp, #88	; 0x58
 800b62a:	4614      	mov	r4, r2
 800b62c:	461d      	mov	r5, r3
 800b62e:	da08      	bge.n	800b642 <__swhatbuf_r+0x24>
 800b630:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	602a      	str	r2, [r5, #0]
 800b638:	061a      	lsls	r2, r3, #24
 800b63a:	d410      	bmi.n	800b65e <__swhatbuf_r+0x40>
 800b63c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b640:	e00e      	b.n	800b660 <__swhatbuf_r+0x42>
 800b642:	466a      	mov	r2, sp
 800b644:	f000 f89c 	bl	800b780 <_fstat_r>
 800b648:	2800      	cmp	r0, #0
 800b64a:	dbf1      	blt.n	800b630 <__swhatbuf_r+0x12>
 800b64c:	9a01      	ldr	r2, [sp, #4]
 800b64e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b652:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b656:	425a      	negs	r2, r3
 800b658:	415a      	adcs	r2, r3
 800b65a:	602a      	str	r2, [r5, #0]
 800b65c:	e7ee      	b.n	800b63c <__swhatbuf_r+0x1e>
 800b65e:	2340      	movs	r3, #64	; 0x40
 800b660:	2000      	movs	r0, #0
 800b662:	6023      	str	r3, [r4, #0]
 800b664:	b016      	add	sp, #88	; 0x58
 800b666:	bd70      	pop	{r4, r5, r6, pc}

0800b668 <__smakebuf_r>:
 800b668:	898b      	ldrh	r3, [r1, #12]
 800b66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b66c:	079d      	lsls	r5, r3, #30
 800b66e:	4606      	mov	r6, r0
 800b670:	460c      	mov	r4, r1
 800b672:	d507      	bpl.n	800b684 <__smakebuf_r+0x1c>
 800b674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	6123      	str	r3, [r4, #16]
 800b67c:	2301      	movs	r3, #1
 800b67e:	6163      	str	r3, [r4, #20]
 800b680:	b002      	add	sp, #8
 800b682:	bd70      	pop	{r4, r5, r6, pc}
 800b684:	ab01      	add	r3, sp, #4
 800b686:	466a      	mov	r2, sp
 800b688:	f7ff ffc9 	bl	800b61e <__swhatbuf_r>
 800b68c:	9900      	ldr	r1, [sp, #0]
 800b68e:	4605      	mov	r5, r0
 800b690:	4630      	mov	r0, r6
 800b692:	f7fe fd3d 	bl	800a110 <_malloc_r>
 800b696:	b948      	cbnz	r0, 800b6ac <__smakebuf_r+0x44>
 800b698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b69c:	059a      	lsls	r2, r3, #22
 800b69e:	d4ef      	bmi.n	800b680 <__smakebuf_r+0x18>
 800b6a0:	f023 0303 	bic.w	r3, r3, #3
 800b6a4:	f043 0302 	orr.w	r3, r3, #2
 800b6a8:	81a3      	strh	r3, [r4, #12]
 800b6aa:	e7e3      	b.n	800b674 <__smakebuf_r+0xc>
 800b6ac:	4b0d      	ldr	r3, [pc, #52]	; (800b6e4 <__smakebuf_r+0x7c>)
 800b6ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	6020      	str	r0, [r4, #0]
 800b6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6b8:	81a3      	strh	r3, [r4, #12]
 800b6ba:	9b00      	ldr	r3, [sp, #0]
 800b6bc:	6163      	str	r3, [r4, #20]
 800b6be:	9b01      	ldr	r3, [sp, #4]
 800b6c0:	6120      	str	r0, [r4, #16]
 800b6c2:	b15b      	cbz	r3, 800b6dc <__smakebuf_r+0x74>
 800b6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f000 f86b 	bl	800b7a4 <_isatty_r>
 800b6ce:	b128      	cbz	r0, 800b6dc <__smakebuf_r+0x74>
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	f023 0303 	bic.w	r3, r3, #3
 800b6d6:	f043 0301 	orr.w	r3, r3, #1
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	89a0      	ldrh	r0, [r4, #12]
 800b6de:	4305      	orrs	r5, r0
 800b6e0:	81a5      	strh	r5, [r4, #12]
 800b6e2:	e7cd      	b.n	800b680 <__smakebuf_r+0x18>
 800b6e4:	0800af69 	.word	0x0800af69

0800b6e8 <_malloc_usable_size_r>:
 800b6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6ec:	1f18      	subs	r0, r3, #4
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	bfbc      	itt	lt
 800b6f2:	580b      	ldrlt	r3, [r1, r0]
 800b6f4:	18c0      	addlt	r0, r0, r3
 800b6f6:	4770      	bx	lr

0800b6f8 <_raise_r>:
 800b6f8:	291f      	cmp	r1, #31
 800b6fa:	b538      	push	{r3, r4, r5, lr}
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	460d      	mov	r5, r1
 800b700:	d904      	bls.n	800b70c <_raise_r+0x14>
 800b702:	2316      	movs	r3, #22
 800b704:	6003      	str	r3, [r0, #0]
 800b706:	f04f 30ff 	mov.w	r0, #4294967295
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b70e:	b112      	cbz	r2, 800b716 <_raise_r+0x1e>
 800b710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b714:	b94b      	cbnz	r3, 800b72a <_raise_r+0x32>
 800b716:	4620      	mov	r0, r4
 800b718:	f000 f830 	bl	800b77c <_getpid_r>
 800b71c:	462a      	mov	r2, r5
 800b71e:	4601      	mov	r1, r0
 800b720:	4620      	mov	r0, r4
 800b722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b726:	f000 b817 	b.w	800b758 <_kill_r>
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d00a      	beq.n	800b744 <_raise_r+0x4c>
 800b72e:	1c59      	adds	r1, r3, #1
 800b730:	d103      	bne.n	800b73a <_raise_r+0x42>
 800b732:	2316      	movs	r3, #22
 800b734:	6003      	str	r3, [r0, #0]
 800b736:	2001      	movs	r0, #1
 800b738:	e7e7      	b.n	800b70a <_raise_r+0x12>
 800b73a:	2400      	movs	r4, #0
 800b73c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b740:	4628      	mov	r0, r5
 800b742:	4798      	blx	r3
 800b744:	2000      	movs	r0, #0
 800b746:	e7e0      	b.n	800b70a <_raise_r+0x12>

0800b748 <raise>:
 800b748:	4b02      	ldr	r3, [pc, #8]	; (800b754 <raise+0xc>)
 800b74a:	4601      	mov	r1, r0
 800b74c:	6818      	ldr	r0, [r3, #0]
 800b74e:	f7ff bfd3 	b.w	800b6f8 <_raise_r>
 800b752:	bf00      	nop
 800b754:	2000000c 	.word	0x2000000c

0800b758 <_kill_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	4d07      	ldr	r5, [pc, #28]	; (800b778 <_kill_r+0x20>)
 800b75c:	2300      	movs	r3, #0
 800b75e:	4604      	mov	r4, r0
 800b760:	4608      	mov	r0, r1
 800b762:	4611      	mov	r1, r2
 800b764:	602b      	str	r3, [r5, #0]
 800b766:	f7f6 fafb 	bl	8001d60 <_kill>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d102      	bne.n	800b774 <_kill_r+0x1c>
 800b76e:	682b      	ldr	r3, [r5, #0]
 800b770:	b103      	cbz	r3, 800b774 <_kill_r+0x1c>
 800b772:	6023      	str	r3, [r4, #0]
 800b774:	bd38      	pop	{r3, r4, r5, pc}
 800b776:	bf00      	nop
 800b778:	200003e4 	.word	0x200003e4

0800b77c <_getpid_r>:
 800b77c:	f7f6 bae8 	b.w	8001d50 <_getpid>

0800b780 <_fstat_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4d07      	ldr	r5, [pc, #28]	; (800b7a0 <_fstat_r+0x20>)
 800b784:	2300      	movs	r3, #0
 800b786:	4604      	mov	r4, r0
 800b788:	4608      	mov	r0, r1
 800b78a:	4611      	mov	r1, r2
 800b78c:	602b      	str	r3, [r5, #0]
 800b78e:	f7f6 fb46 	bl	8001e1e <_fstat>
 800b792:	1c43      	adds	r3, r0, #1
 800b794:	d102      	bne.n	800b79c <_fstat_r+0x1c>
 800b796:	682b      	ldr	r3, [r5, #0]
 800b798:	b103      	cbz	r3, 800b79c <_fstat_r+0x1c>
 800b79a:	6023      	str	r3, [r4, #0]
 800b79c:	bd38      	pop	{r3, r4, r5, pc}
 800b79e:	bf00      	nop
 800b7a0:	200003e4 	.word	0x200003e4

0800b7a4 <_isatty_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	4d06      	ldr	r5, [pc, #24]	; (800b7c0 <_isatty_r+0x1c>)
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	4608      	mov	r0, r1
 800b7ae:	602b      	str	r3, [r5, #0]
 800b7b0:	f7f6 fb45 	bl	8001e3e <_isatty>
 800b7b4:	1c43      	adds	r3, r0, #1
 800b7b6:	d102      	bne.n	800b7be <_isatty_r+0x1a>
 800b7b8:	682b      	ldr	r3, [r5, #0]
 800b7ba:	b103      	cbz	r3, 800b7be <_isatty_r+0x1a>
 800b7bc:	6023      	str	r3, [r4, #0]
 800b7be:	bd38      	pop	{r3, r4, r5, pc}
 800b7c0:	200003e4 	.word	0x200003e4

0800b7c4 <_init>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	bf00      	nop
 800b7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ca:	bc08      	pop	{r3}
 800b7cc:	469e      	mov	lr, r3
 800b7ce:	4770      	bx	lr

0800b7d0 <_fini>:
 800b7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d2:	bf00      	nop
 800b7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7d6:	bc08      	pop	{r3}
 800b7d8:	469e      	mov	lr, r3
 800b7da:	4770      	bx	lr
